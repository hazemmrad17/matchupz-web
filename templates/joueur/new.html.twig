{% extends 'base.html.twig' %}
{% block searchbar %}
    {% include 'searchbar.html.twig' %}
{% endblock %}
{% block content %}
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <h4 class="fw-bold py-3 mb-4">
                <span class="text-muted fw-light">Joueurs /</span> Nouveau Joueur
            </h4>

            <div class="col-xl">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ajouter un Nouveau Joueur</h5>
                        <small class="text-muted float-end">Remplir les détails</small>
                    </div>
                    <div class="card-body">
                        <!-- Toast container (positioned at top-right) -->
                        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;" id="toast-container"></div>

                        {{ form_start(form, {'attr': {'enctype': 'multipart/form-data', 'id': 'playerForm', 'novalidate': 'novalidate'}}) }}
                            <div class="mb-3">
                                <label class="form-label" for="joueur_nom">Nom</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-user"></i></span>
                                    {{ form_widget(form.nom, {'attr': {'class': 'form-control', 'placeholder': 'Nom du joueur'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_prenom">Prénom</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-user"></i></span>
                                    {{ form_widget(form.prenom, {'attr': {'class': 'form-control', 'placeholder': 'Prénom du joueur'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_dateNaissance">Date de Naissance</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                                    {{ form_widget(form.dateNaissance, {'attr': {'class': 'form-control'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_sport">Sport</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-run"></i></span>
                                    {{ form_widget(form.sport, {'attr': {'class': 'form-control'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_poste">Poste</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-target-lock"></i></span>
                                    {{ form_widget(form.poste, {'attr': {'class': 'form-control'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_taille">Taille (m)</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-ruler"></i></span>
                                    {{ form_widget(form.taille, {'attr': {'class': 'form-control', 'placeholder': 'ex: 1.85'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_poids">Poids (kg)</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-scale"></i></span>
                                    {{ form_widget(form.poids, {'attr': {'class': 'form-control', 'placeholder': 'ex: 75'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_email">Email</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-envelope"></i></span>
                                    {{ form_widget(form.email, {'attr': {'class': 'form-control', 'placeholder': 'email@exemple.com'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_telephone">Téléphone</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-phone"></i></span>
                                    {{ form_widget(form.telephone, {'attr': {'class': 'form-control phone-mask', 'placeholder': 'Numéro de téléphone'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_statut">Statut</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-id-card"></i></span>
                                    {{ form_widget(form.statut, {'attr': {'class': 'form-control'}}) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="joueur_profilePicture">Photo de Profil</label>
                                {{ form_widget(form.profilePicture, {'attr': {'class': 'form-control'}}) }}
                            </div>
                            <button type="submit" class="btn btn-primary">Créer</button>
                            <a href="{{ path('joueur_main') }}" class="btn btn-secondary">Annuler</a>
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('playerForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const toastContainer = document.getElementById('toast-container');
            toastContainer.innerHTML = ''; // Clear previous toasts

            // Get form field values with error handling
            const nom = document.getElementById('joueur_nom')?.value.trim() || '';
            const prenom = document.getElementById('joueur_prenom')?.value.trim() || '';
            const dateNaissance = document.getElementById('joueur_dateNaissance')?.value || '';
            const sport = document.getElementById('joueur_sport')?.value || '';
            const poste = document.getElementById('joueur_poste')?.value || '';
            const taille = document.getElementById('joueur_taille')?.value.trim() || '';
            const poids = document.getElementById('joueur_poids')?.value.trim() || '';
            const email = document.getElementById('joueur_email')?.value.trim() || '';
            const telephone = document.getElementById('joueur_telephone')?.value.trim() || '';
            const statut = document.getElementById('joueur_statut')?.value || '';
            const profilePicture = document.getElementById('joueur_profilePicture')?.files[0];

            // Validation with custom toast messages - All fields are now required
            if (!nom) {
                addToast('Erreur Nom', 'Veuillez entrer le nom du joueur.');
            } else if (nom.length > 50) {
                addToast('Erreur Nom', 'Le nom ne doit pas dépasser 50 caractères.');
            }

            if (!prenom) {
                addToast('Erreur Prénom', 'Veuillez entrer le prénom du joueur.');
            } else if (prenom.length > 50) {
                addToast('Erreur Prénom', 'Le prénom ne doit pas dépasser 50 caractères.');
            }

            if (!dateNaissance) {
                addToast('Erreur Date', 'Veuillez sélectionner une date de naissance.');
            } else {
                const birthDate = new Date(dateNaissance);
                const today = new Date();
                if (birthDate > today) {
                    addToast('Erreur Date', 'La date de naissance ne peut pas être dans le futur.');
                }
            }

            if (!sport) {
                addToast('Erreur Sport', 'Veuillez sélectionner un sport.');
            }

            if (!poste) {
                addToast('Erreur Poste', 'Veuillez sélectionner un poste.');
            } else if (!['GK','RB','LB','RWB','LWB','SW','DM','CM','AM','RM','LM','RW','LW','CF','ST','SS'].includes(poste)) {
                addToast('Erreur Poste', 'Veuillez sélectionner un poste valide.');
            }

            if (!taille) {
                addToast('Erreur Taille', 'Veuillez entrer la taille du joueur.');
            } else {
                const tailleNum = parseFloat(taille);
                if (isNaN(tailleNum) || tailleNum <= 0) {
                    addToast('Erreur Taille', 'La taille doit être un nombre positif.');
                } else if (tailleNum > 3) {
                    addToast('Erreur Taille', 'La taille semble irréaliste (max 3m).');
                }
            }

            if (!poids) {
                addToast('Erreur Poids', 'Veuillez entrer le poids du joueur.');
            } else {
                const poidsNum = parseFloat(poids);
                if (isNaN(poidsNum) || poidsNum <= 0) {
                    addToast('Erreur Poids', 'Le poids doit être un nombre positif.');
                } else if (poidsNum > 500) {
                    addToast('Erreur Poids', 'Le poids semble irréaliste (max 500kg).');
                }
            }

            if (!email) {
                addToast('Erreur Email', 'Veuillez entrer l\'email du joueur.');
            } else if (!isValidEmail(email)) {
                addToast('Erreur Email', 'Veuillez entrer un email valide.');
            } else if (email.length > 100) {
                addToast('Erreur Email', 'L\'email ne doit pas dépasser 100 caractères.');
            }

            if (!telephone) {
                addToast('Erreur Téléphone', 'Veuillez entrer le numéro de téléphone du joueur.');
            } else if (!isValidPhone(telephone)) {
                addToast('Erreur Téléphone', 'Veuillez entrer un numéro de téléphone valide.');
            } else if (telephone.length > 20) {
                addToast('Erreur Téléphone', 'Le numéro ne doit pas dépasser 20 caractères.');
            }

            if (!statut) {
                addToast('Erreur Statut', 'Veuillez sélectionner un statut.');
            } else if (!['Actif','Blessé','Suspendu',''].includes(statut)) {
                addToast('Erreur Statut', 'Veuillez sélectionner un statut valide.');
            }

            if (!profilePicture) {
                addToast('Erreur Photo', 'Veuillez sélectionner une photo de profil.');
            } else {
                const validTypes = ['image/jpeg', 'image/png'];
                if (!validTypes.includes(profilePicture.type)) {
                    addToast('Erreur Photo', 'La photo doit être au format JPEG ou PNG.');
                }
                if (profilePicture.size > 2 * 1024 * 1024) {
                    addToast('Erreur Photo', 'La photo ne doit pas dépasser 2Mo.');
                }
            }

            // If no toasts, submit the form
            if (toastContainer.children.length === 0) {
                this.submit();
            } else {
                // Initialize Bootstrap toasts
                const toastElements = toastContainer.querySelectorAll('.toast');
                toastElements.forEach(toast => new bootstrap.Toast(toast, { autohide: true, delay: 5000 }).show());
            }
        });

        function addToast(title, message) {
            const toastContainer = document.getElementById('toast-container');
            const toastId = 'toast-' + Date.now(); // Unique ID for each toast
            const toastHTML = `
                <div id="${toastId}" class="bs-toast toast fade bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <i class="bx bx-bell me-2"></i>
                        <div class="me-auto fw-semibold">${title}</div>
                        <small>Maintenant</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;
            toastContainer.innerHTML += toastHTML;
        }

        function isValidEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }

        function isValidPhone(phone) {
            const re = /^\+?[\d\s-]{9,}$/;
            return re.test(phone);
        }
    </script>
{% endblock %}