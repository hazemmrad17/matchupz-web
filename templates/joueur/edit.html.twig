{% extends 'base.html.twig' %}

{% block searchbar %}
    {% include 'searchbar.html.twig' %}
{% endblock %}

{% block content %}
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <h4 class="fw-bold py-3 mb-4">
                <span class="text-muted fw-light">Joueurs /</span> Modifier Joueur
            </h4>

            <div class="col-xl">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Modifier {{ joueur.prenom }} {{ joueur.nom }}</h5>
                        <small class="text-muted float-end">Mettre à jour les détails</small>
                    </div>
                    <div class="card-body">
                        <!-- Toast container for flash messages -->
                        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;" id="toast-container">
                            {% for label, messages in app.flashes %}
                                {% for message in messages %}
                                    <div id="toast-{{ loop.index0 }}" class="bs-toast toast fade bg-{{ label == 'success' ? 'success' : 'danger' }}" role="alert" aria-live="assertive" aria-atomic="true">
                                        <div class="toast-header">
                                            <i class="bx bx-bell me-2"></i>
                                            <div class="me-auto fw-semibold">{{ label|capitalize }}</div>
                                            <small>Maintenant</small>
                                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                                        </div>
                                        <div class="toast-body">{{ message }}</div>
                                    </div>
                                {% endfor %}
                            {% endfor %}
                        </div>

                        {{ form_start(form, {'attr': {'enctype': 'multipart/form-data', 'id': 'playerForm', 'novalidate': 'novalidate'}}) }}
                            <!-- Display current profile picture -->
                            <div class="mb-3">
                                <label class="form-label">Photo actuelle</label>
                                <div>
                                    <img
                                        src="{{ joueur.profilePicture ? asset('/uploads/profile_pictures/' ~ joueur.profilePicture) : asset('/uploads/photos/default_avatar.png') }}"
                                        alt="Avatar du joueur"
                                        class="d-block rounded"
                                        height="100"
                                        width="100"
                                        id="uploadedAvatar"
                                    />
                                </div>
                            </div>

                            <!-- Joueur Fields -->
                            <div class="mb-3">
                                {{ form_label(form.nom, 'Nom', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-user"></i></span>
                                    {{ form_widget(form.nom, {'attr': {'class': 'form-control', 'placeholder': 'ex: Dupont', 'maxlength': '50'}}) }}
                                </div>
                                {{ form_errors(form.nom, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.prenom, 'Prénom', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-user"></i></span>
                                    {{ form_widget(form.prenom, {'attr': {'class': 'form-control', 'placeholder': 'ex: Jean', 'maxlength': '50'}}) }}
                                </div>
                                {{ form_errors(form.prenom, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.dateNaissance, 'Date de Naissance', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                                    {{ form_widget(form.dateNaissance, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                {{ form_errors(form.dateNaissance, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.poste, 'Poste', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-target-lock"></i></span>
                                    {{ form_widget(form.poste, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                {{ form_errors(form.poste, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.taille, 'Taille (m)', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-ruler"></i></span>
                                    {{ form_widget(form.taille, {'attr': {'class': 'form-control', 'placeholder': 'ex: 1.85', 'step': '0.01', 'min': '0', 'max': '3'}}) }}
                                </div>
                                {{ form_errors(form.taille, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.poids, 'Poids (kg)', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-scale"></i></span>
                                    {{ form_widget(form.poids, {'attr': {'class': 'form-control', 'placeholder': 'ex: 75', 'step': '0.1', 'min': '0', 'max': '500'}}) }}
                                </div>
                                {{ form_errors(form.poids, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.email, 'Email', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-envelope"></i></span>
                                    {{ form_widget(form.email, {'attr': {'class': 'form-control', 'placeholder': 'ex: email@exemple.com', 'maxlength': '100'}}) }}
                                </div>
                                {{ form_errors(form.email, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.telephone, 'Téléphone', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-phone"></i></span>
                                    {{ form_widget(form.telephone, {'attr': {'class': 'form-control phone-mask', 'placeholder': 'ex: +33 6 12 34 56 78', 'maxlength': '20'}}) }}
                                </div>
                                {{ form_errors(form.telephone, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.statut, 'Statut', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-id-card"></i></span>
                                    {{ form_widget(form.statut, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                {{ form_errors(form.statut, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.profilePicture, 'Photo de Profil', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(form.profilePicture, {'attr': {'class': 'form-control', 'accept': 'image/jpeg,image/png'}}) }}
                                <small class="form-text text-muted">Formats acceptés : JPEG, PNG (max 2Mo)</small>
                                {{ form_errors(form.profilePicture, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <!-- Evaluation Physique Fields -->
                            <h5 class="mt-4">Évaluation Physique</h5>
                            <div class="mb-3">
                                {{ form_label(form.evaluationPhysique.dateEvaluation, 'Date d\'Évaluation', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                                    {{ form_widget(form.evaluationPhysique.dateEvaluation, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                {{ form_errors(form.evaluationPhysique.dateEvaluation, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.evaluationPhysique.niveauEndurance, 'Niveau d\'Endurance (0-10)', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-heart"></i></span>
                                    {{ form_widget(form.evaluationPhysique.niveauEndurance, {'attr': {'class': 'form-control', 'placeholder': 'ex: 8.5', 'step': '0.1', 'min': '0', 'max': '10'}}) }}
                                </div>
                                {{ form_errors(form.evaluationPhysique.niveauEndurance, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.evaluationPhysique.forcePhysique, 'Force Physique (0-10)', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-dumbbell"></i></span>
                                    {{ form_widget(form.evaluationPhysique.forcePhysique, {'attr': {'class': 'form-control', 'placeholder': 'ex: 7.0', 'step': '0.1', 'min': '0', 'max': '10'}}) }}
                                </div>
                                {{ form_errors(form.evaluationPhysique.forcePhysique, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.evaluationPhysique.vitesse, 'Vitesse (0-10)', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-run"></i></span>
                                    {{ form_widget(form.evaluationPhysique.vitesse, {'attr': {'class': 'form-control', 'placeholder': 'ex: 9.0', 'step': '0.1', 'min': '0', 'max': '10'}}) }}
                                </div>
                                {{ form_errors(form.evaluationPhysique.vitesse, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.evaluationPhysique.etatBlessure, 'État de Blessure', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-band-aid"></i></span>
                                    {{ form_widget(form.evaluationPhysique.etatBlessure, {'attr': {'class': 'form-control', 'placeholder': 'ex: Aucun', 'maxlength': '255'}}) }}
                                </div>
                                {{ form_errors(form.evaluationPhysique.etatBlessure, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <!-- Performance Joueur Fields -->
                            <h5 class="mt-4">Performance du Joueur</h5>
                            <div class="mb-3">
                                {{ form_label(form.performanceJoueur.saison, 'Saison', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                                    {{ form_widget(form.performanceJoueur.saison, {'attr': {'class': 'form-control', 'placeholder': 'ex: 2023-2024', 'maxlength': '9'}}) }}
                                </div>
                                {{ form_errors(form.performanceJoueur.saison, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.performanceJoueur.nombreMatches, 'Nombre de Matches', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-football"></i></span>
                                    {{ form_widget(form.performanceJoueur.nombreMatches, {'attr': {'class': 'form-control', 'placeholder': 'ex: 10', 'min': '0'}}) }}
                                </div>
                                {{ form_errors(form.performanceJoueur.nombreMatches, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.performanceJoueur.minutesJouees, 'Minutes Jouées', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-time"></i></span>
                                    {{ form_widget(form.performanceJoueur.minutesJouees, {'attr': {'class': 'form-control', 'placeholder': 'ex: 900', 'min': '0'}}) }}
                                </div>
                                {{ form_errors(form.performanceJoueur.minutesJouees, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.performanceJoueur.butsMarques, 'Buts Marqués', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-target-lock"></i></span>
                                    {{ form_widget(form.performanceJoueur.butsMarques, {'attr': {'class': 'form-control', 'placeholder': 'ex: 5', 'min': '0'}}) }}
                                </div>
                                {{ form_errors(form.performanceJoueur.butsMarques, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.performanceJoueur.passesDecisives, 'Passes Décisives', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-target-lock"></i></span>
                                    {{ form_widget(form.performanceJoueur.passesDecisives, {'attr': {'class': 'form-control', 'placeholder': 'ex: 3', 'min': '0'}}) }}
                                </div>
                                {{ form_errors(form.performanceJoueur.passesDecisives, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.performanceJoueur.cartonsJaunes, 'Cartons Jaunes', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-card"></i></span>
                                    {{ form_widget(form.performanceJoueur.cartonsJaunes, {'attr': {'class': 'form-control', 'placeholder': 'ex: 2', 'min': '0'}}) }}
                                </div>
                                {{ form_errors(form.performanceJoueur.cartonsJaunes, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.performanceJoueur.cartonsRouges, 'Cartons Rouges', {'label_attr': {'class': 'form-label'}}) }} <span class="text-danger">*</span>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-card"></i></span>
                                    {{ form_widget(form.performanceJoueur.cartonsRouges, {'attr': {'class': 'form-control', 'placeholder': 'ex: 0', 'min': '0'}}) }}
                                </div>
                                {{ form_errors(form.performanceJoueur.cartonsRouges, {'attr': {'class': 'text-danger'}}) }}
                            </div>

                            <!-- Form Buttons -->
                            <button type="submit" class="btn btn-primary">Mettre à jour</button>
                            <a href="{{ path('joueur_main') }}" class="btn btn-secondary">Annuler</a>
                        {{ form_end(form) }}

                        <!-- CSS to hide the joueur select fields -->
                        <style>
                            #joueur_evaluationPhysique_joueur,
                            #joueur_performanceJoueur_joueur {
                                display: none;
                            }
                            label[for="joueur_evaluationPhysique_joueur"],
                            label[for="joueur_performanceJoueur_joueur"] {
                                display: none;
                            }
                        </style>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Client-Side Validation Script -->
    <script>
        document.getElementById('playerForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const toastContainer = document.getElementById('toast-container');
            toastContainer.innerHTML = ''; // Clear previous toasts

            // Joueur Fields
            const nom = document.getElementById('joueur_nom')?.value.trim() || '';
            const prenom = document.getElementById('joueur_prenom')?.value.trim() || '';
            const dateNaissance = document.getElementById('joueur_dateNaissance')?.value || '';
            const poste = document.getElementById('joueur_poste')?.value || '';
            const taille = document.getElementById('joueur_taille')?.value.trim() || '';
            const poids = document.getElementById('joueur_poids')?.value.trim() || '';
            const email = document.getElementById('joueur_email')?.value.trim() || '';
            const telephone = document.getElementById('joueur_telephone')?.value.trim() || '';
            const statut = document.getElementById('joueur_statut')?.value || '';
            const profilePicture = document.getElementById('joueur_profilePicture')?.files[0];

            // Evaluation Physique Fields
            const dateEvaluation = document.getElementById('joueur_evaluationPhysique_dateEvaluation')?.value || '';
            const niveauEndurance = document.getElementById('joueur_evaluationPhysique_niveauEndurance')?.value.trim() || '';
            const forcePhysique = document.getElementById('joueur_evaluationPhysique_forcePhysique')?.value.trim() || '';
            const vitesse = document.getElementById('joueur_evaluationPhysique_vitesse')?.value.trim() || '';
            const etatBlessure = document.getElementById('joueur_evaluationPhysique_etatBlessure')?.value.trim() || '';

            // Performance Joueur Fields
            const saison = document.getElementById('joueur_performanceJoueur_saison')?.value.trim() || '';
            const nombreMatches = document.getElementById('joueur_performanceJoueur_nombreMatches')?.value.trim() || '';
            const minutesJouees = document.getElementById('joueur_performanceJoueur_minutesJouees')?.value.trim() || '';
            const butsMarques = document.getElementById('joueur_performanceJoueur_butsMarques')?.value.trim() || '';
            const passesDecisives = document.getElementById('joueur_performanceJoueur_passesDecisives')?.value.trim() || '';
            const cartonsJaunes = document.getElementById('joueur_performanceJoueur_cartonsJaunes')?.value.trim() || '';
            const cartonsRouges = document.getElementById('joueur_performanceJoueur_cartonsRouges')?.value.trim() || '';

            // Validation for Joueur Fields
            if (!nom) addToast('Erreur Nom', 'Le champ nom est vide.');
            else if (nom.length > 50) addToast('Erreur Nom', 'Le nom ne doit pas dépasser 50 caractères.');

            if (!prenom) addToast('Erreur Prénom', 'Le champ prénom est vide.');
            else if (prenom.length > 50) addToast('Erreur Prénom', 'Le prénom ne doit pas dépasser 50 caractères.');

            if (!dateNaissance) addToast('Erreur Date', 'Le champ date de naissance est vide.');
            else {
                const birthDate = new Date(dateNaissance);
                const today = new Date();
                if (birthDate > today) addToast('Erreur Date', 'La date de naissance ne peut pas être dans le futur.');
            }

            if (!poste) addToast('Erreur Poste', 'Le champ poste est vide.');
            else if (!['GK','RB','LB','RWB','LWB','SW','DM','CM','AM','RM','LM','RW','LW','CF','ST','SS'].includes(poste)) addToast('Erreur Poste', 'Veuillez sélectionner un poste valide.');

            if (!taille) addToast('Erreur Taille', 'Le champ taille est vide.');
            else {
                const tailleNum = parseFloat(taille);
                if (isNaN(tailleNum) || tailleNum <= 0) addToast('Erreur Taille', 'La taille doit être un nombre positif.');
                else if (tailleNum > 3) addToast('Erreur Taille', 'La taille semble irréaliste (max 3m).');
            }

            if (!poids) addToast('Erreur Poids', 'Le champ poids est vide.');
            else {
                const poidsNum = parseFloat(poids);
                if (isNaN(poidsNum) || poidsNum <= 0) addToast('Erreur Poids', 'Le poids doit être un nombre positif.');
                else if (poidsNum > 500) addToast('Erreur Poids', 'Le poids semble irréaliste (max 500kg).');
            }

            if (!email) addToast('Erreur Email', 'Le champ email est vide.');
            else if (!isValidEmail(email)) addToast('Erreur Email', 'Veuillez entrer un email valide.');
            else if (email.length > 100) addToast('Erreur Email', 'L\'email ne doit pas dépasser 100 caractères.');

            if (!telephone) addToast('Erreur Téléphone', 'Le champ téléphone est vide.');
            else if (!isValidPhone(telephone)) addToast('Erreur Téléphone', 'Veuillez entrer un numéro de téléphone valide.');
            else if (telephone.length > 20) addToast('Erreur Téléphone', 'Le numéro ne doit pas dépasser 20 caractères.');

            if (!statut) addToast('Erreur Statut', 'Le champ statut est vide.');
            else if (!['Actif','Blessé','Suspendu',''].includes(statut)) addToast('Erreur Statut', 'Veuillez sélectionner un statut valide.');

            if (profilePicture) {
                const validTypes = ['image/jpeg', 'image/png'];
                if (!validTypes.includes(profilePicture.type)) addToast('Erreur Photo', 'La photo doit être au format JPEG ou PNG.');
                if (profilePicture.size > 2 * 1024 * 1024) addToast('Erreur Photo', 'La photo ne doit pas dépasser 2Mo.');
            }

            // Validation for Evaluation Physique Fields
            if (!dateEvaluation) addToast('Erreur Date Évaluation', 'Le champ date d\'évaluation est requis.');
            else {
                const evalDate = new Date(dateEvaluation);
                const today = new Date();
                if (evalDate > today) addToast('Erreur Date Évaluation', 'La date d\'évaluation ne peut pas être dans le futur.');
            }

            if (!niveauEndurance) addToast('Erreur Endurance', 'Le champ niveau d\'endurance est requis.');
            else {
                const enduranceNum = parseFloat(niveauEndurance);
                if (isNaN(enduranceNum) || enduranceNum < 0 || enduranceNum > 10) addToast('Erreur Endurance', 'Le niveau d\'endurance doit être entre 0 et 10.');
            }

            if (!forcePhysique) addToast('Erreur Force', 'Le champ force physique est requis.');
            else {
                const forceNum = parseFloat(forcePhysique);
                if (isNaN(forceNum) || forceNum < 0 || forceNum > 10) addToast('Erreur Force', 'La force physique doit être entre 0 et 10.');
            }

            if (!vitesse) addToast('Erreur Vitesse', 'Le champ vitesse est requis.');
            else {
                const vitesseNum = parseFloat(vitesse);
                if (isNaN(vitesseNum) || vitesseNum < 0 || vitesseNum > 10) addToast('Erreur Vitesse', 'La vitesse doit être entre 0 et 10.');
            }

            if (!etatBlessure) addToast('Erreur État Blessure', 'Le champ état de blessure est requis.');
            else if (etatBlessure.length > 255) addToast('Erreur État Blessure', 'L\'état de blessure ne doit pas dépasser 255 caractères.');

            // Validation for Performance Joueur Fields
            if (!saison) addToast('Erreur Saison', 'Le champ saison est requis.');
            else if (saison.length > 9) addToast('Erreur Saison', 'La saison ne doit pas dépasser 9 caractères (ex: 2023-2024).');
            else if (!/^\d{4}-\d{4}$/.test(saison)) addToast('Erreur Saison', 'La saison doit être au format AAAA-AAAA (ex: 2023-2024).');

            if (!nombreMatches) addToast('Erreur Matches', 'Le champ nombre de matches est requis.');
            else if (isNaN(parseInt(nombreMatches)) || parseInt(nombreMatches) < 0) addToast('Erreur Matches', 'Le nombre de matches doit être un entier positif ou zéro.');

            if (!minutesJouees) addToast('Erreur Minutes', 'Le champ minutes jouées est requis.');
            else if (isNaN(parseInt(minutesJouees)) || parseInt(minutesJouees) < 0) addToast('Erreur Minutes', 'Les minutes jouées doivent être un entier positif ou zéro.');

            if (!butsMarques) addToast('Erreur Buts', 'Le champ buts marqués est requis.');
            else if (isNaN(parseInt(butsMarques)) || parseInt(butsMarques) < 0) addToast('Erreur Buts', 'Les buts marqués doivent être un entier positif ou zéro.');

            if (!passesDecisives) addToast('Erreur Passes', 'Le champ passes décisives est requis.');
            else if (isNaN(parseInt(passesDecisives)) || parseInt(passesDecisives) < 0) addToast('Erreur Passes', 'Les passes décisives doivent être un entier positif ou zéro.');

            if (!cartonsJaunes) addToast('Erreur Jaunes', 'Le champ cartons jaunes est requis.');
            else if (isNaN(parseInt(cartonsJaunes)) || parseInt(cartonsJaunes) < 0) addToast('Erreur Jaunes', 'Les cartons jaunes doivent être un entier positif ou zéro.');

            if (!cartonsRouges) addToast('Erreur Rouges', 'Le champ cartons rouges est requis.');
            else if (isNaN(parseInt(cartonsRouges)) || parseInt(cartonsRouges) < 0) addToast('Erreur Rouges', 'Les cartons rouges doivent être un entier positif ou zéro.');

            // Submit if no errors
            if (toastContainer.children.length === 0) {
                this.submit();
            } else {
                const toastElements = toastContainer.querySelectorAll('.toast');
                toastElements.forEach(toast => new bootstrap.Toast(toast, { autohide: true, delay: 5000 }).show());
            }
        });

        function addToast(title, message) {
            const toastContainer = document.getElementById('toast-container');
            const toastId = 'toast-' + Date.now();
            const toastHTML = `
                <div id="${toastId}" class="bs-toast toast fade bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <i class="bx bx-bell me-2"></i>
                        <div class="me-auto fw-semibold">${title}</div>
                        <small>Maintenant</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">${message}</div>
                </div>
            `;
            toastContainer.innerHTML += toastHTML;
        }

        function isValidEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }

        function isValidPhone(phone) {
            const re = /^\+?[\d\s-]{9,}$/;
            return re.test(phone);
        }

        // Initialize toasts on page load
        document.addEventListener('DOMContentLoaded', function() {
            const toastElements = document.querySelectorAll('.toast');
            toastElements.forEach(toast => new bootstrap.Toast(toast, { autohide: true, delay: 5000 }).show());
        });

        // Preview uploaded image
        document.getElementById('joueur_profilePicture').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('uploadedAvatar').src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    </script>
{% endblock %}