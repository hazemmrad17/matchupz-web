{% extends 'base.html.twig' %}

{% block title %}Nouvel Utilisateur{% endblock %}

{% block searchbar %}
    {% include 'searchbar.html.twig' %}
{% endblock %}

{% block content %}
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <h4 class="fw-bold py-3 mb-4">
                <span class="text-muted fw-light">Utilisateurs /</span> Nouvel Utilisateur
            </h4>

            <div class="col-xl">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ajouter un Nouvel Utilisateur</h5>
                        <small class="text-muted float-end">Remplir les détails</small>
                    </div>
                    <div class="card-body">
                        <!-- Toast container -->
                        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;" id="toast-container"></div>

                        {{ form_start(form, {'attr': {'enctype': 'multipart/form-data', 'id': 'userForm', 'novalidate': 'novalidate'}}) }}
                            <div class="mb-3">
                                <label class="form-label" for="user_nom">Nom*</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-user"></i></span>
                                    {{ form_widget(form.nom, {'attr': {'class': 'form-control', 'placeholder': 'Nom de l\'utilisateur'}}) }}
                                </div>
                                {{ form_errors(form.nom) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label" for="user_prenom">Prénom*</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-user"></i></span>
                                    {{ form_widget(form.prenom, {'attr': {'class': 'form-control', 'placeholder': 'Prénom de l\'utilisateur'}}) }}
                                </div>
                                {{ form_errors(form.prenom) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label" for="user_email">Email*</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-envelope"></i></span>
                                    {{ form_widget(form.email, {'attr': {'class': 'form-control', 'placeholder': 'email@gmail.com'}}) }}
                                </div>
                                {{ form_errors(form.email) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label" for="user_password">Mot de passe*</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-lock-alt"></i></span>
                                    {{ form_widget(form.password, {'attr': {
                                        'class': 'form-control',
                                        'placeholder': 'Mot de passe sécurisé',
                                        'type': 'password'
                                    }}) }}
                                    <button class="btn btn-outline-secondary toggle-password" type="button">
                                        <i class="bx bx-hide"></i>
                                    </button>
                                </div>
                                {{ form_errors(form.password) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label" for="user_num_telephone">Téléphone*</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-phone"></i></span>
                                    {{ form_widget(form.num_telephone, {'attr': {
                                        'class': 'form-control',
                                        'placeholder': '12345678'
                                    }}) }}
                                </div>
                                {{ form_errors(form.num_telephone) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label" for="user_date_de_naissance">Date de naissance*</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                                    {{ form_widget(form.date_de_naissance, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                {{ form_errors(form.date_de_naissance) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Genre*</label>
                                <div class="d-flex gap-4">
                                    {% for child in form.genre %}
                                        <div class="form-check">
                                            {{ form_widget(child, {'attr': {'class': 'form-check-input'}}) }}
                                            {{ form_label(child, null, {'label_attr': {'class': 'form-check-label'}}) }}
                                        </div>
                                    {% endfor %}
                                </div>
                                {{ form_errors(form.genre) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label" for="user_role">Rôle*</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-cog"></i></span>
                                    {{ form_widget(form.role, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                {{ form_errors(form.role) }}
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label" for="user_image">Photo de profil</label>
                                {{ form_widget(form.image, {'attr': {'class': 'form-control'}}) }}
                                <small class="text-muted">Formats acceptés: JPG, PNG (max 2MB)</small>
                                {{ form_errors(form.image) }}
                            </div>
                            
                            <button type="submit" class="btn btn-primary">Créer</button>
                            <a href="{{ path('app_user_index') }}" class="btn btn-secondary">Annuler</a>
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Gestion du toggle password
        document.addEventListener('DOMContentLoaded', function() {
            const togglePassword = document.querySelector('.toggle-password');
            if (togglePassword) {
                const passwordInput = document.querySelector('#user_password');
                const icon = togglePassword.querySelector('i');
                
                // Configuration initiale - mot de passe masqué
                passwordInput.setAttribute('type', 'password');
                icon.classList.add('bx-hide');
                icon.classList.remove('bx-show');
                icon.setAttribute('title', 'Afficher le mot de passe');
                
                // Gestion du clic sur l'icône
                togglePassword.addEventListener('click', function() {
                    const isPassword = passwordInput.getAttribute('type') === 'password';
                    passwordInput.setAttribute('type', isPassword ? 'text' : 'password');
                    
                    // Changer l'icône
                    if (isPassword) {
                        icon.classList.replace('bx-hide', 'bx-show');
                        icon.setAttribute('title', 'Masquer le mot de passe');
                    } else {
                        icon.classList.replace('bx-show', 'bx-hide');
                        icon.setAttribute('title', 'Afficher le mot de passe');
                    }
                });
                
                // Style pour le bouton
                togglePassword.style.cursor = 'pointer';
                togglePassword.style.transition = 'background-color 0.3s ease';
                togglePassword.addEventListener('mouseover', function() {
                    this.style.backgroundColor = 'rgba(0,0,0,0.05)';
                });
                togglePassword.addEventListener('mouseout', function() {
                    this.style.backgroundColor = '';
                });
            }

            // Validation du formulaire
            document.getElementById('userForm').addEventListener('submit', function(e) {
                const toastContainer = document.getElementById('toast-container');
                toastContainer.innerHTML = ''; // Clear previous toasts

                // Vérification des champs
                let isValid = true;

                // Validation du nom
                const nom = document.getElementById('user_nom').value.trim();
                if (!nom) {
                    addToast('Erreur', 'Le nom est obligatoire');
                    isValid = false;
                } else if (!/^[a-zA-ZÀ-ÿ\s\-']+$/.test(nom)) {
                    addToast('Erreur', 'Le nom ne doit contenir que des lettres');
                    isValid = false;
                }

                // Validation du prénom
                const prenom = document.getElementById('user_prenom').value.trim();
                if (!prenom) {
                    addToast('Erreur', 'Le prénom est obligatoire');
                    isValid = false;
                } else if (!/^[a-zA-ZÀ-ÿ\s\-']+$/.test(prenom)) {
                    addToast('Erreur', 'Le prénom ne doit contenir que des lettres');
                    isValid = false;
                }

                // Validation de l'email
                const email = document.getElementById('user_email').value.trim();
                if (!email) {
                    addToast('Erreur', 'L\'email est obligatoire');
                    isValid = false;
                } else if (!/^[^\s@]+@gmail\.com$/i.test(email)) {
                    addToast('Erreur', 'L\'email doit être un @gmail.com valide');
                    isValid = false;
                }

                // Validation du mot de passe
                const password = document.getElementById('user_password').value;
                if (!password) {
                    addToast('Erreur', 'Le mot de passe est obligatoire');
                    isValid = false;
                } else if (password.length < 8) {
                    addToast('Erreur', 'Le mot de passe doit contenir au moins 8 caractères');
                    isValid = false;
                } else if (!/\d/.test(password) || !/[a-zA-Z]/.test(password)) {
                    addToast('Erreur', 'Le mot de passe doit contenir des lettres et des chiffres');
                    isValid = false;
                }

                // Validation du téléphone
                const telephone = document.getElementById('user_num_telephone').value.trim();
                if (!telephone) {
                    addToast('Erreur', 'Le téléphone est obligatoire');
                    isValid = false;
                } else if (!/^\d{8}$/.test(telephone)) {
                    addToast('Erreur', 'Le téléphone doit contenir exactement 8 chiffres');
                    isValid = false;
                }

                // Validation de la date de naissance
                const dateNaissance = document.getElementById('user_date_de_naissance').value;
                if (!dateNaissance) {
                    addToast('Erreur', 'La date de naissance est obligatoire');
                    isValid = false;
                } else {
                    const birthDate = new Date(dateNaissance);
                    const today = new Date();
                    const minAgeDate = new Date();
                    minAgeDate.setFullYear(today.getFullYear() - 18);

                    if (birthDate > today) {
                        addToast('Erreur', 'La date de naissance ne peut pas être dans le futur');
                        isValid = false;
                    } else if (birthDate > minAgeDate) {
                        addToast('Erreur', 'L\'utilisateur doit avoir au moins 18 ans');
                        isValid = false;
                    }
                }

                // Validation du genre
                const genre = document.querySelector('input[name="user[genre]"]:checked');
                if (!genre) {
                    addToast('Erreur', 'Le genre est obligatoire');
                    isValid = false;
                }

                // Validation du rôle
                const role = document.getElementById('user_role').value;
                if (!role) {
                    addToast('Erreur', 'Le rôle est obligatoire');
                    isValid = false;
                }

                // Validation de l'image
                const image = document.getElementById('user_image').files[0];
                if (image) {
                    const validTypes = ['image/jpeg', 'image/png'];
                    if (!validTypes.includes(image.type)) {
                        addToast('Erreur', 'L\'image doit être au format JPG ou PNG');
                        isValid = false;
                    }
                    if (image.size > 2 * 1024 * 1024) {
                        addToast('Erreur', 'L\'image ne doit pas dépasser 2Mo');
                        isValid = false;
                    }
                }

                if (!isValid) {
                    e.preventDefault();
                    const toastElements = toastContainer.querySelectorAll('.toast');
                    toastElements.forEach(toast => new bootstrap.Toast(toast, { autohide: true, delay: 5000 }).show());
                }
            });

            // Fonction pour ajouter un toast
            function addToast(title, message) {
                const toastContainer = document.getElementById('toast-container');
                const toastId = 'toast-' + Date.now();
                const toastHTML = `
                    <div id="${toastId}" class="bs-toast toast fade bg-danger" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <i class="bx bx-bell me-2"></i>
                            <div class="me-auto fw-semibold">${title}</div>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">${message}</div>
                    </div>
                `;
                toastContainer.innerHTML += toastHTML;
            }
        });
    </script>
{% endblock %}