{% extends 'base.html.twig' %}

{% block title %}Contrat Statistics{% endblock %}

{% block body %}
<h4 class="fw-bold py-3 mb-4">Contrat Statistics</h4>

<div class="row">

    <!-- Montant Distribution Chart -->
    <div class="col-12 col-lg-8 mb-4"> <!-- Changed col-lg-6 to col-lg-8 to make it wider -->
        <div class="card">
            <div class="card-header"><h5 class="card-title m-0 me-2">Distribution des montants</h5></div>
            <div class="card-body">
                <canvas id="montantDistributionChart" style="min-height: 450px; max-height: 450px; width: 100%; display: block;"></canvas> <!-- Increased min-height to 450px -->
            </div>
        </div>
    </div>

    <!-- Contract Duration Chart -->
    <div class="col-12 mb-4">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="card-title m-0 me-2">Durée des contrats</h5>
            </div>
            <div class="card-body">
                <canvas id="contractDurationChart" style="min-height: 400px; max-height: 400px; width: 100%; display: block;"></canvas>
            </div>
        </div>
    </div>

</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Check if Chart.js is loaded
            if (typeof Chart === 'undefined') {
                console.error('Chart.js is not loaded.');
                document.getElementById('montantDistributionChart').parentElement.innerHTML = '<p class="text-center text-danger">Error: Chart.js failed to load.</p>';
                document.getElementById('contractDurationChart').parentElement.innerHTML = '<p class="text-center text-danger">Error: Chart.js failed to load.</p>';
                return;
            }

            // Montant Distribution Chart
            const montantCtx = document.getElementById('montantDistributionChart').getContext('2d');
            // Generate arrays safely
            const montantLabels = [{% for bin in montantDistribution|keys %}'{{ bin }}'{% if not loop.last %},{% endif %}{% endfor %}];
            const montantValues = [{% for count in montantDistribution %}{{ count }}{% if not loop.last %},{% endif %}{% endfor %}];
            const montantDistributionData = {
                labels: montantLabels,
                values: montantValues
            };
            console.log('Montant Distribution Data:', montantDistributionData);

            if (montantDistributionData.labels.length > 0 && montantDistributionData.values.length > 0) {
                try {
                    new Chart(montantCtx, {
                        type: 'bar',
                        data: {
                            labels: montantDistributionData.labels,
                            datasets: [{
                                label: 'Nombre des Contrats',
                                data: montantDistributionData.values,
                                backgroundColor: '#FF5733',
                                borderColor: '#FF5733',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text: 'Distribution des montants des contrats',
                                    align: 'center',
                                    font: {
                                        size: 18 // Increased font size for title to match larger card
                                    }
                                },
                                legend: {
                                    display: false
                                }
                            },
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Montant Range (TND)',
                                        font: {
                                            size: 14 // Slightly larger font for axis title
                                        }
                                    },
                                    ticks: {
                                        autoSkip: false,
                                        maxRotation: 45,
                                        minRotation: 45,
                                        font: {
                                            size: 12 // Slightly larger font for ticks
                                        }
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Nombre des Contrats',
                                        font: {
                                            size: 14 // Slightly larger font for axis title
                                        }
                                    },
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1,
                                        font: {
                                            size: 12 // Slightly larger font for ticks
                                        }
                                    }
                                }
                            }
                        }
                    });
                } catch (error) {
                    console.error('Error rendering Montant Distribution Chart:', error);
                    document.getElementById('montantDistributionChart').parentElement.innerHTML = '<p class="text-center text-danger">Error rendering chart: ' + error.message + '</p>';
                }
            } else {
                document.getElementById('montantDistributionChart').parentElement.innerHTML = '<p class="text-center text-muted">No data available for Montant Distribution.</p>';
            }

            // Contract Duration Chart
            const durationCtx = document.getElementById('contractDurationChart').getContext('2d');
            const contractDurationData = {
                labels: [],
                startDates: [],
                durations: []
            };
            // Generate arrays from Twig data
            const rawLabels = [{% for contract in allContracts %}{% if contract.dateDebut and contract.dateFin %}'{{ contract.titre|default('Contract #' ~ contract.idContrat)|e('js') }}'{% if not loop.last %},{% endif %}{% endif %}{% endfor %}];
            const rawStartDates = [{% for contract in allContracts %}{% if contract.dateDebut and contract.dateFin %}'{{ contract.dateDebut|date('Y-m-d') }}'{% if not loop.last %},{% endif %}{% endif %}{% endfor %}];
            const rawEndDates = [{% for contract in allContracts %}{% if contract.dateDebut and contract.dateFin %}'{{ contract.dateFin|date('Y-m-d') }}'{% if not loop.last %},{% endif %}{% endif %}{% endfor %}];

            // Process dates and calculate durations
            for (let i = 0; i < rawLabels.length; i++) {
                const startDate = new Date(rawStartDates[i]);
                const endDate = new Date(rawEndDates[i]);
                if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime()) && endDate >= startDate) {
                    contractDurationData.labels.push(rawLabels[i]);
                    contractDurationData.startDates.push(startDate.getTime());
                    contractDurationData.durations.push((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
                } else {
                    console.warn('Skipping contract due to invalid dates:', rawLabels[i], rawStartDates[i], rawEndDates[i]);
                }
            }
            console.log('Contract Duration Data:', contractDurationData);

            if (contractDurationData.labels.length > 0) {
                try {
                    new Chart(durationCtx, {
                        type: 'bar',
                        data: {
                            labels: contractDurationData.labels,
                            datasets: [{
                                label: 'Contract Duration',
                                data: contractDurationData.durations.map((duration, index) => ({
                                    x: duration,
                                    y: contractDurationData.labels[index]
                                })),
                                backgroundColor: '#00B7E8',
                                borderColor: '#00B7E8',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text: 'Durée des contrats (Début à Fin)',
                                    align: 'center'
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const label = context.label || '';
                                            const duration = context.raw.x;
                                            const startDate = new Date(contractDurationData.startDates[context.dataIndex]);
                                            const endDate = new Date(startDate.getTime() + duration * 1000 * 60 * 60 * 24);
                                            return `${label}: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()} (${Math.round(duration)} jours)`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Durée (jours)'
                                    },
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 50
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Contracts'
                                    }
                                }
                            }
                        }
                    });
                } catch (error) {
                    console.error('Error rendering Contract Duration Chart:', error);
                    document.getElementById('contractDurationChart').parentElement.innerHTML = '<p class="text-center text-danger">Error rendering chart: ' + error.message + '</p>';
                }
            } else {
                document.getElementById('contractDurationChart').parentElement.innerHTML = '<p class="text-center text-muted">No contracts with valid start and end dates available.</p>';
            }
        });
    </script>
{% endblock %}