{% extends 'base.html.twig' %}
    {% block searchbar %}
        {% include 'searchbar.html.twig' %}
    {% endblock %}

{% block content %}
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <h4 class="fw-bold py-3 mb-4">
                <span class="text-muted fw-light">Schedules /</span> Nouveau planning
            </h4>

            <div class="col-xl">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ajouter un Nouveau planning</h5>
                        <small class="text-muted float-end">Remplir les détails</small>
                    </div>
                    <div class="card-body">
                        {{ form_start(form, {'id': 'scheduleForm', 'novalidate': 'novalidate'}) }}
                            <div class="mb-3">
                                <label class="form-label" for="schedule_dateMatch">Date du Match</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                                    {{ form_widget(form.dateMatch, {'attr': {'class': 'form-control', 'id': 'schedule_dateMatch'}}) }}
                                </div>
                                <div class="text-danger mt-1" id="dateMatchError">
                                    {{ form_errors(form.dateMatch) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="schedule_startTime">Heure de Début</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-time"></i></span>
                                    {{ form_widget(form.startTime, {'attr': {'class': 'form-control', 'id': 'schedule_startTime'}}) }}
                                </div>
                                <div class="text-danger mt-1" id="startTimeError">
                                    {{ form_errors(form.startTime) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="schedule_endTime">Heure de Fin</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-time"></i></span>
                                    {{ form_widget(form.endTime, {'attr': {'class': 'form-control', 'id': 'schedule_endTime'}}) }}
                                </div>
                                <div class="text-danger mt-1" id="endTimeError">
                                    {{ form_errors(form.endTime) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="schedule_matchEntity">Match</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-football"></i></span>
                                    {{ form_widget(form.matchEntity, {'attr': {'class': 'form-control', 'id': 'schedule_matchEntity'}}) }}
                                </div>
                                <div class="text-danger mt-1" id="matchEntityError">
                                    {{ form_errors(form.matchEntity) }}
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label" for="schedule_espaceSportif">Espace Sportif</label>
                                <div class="input-group input-group-merge">
                                    <span class="input-group-text"><i class="bx bx-map"></i></span>
                                    {{ form_widget(form.espaceSportif, {'attr': {'class': 'form-control', 'id': 'schedule_espaceSportif'}}) }}
                                </div>
                                <div class="text-danger mt-1" id="espaceSportifError">
                                    {{ form_errors(form.espaceSportif) }}
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary">Créer</button>
                            <a href="{{ path('schedule_main') }}" class="btn btn-secondary">Annuler</a>
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('scheduleForm');
            const dateMatchInput = document.getElementById('schedule_dateMatch');
            const startTimeInput = document.getElementById('schedule_startTime');
            const endTimeInput = document.getElementById('schedule_endTime');
            const matchEntityInput = document.getElementById('schedule_matchEntity');
            const espaceSportifInput = document.getElementById('schedule_espaceSportif');
            const dateMatchError = document.getElementById('dateMatchError');
            const startTimeError = document.getElementById('startTimeError');
            const endTimeError = document.getElementById('endTimeError');
            const matchEntityError = document.getElementById('matchEntityError');
            const espaceSportifError = document.getElementById('espaceSportifError');

            // Function to validate a single field (required fields)
            function validateField(input, errorElement, fieldName) {
                let hasError = false;
                errorElement.textContent = errorElement.textContent || '';
                input.classList.remove('is-invalid');

                if (!input.value.trim()) {
                    errorElement.textContent = `Le champ ${fieldName} ne peut pas être vide.`;
                    input.classList.add('is-invalid');
                    hasError = true;
                }
                return hasError;
            }

            // Function to validate dateMatch (not in the past)
            function validateDateMatch() {
                dateMatchError.textContent = dateMatchError.textContent || '';
                dateMatchInput.classList.remove('is-invalid');

                if (dateMatchInput.value) {
                    const selectedDate = new Date(dateMatchInput.value);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0); // Reset time to midnight for comparison

                    if (selectedDate < today) {
                        dateMatchError.textContent = "La date du match ne peut pas être dans le passé.";
                        dateMatchInput.classList.add('is-invalid');
                        return true;
                    }
                }
                return false;
            }

            // Function to validate startTime and endTime
            function validateTimeRange() {
                endTimeError.textContent = endTimeError.textContent || '';
                endTimeInput.classList.remove('is-invalid');

                if (startTimeInput.value && endTimeInput.value) {
                    const startTime = new Date(`1970-01-01T${startTimeInput.value}:00`);
                    const endTime = new Date(`1970-01-01T${endTimeInput.value}:00`);

                    if (endTime <= startTime) {
                        endTimeError.textContent = "L'heure de fin doit être après l'heure de début.";
                        endTimeInput.classList.add('is-invalid');
                        return true;
                    }
                }
                return false;
            }

            // Real-time validation on input/change
            dateMatchInput.addEventListener('input', function () {
                validateField(dateMatchInput, dateMatchError, 'Date du Match');
                validateDateMatch();
            });

            startTimeInput.addEventListener('input', function () {
                validateField(startTimeInput, startTimeError, 'Heure de Début');
                validateTimeRange();
            });

            endTimeInput.addEventListener('input', function () {
                validateField(endTimeInput, endTimeError, 'Heure de Fin');
                validateTimeRange();
            });

            matchEntityInput.addEventListener('change', function () {
                validateField(matchEntityInput, matchEntityError, 'Match');
            });

            espaceSportifInput.addEventListener('change', function () {
                validateField(espaceSportifInput, espaceSportifError, 'Espace Sportif');
            });

            // Validate on form submission
            form.addEventListener('submit', function (event) {
                let hasError = false;

                // Validate all fields
                if (validateField(dateMatchInput, dateMatchError, 'Date du Match')) {
                    hasError = true;
                }
                if (validateField(startTimeInput, startTimeError, 'Heure de Début')) {
                    hasError = true;
                }
                if (validateField(endTimeInput, endTimeError, 'Heure de Fin')) {
                    hasError = true;
                }
                if (validateField(matchEntityInput, matchEntityError, 'Match')) {
                    hasError = true;
                }
                if (validateField(espaceSportifInput, espaceSportifError, 'Espace Sportif')) {
                    hasError = true;
                }
                if (validateDateMatch()) {
                    hasError = true;
                }
                if (validateTimeRange()) {
                    hasError = true;
                }

                if (hasError) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            });
        });
    </script>
{% endblock %}