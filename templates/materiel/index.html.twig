{% extends 'base.html.twig' %}

{% block searchbar %}
    {% include 'searchbar.html.twig' %}
{% endblock %}

{% block title %}Liste des Mat√©riels{% endblock %}
{% block head %}
    {{ parent() }}
    <meta name="csrf-token" content="{{ csrf_token('slack_notify') }}">
{% endblock %}

{% block content %}
<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <div class="row">
            <div class="col-lg-8 col-md-6 mb-4 order-0">
                <div class="card h-100 shadow-sm">
                    <div class="d-flex align-items-end row">
                        <div class="col-sm-7">
                            <div class="card-body">
                                <h5 class="card-title text-primary">F√©licitations Cher Responsable Logistique ! üéâ</h5>
                                <p class="mb-4">
                                    Vous avez ajout√© <span class="fw-bold">{{ totalMateriels }}</span> mat√©riels aujourd'hui. Consultez votre profil pour les mises √† jour.
                                </p>
                                <a href="javascript:;" class="btn btn-sm btn-outline-primary">Voir Profil</a>
                            </div>
                        </div>
                        <div class="col-sm-5 text-center text-sm-left">
                            <div class="card-body pb-0 px-0 px-md-4">
                                <img
                                    src="{{ asset('img/illustrations/man-with-laptop-light.png') }}"
                                    height="140"
                                    alt="Illustration"
                                    data-app-dark-img="illustrations/man-with-laptop-dark.png"
                                    data-app-light-img="illustrations/man-with-laptop-light.png"
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-start justify-content-between mb-3">
                            <div class="avatar flex-shrink-0">
                                <img
                                    src="{{ asset('img/icons/unicons/chart.png') }}"
                                    alt="Average per Type"
                                    class="rounded"
                                />
                            </div>
                        </div>
                        <span class="fw-semibold d-block mb-1">Moyenne par Type</span>
                        <h3 class="card-title mb-2">{{ typeDistribution|length > 0 ? (totalMateriels / typeDistribution|length)|round(1) : 0 }}</h3>
                        <small class="text-muted">Mat√©riels par type</small>
                    </div>
                </div>
            </div>
        </div>

        {% block widgets %}
            <div class="row">
                <div class="col-lg-3 col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="card-title d-flex align-items-start justify-content-between">
                                <div class="avatar flex-shrink-0">
                                    <span class="avatar-initial rounded bg-label-primary p-2">
                                        <i class="bx bx-cube fs-4"></i>
                                    </span>
                                </div>
                            </div>
                            <span class="fw-semibold d-block mb-1">Total Mat√©riels</span>
                            <h3 class="card-title mb-2">{{ totalMateriels }}</h3>
                            <small class="text-success fw-semibold"><i class="bx bx-up-arrow-alt"></i> Mis √† jour aujourd'hui</small>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="card-title d-flex align-items-start justify-content-between">
                                <div class="avatar flex-shrink-0">
                                    <span class="avatar-initial rounded bg-label-info p-2">
                                        <i class="bx bx-category fs-4"></i>
                                    </span>
                                </div>
                            </div>
                            <span class="fw-semibold d-block mb-1">Types uniques</span>
                            <h3 class="card-title mb-2">{{ typeDistribution|length }}</h3>
                            <small class="text-muted">Cat√©gories de mat√©riel</small>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="card-title d-flex align-items-start justify-content-between">
                                <div class="avatar flex-shrink-0">
                                    <span class="avatar-initial rounded bg-label-success p-2">
                                        <i class="bx bx-check-circle fs-4"></i>
                                    </span>
                                </div>
                            </div>
                            <span class="fw-semibold d-block mb-1">Mat√©riels neufs</span>
                            <h3 class="card-title mb-2">{{ stateDistribution['NEUF'] ?? 0 }}</h3>
                            <small class="text-muted">En parfait √©tat</small>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="card-title d-flex align-items-start justify-content-between">
                                <div class="avatar flex-shrink-0">
                                    <span class="avatar-initial rounded bg-label-warning p-2">
                                        <i class="bx bx-dollar fs-4"></i>
                                    </span>
                                </div>
                            </div>
                            <span class="fw-semibold d-block mb-1">Valeur totale</span>
                            <h3 class="card-title mb-2">{{ inventoryValue|number_format(2, ',', ' ') }} ‚Ç¨</h3>
                            <small class="text-muted">Valeur du stock</small>
                        </div>
                    </div>
                </div>
            </div>
        {% endblock %}
        <!-- Slack Notification Toast -->

        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
            <div id="slackNotificationToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                <div class="toast-header bg-success text-white">
                    <i class="bx bx-check-circle me-2"></i>
                    <strong class="me-auto">Notification envoy√©e</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    La notification Slack a √©t√© envoy√©e avec succ√®s !
                </div>
            </div>
        </div>

        <div class="modal fade" id="barcodeScannerModal" tabindex="-1" aria-labelledby="barcodeScannerModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="barcodeScannerModalLabel">Scanner Code-barres</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="scanner-container">
                            <div id="scanner-video"></div>
                            <div class="scanner-overlay"></div>
                        </div>
                        <div id="scanner-result">
                            <div class="placeholder-text">
                                <i class="bx bx-barcode"></i> Positionnez le code-barres dans le cadre
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                        <button type="button" class="btn btn-primary" onclick="resetScanner()">Nouveau scan</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="objectDetectionModal" tabindex="-1" aria-labelledby="objectDetectionModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="objectDetectionModalLabel">D√©tecter Objet</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <ul class="nav nav-tabs" id="detectionTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="webcam-tab" data-bs-toggle="tab" data-bs-target="#webcam-pane" type="button" role="tab" aria-controls="webcam-pane" aria-selected="true">Webcam</button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="upload-tab" data-bs-toggle="tab" data-bs-target="#upload-pane" type="button" role="tab" aria-controls="upload-pane" aria-selected="false">Upload Image</button>
                            </li>
                        </ul>
                        <div class="tab-content" id="detectionTabContent">
                            <div class="tab-pane fade show active" id="webcam-pane" role="tabpanel" aria-labelledby="webcam-tab">
                                <div class="scanner-container">
                                    <video id="webcam" autoplay playsinline style="width: 100%; height: auto;"></video>
                                    <canvas id="webcam-canvas" style="position: absolute; top: 0; left: 0;"></canvas>
                                </div>
                                <div id="detection-result" class="mt-3"></div>
                                <div id="captured-detections" class="mt-3"></div>
                            </div>
                            <div class="tab-pane fade" id="upload-pane" role="tabpanel" aria-labelledby="upload-tab">
                                <form id="upload-image-form" enctype="multipart/form-data">
                                    <div class="mb-3">
                                        <label for="image-upload" class="form-label">Choisir une image</label>
                                        <input type="file" class="form-control" id="image-upload" name="image" accept="image/*">
                                    </div>
                                    <button type="submit" class="btn btn-primary">Analyser</button>
                                </form>
                                <div id="upload-result" class="mt-3"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                        <button type="button" class="btn btn-primary" onclick="resetDetection()">R√©initialiser</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <h5 class="card-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <form class="d-flex" method="get" action="{{ path('app_materiel_index') }}">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bx bx-search"></i></span>
                            <input type="text" class="form-control" name="search" placeholder="Rechercher nom, type, √©tat..." value="{{ searchTerm }}">
                        </div>
                    </form>
                </div>

                <div class="d-flex align-items-center">
                    <div class="btn-group me-2">
                        <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#barcodeScannerModal">
                             <i class="bx bx-barcode me-1 fs-5"></i> Scanner
                        </button>
                    </div>
                    <div class="btn-group me-2">
                        <button type="button" class="btn btn-info me-2" data-bs-toggle="modal" data-bs-target="#objectDetectionModal">
                            <i class="bx bx-camera me-1 fs-5"></i> D√©tecter Objet
                        </button>
                    </div>
                    <div class="btn-group me-2">
                        <a href="{{ path('app_materiel_statistics') }}" class="btn btn-dark me-2">
                            <i class="bx bx-bar-chart-alt-2 me-1"></i> Statistiques
                        </a>
                    </div>
                    <div class="btn-group me-2">
                        <a href="{{ path('app_materiel_new') }}" class="btn btn-success me-2">
                            <i class="bx bx-plus me-1 fs-5"></i> Ajouter Mat√©riel
                        </a>
                    </div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-warning dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bx bx-download me-1 fs-5"></i> Exporter
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" style="max-height: 200px; overflow-y: auto;">
                        <li>
                            <a class="dropdown-item" href="{{ path('app_materiel_export_excel') }}">
                                <i class="bx bx-file me-1"></i> Excel
                            </a>
                        </li>
                        <li>
                        <a class="dropdown-item" href="{{ path('app_materiel_export_csv') }}">
                            <i class="bx bx-file me-1"></i> CSV
                        </a>
                        </li>
                        <li>
                        <a class="dropdown-item" href="{{ path('app_materiel_export_pdf') }}">
                            <i class="bx bx-file me-1"></i> PDF
                        </a>
                         </li>
                        </ul>
                    </div>
                </div>
            </h5>

            <div class="table-responsive text-nowrap">
                <table class="table" id="materielsTable">
                    <thead>
                        <tr>
                            <th>Image Du Mat√©riel</th>
                            <th>Nom</th>
                            <th>Type</th>
                            <th>Quantit√©</th>
                            <th>√âtat</th>
                            <th>Prix</th>
                            <th>Code-barres</th>
                            <th>Fournisseur</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for materiel in pagination %}
                            <tr class="{% if materiel.etat == 'ENDOMMAGE' %}materiel-endommage{% endif %}{% if materiel.quantite < 5 %} low-stock blinking{% endif %}"{% if materiel.quantite < 5 %} style="background-color: #ffb3b3 !important; color: #a30000 !important; animation: blink-pastel 1s linear infinite !important;"{% endif %}>
                                <td class="text-center align-middle">
                                    {% if materiel.image %}
                                        <img src="{{ asset('Uploads/materiels/' ~ materiel.image) }}" alt="{{ materiel.nom }}" class="rounded-circle mx-auto d-block" style="width: 45px; height: 45px; object-fit: cover;">
                                    {% else %}
                                        <img src="{{ asset('img/default-material.png') }}" alt="Image par d√©faut" class="rounded-circle mx-auto d-block" style="width: 45px; height: 45px; object-fit: cover;">
                                    {% endif %}
                                </td>
                                <td>{{ materiel.nom }}</td>
                                <td>
                                    <i class="bx bx-category me-1"></i>
                                    {{ materiel.type }}
                                </td>
                                <td>
                                    <i class="bx bx-package me-1"></i>
                                    {{ materiel.quantite }}
                                </td>
                                <td>
                                    <span class="badge {% if materiel.etat == 'NEUF' %}bg-success{% elseif materiel.etat == 'US√â' %}bg-warning{% else %}bg-danger{% endif %}"{% if materiel.quantite < 5 %} style="background: none !important; color: #a30000 !important; animation: none !important;"{% endif %}>
                                        <i class="bx {% if materiel.etat == 'NEUF' %}bx-check-circle{% elseif materiel.etat == 'US√â' %}bx-time{% else %}bx-error-circle{% endif %} me-1"></i>
                                        {{ materiel.etat }}
                                    </span>
                                </td>
                                <td>
                                    <i class="bx bx-euro me-1"></i>
                                    {{ materiel.prix|number_format(2, ',', ' ') }} ‚Ç¨
                                </td>
                                <td>
                                    <i class="bx bx-barcode me-1"></i>
                                    {{ materiel.barcode }}
                                </td>
                                <td>
                                    <i class="bx bx-store me-1"></i>
                                    {{ materiel.fournisseur ? materiel.fournisseur.nom : 'N/A' }}
                                </td>
                                <td>
                                    <div class="dropdown">
                                        <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                            <i class="bx bx-dots-vertical-rounded"></i>
                                        </button>
                                        <div class="dropdown-menu">
                                            <a class="dropdown-item" href="{{ path('app_materiel_show', {'id': materiel.id}) }}">
                                                <i class="bx bx-show me-1"></i> Voir
                                            </a>
                                            <a class="dropdown-item" href="{{ path('app_materiel_edit', {'id': materiel.id}) }}">
                                                <i class="bx bx-edit-alt me-1"></i> Modifier
                                            </a>
                                            {% if materiel.quantite < 5 %}
                                                <button type="button" class="dropdown-item notify-slack" data-material-id="{{ materiel.id }}">
                                                    <i class="bx bx-bell me-1"></i> Notifier Slack
                                                </button>
                                            {% endif %}
                                            <form method="post" action="{{ path('app_materiel_delete', {'id': materiel.id}) }}" onsubmit="return confirm('√ätes-vous s√ªr de vouloir supprimer ce mat√©riel ?');">
                                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ materiel.id) }}">
                                                <button type="submit" class="dropdown-item text-danger">
                                                    <i class="bx bx-trash me-1"></i> Supprimer
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="9" class="text-center">Aucun mat√©riel trouv√©</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            <div class="card-footer">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        {% if pagination.currentPageNumber > 1 %}
                            <li class="page-item">
                                <a class="page-link" href="{{ path('app_materiel_index', {'page': pagination.currentPageNumber - 1}) }}" aria-label="Previous">
                                    <i class="bx bx-chevron-left"></i>
                                </a>
                            </li>
                        {% endif %}
                        
                        {% for i in 1..pagination.getPageCount() %}
                            <li class="page-item {% if i == pagination.currentPageNumber %}active{% endif %}">
                                <a class="page-link" href="{{ path('app_materiel_index', {'page': i}) }}">{{ i }}</a>
                            </li>
                        {% endfor %}
                        
                        {% if pagination.currentPageNumber < pagination.getPageCount() %}
                            <li class="page-item">
                                <a class="page-link" href="{{ path('app_materiel_index', {'page': pagination.currentPageNumber + 1}) }}" aria-label="Next">
                                    <i class="bx bx-chevron-right"></i>
                                </a>
                            </li>
                        {% endif %}
                    </ul>
                </nav>
                <div class="text-center mt-2">
                    <small class="text-muted">
                        Page {{ pagination.currentPageNumber }} sur {{ pagination.getPageCount() }} |
                        Total Mat√©riels : {{ pagination.totalItemCount }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        console.log('AJAX search script loaded');
        const baseUrl = "{{ path('app_materiel_search') }}";
        console.log('Base search URL:', baseUrl);
        const input = document.querySelector('input[name="search"]');
        const tbody = document.querySelector('#materielsTable tbody');
        if (input && tbody) {
            let timeout;
            input.addEventListener('input', e => {
                clearTimeout(timeout);
                timeout = setTimeout(async () => {
                    const term = e.target.value.trim();
                    console.log('Recherche AJAX:', term);
                    try {
                        const res = await fetch(baseUrl + "?term=" + encodeURIComponent(term), {
                            headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' }
                        });
                        if (!res.ok) throw new Error(`HTTP status ${res.status}`);
                        const data = await res.json();
                        {% verbatim %}
                        tbody.innerHTML = data.length
                            ? data.map(m => `
                                <tr class="${m.etat === 'ENDOMMAGE' ? 'materiel-endommage' : ''} ${m.quantite < 5 ? 'low-stock' : ''}">
                                    <td class="text-center align-middle">
                                        <img src="${m.image ? '/Uploads/materiels/' + m.image : '/img/default-material.png'}" alt="${m.nom}" class="rounded-circle mx-auto d-block" style="width:45px;height:45px;object-fit:cover;">
                                    </td>
                                    <td>${m.nom}</td>
                                    <td><i class="bx bx-category me-1"></i>${m.type}</td>
                                    <td><i class="bx bx-package me-1"></i>${m.quantite}</td>
                                    <td><span class="badge ${m.etat === 'NEUF' ? 'bg-success' : m.etat === 'US√â' ? 'bg-warning' : 'bg-danger'}"><i class="bx ${m.etat === 'NEUF' ? 'bx-check-circle' : m.etat === 'US√â' ? 'bx-time' : 'bx-error-circle'} me-1"></i>${m.etat}</span></td>
                                    <td><i class="bx bx-euro me-1"></i>${parseFloat(m.prix).toFixed(2)} ‚Ç¨</td>
                                    <td><i class="bx bx-barcode me-1"></i>${m.barcode}</td>
                                    <td><i class="bx bx-store me-1"></i>${m.fournisseur || 'N/A'}</td>
                                    <td>
                                        <div class="dropdown">
                                            <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                                <i class="bx bx-dots-vertical-rounded"></i>
                                            </button>
                                            <div class="dropdown-menu">
                                                <a class="dropdown-item" href="/materiel/${m.id}">
                                                    <i class="bx bx-show me-1"></i> Voir
                                                </a>
                                                <a class="dropdown-item" href="/materiel/${m.id}/edit">
                                                    <i class="bx bx-edit-alt me-1"></i> Modifier
                                                </a>
                                                ${m.quantite < 5 ? `<button class="dropdown-item notify-slack" data-material-id="${m.id}"><i class="bx bx-bell me-1"></i> Notifier Slack</button>` : ''}
                                                <form method="post" action="/materiel/${m.id}" onsubmit="return confirm('√ätes-vous s√ªr de vouloir supprimer ce mat√©riel ?');">
                                                    <input type="hidden" name="_token" value="${m.deleteToken}">
                                                    <button type="submit" class="dropdown-item text-danger">
                                                        <i class="bx bx-trash me-1"></i> Supprimer
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            `).join('')
                            : `<tr><td colspan="9" class="text-center">Aucun r√©sultat</td></tr>`;
                        {% endverbatim %}
                    } catch (err) {
                        console.error('Erreur AJAX:', err);
                        tbody.innerHTML = `<tr><td colspan="9" class="text-center">Erreur lors de la recherche</td></tr>`;
                    }
                }, 300);
            });
        }

        // Slack notification handler - FIXED VERSION
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.notify-slack').forEach(button => {
            button.addEventListener('click', async function(e) {
            e.preventDefault();
            const materialId = this.dataset.materialId;
            const toast = new bootstrap.Toast(document.getElementById('slackNotificationToast'));
            const csrfTokenElement = document.querySelector('meta[name="csrf-token"]');

            if (!csrfTokenElement) {
                console.error('CSRF token meta tag is missing');
                alert('Error: Missing CSRF token. Please reload the page.');
                return;
            }

            try {
                const response = await fetch(`/materiel/${materialId}/notify-slack`, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-Token': csrfTokenElement.content,
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    console.error('Slack notification failed:', data);
                    alert(`Error: ${data.message || 'Unknown error'}`);
                    return;
                }
                
                toast.show();
            } catch (error) {
                console.error('Network error:', error);
                alert('Network error while sending notification');
            }
        });
    });
});

        const scannerModal = document.getElementById('barcodeScannerModal');
        scannerModal.addEventListener('shown.bs.modal', function () {
            initScanner('scanner-video', 'scanner-result');
        });
        scannerModal.addEventListener('hidden.bs.modal', function () {
            Quagga.stop();
            document.getElementById('scanner-result').innerHTML = '<div class="placeholder-text"><i class="bx bx-barcode"></i> Positionnez le code-barres dans le cadre</div>';
        });

        let stream = null;
        const webcam = document.getElementById('webcam');
        const canvas = document.getElementById('webcam-canvas');
        const detectionResult = document.getElementById('detection-result');
        let detectionInterval = null;

        async function startWebcam() {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: { ideal: 640 }, 
                        height: { ideal: 480 } 
                    } 
                });
                webcam.srcObject = stream;
                await webcam.play();
                canvas.width = webcam.videoWidth;
                canvas.height = webcam.videoHeight;
                detectionInterval = setInterval(captureAndDetect, 3000);
            } catch (err) {
                console.error('Erreur d\'acc√®s √† la webcam:', err);
                detectionResult.innerHTML = '<div class="alert alert-danger">Erreur d\'acc√®s √† la webcam</div>';
            }
        }

        async function captureAndDetect() {
            try {
                if (!webcam.videoWidth || !webcam.videoHeight) {
                    return;
                }

                const ctx = canvas.getContext('2d');
                ctx.drawImage(webcam, 0, 0, canvas.width, canvas.height);
                const imageData = canvas.toDataURL('image/jpeg', 0.5);

                detectionResult.innerHTML = '<div class="alert alert-info">Analyse en cours...</div>';

                const formData = new FormData();
                formData.append('image', imageData);

                const response = await fetch('{{ path('app_materiel_detect_object_webcam') }}', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Erreur serveur');
                }

                const data = await response.json();
                drawBoundingBoxes(data.predictions);

                if (data.predictions.length > 0) {
                    const snapshot = canvas.toDataURL('image/jpeg', 0.5);
                    const detectionItem = document.createElement('div');
                    detectionItem.className = 'detection-item mb-3';
                    detectionItem.innerHTML = `
                        <div class="card">
                            <img src="${snapshot}" class="card-img-top" alt="Captured detection" style="max-width: 200px;" />
                            <div class="card-body">
                                <ul class="list-unstyled">
                                    ${data.predictions.map(pred => `<li>${pred.label} (${(pred.confidence * 100).toFixed(2)}%)</li>`).join('')}
                                </ul>
                            </div>
                        </div>
                    `;
                    const capturedDetections = document.getElementById('captured-detections');
                    capturedDetections.prepend(detectionItem);

                    while (capturedDetections.children.length > 3) {
                        capturedDetections.removeChild(capturedDetections.lastChild);
                    }
                }

                detectionResult.innerHTML = `
                    <div class="alert alert-success">
                        <ul>
                            ${data.predictions.length ? data.predictions.map(pred => `
                                <li>${pred.label} (Confiance: ${(pred.confidence * 100).toFixed(2)}%)</li>
                            `).join('') : '<li>Aucun √©quipement d√©tect√©</li>'}
                        </ul>
                        ${data.suggestedType ? `
                            <a href="{{ path('app_materiel_new') }}?suggestedType=${data.suggestedType}" 
                               class="btn btn-sm btn-primary mt-2">
                                Cr√©er mat√©riel
                            </a>
                        ` : ''}
                    </div>
                `;
            } catch (error) {
                console.error('Detection error:', error);
                detectionResult.innerHTML = `
                    <div class="alert alert-danger">
                        Erreur lors de la d√©tection: ${error.message}
                    </div>
                `;
            }
        }

        function drawBoundingBoxes(predictions) {
            const ctx = canvas.getContext('2d');
            ctx.drawImage(webcam, 0, 0, canvas.width, canvas.height);

            predictions.forEach(pred => {
                ctx.beginPath();
                ctx.rect(
                    pred.x - pred.width / 2,
                    pred.y - pred.height / 2,
                    pred.width,
                    pred.height
                );
                ctx.lineWidth = 2;
                ctx.strokeStyle = 'red';
                ctx.fillStyle = 'rgba(255, 0, 0, 0.2)';
                ctx.stroke();
                ctx.fill();

                ctx.font = '14px Arial';
                ctx.fillStyle = 'white';
                ctx.fillText(
                    `${pred.label} (${(pred.confidence * 100).toFixed(2)}%)`,
                    pred.x - pred.width / 2,
                    pred.y - pred.height / 2 - 10
                );
            });
        }

        function stopWebcam() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            if (detectionInterval) {
                clearInterval(detectionInterval);
                detectionInterval = null;
            }
            if (webcam) {
                webcam.srcObject = null;
            }
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        document.getElementById('upload-image-form')?.addEventListener('submit', async function(e) {
            e.preventDefault();
            const uploadResult = document.getElementById('upload-result');
            const fileInput = document.getElementById('image-upload');
            const file = fileInput.files[0];

            if (!file) {
                uploadResult.innerHTML = '<div class="alert alert-danger">Veuillez s√©lectionner une image</div>';
                return;
            }

            try {
                uploadResult.innerHTML = '<div class="alert alert-info">Analyse en cours...</div>';

                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = async function() {
                    const base64Image = reader.result.split(',')[1];

                    const formData = new FormData();
                    formData.append('image', base64Image);

                    const response = await fetch('{{ path('app_materiel_analyze_image') }}', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error || 'Erreur serveur');
                    }

                    const data = await response.json();

                    uploadResult.innerHTML = `
                        <div class="alert alert-success">
                            <ul>
                                ${data.predictions.length ? data.predictions.map(pred => `
                                    <li>${pred.label} (Confiance: ${(pred.confidence * 100).toFixed(2)}%)</li>
                                `).join('') : '<li>Aucun √©quipement d√©tect√©</li>'}
                            </ul>
                            ${data.suggestedType ? `
                                <a href="{{ path('app_materiel_new') }}?suggestedType=${data.suggestedType}" 
                                   class="btn btn-sm btn-primary mt-2">
                                    Cr√©er mat√©riel
                                </a>
                            ` : ''}
                        </div>
                    `;
                };
                reader.onerror = function() {
                    throw new Error('Erreur lors de la lecture du fichier');
                };
            } catch (error) {
                console.error('Upload detection error:', error);
                uploadResult.innerHTML = `
                    <div class="alert alert-danger">
                        Erreur lors de l'analyse: ${error.message}
                    </div>
                `;
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            const objectTab = document.getElementById('webcam-tab');
            if (objectTab) {
                objectTab.addEventListener('shown.bs.tab', startWebcam);
            }
            const objectDetectionModal = document.getElementById('objectDetectionModal');
            if (objectDetectionModal) {
                objectDetectionModal.addEventListener('shown.bs.modal', function() {
                    const activeTab = document.querySelector('#detectionTabs .nav-link.active');
                    if (activeTab && activeTab.id === 'webcam-tab') {
                        startWebcam();
                    }
                });
            }
        });

        document.getElementById('objectDetectionModal')?.addEventListener('hidden.bs.modal', () => {
            stopWebcam();
            detectionResult.innerHTML = '';
            document.getElementById('upload-result').innerHTML = '';
            document.getElementById('image-upload').value = '';
            document.getElementById('captured-detections').innerHTML = '';
        });

        function resetScanner() {
            Quagga.stop();
            document.getElementById('scanner-result').innerHTML = '<div class="placeholder-text"><i class="bx bx-barcode"></i> Positionnez le code-barres dans le cadre</div>';
        }

        function resetDetection() {
            stopWebcam();
            detectionResult.innerHTML = '';
            document.getElementById('upload-result').innerHTML = '';
            document.getElementById('image-upload').value = '';
            document.getElementById('captured-detections').innerHTML = '';
            const activeTab = document.querySelector('#detectionTabs .nav-link.active');
            if (activeTab && activeTab.id === 'webcam-tab') {
                startWebcam();
            }
        }
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/low_quantity.css') }}">
    <style>
        @keyframes blink-pastel {
            0%, 100% { background-color: #ffb3b3; }
            50% { background-color: #ffdddd; }
        }
        tr.blinking, tr.blinking td {
            animation: blink-pastel 1s linear infinite !important;
        }
        .scanner-container {
            position: relative;
        }
        #webcam-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: auto;
        }
        .table#materielsTable th, .table#materielsTable td {
            width: auto;
        }
        .table#materielsTable th:first-child, .table#materielsTable td:first-child {
            width: 50px;
            text-align: center;
            padding: 2px;
            vertical-align: middle;
        }
        .materiel-endommage {
            background-color: #ffebee !important;
            animation: blinkRed 1s infinite;
        }
        .materiel-endommage td {
            background-color: #ffebee !important;
            border: 2px solid #f44336 !important;
        }
        .materiel-endommage:hover {
            background-color: #ffcdd2 !important;
        }
        .materiel-endommage:hover td {
            background-color: #ffcdd2 !important;
        }
        .table#materielsTable tbody tr:hover {
            background-color: rgba(0,0,0,.03);
            transition: background-color 0.2s ease;
        }
        .badge {
            padding: 0.5em 0.8em;
            font-weight: 500;
        }
        .btn-icon {
            padding: 0.25rem;
            line-height: 1;
        }
        @keyframes blinkRed {
            0% { background-color: #ffebee; border-color: #f44336; }
            50% { background-color: #f44336; border-color: #d32f2f; }
            100% { background-color: #ffebee; border-color: #f44336; }
        }
        .pagination {
            margin: 1rem 0;
        }
        .pagination .page-item .page-link {
            color: #566a7f;
            border: 1px solid #d9dee3;
            padding: 0.5rem 0.75rem;
            margin: 0 2px;
            border-radius: 0.375rem;
            transition: all 0.2s ease;
            background-color: #fff;
        }
        .pagination .page-item.active .page-link {
            background-color: #696cff;
            border-color: #696cff;
            color: #fff;
            box-shadow: 0 2px 4px rgba(105, 108, 255, 0.2);
        }
        .pagination .page-item .page-link:hover {
            background-color: #f5f5f9;
            border-color: #696cff;
            color: #696cff;
            transform: translateY(-1px);
        }
        .pagination .page-item.disabled .page-link {
            color: #a3a4cc;
            pointer-events: none;
            background-color: #fff;
            border-color: #d9dee3;
        }
        .card-footer {
            background-color: #fff;
            border-top: 1px solid #d9dee3;
            padding: 1rem;
        }
        .card-footer .text-center small {
            color: #566a7f;
            font-size: 0.875rem;
        }
        .low-stock {
            background-color: #fff0f0 !important;
            animation: pulseWarning 2s infinite;
        }
        .low-stock:hover {
            background-color: #ffe0e0 !important;
        }
        @keyframes pulseWarning {
            0% { background-color: #fff0f0; }
            50% { background-color: #ffd0d0; }
            100% { background-color: #fff0f0; }
        }
        .notify-slack {
            color: #e01e5a;
            transition: all 0.3s;
        }
        .notify-slack:hover {
            background-color: #f8f1f4;
            transform: scale(1.02);
        }
    </style>
{% endblock %}