{% extends 'base.html.twig' %}

{% block title %}Statistiques des Matériels{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/@iconscout/unicons@4.0.8/css/line.min.css">
{% endblock %}

{% block body %}
<h4 class="fw-bold py-3 mb-4">Statistiques des Matériels</h4>

<div class="row">
    <!-- Total Matériels -->
    <div class="col-lg-4 col-md-6 mb-4">
        <div class="card h-100">
            <div class="card-body">
                <div class="card-title d-flex align-items-start justify-content-between">
                    <div class="avatar flex-shrink-0">
                        <i class="uil uil-box text-primary" style="font-size: 2rem;"></i>
                    </div>
                </div>
                <span class="fw-semibold d-block mb-1">Total Matériels</span>
                <h3 class="card-title mb-2">{{ totalMateriels }}</h3>
                <small class="text-muted">Matériels enregistrés</small>
            </div>
        </div>
    </div>

    <!-- Types Uniques -->
    <div class="col-lg-4 col-md-6 mb-4">
        <div class="card h-100">
            <div class="card-body">
                <div class="card-title d-flex align-items-start justify-content-between">
                    <div class="avatar flex-shrink-0">
                        <i class="uil uil-grid text-primary" style="font-size: 2rem;"></i>
                    </div>
                </div>
                <span class="fw-semibold d-block mb-1">Types Uniques</span>
                <h3 class="card-title mb-2">{{ typesCount }}</h3>
                <small class="text-muted">Types de matériels distincts</small>
            </div>
        </div>
    </div>

    <!-- Couverture Barcode -->
    <div class="col-lg-4 col-md-6 mb-4">
        <div class="card h-100">
            <div class="card-body">
                <div class="card-title d-flex align-items-start justify-content-between">
                    <div class="avatar flex-shrink-0">
                        <i class="uil uil-barcode text-primary" style="font-size: 2rem;"></i>
                    </div>
                </div>
                <span class="fw-semibold d-block mb-1">Couverture Barcode</span>
                <h3 class="card-title mb-2">{{ materialsWithBarcode }}/{{ totalMateriels }}</h3>
                <small class="text-success fw-semibold">{{ barcodeCoverage|round(1) }}% Couverture</small>
            </div>
        </div>
    </div>

    <!-- Valeur de l'Inventaire -->
    <div class="col-lg-4 col-md-6 mb-4">
        <div class="card h-100">
            <div class="card-body">
                <div class="card-title d-flex align-items-start justify-content-between">
                    <div class="avatar flex-shrink-0">
                        <i class="uil uil-wallet text-primary" style="font-size: 2rem;"></i>
                    </div>
                </div>
                <span class="fw-semibold d-block mb-1">Valeur de l'Inventaire</span>
                <h3 class="card-title mb-2">{{ inventoryValue|number_format(2, '.', ',') }} €</h3>
                <small class="text-muted">Valeur totale de l'inventaire</small>
            </div>
        </div>
    </div>

    <!-- Longueur Moyenne Nom -->
    <div class="col-lg-4 col-md-6 mb-4">
        <div class="card h-100">
        <div class="card-body">
                <div class="card-title d-flex align-items-start justify-content-between">
                    <div class="avatar flex-shrink-0">
                        <i class="uil uil-text text-primary" style="font-size: 2rem;"></i>
                    </div>
                </div>
                <span class="fw-semibold d-block mb-1">Longueur Moyenne Nom</span>
                <h3 class="card-title mb-2">{{ averageNameLength|round(1) }} chars</h3>
                <small class="text-muted">Basé sur les noms des matériels</small>
            </div>
        </div>
    </div>

    <!-- Matériels avec État -->
    <div class="col-lg-4 col-md-6 mb-4">
        <div class="card h-100">
            <div class="card-body">
                <div class="card-title d-flex align-items-start justify-content-between">
                    <div class="avatar flex-shrink-0">
                        <i class="uil uil-check text-primary" style="font-size: 2rem;"></i>
                    </div>
                </div>
                <span class="fw-semibold d-block mb-1">Matériels avec État</span>
                <h3 class="card-title mb-2">
                    {{ stateDistribution|length ? (totalMateriels - (stateDistribution[''] ?? 0)) : 0 }}/{{ totalMateriels }}
                </h3>
                <small class="text-success fw-semibold">
                    {{ totalMateriels > 0 ? (((totalMateriels - (stateDistribution[''] ?? 0)) / totalMateriels) * 100)|round(1) : 0 }}% Couverture
                </small>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Type Distribution Chart (Chart.js) -->
    <div class="col-12 col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header"><h5 class="card-title m-0 me-2">Distribution des Types</h5></div>
            <div class="card-body">
                <canvas id="typeChartCanvas" class="w-100" style="max-height:300px;"></canvas>
                {% if typeDistribution|length > 0 %}
                {% else %}
                <p class="text-muted">Aucune donnée disponible.</p>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- State Distribution Chart (Chart.js) -->
    <div class="col-12 col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header"><h5 class="card-title m-0 me-2">Distribution des États</h5></div>
            <div class="card-body">
                <canvas id="stateChartCanvas" class="w-100" style="max-height:300px;"></canvas>
                {% if stateDistribution|length > 0 %}
                {% else %}
                <p class="text-muted">Aucune donnée disponible.</p>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- Top Matériels par Nom Table -->
    <div class="col-12 col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header"><h5 class="card-title m-0 me-2">Matériels par Longueur de Nom</h5></div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Matériel</th>
                                <th>Longueur Nom</th>
                                <th>Détails</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for material in topMaterialsByNameLength %}
                                <tr>
                                    <td>{{ material['nom'] }}</td>
                                    <td>{{ material['nameLength'] }} chars</td>
                                    <td>
                                        <a href="{{ path('app_materiel_showF', {'id': material['id']}) }}"
                                           class="btn btn-sm btn-outline-primary">Voir</a>
                                    </td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="3">Aucun matériel disponible.</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Matériels avec Barcode Table -->
    <div class="col-12 col-lg-6 mb-4">
        <div class="card h-100">
            <div class="card-header"><h5 class="card-title m-0 me-2">Matériels avec Barcode</h5></div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Matériel</th>
                                <th>Barcode</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for material in materialsWithBarcodeList %}
                                <tr>
                                    <td>{{ material.nom }}</td>
                                    <td>{{ material.barcode }}</td>
                                    <td>{{ material.type|default('N/A') }}</td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="3">Aucun matériel avec barcode.</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
    // Couleurs Sneat Bootstrap 5
    const sneatColors = [
        '#696cff', // primary
        '#71dd37', // success
        '#ffab00', // warning
        '#ff3e1d', // danger
        '#03c3ec', // info
        '#8592a3', // secondary
        '#e7e7ff', // light
        '#233446', // dark
        '#ffb400', // orange
        '#6f42c1', // purple
        '#00bfa6'  // teal
    ];
    // Couleurs d'état (vert, orange, rouge, gris)
    const statePalette = [
        '#71dd37', // neuf/success
        '#ffab00', // use/warning
        '#ff3e1d', // endommagé/danger
        '#8592a3'  // autre/secondary
    ];

            const typeData = {{ typeDistribution|json_encode|raw }};
            if (Object.keys(typeData).length) {
                // Génère les couleurs pour chaque label
                const typeLabels = Object.keys(typeData);
                const typeColors = typeLabels.map((_, i) => sneatColors[i % sneatColors.length]);
                const typeBorderColors = typeLabels.map((_, i) => sneatColors[i % sneatColors.length]);
                const ctxType = document.getElementById('typeChartCanvas').getContext('2d');
                new Chart(ctxType, {
                    type: 'bar',
                    data: {
                        labels: typeLabels,
                        datasets: [{
                            label: 'Nombre',
                            data: Object.values(typeData),
                            backgroundColor: typeColors,
                            borderColor: typeBorderColors,
                            borderWidth: 1
                        }]
                    },
                    options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } } }
                });
            }

            const stateData = {{ stateDistribution|json_encode|raw }};
            if (Object.keys(stateData).length) {
                // Génère les couleurs pour chaque label
                const stateLabels = Object.keys(stateData);
                const stateColors = stateLabels.map((_, i) => statePalette[i % statePalette.length]);
                const stateBorderColors = stateLabels.map((_, i) => statePalette[i % statePalette.length]);
                const ctxState = document.getElementById('stateChartCanvas').getContext('2d');
                new Chart(ctxState, {
                    type: 'bar',
                    data: {
                        labels: stateLabels,
                        datasets: [{
                            label: 'Nombre',
                            data: Object.values(stateData),
                            backgroundColor: stateColors,
                            borderColor: stateBorderColors,
                            borderWidth: 1
                        }]
                    },
                    options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } } }
                });
            }
        });
    </script>
{% endblock %}