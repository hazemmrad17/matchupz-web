(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/assets/js/dashboards-analytics-2fd4e8a3ada628d9432ae1359273ad26.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public/assets/js/dashboards-analytics-2fd4e8a3ada628d9432ae1359273ad26.js":
/*!***********************************************************************************!*\
  !*** ./public/assets/js/dashboards-analytics-2fd4e8a3ada628d9432ae1359273ad26.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Dashboard Analytics\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n(function () {\n  var cardColor, headingColor, axisColor, shadeColor, borderColor;\n  cardColor = config.colors.white;\n  headingColor = config.colors.headingColor;\n  axisColor = config.colors.axisColor;\n  borderColor = config.colors.borderColor; // Total Revenue Report Chart - Bar Chart\n  // --------------------------------------------------------------------\n\n  var totalRevenueChartEl = document.querySelector('#totalRevenueChart'),\n      totalRevenueChartOptions = {\n    series: [{\n      name: '2021',\n      data: [18, 7, 15, 29, 18, 12, 9]\n    }, {\n      name: '2020',\n      data: [-13, -18, -9, -14, -5, -17, -15]\n    }],\n    chart: {\n      height: 300,\n      stacked: true,\n      type: 'bar',\n      toolbar: {\n        show: false\n      }\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '33%',\n        borderRadius: 12,\n        startingShape: 'rounded',\n        endingShape: 'rounded'\n      }\n    },\n    colors: [config.colors.primary, config.colors.info],\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: 'smooth',\n      width: 6,\n      lineCap: 'round',\n      colors: [cardColor]\n    },\n    legend: {\n      show: true,\n      horizontalAlign: 'left',\n      position: 'top',\n      markers: {\n        height: 8,\n        width: 8,\n        radius: 12,\n        offsetX: -3\n      },\n      labels: {\n        colors: axisColor\n      },\n      itemMargin: {\n        horizontal: 10\n      }\n    },\n    grid: {\n      borderColor: borderColor,\n      padding: {\n        top: 0,\n        bottom: -8,\n        left: 20,\n        right: 20\n      }\n    },\n    xaxis: {\n      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      labels: {\n        style: {\n          fontSize: '13px',\n          colors: axisColor\n        }\n      },\n      axisTicks: {\n        show: false\n      },\n      axisBorder: {\n        show: false\n      }\n    },\n    yaxis: {\n      labels: {\n        style: {\n          fontSize: '13px',\n          colors: axisColor\n        }\n      }\n    },\n    responsive: [{\n      breakpoint: 1700,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '32%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 1580,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '35%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 1440,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '42%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 1300,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '48%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 1200,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '40%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 1040,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 11,\n            columnWidth: '48%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 991,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '30%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 840,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '35%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 768,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '28%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 640,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '32%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 576,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '37%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 480,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '45%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 420,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '52%'\n          }\n        }\n      }\n    }, {\n      breakpoint: 380,\n      options: {\n        plotOptions: {\n          bar: {\n            borderRadius: 10,\n            columnWidth: '60%'\n          }\n        }\n      }\n    }],\n    states: {\n      hover: {\n        filter: {\n          type: 'none'\n        }\n      },\n      active: {\n        filter: {\n          type: 'none'\n        }\n      }\n    }\n  };\n\n  if (_typeof(totalRevenueChartEl) !== undefined && totalRevenueChartEl !== null) {\n    var totalRevenueChart = new ApexCharts(totalRevenueChartEl, totalRevenueChartOptions);\n    totalRevenueChart.render();\n  } // Growth Chart - Radial Bar Chart\n  // --------------------------------------------------------------------\n\n\n  var growthChartEl = document.querySelector('#growthChart'),\n      growthChartOptions = {\n    series: [78],\n    labels: ['Growth'],\n    chart: {\n      height: 240,\n      type: 'radialBar'\n    },\n    plotOptions: {\n      radialBar: {\n        size: 150,\n        offsetY: 10,\n        startAngle: -150,\n        endAngle: 150,\n        hollow: {\n          size: '55%'\n        },\n        track: {\n          background: cardColor,\n          strokeWidth: '100%'\n        },\n        dataLabels: {\n          name: {\n            offsetY: 15,\n            color: headingColor,\n            fontSize: '15px',\n            fontWeight: '600',\n            fontFamily: 'Public Sans'\n          },\n          value: {\n            offsetY: -25,\n            color: headingColor,\n            fontSize: '22px',\n            fontWeight: '500',\n            fontFamily: 'Public Sans'\n          }\n        }\n      }\n    },\n    colors: [config.colors.primary],\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        shadeIntensity: 0.5,\n        gradientToColors: [config.colors.primary],\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.6,\n        stops: [30, 70, 100]\n      }\n    },\n    stroke: {\n      dashArray: 5\n    },\n    grid: {\n      padding: {\n        top: -35,\n        bottom: -10\n      }\n    },\n    states: {\n      hover: {\n        filter: {\n          type: 'none'\n        }\n      },\n      active: {\n        filter: {\n          type: 'none'\n        }\n      }\n    }\n  };\n\n  if (_typeof(growthChartEl) !== undefined && growthChartEl !== null) {\n    var growthChart = new ApexCharts(growthChartEl, growthChartOptions);\n    growthChart.render();\n  } // Profit Report Line Chart\n  // --------------------------------------------------------------------\n\n\n  var profileReportChartEl = document.querySelector('#profileReportChart'),\n      profileReportChartConfig = {\n    chart: {\n      height: 80,\n      // width: 175,\n      type: 'line',\n      toolbar: {\n        show: false\n      },\n      dropShadow: {\n        enabled: true,\n        top: 10,\n        left: 5,\n        blur: 3,\n        color: config.colors.warning,\n        opacity: 0.15\n      },\n      sparkline: {\n        enabled: true\n      }\n    },\n    grid: {\n      show: false,\n      padding: {\n        right: 8\n      }\n    },\n    colors: [config.colors.warning],\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      width: 5,\n      curve: 'smooth'\n    },\n    series: [{\n      data: [110, 270, 145, 245, 205, 285]\n    }],\n    xaxis: {\n      show: false,\n      lines: {\n        show: false\n      },\n      labels: {\n        show: false\n      },\n      axisBorder: {\n        show: false\n      }\n    },\n    yaxis: {\n      show: false\n    }\n  };\n\n  if (_typeof(profileReportChartEl) !== undefined && profileReportChartEl !== null) {\n    var profileReportChart = new ApexCharts(profileReportChartEl, profileReportChartConfig);\n    profileReportChart.render();\n  } // Order Statistics Chart\n  // --------------------------------------------------------------------\n\n\n  var chartOrderStatistics = document.querySelector('#orderStatisticsChart'),\n      orderChartConfig = {\n    chart: {\n      height: 165,\n      width: 130,\n      type: 'donut'\n    },\n    labels: ['Electronic', 'Sports', 'Decor', 'Fashion'],\n    series: [85, 15, 50, 50],\n    colors: [config.colors.primary, config.colors.secondary, config.colors.info, config.colors.success],\n    stroke: {\n      width: 5,\n      colors: cardColor\n    },\n    dataLabels: {\n      enabled: false,\n      formatter: function formatter(val, opt) {\n        return parseInt(val) + '%';\n      }\n    },\n    legend: {\n      show: false\n    },\n    grid: {\n      padding: {\n        top: 0,\n        bottom: 0,\n        right: 15\n      }\n    },\n    plotOptions: {\n      pie: {\n        donut: {\n          size: '75%',\n          labels: {\n            show: true,\n            value: {\n              fontSize: '1.5rem',\n              fontFamily: 'Public Sans',\n              color: headingColor,\n              offsetY: -15,\n              formatter: function formatter(val) {\n                return parseInt(val) + '%';\n              }\n            },\n            name: {\n              offsetY: 20,\n              fontFamily: 'Public Sans'\n            },\n            total: {\n              show: true,\n              fontSize: '0.8125rem',\n              color: axisColor,\n              label: 'Weekly',\n              formatter: function formatter(w) {\n                return '38%';\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  if (_typeof(chartOrderStatistics) !== undefined && chartOrderStatistics !== null) {\n    var statisticsChart = new ApexCharts(chartOrderStatistics, orderChartConfig);\n    statisticsChart.render();\n  } // Income Chart - Area chart\n  // --------------------------------------------------------------------\n\n\n  var incomeChartEl = document.querySelector('#incomeChart'),\n      incomeChartConfig = {\n    series: [{\n      data: [24, 21, 30, 22, 42, 26, 35, 29]\n    }],\n    chart: {\n      height: 215,\n      parentHeightOffset: 0,\n      parentWidthOffset: 0,\n      toolbar: {\n        show: false\n      },\n      type: 'area'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      width: 2,\n      curve: 'smooth'\n    },\n    legend: {\n      show: false\n    },\n    markers: {\n      size: 6,\n      colors: 'transparent',\n      strokeColors: 'transparent',\n      strokeWidth: 4,\n      discrete: [{\n        fillColor: config.colors.white,\n        seriesIndex: 0,\n        dataPointIndex: 7,\n        strokeColor: config.colors.primary,\n        strokeWidth: 2,\n        size: 6,\n        radius: 8\n      }],\n      hover: {\n        size: 7\n      }\n    },\n    colors: [config.colors.primary],\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shade: shadeColor,\n        shadeIntensity: 0.6,\n        opacityFrom: 0.5,\n        opacityTo: 0.25,\n        stops: [0, 95, 100]\n      }\n    },\n    grid: {\n      borderColor: borderColor,\n      strokeDashArray: 3,\n      padding: {\n        top: -20,\n        bottom: -8,\n        left: -10,\n        right: 8\n      }\n    },\n    xaxis: {\n      categories: ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: true,\n        style: {\n          fontSize: '13px',\n          colors: axisColor\n        }\n      }\n    },\n    yaxis: {\n      labels: {\n        show: false\n      },\n      min: 10,\n      max: 50,\n      tickAmount: 4\n    }\n  };\n\n  if (_typeof(incomeChartEl) !== undefined && incomeChartEl !== null) {\n    var incomeChart = new ApexCharts(incomeChartEl, incomeChartConfig);\n    incomeChart.render();\n  } // Expenses Mini Chart - Radial Chart\n  // --------------------------------------------------------------------\n\n\n  var weeklyExpensesEl = document.querySelector('#expensesOfWeek'),\n      weeklyExpensesConfig = {\n    series: [65],\n    chart: {\n      width: 60,\n      height: 60,\n      type: 'radialBar'\n    },\n    plotOptions: {\n      radialBar: {\n        startAngle: 0,\n        endAngle: 360,\n        strokeWidth: '8',\n        hollow: {\n          margin: 2,\n          size: '45%'\n        },\n        track: {\n          strokeWidth: '50%',\n          background: borderColor\n        },\n        dataLabels: {\n          show: true,\n          name: {\n            show: false\n          },\n          value: {\n            formatter: function formatter(val) {\n              return '$' + parseInt(val);\n            },\n            offsetY: 5,\n            color: '#697a8d',\n            fontSize: '13px',\n            show: true\n          }\n        }\n      }\n    },\n    fill: {\n      type: 'solid',\n      colors: config.colors.primary\n    },\n    stroke: {\n      lineCap: 'round'\n    },\n    grid: {\n      padding: {\n        top: -10,\n        bottom: -15,\n        left: -10,\n        right: -10\n      }\n    },\n    states: {\n      hover: {\n        filter: {\n          type: 'none'\n        }\n      },\n      active: {\n        filter: {\n          type: 'none'\n        }\n      }\n    }\n  };\n\n  if (_typeof(weeklyExpensesEl) !== undefined && weeklyExpensesEl !== null) {\n    var weeklyExpenses = new ApexCharts(weeklyExpensesEl, weeklyExpensesConfig);\n    weeklyExpenses.render();\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/assets/js/dashboards-analytics-2fd4e8a3ada628d9432ae1359273ad26.js\n");

/***/ })

/******/ })));