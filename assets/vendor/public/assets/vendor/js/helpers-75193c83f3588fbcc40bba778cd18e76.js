(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/assets/vendor/js/helpers-75193c83f3588fbcc40bba778cd18e76.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public/assets/vendor/js/helpers-75193c83f3588fbcc40bba778cd18e76.js":
/*!*****************************************************************************!*\
  !*** ./public/assets/vendor/js/helpers-75193c83f3588fbcc40bba778cd18e76.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n(function (e, a) {\n  for (var i in a) {\n    e[i] = a[i];\n  }\n})(window,\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) {\n      __webpack_require__.d(ns, key, function (key) {\n        return value[key];\n      }.bind(null, key));\n    }\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = \"./js/helpers.js\");\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  \"./js/helpers.js\":\n  /*!***********************!*\\\n    !*** ./js/helpers.js ***!\n    \\***********************/\n\n  /*! exports provided: Helpers */\n\n  /***/\n  function jsHelpersJs(module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"Helpers\\\", function() { return Helpers; });\\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\\n\\nfunction _iterableToArray(iter) { if (typeof Symbol !== \\\"undefined\\\" && iter[Symbol.iterator] != null || iter[\\\"@@iterator\\\"] != null) return Array.from(iter); }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \\\"undefined\\\" && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n// Constants\\nvar TRANS_EVENTS = ['transitionend', 'webkitTransitionEnd', 'oTransitionEnd'];\\nvar TRANS_PROPERTIES = ['transition', 'MozTransition', 'webkitTransition', 'WebkitTransition', 'OTransition'];\\nvar INLINE_STYLES = \\\"\\\\n.layout-menu-fixed .layout-navbar-full .layout-menu,\\\\n.layout-page {\\\\n  padding-top: {navbarHeight}px !important;\\\\n}\\\\n.content-wrapper {\\\\n  padding-bottom: {footerHeight}px !important;\\\\n}\\\"; // Guard\\n\\nfunction requiredParam(name) {\\n  throw new Error(\\\"Parameter required\\\".concat(name ? \\\": `\\\".concat(name, \\\"`\\\") : ''));\\n}\\n\\nvar Helpers = {\\n  // Root Element\\n  ROOT_EL: typeof window !== 'undefined' ? document.documentElement : null,\\n  // Large screens breakpoint\\n  LAYOUT_BREAKPOINT: 1200,\\n  // Resize delay in milliseconds\\n  RESIZE_DELAY: 200,\\n  menuPsScroll: null,\\n  mainMenu: null,\\n  // Internal variables\\n  _curStyle: null,\\n  _styleEl: null,\\n  _resizeTimeout: null,\\n  _resizeCallback: null,\\n  _transitionCallback: null,\\n  _transitionCallbackTimeout: null,\\n  _listeners: [],\\n  _initialized: false,\\n  _autoUpdate: false,\\n  _lastWindowHeight: 0,\\n  // *******************************************************************************\\n  // * Utilities\\n  // ---\\n  // Scroll To Active Menu Item\\n  _scrollToActive: function _scrollToActive() {\\n    var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\\n    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\\n    var layoutMenu = this.getLayoutMenu();\\n    if (!layoutMenu) return;\\n    var activeEl = layoutMenu.querySelector('li.menu-item.active:not(.open)');\\n\\n    if (activeEl) {\\n      // t = current time\\n      // b = start value\\n      // c = change in value\\n      // d = duration\\n      var easeInOutQuad = function easeInOutQuad(t, b, c, d) {\\n        t /= d / 2;\\n        if (t < 1) return c / 2 * t * t + b;\\n        t -= 1;\\n        return -c / 2 * (t * (t - 2) - 1) + b;\\n      };\\n\\n      var element = this.getLayoutMenu().querySelector('.menu-inner');\\n\\n      if (typeof activeEl === 'string') {\\n        activeEl = document.querySelector(activeEl);\\n      }\\n\\n      if (typeof activeEl !== 'number') {\\n        activeEl = activeEl.getBoundingClientRect().top + element.scrollTop;\\n      } // If active element's top position is less than 2/3 (66%) of menu height than do not scroll\\n\\n\\n      if (activeEl < parseInt(element.clientHeight * 2 / 3, 10)) return;\\n      var start = element.scrollTop;\\n      var change = activeEl - start - parseInt(element.clientHeight / 2, 10);\\n      var startDate = +new Date();\\n\\n      if (animate === true) {\\n        var animateScroll = function animateScroll() {\\n          var currentDate = +new Date();\\n          var currentTime = currentDate - startDate;\\n          var val = easeInOutQuad(currentTime, start, change, duration);\\n          element.scrollTop = val;\\n\\n          if (currentTime < duration) {\\n            requestAnimationFrame(animateScroll);\\n          } else {\\n            element.scrollTop = change;\\n          }\\n        };\\n\\n        animateScroll();\\n      } else {\\n        element.scrollTop = change;\\n      }\\n    }\\n  },\\n  // ---\\n  // Add classes\\n  _addClass: function _addClass(cls) {\\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.ROOT_EL;\\n\\n    if (el.length !== undefined) {\\n      // Add classes to multiple elements\\n      el.forEach(function (e) {\\n        cls.split(' ').forEach(function (c) {\\n          return e.classList.add(c);\\n        });\\n      });\\n    } else {\\n      // Add classes to single element\\n      cls.split(' ').forEach(function (c) {\\n        return el.classList.add(c);\\n      });\\n    }\\n  },\\n  // ---\\n  // Remove classes\\n  _removeClass: function _removeClass(cls) {\\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.ROOT_EL;\\n\\n    if (el.length !== undefined) {\\n      // Remove classes to multiple elements\\n      el.forEach(function (e) {\\n        cls.split(' ').forEach(function (c) {\\n          return e.classList.remove(c);\\n        });\\n      });\\n    } else {\\n      // Remove classes to single element\\n      cls.split(' ').forEach(function (c) {\\n        return el.classList.remove(c);\\n      });\\n    }\\n  },\\n  // Toggle classes\\n  _toggleClass: function _toggleClass() {\\n    var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.ROOT_EL;\\n    var cls1 = arguments.length > 1 ? arguments[1] : undefined;\\n    var cls2 = arguments.length > 2 ? arguments[2] : undefined;\\n\\n    if (el.classList.contains(cls1)) {\\n      el.classList.replace(cls1, cls2);\\n    } else {\\n      el.classList.replace(cls2, cls1);\\n    }\\n  },\\n  // ---\\n  // Has class\\n  _hasClass: function _hasClass(cls) {\\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.ROOT_EL;\\n    var result = false;\\n    cls.split(' ').forEach(function (c) {\\n      if (el.classList.contains(c)) result = true;\\n    });\\n    return result;\\n  },\\n  _findParent: function _findParent(el, cls) {\\n    if (el && el.tagName.toUpperCase() === 'BODY' || el.tagName.toUpperCase() === 'HTML') return null;\\n    el = el.parentNode;\\n\\n    while (el && el.tagName.toUpperCase() !== 'BODY' && !el.classList.contains(cls)) {\\n      el = el.parentNode;\\n    }\\n\\n    el = el && el.tagName.toUpperCase() !== 'BODY' ? el : null;\\n    return el;\\n  },\\n  // ---\\n  // Trigger window event\\n  _triggerWindowEvent: function _triggerWindowEvent(name) {\\n    if (typeof window === 'undefined') return;\\n\\n    if (document.createEvent) {\\n      var event;\\n\\n      if (typeof Event === 'function') {\\n        event = new Event(name);\\n      } else {\\n        event = document.createEvent('Event');\\n        event.initEvent(name, false, true);\\n      }\\n\\n      window.dispatchEvent(event);\\n    } else {\\n      window.fireEvent(\\\"on\\\".concat(name), document.createEventObject());\\n    }\\n  },\\n  // ---\\n  // Trigger event\\n  _triggerEvent: function _triggerEvent(name) {\\n    this._triggerWindowEvent(\\\"layout\\\".concat(name));\\n\\n    this._listeners.filter(function (listener) {\\n      return listener.event === name;\\n    }).forEach(function (listener) {\\n      return listener.callback.call(null);\\n    });\\n  },\\n  // ---\\n  // Update style\\n  _updateInlineStyle: function _updateInlineStyle() {\\n    var navbarHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\\n    var footerHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n\\n    if (!this._styleEl) {\\n      this._styleEl = document.createElement('style');\\n      this._styleEl.type = 'text/css';\\n      document.head.appendChild(this._styleEl);\\n    }\\n\\n    var newStyle = INLINE_STYLES.replace(/\\\\{navbarHeight\\\\}/gi, navbarHeight).replace(/\\\\{footerHeight\\\\}/gi, footerHeight);\\n\\n    if (this._curStyle !== newStyle) {\\n      this._curStyle = newStyle;\\n      this._styleEl.textContent = newStyle;\\n    }\\n  },\\n  // ---\\n  // Remove style\\n  _removeInlineStyle: function _removeInlineStyle() {\\n    if (this._styleEl) document.head.removeChild(this._styleEl);\\n    this._styleEl = null;\\n    this._curStyle = null;\\n  },\\n  // ---\\n  // Redraw layout menu (Safari bugfix)\\n  _redrawLayoutMenu: function _redrawLayoutMenu() {\\n    var layoutMenu = this.getLayoutMenu();\\n\\n    if (layoutMenu && layoutMenu.querySelector('.menu')) {\\n      var inner = layoutMenu.querySelector('.menu-inner');\\n      var scrollTop = inner.scrollTop;\\n      var pageScrollTop = document.documentElement.scrollTop;\\n      layoutMenu.style.display = 'none'; // layoutMenu.offsetHeight\\n\\n      layoutMenu.style.display = '';\\n      inner.scrollTop = scrollTop;\\n      document.documentElement.scrollTop = pageScrollTop;\\n      return true;\\n    }\\n\\n    return false;\\n  },\\n  // ---\\n  // Check for transition support\\n  _supportsTransitionEnd: function _supportsTransitionEnd() {\\n    if (window.QUnit) return false;\\n    var el = document.body || document.documentElement;\\n    if (!el) return false;\\n    var result = false;\\n    TRANS_PROPERTIES.forEach(function (evnt) {\\n      if (typeof el.style[evnt] !== 'undefined') result = true;\\n    });\\n    return result;\\n  },\\n  // ---\\n  // Calculate current navbar height\\n  _getNavbarHeight: function _getNavbarHeight() {\\n    var _this = this;\\n\\n    var layoutNavbar = this.getLayoutNavbar();\\n    if (!layoutNavbar) return 0;\\n    if (!this.isSmallScreen()) return layoutNavbar.getBoundingClientRect().height; // Needs some logic to get navbar height on small screens\\n\\n    var clonedEl = layoutNavbar.cloneNode(true);\\n    clonedEl.id = null;\\n    clonedEl.style.visibility = 'hidden';\\n    clonedEl.style.position = 'absolute';\\n    Array.prototype.slice.call(clonedEl.querySelectorAll('.collapse.show')).forEach(function (el) {\\n      return _this._removeClass('show', el);\\n    });\\n    layoutNavbar.parentNode.insertBefore(clonedEl, layoutNavbar);\\n    var navbarHeight = clonedEl.getBoundingClientRect().height;\\n    clonedEl.parentNode.removeChild(clonedEl);\\n    return navbarHeight;\\n  },\\n  // ---\\n  // Get current footer height\\n  _getFooterHeight: function _getFooterHeight() {\\n    var layoutFooter = this.getLayoutFooter();\\n    if (!layoutFooter) return 0;\\n    return layoutFooter.getBoundingClientRect().height;\\n  },\\n  // ---\\n  // Get animation duration of element\\n  _getAnimationDuration: function _getAnimationDuration(el) {\\n    var duration = window.getComputedStyle(el).transitionDuration;\\n    return parseFloat(duration) * (duration.indexOf('ms') !== -1 ? 1 : 1000);\\n  },\\n  // ---\\n  // Set menu hover state\\n  _setMenuHoverState: function _setMenuHoverState(hovered) {\\n    this[hovered ? '_addClass' : '_removeClass']('layout-menu-hover');\\n  },\\n  // ---\\n  // Toggle collapsed\\n  _setCollapsed: function _setCollapsed(collapsed) {\\n    var _this2 = this;\\n\\n    if (this.isSmallScreen()) {\\n      if (collapsed) {\\n        this._removeClass('layout-menu-expanded');\\n      } else {\\n        setTimeout(function () {\\n          _this2._addClass('layout-menu-expanded');\\n        }, this._redrawLayoutMenu() ? 5 : 0);\\n      }\\n    }\\n  },\\n  // ---\\n  // Add layout sivenav toggle animationEnd event\\n  _bindLayoutAnimationEndEvent: function _bindLayoutAnimationEndEvent(modifier, cb) {\\n    var _this3 = this;\\n\\n    var menu = this.getMenu();\\n    var duration = menu ? this._getAnimationDuration(menu) + 50 : 0;\\n\\n    if (!duration) {\\n      modifier.call(this);\\n      cb.call(this);\\n      return;\\n    }\\n\\n    this._transitionCallback = function (e) {\\n      if (e.target !== menu) return;\\n\\n      _this3._unbindLayoutAnimationEndEvent();\\n\\n      cb.call(_this3);\\n    };\\n\\n    TRANS_EVENTS.forEach(function (e) {\\n      menu.addEventListener(e, _this3._transitionCallback, false);\\n    });\\n    modifier.call(this);\\n    this._transitionCallbackTimeout = setTimeout(function () {\\n      _this3._transitionCallback.call(_this3, {\\n        target: menu\\n      });\\n    }, duration);\\n  },\\n  // ---\\n  // Remove layout sivenav toggle animationEnd event\\n  _unbindLayoutAnimationEndEvent: function _unbindLayoutAnimationEndEvent() {\\n    var _this4 = this;\\n\\n    var menu = this.getMenu();\\n\\n    if (this._transitionCallbackTimeout) {\\n      clearTimeout(this._transitionCallbackTimeout);\\n      this._transitionCallbackTimeout = null;\\n    }\\n\\n    if (menu && this._transitionCallback) {\\n      TRANS_EVENTS.forEach(function (e) {\\n        menu.removeEventListener(e, _this4._transitionCallback, false);\\n      });\\n    }\\n\\n    if (this._transitionCallback) {\\n      this._transitionCallback = null;\\n    }\\n  },\\n  // ---\\n  // Bind delayed window resize event\\n  _bindWindowResizeEvent: function _bindWindowResizeEvent() {\\n    var _this5 = this;\\n\\n    this._unbindWindowResizeEvent();\\n\\n    var cb = function cb() {\\n      if (_this5._resizeTimeout) {\\n        clearTimeout(_this5._resizeTimeout);\\n        _this5._resizeTimeout = null;\\n      }\\n\\n      _this5._triggerEvent('resize');\\n    };\\n\\n    this._resizeCallback = function () {\\n      if (_this5._resizeTimeout) clearTimeout(_this5._resizeTimeout);\\n      _this5._resizeTimeout = setTimeout(cb, _this5.RESIZE_DELAY);\\n    };\\n\\n    window.addEventListener('resize', this._resizeCallback, false);\\n  },\\n  // ---\\n  // Unbind delayed window resize event\\n  _unbindWindowResizeEvent: function _unbindWindowResizeEvent() {\\n    if (this._resizeTimeout) {\\n      clearTimeout(this._resizeTimeout);\\n      this._resizeTimeout = null;\\n    }\\n\\n    if (this._resizeCallback) {\\n      window.removeEventListener('resize', this._resizeCallback, false);\\n      this._resizeCallback = null;\\n    }\\n  },\\n  _bindMenuMouseEvents: function _bindMenuMouseEvents() {\\n    var _this6 = this;\\n\\n    if (this._menuMouseEnter && this._menuMouseLeave && this._windowTouchStart) return;\\n    var layoutMenu = this.getLayoutMenu();\\n    if (!layoutMenu) return this._unbindMenuMouseEvents();\\n\\n    if (!this._menuMouseEnter) {\\n      this._menuMouseEnter = function () {\\n        if (_this6.isSmallScreen() || _this6._hasClass('layout-transitioning')) {\\n          return _this6._setMenuHoverState(false);\\n        }\\n\\n        return _this6._setMenuHoverState(false);\\n      };\\n\\n      layoutMenu.addEventListener('mouseenter', this._menuMouseEnter, false);\\n      layoutMenu.addEventListener('touchstart', this._menuMouseEnter, false);\\n    }\\n\\n    if (!this._menuMouseLeave) {\\n      this._menuMouseLeave = function () {\\n        _this6._setMenuHoverState(false);\\n      };\\n\\n      layoutMenu.addEventListener('mouseleave', this._menuMouseLeave, false);\\n    }\\n\\n    if (!this._windowTouchStart) {\\n      this._windowTouchStart = function (e) {\\n        if (!e || !e.target || !_this6._findParent(e.target, '.layout-menu')) {\\n          _this6._setMenuHoverState(false);\\n        }\\n      };\\n\\n      window.addEventListener('touchstart', this._windowTouchStart, true);\\n    }\\n  },\\n  _unbindMenuMouseEvents: function _unbindMenuMouseEvents() {\\n    if (!this._menuMouseEnter && !this._menuMouseLeave && !this._windowTouchStart) return;\\n    var layoutMenu = this.getLayoutMenu();\\n\\n    if (this._menuMouseEnter) {\\n      if (layoutMenu) {\\n        layoutMenu.removeEventListener('mouseenter', this._menuMouseEnter, false);\\n        layoutMenu.removeEventListener('touchstart', this._menuMouseEnter, false);\\n      }\\n\\n      this._menuMouseEnter = null;\\n    }\\n\\n    if (this._menuMouseLeave) {\\n      if (layoutMenu) {\\n        layoutMenu.removeEventListener('mouseleave', this._menuMouseLeave, false);\\n      }\\n\\n      this._menuMouseLeave = null;\\n    }\\n\\n    if (this._windowTouchStart) {\\n      if (layoutMenu) {\\n        window.addEventListener('touchstart', this._windowTouchStart, true);\\n      }\\n\\n      this._windowTouchStart = null;\\n    }\\n\\n    this._setMenuHoverState(false);\\n  },\\n  // *******************************************************************************\\n  // * Methods\\n  scrollToActive: function scrollToActive() {\\n    var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\\n\\n    this._scrollToActive(animate);\\n  },\\n  // ---\\n  // Collapse / expand layout\\n  setCollapsed: function setCollapsed() {\\n    var _this7 = this;\\n\\n    var collapsed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : requiredParam('collapsed');\\n    var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\\n    var layoutMenu = this.getLayoutMenu();\\n    if (!layoutMenu) return;\\n\\n    this._unbindLayoutAnimationEndEvent();\\n\\n    if (animate && this._supportsTransitionEnd()) {\\n      this._addClass('layout-transitioning');\\n\\n      if (collapsed) this._setMenuHoverState(false);\\n\\n      this._bindLayoutAnimationEndEvent(function () {\\n        // Collapse / Expand\\n        if (_this7.isSmallScreen) _this7._setCollapsed(collapsed);\\n      }, function () {\\n        _this7._removeClass('layout-transitioning');\\n\\n        _this7._triggerWindowEvent('resize');\\n\\n        _this7._triggerEvent('toggle');\\n\\n        _this7._setMenuHoverState(false);\\n      });\\n    } else {\\n      this._addClass('layout-no-transition');\\n\\n      if (collapsed) this._setMenuHoverState(false); // Collapse / Expand\\n\\n      this._setCollapsed(collapsed);\\n\\n      setTimeout(function () {\\n        _this7._removeClass('layout-no-transition');\\n\\n        _this7._triggerWindowEvent('resize');\\n\\n        _this7._triggerEvent('toggle');\\n\\n        _this7._setMenuHoverState(false);\\n      }, 1);\\n    }\\n  },\\n  // ---\\n  // Toggle layout\\n  toggleCollapsed: function toggleCollapsed() {\\n    var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\\n    this.setCollapsed(!this.isCollapsed(), animate);\\n  },\\n  // ---\\n  // Set layout positioning\\n  setPosition: function setPosition() {\\n    var fixed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : requiredParam('fixed');\\n    var offcanvas = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : requiredParam('offcanvas');\\n\\n    this._removeClass('layout-menu-offcanvas layout-menu-fixed layout-menu-fixed-offcanvas');\\n\\n    if (!fixed && offcanvas) {\\n      this._addClass('layout-menu-offcanvas');\\n    } else if (fixed && !offcanvas) {\\n      this._addClass('layout-menu-fixed');\\n\\n      this._redrawLayoutMenu();\\n    } else if (fixed && offcanvas) {\\n      this._addClass('layout-menu-fixed-offcanvas');\\n\\n      this._redrawLayoutMenu();\\n    }\\n\\n    this.update();\\n  },\\n  // *******************************************************************************\\n  // * Getters\\n  getLayoutMenu: function getLayoutMenu() {\\n    return document.querySelector('.layout-menu');\\n  },\\n  getMenu: function getMenu() {\\n    var layoutMenu = this.getLayoutMenu();\\n    if (!layoutMenu) return null;\\n    return !this._hasClass('menu', layoutMenu) ? layoutMenu.querySelector('.menu') : layoutMenu;\\n  },\\n  getLayoutNavbar: function getLayoutNavbar() {\\n    return document.querySelector('.layout-navbar');\\n  },\\n  getLayoutFooter: function getLayoutFooter() {\\n    return document.querySelector('.content-footer');\\n  },\\n  // *******************************************************************************\\n  // * Update\\n  update: function update() {\\n    if (this.getLayoutNavbar() && (!this.isSmallScreen() && this.isLayoutNavbarFull() && this.isFixed() || this.isNavbarFixed()) || this.getLayoutFooter() && this.isFooterFixed()) {\\n      this._updateInlineStyle(this._getNavbarHeight(), this._getFooterHeight());\\n    }\\n\\n    this._bindMenuMouseEvents();\\n  },\\n  setAutoUpdate: function setAutoUpdate() {\\n    var _this8 = this;\\n\\n    var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : requiredParam('enable');\\n\\n    if (enable && !this._autoUpdate) {\\n      this.on('resize.Helpers:autoUpdate', function () {\\n        return _this8.update();\\n      });\\n      this._autoUpdate = true;\\n    } else if (!enable && this._autoUpdate) {\\n      this.off('resize.Helpers:autoUpdate');\\n      this._autoUpdate = false;\\n    }\\n  },\\n  // *******************************************************************************\\n  // * Tests\\n  isRtl: function isRtl() {\\n    return document.querySelector('body').getAttribute('dir') === 'rtl' || document.querySelector('html').getAttribute('dir') === 'rtl';\\n  },\\n  isMobileDevice: function isMobileDevice() {\\n    return typeof window.orientation !== 'undefined' || navigator.userAgent.indexOf('IEMobile') !== -1;\\n  },\\n  isSmallScreen: function isSmallScreen() {\\n    return (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) < this.LAYOUT_BREAKPOINT;\\n  },\\n  isLayoutNavbarFull: function isLayoutNavbarFull() {\\n    return !!document.querySelector('.layout-wrapper.layout-navbar-full');\\n  },\\n  isCollapsed: function isCollapsed() {\\n    if (this.isSmallScreen()) {\\n      return !this._hasClass('layout-menu-expanded');\\n    }\\n\\n    return this._hasClass('layout-menu-collapsed');\\n  },\\n  isFixed: function isFixed() {\\n    return this._hasClass('layout-menu-fixed layout-menu-fixed-offcanvas');\\n  },\\n  isNavbarFixed: function isNavbarFixed() {\\n    return this._hasClass('layout-navbar-fixed') || !this.isSmallScreen() && this.isFixed() && this.isLayoutNavbarFull();\\n  },\\n  isFooterFixed: function isFooterFixed() {\\n    return this._hasClass('layout-footer-fixed');\\n  },\\n  isLightStyle: function isLightStyle() {\\n    return document.documentElement.classList.contains('light-style');\\n  },\\n  // *******************************************************************************\\n  // * Events\\n  on: function on() {\\n    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : requiredParam('event');\\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : requiredParam('callback');\\n\\n    var _event$split = event.split('.'),\\n        _event$split2 = _slicedToArray(_event$split, 1),\\n        _event = _event$split2[0];\\n\\n    var _event$split3 = event.split('.'),\\n        _event$split4 = _toArray(_event$split3),\\n        namespace = _event$split4.slice(1); // let [_event, ...namespace] = event.split('.')\\n\\n\\n    namespace = namespace.join('.') || null;\\n\\n    this._listeners.push({\\n      event: _event,\\n      namespace: namespace,\\n      callback: callback\\n    });\\n  },\\n  off: function off() {\\n    var _this9 = this;\\n\\n    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : requiredParam('event');\\n\\n    var _event$split5 = event.split('.'),\\n        _event$split6 = _slicedToArray(_event$split5, 1),\\n        _event = _event$split6[0];\\n\\n    var _event$split7 = event.split('.'),\\n        _event$split8 = _toArray(_event$split7),\\n        namespace = _event$split8.slice(1);\\n\\n    namespace = namespace.join('.') || null;\\n\\n    this._listeners.filter(function (listener) {\\n      return listener.event === _event && listener.namespace === namespace;\\n    }).forEach(function (listener) {\\n      return _this9._listeners.splice(_this9._listeners.indexOf(listener), 1);\\n    });\\n  },\\n  // *******************************************************************************\\n  // * Life cycle\\n  init: function init() {\\n    var _this10 = this;\\n\\n    if (this._initialized) return;\\n    this._initialized = true; // Initialize `style` element\\n\\n    this._updateInlineStyle(0); // Bind window resize event\\n\\n\\n    this._bindWindowResizeEvent(); // Bind init event\\n\\n\\n    this.off('init._Helpers');\\n    this.on('init._Helpers', function () {\\n      _this10.off('resize._Helpers:redrawMenu');\\n\\n      _this10.on('resize._Helpers:redrawMenu', function () {\\n        // eslint-disable-next-line no-unused-expressions\\n        _this10.isSmallScreen() && !_this10.isCollapsed() && _this10._redrawLayoutMenu();\\n      }); // Force repaint in IE 10\\n\\n\\n      if (typeof document.documentMode === 'number' && document.documentMode < 11) {\\n        _this10.off('resize._Helpers:ie10RepaintBody');\\n\\n        _this10.on('resize._Helpers:ie10RepaintBody', function () {\\n          if (_this10.isFixed()) return;\\n          var scrollTop = document.documentElement.scrollTop;\\n          document.body.style.display = 'none'; // document.body.offsetHeight\\n\\n          document.body.style.display = 'block';\\n          document.documentElement.scrollTop = scrollTop;\\n        });\\n      }\\n    });\\n\\n    this._triggerEvent('init');\\n  },\\n  destroy: function destroy() {\\n    var _this11 = this;\\n\\n    if (!this._initialized) return;\\n    this._initialized = false;\\n\\n    this._removeClass('layout-transitioning');\\n\\n    this._removeInlineStyle();\\n\\n    this._unbindLayoutAnimationEndEvent();\\n\\n    this._unbindWindowResizeEvent();\\n\\n    this._unbindMenuMouseEvents();\\n\\n    this.setAutoUpdate(false);\\n    this.off('init._Helpers'); // Remove all listeners except `init`\\n\\n    this._listeners.filter(function (listener) {\\n      return listener.event !== 'init';\\n    }).forEach(function (listener) {\\n      return _this11._listeners.splice(_this11._listeners.indexOf(listener), 1);\\n    });\\n  },\\n  // ---\\n  // Init Password Toggle\\n  initPasswordToggle: function initPasswordToggle() {\\n    var toggler = document.querySelectorAll('.form-password-toggle i');\\n\\n    if (typeof toggler !== 'undefined' && toggler !== null) {\\n      toggler.forEach(function (el) {\\n        el.addEventListener('click', function (e) {\\n          e.preventDefault();\\n          var formPasswordToggle = el.closest('.form-password-toggle');\\n          var formPasswordToggleIcon = formPasswordToggle.querySelector('i');\\n          var formPasswordToggleInput = formPasswordToggle.querySelector('input');\\n\\n          if (formPasswordToggleInput.getAttribute('type') === 'text') {\\n            formPasswordToggleInput.setAttribute('type', 'password');\\n            formPasswordToggleIcon.classList.replace('bx-show', 'bx-hide');\\n          } else if (formPasswordToggleInput.getAttribute('type') === 'password') {\\n            formPasswordToggleInput.setAttribute('type', 'text');\\n            formPasswordToggleIcon.classList.replace('bx-hide', 'bx-show');\\n          }\\n        });\\n      });\\n    }\\n  },\\n  // ---\\n  // Init Speech To Text\\n  initSpeechToText: function initSpeechToText() {\\n    var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\\n    var speechToText = document.querySelectorAll('.speech-to-text');\\n\\n    if (SpeechRecognition !== undefined && SpeechRecognition !== null) {\\n      if (typeof speechToText !== 'undefined' && speechToText !== null) {\\n        var recognition = new SpeechRecognition();\\n        var toggler = document.querySelectorAll('.speech-to-text i');\\n        toggler.forEach(function (el) {\\n          var listening = false;\\n          el.addEventListener('click', function () {\\n            el.closest('.input-group').querySelector('.form-control').focus();\\n\\n            recognition.onspeechstart = function () {\\n              listening = true;\\n            };\\n\\n            if (listening === false) {\\n              recognition.start();\\n            }\\n\\n            recognition.onerror = function () {\\n              listening = false;\\n            };\\n\\n            recognition.onresult = function (event) {\\n              el.closest('.input-group').querySelector('.form-control').value = event.results[0][0].transcript;\\n            };\\n\\n            recognition.onspeechend = function () {\\n              listening = false;\\n              recognition.stop();\\n            };\\n          });\\n        });\\n      }\\n    }\\n  },\\n  // Ajax Call Promise\\n  ajaxCall: function ajaxCall(url) {\\n    return new Promise(function (resolve, reject) {\\n      var req = new XMLHttpRequest();\\n      req.open('GET', url);\\n\\n      req.onload = function () {\\n        return req.status === 200 ? resolve(req.response) : reject(Error(req.statusText));\\n      };\\n\\n      req.onerror = function (e) {\\n        return reject(Error(\\\"Network Error: \\\".concat(e)));\\n      };\\n\\n      req.send();\\n    });\\n  },\\n  // ---\\n  // SidebarToggle (Used in Apps)\\n  initSidebarToggle: function initSidebarToggle() {\\n    var sidebarToggler = document.querySelectorAll('[data-bs-toggle=\\\"sidebar\\\"]');\\n    sidebarToggler.forEach(function (el) {\\n      el.addEventListener('click', function () {\\n        var target = el.getAttribute('data-target');\\n        var overlay = el.getAttribute('data-overlay');\\n        var appOverlay = document.querySelectorAll('.app-overlay');\\n        var targetEl = document.querySelectorAll(target);\\n        targetEl.forEach(function (tel) {\\n          tel.classList.toggle('show');\\n\\n          if (typeof overlay !== 'undefined' && overlay !== null && overlay !== false && typeof appOverlay !== 'undefined') {\\n            if (tel.classList.contains('show')) {\\n              appOverlay[0].classList.add('show');\\n            } else {\\n              appOverlay[0].classList.remove('show');\\n            }\\n\\n            appOverlay[0].addEventListener('click', function (e) {\\n              e.currentTarget.classList.remove('show');\\n              tel.classList.remove('show');\\n            });\\n          }\\n        });\\n      });\\n    });\\n  }\\n}; // *******************************************************************************\\n// * Initialization\\n\\nif (typeof window !== 'undefined') {\\n  Helpers.init();\\n\\n  if (Helpers.isMobileDevice() && window.chrome) {\\n    document.documentElement.classList.add('layout-menu-100vh');\\n  } // Update layout after page load\\n\\n\\n  if (document.readyState === 'complete') Helpers.update();else document.addEventListener('DOMContentLoaded', function onContentLoaded() {\\n    Helpers.update();\\n    document.removeEventListener('DOMContentLoaded', onContentLoaded);\\n  });\\n} // ---\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./js/helpers.js\\n\");\n    /***/\n  }\n  /******/\n\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/assets/vendor/js/helpers-75193c83f3588fbcc40bba778cd18e76.js\n");

/***/ })

/******/ })));