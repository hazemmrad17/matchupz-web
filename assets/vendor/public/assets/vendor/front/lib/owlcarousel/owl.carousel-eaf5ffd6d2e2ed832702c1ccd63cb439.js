(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/assets/vendor/front/lib/owlcarousel/owl.carousel-eaf5ffd6d2e2ed832702c1ccd63cb439.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public/assets/vendor/front/lib/owlcarousel/owl.carousel-eaf5ffd6d2e2ed832702c1ccd63cb439.js":
/*!*****************************************************************************************************!*\
  !*** ./public/assets/vendor/front/lib/owlcarousel/owl.carousel-eaf5ffd6d2e2ed832702c1ccd63cb439.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\n * Owl Carousel v2.2.1\n * Copyright 2013-2017 David Deutsch\n * Licensed under  ()\n */\n\n/**\n * Owl carousel\n * @version 2.1.6\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n * @todo Lazy Load Icon\n * @todo prevent animationend bubling\n * @todo itemsScaleUp\n * @todo Test Zepto\n * @todo stagePadding calculate wrong active classes\n */\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates a carousel.\n   * @class The Owl Carousel.\n   * @public\n   * @param {HTMLElement|jQuery} element - The element to create the carousel for.\n   * @param {Object} [options] - The options\n   */\n  function Owl(element, options) {\n    /**\n     * Current settings for the carousel.\n     * @public\n     */\n    this.settings = null;\n    /**\n     * Current options set by the caller including defaults.\n     * @public\n     */\n\n    this.options = $.extend({}, Owl.Defaults, options);\n    /**\n     * Plugin element.\n     * @public\n     */\n\n    this.$element = $(element);\n    /**\n     * Proxied event handlers.\n     * @protected\n     */\n\n    this._handlers = {};\n    /**\n     * References to the running plugins of this carousel.\n     * @protected\n     */\n\n    this._plugins = {};\n    /**\n     * Currently suppressed events to prevent them from beeing retriggered.\n     * @protected\n     */\n\n    this._supress = {};\n    /**\n     * Absolute current position.\n     * @protected\n     */\n\n    this._current = null;\n    /**\n     * Animation speed in milliseconds.\n     * @protected\n     */\n\n    this._speed = null;\n    /**\n     * Coordinates of all items in pixel.\n     * @todo The name of this member is missleading.\n     * @protected\n     */\n\n    this._coordinates = [];\n    /**\n     * Current breakpoint.\n     * @todo Real media queries would be nice.\n     * @protected\n     */\n\n    this._breakpoint = null;\n    /**\n     * Current width of the plugin element.\n     */\n\n    this._width = null;\n    /**\n     * All real items.\n     * @protected\n     */\n\n    this._items = [];\n    /**\n     * All cloned items.\n     * @protected\n     */\n\n    this._clones = [];\n    /**\n     * Merge values of all items.\n     * @todo Maybe this could be part of a plugin.\n     * @protected\n     */\n\n    this._mergers = [];\n    /**\n     * Widths of all items.\n     */\n\n    this._widths = [];\n    /**\n     * Invalidated parts within the update process.\n     * @protected\n     */\n\n    this._invalidated = {};\n    /**\n     * Ordered list of workers for the update process.\n     * @protected\n     */\n\n    this._pipe = [];\n    /**\n     * Current state information for the drag operation.\n     * @todo #261\n     * @protected\n     */\n\n    this._drag = {\n      time: null,\n      target: null,\n      pointer: null,\n      stage: {\n        start: null,\n        current: null\n      },\n      direction: null\n    };\n    /**\n     * Current state information and their tags.\n     * @type {Object}\n     * @protected\n     */\n\n    this._states = {\n      current: {},\n      tags: {\n        'initializing': ['busy'],\n        'animating': ['busy'],\n        'dragging': ['interacting']\n      }\n    };\n    $.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) {\n      this._handlers[handler] = $.proxy(this[handler], this);\n    }, this));\n    $.each(Owl.Plugins, $.proxy(function (key, plugin) {\n      this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);\n    }, this));\n    $.each(Owl.Workers, $.proxy(function (priority, worker) {\n      this._pipe.push({\n        'filter': worker.filter,\n        'run': $.proxy(worker.run, this)\n      });\n    }, this));\n    this.setup();\n    this.initialize();\n  }\n  /**\n   * Default options for the carousel.\n   * @public\n   */\n\n\n  Owl.Defaults = {\n    items: 3,\n    loop: false,\n    center: false,\n    rewind: false,\n    mouseDrag: true,\n    touchDrag: true,\n    pullDrag: true,\n    freeDrag: false,\n    margin: 0,\n    stagePadding: 0,\n    merge: false,\n    mergeFit: true,\n    autoWidth: false,\n    startPosition: 0,\n    rtl: false,\n    smartSpeed: 250,\n    fluidSpeed: false,\n    dragEndSpeed: false,\n    responsive: {},\n    responsiveRefreshRate: 200,\n    responsiveBaseElement: window,\n    fallbackEasing: 'swing',\n    info: false,\n    nestedItemSelector: false,\n    itemElement: 'div',\n    stageElement: 'div',\n    refreshClass: 'owl-refresh',\n    loadedClass: 'owl-loaded',\n    loadingClass: 'owl-loading',\n    rtlClass: 'owl-rtl',\n    responsiveClass: 'owl-responsive',\n    dragClass: 'owl-drag',\n    itemClass: 'owl-item',\n    stageClass: 'owl-stage',\n    stageOuterClass: 'owl-stage-outer',\n    grabClass: 'owl-grab'\n  };\n  /**\n   * Enumeration for width.\n   * @public\n   * @readonly\n   * @enum {String}\n   */\n\n  Owl.Width = {\n    Default: 'default',\n    Inner: 'inner',\n    Outer: 'outer'\n  };\n  /**\n   * Enumeration for types.\n   * @public\n   * @readonly\n   * @enum {String}\n   */\n\n  Owl.Type = {\n    Event: 'event',\n    State: 'state'\n  };\n  /**\n   * Contains all registered plugins.\n   * @public\n   */\n\n  Owl.Plugins = {};\n  /**\n   * List of workers involved in the update process.\n   */\n\n  Owl.Workers = [{\n    filter: ['width', 'settings'],\n    run: function run() {\n      this._width = this.$element.width();\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      cache.current = this._items && this._items[this.relative(this._current)];\n    }\n  }, {\n    filter: ['items', 'settings'],\n    run: function run() {\n      this.$stage.children('.cloned').remove();\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var margin = this.settings.margin || '',\n          grid = !this.settings.autoWidth,\n          rtl = this.settings.rtl,\n          css = {\n        'width': 'auto',\n        'margin-left': rtl ? margin : '',\n        'margin-right': rtl ? '' : margin\n      };\n      !grid && this.$stage.children().css(css);\n      cache.css = css;\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,\n          merge = null,\n          iterator = this._items.length,\n          grid = !this.settings.autoWidth,\n          widths = [];\n      cache.items = {\n        merge: false,\n        width: width\n      };\n\n      while (iterator--) {\n        merge = this._mergers[iterator];\n        merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;\n        cache.items.merge = merge > 1 || cache.items.merge;\n        widths[iterator] = !grid ? this._items[iterator].width() : width * merge;\n      }\n\n      this._widths = widths;\n    }\n  }, {\n    filter: ['items', 'settings'],\n    run: function run() {\n      var clones = [],\n          items = this._items,\n          settings = this.settings,\n          // TODO: Should be computed from number of min width items in stage\n      view = Math.max(settings.items * 2, 4),\n          size = Math.ceil(items.length / 2) * 2,\n          repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,\n          append = '',\n          prepend = '';\n      repeat /= 2;\n\n      while (repeat--) {\n        // Switch to only using appended clones\n        clones.push(this.normalize(clones.length / 2, true));\n        append = append + items[clones[clones.length - 1]][0].outerHTML;\n        clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));\n        prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;\n      }\n\n      this._clones = clones;\n      $(append).addClass('cloned').appendTo(this.$stage);\n      $(prepend).addClass('cloned').prependTo(this.$stage);\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run() {\n      var rtl = this.settings.rtl ? 1 : -1,\n          size = this._clones.length + this._items.length,\n          iterator = -1,\n          previous = 0,\n          current = 0,\n          coordinates = [];\n\n      while (++iterator < size) {\n        previous = coordinates[iterator - 1] || 0;\n        current = this._widths[this.relative(iterator)] + this.settings.margin;\n        coordinates.push(previous + current * rtl);\n      }\n\n      this._coordinates = coordinates;\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run() {\n      var padding = this.settings.stagePadding,\n          coordinates = this._coordinates,\n          css = {\n        'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,\n        'padding-left': padding || '',\n        'padding-right': padding || ''\n      };\n      this.$stage.css(css);\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      var iterator = this._coordinates.length,\n          grid = !this.settings.autoWidth,\n          items = this.$stage.children();\n\n      if (grid && cache.items.merge) {\n        while (iterator--) {\n          cache.css.width = this._widths[this.relative(iterator)];\n          items.eq(iterator).css(cache.css);\n        }\n      } else if (grid) {\n        cache.css.width = cache.items.width;\n        items.css(cache.css);\n      }\n    }\n  }, {\n    filter: ['items'],\n    run: function run() {\n      this._coordinates.length < 1 && this.$stage.removeAttr('style');\n    }\n  }, {\n    filter: ['width', 'items', 'settings'],\n    run: function run(cache) {\n      cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;\n      cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));\n      this.reset(cache.current);\n    }\n  }, {\n    filter: ['position'],\n    run: function run() {\n      this.animate(this.coordinates(this._current));\n    }\n  }, {\n    filter: ['width', 'position', 'items', 'settings'],\n    run: function run() {\n      var rtl = this.settings.rtl ? 1 : -1,\n          padding = this.settings.stagePadding * 2,\n          begin = this.coordinates(this.current()) + padding,\n          end = begin + this.width() * rtl,\n          inner,\n          outer,\n          matches = [],\n          i,\n          n;\n\n      for (i = 0, n = this._coordinates.length; i < n; i++) {\n        inner = this._coordinates[i - 1] || 0;\n        outer = Math.abs(this._coordinates[i]) + padding * rtl;\n\n        if (this.op(inner, '<=', begin) && this.op(inner, '>', end) || this.op(outer, '<', begin) && this.op(outer, '>', end)) {\n          matches.push(i);\n        }\n      }\n\n      this.$stage.children('.active').removeClass('active');\n      this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');\n\n      if (this.settings.center) {\n        this.$stage.children('.center').removeClass('center');\n        this.$stage.children().eq(this.current()).addClass('center');\n      }\n    }\n  }];\n  /**\n   * Initializes the carousel.\n   * @protected\n   */\n\n  Owl.prototype.initialize = function () {\n    this.enter('initializing');\n    this.trigger('initialize');\n    this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);\n\n    if (this.settings.autoWidth && !this.is('pre-loading')) {\n      var imgs, nestedSelector, width;\n      imgs = this.$element.find('img');\n      nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;\n      width = this.$element.children(nestedSelector).width();\n\n      if (imgs.length && width <= 0) {\n        this.preloadAutoWidthImages(imgs);\n      }\n    }\n\n    this.$element.addClass(this.options.loadingClass); // create stage\n\n    this.$stage = $('<' + this.settings.stageElement + ' class=\"' + this.settings.stageClass + '\"/>').wrap('<div class=\"' + this.settings.stageOuterClass + '\"/>'); // append stage\n\n    this.$element.append(this.$stage.parent()); // append content\n\n    this.replace(this.$element.children().not(this.$stage.parent())); // check visibility\n\n    if (this.$element.is(':visible')) {\n      // update view\n      this.refresh();\n    } else {\n      // invalidate width\n      this.invalidate('width');\n    }\n\n    this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass); // register event handlers\n\n    this.registerEventHandlers();\n    this.leave('initializing');\n    this.trigger('initialized');\n  };\n  /**\n   * Setups the current settings.\n   * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\n   * @todo Support for media queries by using `matchMedia` would be nice.\n   * @public\n   */\n\n\n  Owl.prototype.setup = function () {\n    var viewport = this.viewport(),\n        overwrites = this.options.responsive,\n        match = -1,\n        settings = null;\n\n    if (!overwrites) {\n      settings = $.extend({}, this.options);\n    } else {\n      $.each(overwrites, function (breakpoint) {\n        if (breakpoint <= viewport && breakpoint > match) {\n          match = Number(breakpoint);\n        }\n      });\n      settings = $.extend({}, this.options, overwrites[match]);\n\n      if (typeof settings.stagePadding === 'function') {\n        settings.stagePadding = settings.stagePadding();\n      }\n\n      delete settings.responsive; // responsive class\n\n      if (settings.responsiveClass) {\n        this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\\\S+\\\\s', 'g'), '$1' + match));\n      }\n    }\n\n    this.trigger('change', {\n      property: {\n        name: 'settings',\n        value: settings\n      }\n    });\n    this._breakpoint = match;\n    this.settings = settings;\n    this.invalidate('settings');\n    this.trigger('changed', {\n      property: {\n        name: 'settings',\n        value: this.settings\n      }\n    });\n  };\n  /**\n   * Updates option logic if necessery.\n   * @protected\n   */\n\n\n  Owl.prototype.optionsLogic = function () {\n    if (this.settings.autoWidth) {\n      this.settings.stagePadding = false;\n      this.settings.merge = false;\n    }\n  };\n  /**\n   * Prepares an item before add.\n   * @todo Rename event parameter `content` to `item`.\n   * @protected\n   * @returns {jQuery|HTMLElement} - The item container.\n   */\n\n\n  Owl.prototype.prepare = function (item) {\n    var event = this.trigger('prepare', {\n      content: item\n    });\n\n    if (!event.data) {\n      event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item);\n    }\n\n    this.trigger('prepared', {\n      content: event.data\n    });\n    return event.data;\n  };\n  /**\n   * Updates the view.\n   * @public\n   */\n\n\n  Owl.prototype.update = function () {\n    var i = 0,\n        n = this._pipe.length,\n        filter = $.proxy(function (p) {\n      return this[p];\n    }, this._invalidated),\n        cache = {};\n\n    while (i < n) {\n      if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {\n        this._pipe[i].run(cache);\n      }\n\n      i++;\n    }\n\n    this._invalidated = {};\n    !this.is('valid') && this.enter('valid');\n  };\n  /**\n   * Gets the width of the view.\n   * @public\n   * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.\n   * @returns {Number} - The width of the view in pixel.\n   */\n\n\n  Owl.prototype.width = function (dimension) {\n    dimension = dimension || Owl.Width.Default;\n\n    switch (dimension) {\n      case Owl.Width.Inner:\n      case Owl.Width.Outer:\n        return this._width;\n\n      default:\n        return this._width - this.settings.stagePadding * 2 + this.settings.margin;\n    }\n  };\n  /**\n   * Refreshes the carousel primarily for adaptive purposes.\n   * @public\n   */\n\n\n  Owl.prototype.refresh = function () {\n    this.enter('refreshing');\n    this.trigger('refresh');\n    this.setup();\n    this.optionsLogic();\n    this.$element.addClass(this.options.refreshClass);\n    this.update();\n    this.$element.removeClass(this.options.refreshClass);\n    this.leave('refreshing');\n    this.trigger('refreshed');\n  };\n  /**\n   * Checks window `resize` event.\n   * @protected\n   */\n\n\n  Owl.prototype.onThrottledResize = function () {\n    window.clearTimeout(this.resizeTimer);\n    this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);\n  };\n  /**\n   * Checks window `resize` event.\n   * @protected\n   */\n\n\n  Owl.prototype.onResize = function () {\n    if (!this._items.length) {\n      return false;\n    }\n\n    if (this._width === this.$element.width()) {\n      return false;\n    }\n\n    if (!this.$element.is(':visible')) {\n      return false;\n    }\n\n    this.enter('resizing');\n\n    if (this.trigger('resize').isDefaultPrevented()) {\n      this.leave('resizing');\n      return false;\n    }\n\n    this.invalidate('width');\n    this.refresh();\n    this.leave('resizing');\n    this.trigger('resized');\n  };\n  /**\n   * Registers event handlers.\n   * @todo Check `msPointerEnabled`\n   * @todo #261\n   * @protected\n   */\n\n\n  Owl.prototype.registerEventHandlers = function () {\n    if ($.support.transition) {\n      this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));\n    }\n\n    if (this.settings.responsive !== false) {\n      this.on(window, 'resize', this._handlers.onThrottledResize);\n    }\n\n    if (this.settings.mouseDrag) {\n      this.$element.addClass(this.options.dragClass);\n      this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));\n      this.$stage.on('dragstart.owl.core selectstart.owl.core', function () {\n        return false;\n      });\n    }\n\n    if (this.settings.touchDrag) {\n      this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));\n      this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));\n    }\n  };\n  /**\n   * Handles `touchstart` and `mousedown` events.\n   * @todo Horizontal swipe threshold as option\n   * @todo #261\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onDragStart = function (event) {\n    var stage = null;\n\n    if (event.which === 3) {\n      return;\n    }\n\n    if ($.support.transform) {\n      stage = this.$stage.css('transform').replace(/.*\\(|\\)| /g, '').split(',');\n      stage = {\n        x: stage[stage.length === 16 ? 12 : 4],\n        y: stage[stage.length === 16 ? 13 : 5]\n      };\n    } else {\n      stage = this.$stage.position();\n      stage = {\n        x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,\n        y: stage.top\n      };\n    }\n\n    if (this.is('animating')) {\n      $.support.transform ? this.animate(stage.x) : this.$stage.stop();\n      this.invalidate('position');\n    }\n\n    this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');\n    this.speed(0);\n    this._drag.time = new Date().getTime();\n    this._drag.target = $(event.target);\n    this._drag.stage.start = stage;\n    this._drag.stage.current = stage;\n    this._drag.pointer = this.pointer(event);\n    $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));\n    $(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {\n      var delta = this.difference(this._drag.pointer, this.pointer(event));\n      $(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));\n\n      if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {\n        return;\n      }\n\n      event.preventDefault();\n      this.enter('dragging');\n      this.trigger('drag');\n    }, this));\n  };\n  /**\n   * Handles the `touchmove` and `mousemove` events.\n   * @todo #261\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onDragMove = function (event) {\n    var minimum = null,\n        maximum = null,\n        pull = null,\n        delta = this.difference(this._drag.pointer, this.pointer(event)),\n        stage = this.difference(this._drag.stage.start, delta);\n\n    if (!this.is('dragging')) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (this.settings.loop) {\n      minimum = this.coordinates(this.minimum());\n      maximum = this.coordinates(this.maximum() + 1) - minimum;\n      stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;\n    } else {\n      minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());\n      maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());\n      pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;\n      stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);\n    }\n\n    this._drag.stage.current = stage;\n    this.animate(stage.x);\n  };\n  /**\n   * Handles the `touchend` and `mouseup` events.\n   * @todo #261\n   * @todo Threshold for click event\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onDragEnd = function (event) {\n    var delta = this.difference(this._drag.pointer, this.pointer(event)),\n        stage = this._drag.stage.current,\n        direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';\n    $(document).off('.owl.core');\n    this.$element.removeClass(this.options.grabClass);\n\n    if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {\n      this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);\n      this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));\n      this.invalidate('position');\n      this.update();\n      this._drag.direction = direction;\n\n      if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {\n        this._drag.target.one('click.owl.core', function () {\n          return false;\n        });\n      }\n    }\n\n    if (!this.is('dragging')) {\n      return;\n    }\n\n    this.leave('dragging');\n    this.trigger('dragged');\n  };\n  /**\n   * Gets absolute position of the closest item for a coordinate.\n   * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\n   * @protected\n   * @param {Number} coordinate - The coordinate in pixel.\n   * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.\n   * @return {Number} - The absolute position of the closest item.\n   */\n\n\n  Owl.prototype.closest = function (coordinate, direction) {\n    var position = -1,\n        pull = 30,\n        width = this.width(),\n        coordinates = this.coordinates();\n\n    if (!this.settings.freeDrag) {\n      // check closest item\n      $.each(coordinates, $.proxy(function (index, value) {\n        // on a left pull, check on current index\n        if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {\n          position = index; // on a right pull, check on previous index\n          // to do so, subtract width from value and set position = index + 1\n        } else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {\n          position = index + 1;\n        } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] || value - width)) {\n          position = direction === 'left' ? index + 1 : index;\n        }\n\n        return position === -1;\n      }, this));\n    }\n\n    if (!this.settings.loop) {\n      // non loop boundries\n      if (this.op(coordinate, '>', coordinates[this.minimum()])) {\n        position = coordinate = this.minimum();\n      } else if (this.op(coordinate, '<', coordinates[this.maximum()])) {\n        position = coordinate = this.maximum();\n      }\n    }\n\n    return position;\n  };\n  /**\n   * Animates the stage.\n   * @todo #270\n   * @public\n   * @param {Number} coordinate - The coordinate in pixels.\n   */\n\n\n  Owl.prototype.animate = function (coordinate) {\n    var animate = this.speed() > 0;\n    this.is('animating') && this.onTransitionEnd();\n\n    if (animate) {\n      this.enter('animating');\n      this.trigger('translate');\n    }\n\n    if ($.support.transform3d && $.support.transition) {\n      this.$stage.css({\n        transform: 'translate3d(' + coordinate + 'px,0px,0px)',\n        transition: this.speed() / 1000 + 's'\n      });\n    } else if (animate) {\n      this.$stage.animate({\n        left: coordinate + 'px'\n      }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));\n    } else {\n      this.$stage.css({\n        left: coordinate + 'px'\n      });\n    }\n  };\n  /**\n   * Checks whether the carousel is in a specific state or not.\n   * @param {String} state - The state to check.\n   * @returns {Boolean} - The flag which indicates if the carousel is busy.\n   */\n\n\n  Owl.prototype.is = function (state) {\n    return this._states.current[state] && this._states.current[state] > 0;\n  };\n  /**\n   * Sets the absolute position of the current item.\n   * @public\n   * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.\n   * @returns {Number} - The absolute position of the current item.\n   */\n\n\n  Owl.prototype.current = function (position) {\n    if (position === undefined) {\n      return this._current;\n    }\n\n    if (this._items.length === 0) {\n      return undefined;\n    }\n\n    position = this.normalize(position);\n\n    if (this._current !== position) {\n      var event = this.trigger('change', {\n        property: {\n          name: 'position',\n          value: position\n        }\n      });\n\n      if (event.data !== undefined) {\n        position = this.normalize(event.data);\n      }\n\n      this._current = position;\n      this.invalidate('position');\n      this.trigger('changed', {\n        property: {\n          name: 'position',\n          value: this._current\n        }\n      });\n    }\n\n    return this._current;\n  };\n  /**\n   * Invalidates the given part of the update routine.\n   * @param {String} [part] - The part to invalidate.\n   * @returns {Array.<String>} - The invalidated parts.\n   */\n\n\n  Owl.prototype.invalidate = function (part) {\n    if ($.type(part) === 'string') {\n      this._invalidated[part] = true;\n      this.is('valid') && this.leave('valid');\n    }\n\n    return $.map(this._invalidated, function (v, i) {\n      return i;\n    });\n  };\n  /**\n   * Resets the absolute position of the current item.\n   * @public\n   * @param {Number} position - The absolute position of the new item.\n   */\n\n\n  Owl.prototype.reset = function (position) {\n    position = this.normalize(position);\n\n    if (position === undefined) {\n      return;\n    }\n\n    this._speed = 0;\n    this._current = position;\n    this.suppress(['translate', 'translated']);\n    this.animate(this.coordinates(position));\n    this.release(['translate', 'translated']);\n  };\n  /**\n   * Normalizes an absolute or a relative position of an item.\n   * @public\n   * @param {Number} position - The absolute or relative position to normalize.\n   * @param {Boolean} [relative=false] - Whether the given position is relative or not.\n   * @returns {Number} - The normalized position.\n   */\n\n\n  Owl.prototype.normalize = function (position, relative) {\n    var n = this._items.length,\n        m = relative ? 0 : this._clones.length;\n\n    if (!this.isNumeric(position) || n < 1) {\n      position = undefined;\n    } else if (position < 0 || position >= n + m) {\n      position = ((position - m / 2) % n + n) % n + m / 2;\n    }\n\n    return position;\n  };\n  /**\n   * Converts an absolute position of an item into a relative one.\n   * @public\n   * @param {Number} position - The absolute position to convert.\n   * @returns {Number} - The converted position.\n   */\n\n\n  Owl.prototype.relative = function (position) {\n    position -= this._clones.length / 2;\n    return this.normalize(position, true);\n  };\n  /**\n   * Gets the maximum position for the current item.\n   * @public\n   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n   * @returns {Number}\n   */\n\n\n  Owl.prototype.maximum = function (relative) {\n    var settings = this.settings,\n        maximum = this._coordinates.length,\n        iterator,\n        reciprocalItemsWidth,\n        elementWidth;\n\n    if (settings.loop) {\n      maximum = this._clones.length / 2 + this._items.length - 1;\n    } else if (settings.autoWidth || settings.merge) {\n      iterator = this._items.length;\n      reciprocalItemsWidth = this._items[--iterator].width();\n      elementWidth = this.$element.width();\n\n      while (iterator--) {\n        reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;\n\n        if (reciprocalItemsWidth > elementWidth) {\n          break;\n        }\n      }\n\n      maximum = iterator + 1;\n    } else if (settings.center) {\n      maximum = this._items.length - 1;\n    } else {\n      maximum = this._items.length - settings.items;\n    }\n\n    if (relative) {\n      maximum -= this._clones.length / 2;\n    }\n\n    return Math.max(maximum, 0);\n  };\n  /**\n   * Gets the minimum position for the current item.\n   * @public\n   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n   * @returns {Number}\n   */\n\n\n  Owl.prototype.minimum = function (relative) {\n    return relative ? 0 : this._clones.length / 2;\n  };\n  /**\n   * Gets an item at the specified relative position.\n   * @public\n   * @param {Number} [position] - The relative position of the item.\n   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n   */\n\n\n  Owl.prototype.items = function (position) {\n    if (position === undefined) {\n      return this._items.slice();\n    }\n\n    position = this.normalize(position, true);\n    return this._items[position];\n  };\n  /**\n   * Gets an item at the specified relative position.\n   * @public\n   * @param {Number} [position] - The relative position of the item.\n   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n   */\n\n\n  Owl.prototype.mergers = function (position) {\n    if (position === undefined) {\n      return this._mergers.slice();\n    }\n\n    position = this.normalize(position, true);\n    return this._mergers[position];\n  };\n  /**\n   * Gets the absolute positions of clones for an item.\n   * @public\n   * @param {Number} [position] - The relative position of the item.\n   * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.\n   */\n\n\n  Owl.prototype.clones = function (position) {\n    var odd = this._clones.length / 2,\n        even = odd + this._items.length,\n        map = function map(index) {\n      return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;\n    };\n\n    if (position === undefined) {\n      return $.map(this._clones, function (v, i) {\n        return map(i);\n      });\n    }\n\n    return $.map(this._clones, function (v, i) {\n      return v === position ? map(i) : null;\n    });\n  };\n  /**\n   * Sets the current animation speed.\n   * @public\n   * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.\n   * @returns {Number} - The current animation speed in milliseconds.\n   */\n\n\n  Owl.prototype.speed = function (speed) {\n    if (speed !== undefined) {\n      this._speed = speed;\n    }\n\n    return this._speed;\n  };\n  /**\n   * Gets the coordinate of an item.\n   * @todo The name of this method is missleanding.\n   * @public\n   * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.\n   * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.\n   */\n\n\n  Owl.prototype.coordinates = function (position) {\n    var multiplier = 1,\n        newPosition = position - 1,\n        coordinate;\n\n    if (position === undefined) {\n      return $.map(this._coordinates, $.proxy(function (coordinate, index) {\n        return this.coordinates(index);\n      }, this));\n    }\n\n    if (this.settings.center) {\n      if (this.settings.rtl) {\n        multiplier = -1;\n        newPosition = position + 1;\n      }\n\n      coordinate = this._coordinates[position];\n      coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;\n    } else {\n      coordinate = this._coordinates[newPosition] || 0;\n    }\n\n    coordinate = Math.ceil(coordinate);\n    return coordinate;\n  };\n  /**\n   * Calculates the speed for a translation.\n   * @protected\n   * @param {Number} from - The absolute position of the start item.\n   * @param {Number} to - The absolute position of the target item.\n   * @param {Number} [factor=undefined] - The time factor in milliseconds.\n   * @returns {Number} - The time in milliseconds for the translation.\n   */\n\n\n  Owl.prototype.duration = function (from, to, factor) {\n    if (factor === 0) {\n      return 0;\n    }\n\n    return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);\n  };\n  /**\n   * Slides to the specified item.\n   * @public\n   * @param {Number} position - The position of the item.\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   */\n\n\n  Owl.prototype.to = function (position, speed) {\n    var current = this.current(),\n        revert = null,\n        distance = position - this.relative(current),\n        direction = (distance > 0) - (distance < 0),\n        items = this._items.length,\n        minimum = this.minimum(),\n        maximum = this.maximum();\n\n    if (this.settings.loop) {\n      if (!this.settings.rewind && Math.abs(distance) > items / 2) {\n        distance += direction * -1 * items;\n      }\n\n      position = current + distance;\n      revert = ((position - minimum) % items + items) % items + minimum;\n\n      if (revert !== position && revert - distance <= maximum && revert - distance > 0) {\n        current = revert - distance;\n        position = revert;\n        this.reset(current);\n      }\n    } else if (this.settings.rewind) {\n      maximum += 1;\n      position = (position % maximum + maximum) % maximum;\n    } else {\n      position = Math.max(minimum, Math.min(maximum, position));\n    }\n\n    this.speed(this.duration(current, position, speed));\n    this.current(position);\n\n    if (this.$element.is(':visible')) {\n      this.update();\n    }\n  };\n  /**\n   * Slides to the next item.\n   * @public\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   */\n\n\n  Owl.prototype.next = function (speed) {\n    speed = speed || false;\n    this.to(this.relative(this.current()) + 1, speed);\n  };\n  /**\n   * Slides to the previous item.\n   * @public\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   */\n\n\n  Owl.prototype.prev = function (speed) {\n    speed = speed || false;\n    this.to(this.relative(this.current()) - 1, speed);\n  };\n  /**\n   * Handles the end of an animation.\n   * @protected\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Owl.prototype.onTransitionEnd = function (event) {\n    // if css2 animation then event object is undefined\n    if (event !== undefined) {\n      event.stopPropagation(); // Catch only owl-stage transitionEnd event\n\n      if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {\n        return false;\n      }\n    }\n\n    this.leave('animating');\n    this.trigger('translated');\n  };\n  /**\n   * Gets viewport width.\n   * @protected\n   * @return {Number} - The width in pixel.\n   */\n\n\n  Owl.prototype.viewport = function () {\n    var width;\n\n    if (this.options.responsiveBaseElement !== window) {\n      width = $(this.options.responsiveBaseElement).width();\n    } else if (window.innerWidth) {\n      width = window.innerWidth;\n    } else if (document.documentElement && document.documentElement.clientWidth) {\n      width = document.documentElement.clientWidth;\n    } else {\n      console.warn('Can not detect viewport width.');\n    }\n\n    return width;\n  };\n  /**\n   * Replaces the current content.\n   * @public\n   * @param {HTMLElement|jQuery|String} content - The new content.\n   */\n\n\n  Owl.prototype.replace = function (content) {\n    this.$stage.empty();\n    this._items = [];\n\n    if (content) {\n      content = content instanceof jQuery ? content : $(content);\n    }\n\n    if (this.settings.nestedItemSelector) {\n      content = content.find('.' + this.settings.nestedItemSelector);\n    }\n\n    content.filter(function () {\n      return this.nodeType === 1;\n    }).each($.proxy(function (index, item) {\n      item = this.prepare(item);\n      this.$stage.append(item);\n\n      this._items.push(item);\n\n      this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    }, this));\n    this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);\n    this.invalidate('items');\n  };\n  /**\n   * Adds an item.\n   * @todo Use `item` instead of `content` for the event arguments.\n   * @public\n   * @param {HTMLElement|jQuery|String} content - The item content to add.\n   * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.\n   */\n\n\n  Owl.prototype.add = function (content, position) {\n    var current = this.relative(this._current);\n    position = position === undefined ? this._items.length : this.normalize(position, true);\n    content = content instanceof jQuery ? content : $(content);\n    this.trigger('add', {\n      content: content,\n      position: position\n    });\n    content = this.prepare(content);\n\n    if (this._items.length === 0 || position === this._items.length) {\n      this._items.length === 0 && this.$stage.append(content);\n      this._items.length !== 0 && this._items[position - 1].after(content);\n\n      this._items.push(content);\n\n      this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    } else {\n      this._items[position].before(content);\n\n      this._items.splice(position, 0, content);\n\n      this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n    }\n\n    this._items[current] && this.reset(this._items[current].index());\n    this.invalidate('items');\n    this.trigger('added', {\n      content: content,\n      position: position\n    });\n  };\n  /**\n   * Removes an item by its position.\n   * @todo Use `item` instead of `content` for the event arguments.\n   * @public\n   * @param {Number} position - The relative position of the item to remove.\n   */\n\n\n  Owl.prototype.remove = function (position) {\n    position = this.normalize(position, true);\n\n    if (position === undefined) {\n      return;\n    }\n\n    this.trigger('remove', {\n      content: this._items[position],\n      position: position\n    });\n\n    this._items[position].remove();\n\n    this._items.splice(position, 1);\n\n    this._mergers.splice(position, 1);\n\n    this.invalidate('items');\n    this.trigger('removed', {\n      content: null,\n      position: position\n    });\n  };\n  /**\n   * Preloads images with auto width.\n   * @todo Replace by a more generic approach\n   * @protected\n   */\n\n\n  Owl.prototype.preloadAutoWidthImages = function (images) {\n    images.each($.proxy(function (i, element) {\n      this.enter('pre-loading');\n      element = $(element);\n      $(new Image()).one('load', $.proxy(function (e) {\n        element.attr('src', e.target.src);\n        element.css('opacity', 1);\n        this.leave('pre-loading');\n        !this.is('pre-loading') && !this.is('initializing') && this.refresh();\n      }, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));\n    }, this));\n  };\n  /**\n   * Destroys the carousel.\n   * @public\n   */\n\n\n  Owl.prototype.destroy = function () {\n    this.$element.off('.owl.core');\n    this.$stage.off('.owl.core');\n    $(document).off('.owl.core');\n\n    if (this.settings.responsive !== false) {\n      window.clearTimeout(this.resizeTimer);\n      this.off(window, 'resize', this._handlers.onThrottledResize);\n    }\n\n    for (var i in this._plugins) {\n      this._plugins[i].destroy();\n    }\n\n    this.$stage.children('.cloned').remove();\n    this.$stage.unwrap();\n    this.$stage.children().contents().unwrap();\n    this.$stage.children().unwrap();\n    this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\\\S+\\\\s', 'g'), '')).removeData('owl.carousel');\n  };\n  /**\n   * Operators to calculate right-to-left and left-to-right.\n   * @protected\n   * @param {Number} [a] - The left side operand.\n   * @param {String} [o] - The operator.\n   * @param {Number} [b] - The right side operand.\n   */\n\n\n  Owl.prototype.op = function (a, o, b) {\n    var rtl = this.settings.rtl;\n\n    switch (o) {\n      case '<':\n        return rtl ? a > b : a < b;\n\n      case '>':\n        return rtl ? a < b : a > b;\n\n      case '>=':\n        return rtl ? a <= b : a >= b;\n\n      case '<=':\n        return rtl ? a >= b : a <= b;\n\n      default:\n        break;\n    }\n  };\n  /**\n   * Attaches to an internal event.\n   * @protected\n   * @param {HTMLElement} element - The event source.\n   * @param {String} event - The event name.\n   * @param {Function} listener - The event handler to attach.\n   * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.\n   */\n\n\n  Owl.prototype.on = function (element, event, listener, capture) {\n    if (element.addEventListener) {\n      element.addEventListener(event, listener, capture);\n    } else if (element.attachEvent) {\n      element.attachEvent('on' + event, listener);\n    }\n  };\n  /**\n   * Detaches from an internal event.\n   * @protected\n   * @param {HTMLElement} element - The event source.\n   * @param {String} event - The event name.\n   * @param {Function} listener - The attached event handler to detach.\n   * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.\n   */\n\n\n  Owl.prototype.off = function (element, event, listener, capture) {\n    if (element.removeEventListener) {\n      element.removeEventListener(event, listener, capture);\n    } else if (element.detachEvent) {\n      element.detachEvent('on' + event, listener);\n    }\n  };\n  /**\n   * Triggers a public event.\n   * @todo Remove `status`, `relatedTarget` should be used instead.\n   * @protected\n   * @param {String} name - The event name.\n   * @param {*} [data=null] - The event data.\n   * @param {String} [namespace=carousel] - The event namespace.\n   * @param {String} [state] - The state which is associated with the event.\n   * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.\n   * @returns {Event} - The event arguments.\n   */\n\n\n  Owl.prototype.trigger = function (name, data, namespace, state, enter) {\n    var status = {\n      item: {\n        count: this._items.length,\n        index: this.current()\n      }\n    },\n        handler = $.camelCase($.grep(['on', name, namespace], function (v) {\n      return v;\n    }).join('-').toLowerCase()),\n        event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({\n      relatedTarget: this\n    }, status, data));\n\n    if (!this._supress[name]) {\n      $.each(this._plugins, function (name, plugin) {\n        if (plugin.onTrigger) {\n          plugin.onTrigger(event);\n        }\n      });\n      this.register({\n        type: Owl.Type.Event,\n        name: name\n      });\n      this.$element.trigger(event);\n\n      if (this.settings && typeof this.settings[handler] === 'function') {\n        this.settings[handler].call(this, event);\n      }\n    }\n\n    return event;\n  };\n  /**\n   * Enters a state.\n   * @param name - The state name.\n   */\n\n\n  Owl.prototype.enter = function (name) {\n    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {\n      if (this._states.current[name] === undefined) {\n        this._states.current[name] = 0;\n      }\n\n      this._states.current[name]++;\n    }, this));\n  };\n  /**\n   * Leaves a state.\n   * @param name - The state name.\n   */\n\n\n  Owl.prototype.leave = function (name) {\n    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {\n      this._states.current[name]--;\n    }, this));\n  };\n  /**\n   * Registers an event or state.\n   * @public\n   * @param {Object} object - The event or state to register.\n   */\n\n\n  Owl.prototype.register = function (object) {\n    if (object.type === Owl.Type.Event) {\n      if (!$.event.special[object.name]) {\n        $.event.special[object.name] = {};\n      }\n\n      if (!$.event.special[object.name].owl) {\n        var _default = $.event.special[object.name]._default;\n\n        $.event.special[object.name]._default = function (e) {\n          if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {\n            return _default.apply(this, arguments);\n          }\n\n          return e.namespace && e.namespace.indexOf('owl') > -1;\n        };\n\n        $.event.special[object.name].owl = true;\n      }\n    } else if (object.type === Owl.Type.State) {\n      if (!this._states.tags[object.name]) {\n        this._states.tags[object.name] = object.tags;\n      } else {\n        this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);\n      }\n\n      this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) {\n        return $.inArray(tag, this._states.tags[object.name]) === i;\n      }, this));\n    }\n  };\n  /**\n   * Suppresses events.\n   * @protected\n   * @param {Array.<String>} events - The events to suppress.\n   */\n\n\n  Owl.prototype.suppress = function (events) {\n    $.each(events, $.proxy(function (index, event) {\n      this._supress[event] = true;\n    }, this));\n  };\n  /**\n   * Releases suppressed events.\n   * @protected\n   * @param {Array.<String>} events - The events to release.\n   */\n\n\n  Owl.prototype.release = function (events) {\n    $.each(events, $.proxy(function (index, event) {\n      delete this._supress[event];\n    }, this));\n  };\n  /**\n   * Gets unified pointer coordinates from event.\n   * @todo #261\n   * @protected\n   * @param {Event} - The `mousedown` or `touchstart` event.\n   * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.\n   */\n\n\n  Owl.prototype.pointer = function (event) {\n    var result = {\n      x: null,\n      y: null\n    };\n    event = event.originalEvent || event || window.event;\n    event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;\n\n    if (event.pageX) {\n      result.x = event.pageX;\n      result.y = event.pageY;\n    } else {\n      result.x = event.clientX;\n      result.y = event.clientY;\n    }\n\n    return result;\n  };\n  /**\n   * Determines if the input is a Number or something that can be coerced to a Number\n   * @protected\n   * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested\n   * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number\n   */\n\n\n  Owl.prototype.isNumeric = function (number) {\n    return !isNaN(parseFloat(number));\n  };\n  /**\n   * Gets the difference of two vectors.\n   * @todo #261\n   * @protected\n   * @param {Object} - The first vector.\n   * @param {Object} - The second vector.\n   * @returns {Object} - The difference.\n   */\n\n\n  Owl.prototype.difference = function (first, second) {\n    return {\n      x: first.x - second.x,\n      y: first.y - second.y\n    };\n  };\n  /**\n   * The jQuery Plugin for the Owl Carousel\n   * @todo Navigation plugin `next` and `prev`\n   * @public\n   */\n\n\n  $.fn.owlCarousel = function (option) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('owl.carousel');\n\n      if (!data) {\n        data = new Owl(this, _typeof(option) == 'object' && option);\n        $this.data('owl.carousel', data);\n        $.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) {\n          data.register({\n            type: Owl.Type.Event,\n            name: event\n          });\n          data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) {\n            if (e.namespace && e.relatedTarget !== this) {\n              this.suppress([event]);\n              data[event].apply(this, [].slice.call(arguments, 1));\n              this.release([event]);\n            }\n          }, data));\n        });\n      }\n\n      if (typeof option == 'string' && option.charAt(0) !== '_') {\n        data[option].apply(data, args);\n      }\n    });\n  };\n  /**\n   * The constructor for the jQuery Plugin\n   * @public\n   */\n\n\n  $.fn.owlCarousel.Constructor = Owl;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * AutoRefresh Plugin\n * @version 2.1.0\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the auto refresh plugin.\n   * @class The Auto Refresh Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var AutoRefresh = function AutoRefresh(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Refresh interval.\n     * @protected\n     * @type {number}\n     */\n\n    this._interval = null;\n    /**\n     * Whether the element is currently visible or not.\n     * @protected\n     * @type {Boolean}\n     */\n\n    this._visible = null;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoRefresh) {\n          this.watch();\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options); // register event handlers\n\n    this._core.$element.on(this._handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  AutoRefresh.Defaults = {\n    autoRefresh: true,\n    autoRefreshInterval: 500\n  };\n  /**\n   * Watches the element.\n   */\n\n  AutoRefresh.prototype.watch = function () {\n    if (this._interval) {\n      return;\n    }\n\n    this._visible = this._core.$element.is(':visible');\n    this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);\n  };\n  /**\n   * Refreshes the element.\n   */\n\n\n  AutoRefresh.prototype.refresh = function () {\n    if (this._core.$element.is(':visible') === this._visible) {\n      return;\n    }\n\n    this._visible = !this._visible;\n\n    this._core.$element.toggleClass('owl-hidden', !this._visible);\n\n    this._visible && this._core.invalidate('width') && this._core.refresh();\n  };\n  /**\n   * Destroys the plugin.\n   */\n\n\n  AutoRefresh.prototype.destroy = function () {\n    var handler, property;\n    window.clearInterval(this._interval);\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * Lazy Plugin\n * @version 2.1.0\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the lazy plugin.\n   * @class The Lazy Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var Lazy = function Lazy(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Already loaded items.\n     * @protected\n     * @type {Array.<jQuery>}\n     */\n\n    this._loaded = [];\n    /**\n     * Event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {\n        if (!e.namespace) {\n          return;\n        }\n\n        if (!this._core.settings || !this._core.settings.lazyLoad) {\n          return;\n        }\n\n        if (e.property && e.property.name == 'position' || e.type == 'initialized') {\n          var settings = this._core.settings,\n              n = settings.center && Math.ceil(settings.items / 2) || settings.items,\n              i = settings.center && n * -1 || 0,\n              position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,\n              clones = this._core.clones().length,\n              load = $.proxy(function (i, v) {\n            this.load(v);\n          }, this);\n\n          while (i++ < n) {\n            this.load(clones / 2 + this._core.relative(position));\n            clones && $.each(this._core.clones(this._core.relative(position)), load);\n            position++;\n          }\n        }\n      }, this)\n    }; // set the default options\n\n    this._core.options = $.extend({}, Lazy.Defaults, this._core.options); // register event handler\n\n    this._core.$element.on(this._handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Lazy.Defaults = {\n    lazyLoad: false\n  };\n  /**\n   * Loads all resources of an item at the specified position.\n   * @param {Number} position - The absolute position of the item.\n   * @protected\n   */\n\n  Lazy.prototype.load = function (position) {\n    var $item = this._core.$stage.children().eq(position),\n        $elements = $item && $item.find('.owl-lazy');\n\n    if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {\n      return;\n    }\n\n    $elements.each($.proxy(function (index, element) {\n      var $element = $(element),\n          image,\n          url = window.devicePixelRatio > 1 && $element.attr('data-src-retina') || $element.attr('data-src');\n\n      this._core.trigger('load', {\n        element: $element,\n        url: url\n      }, 'lazy');\n\n      if ($element.is('img')) {\n        $element.one('load.owl.lazy', $.proxy(function () {\n          $element.css('opacity', 1);\n\n          this._core.trigger('loaded', {\n            element: $element,\n            url: url\n          }, 'lazy');\n        }, this)).attr('src', url);\n      } else {\n        image = new Image();\n        image.onload = $.proxy(function () {\n          $element.css({\n            'background-image': 'url(\"' + url + '\")',\n            'opacity': '1'\n          });\n\n          this._core.trigger('loaded', {\n            element: $element,\n            url: url\n          }, 'lazy');\n        }, this);\n        image.src = url;\n      }\n    }, this));\n\n    this._loaded.push($item.get(0));\n  };\n  /**\n   * Destroys the plugin.\n   * @public\n   */\n\n\n  Lazy.prototype.destroy = function () {\n    var handler, property;\n\n    for (handler in this.handlers) {\n      this._core.$element.off(handler, this.handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * AutoHeight Plugin\n * @version 2.1.0\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the auto height plugin.\n   * @class The Auto Height Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var AutoHeight = function AutoHeight(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight) {\n          this.update();\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight && e.property.name == 'position') {\n          this.update();\n        }\n      }, this),\n      'loaded.owl.lazy': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {\n          this.update();\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options); // register event handlers\n\n    this._core.$element.on(this._handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  AutoHeight.Defaults = {\n    autoHeight: false,\n    autoHeightClass: 'owl-height'\n  };\n  /**\n   * Updates the view.\n   */\n\n  AutoHeight.prototype.update = function () {\n    var start = this._core._current,\n        end = start + this._core.settings.items,\n        visible = this._core.$stage.children().toArray().slice(start, end),\n        heights = [],\n        maxheight = 0;\n\n    $.each(visible, function (index, item) {\n      heights.push($(item).height());\n    });\n    maxheight = Math.max.apply(null, heights);\n\n    this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);\n  };\n\n  AutoHeight.prototype.destroy = function () {\n    var handler, property;\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * Video Plugin\n * @version 2.1.0\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the video plugin.\n   * @class The Video Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n  var Video = function Video(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Cache all video URLs.\n     * @protected\n     * @type {Object}\n     */\n\n    this._videos = {};\n    /**\n     * Current playing item.\n     * @protected\n     * @type {jQuery}\n     */\n\n    this._playing = null;\n    /**\n     * All event handlers.\n     * @todo The cloned content removale is too late\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          this._core.register({\n            type: 'state',\n            name: 'playing',\n            tags: ['interacting']\n          });\n        }\n      }, this),\n      'resize.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.video && this.isInFullScreen()) {\n          e.preventDefault();\n        }\n      }, this),\n      'refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.is('resizing')) {\n          this._core.$stage.find('.cloned .owl-video-frame').remove();\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'position' && this._playing) {\n          this.stop();\n        }\n      }, this),\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (!e.namespace) {\n          return;\n        }\n\n        var $element = $(e.content).find('.owl-video');\n\n        if ($element.length) {\n          $element.css('display', 'none');\n          this.fetch($element, $(e.content));\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, Video.Defaults, this._core.options); // register event handlers\n\n    this._core.$element.on(this._handlers);\n\n    this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) {\n      this.play(e);\n    }, this));\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Video.Defaults = {\n    video: false,\n    videoHeight: false,\n    videoWidth: false\n  };\n  /**\n   * Gets the video ID and the type (YouTube/Vimeo/vzaar only).\n   * @protected\n   * @param {jQuery} target - The target containing the video data.\n   * @param {jQuery} item - The item containing the video.\n   */\n\n  Video.prototype.fetch = function (target, item) {\n    var type = function () {\n      if (target.attr('data-vimeo-id')) {\n        return 'vimeo';\n      } else if (target.attr('data-vzaar-id')) {\n        return 'vzaar';\n      } else {\n        return 'youtube';\n      }\n    }(),\n        id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),\n        width = target.attr('data-width') || this._core.settings.videoWidth,\n        height = target.attr('data-height') || this._core.settings.videoHeight,\n        url = target.attr('href');\n\n    if (url) {\n      /*\n      \t\tParses the id's out of the following urls (and probably more):\n      \t\thttps://www.youtube.com/watch?v=:id\n      \t\thttps://youtu.be/:id\n      \t\thttps://vimeo.com/:id\n      \t\thttps://vimeo.com/channels/:channel/:id\n      \t\thttps://vimeo.com/groups/:group/videos/:id\n      \t\thttps://app.vzaar.com/videos/:id\n      \t\t\tVisual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F\n      */\n      id = url.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);\n\n      if (id[3].indexOf('youtu') > -1) {\n        type = 'youtube';\n      } else if (id[3].indexOf('vimeo') > -1) {\n        type = 'vimeo';\n      } else if (id[3].indexOf('vzaar') > -1) {\n        type = 'vzaar';\n      } else {\n        throw new Error('Video URL not supported.');\n      }\n\n      id = id[6];\n    } else {\n      throw new Error('Missing video URL.');\n    }\n\n    this._videos[url] = {\n      type: type,\n      id: id,\n      width: width,\n      height: height\n    };\n    item.attr('data-video', url);\n    this.thumbnail(target, this._videos[url]);\n  };\n  /**\n   * Creates video thumbnail.\n   * @protected\n   * @param {jQuery} target - The target containing the video data.\n   * @param {Object} info - The video info object.\n   * @see `fetch`\n   */\n\n\n  Video.prototype.thumbnail = function (target, video) {\n    var tnLink,\n        icon,\n        path,\n        dimensions = video.width && video.height ? 'style=\"width:' + video.width + 'px;height:' + video.height + 'px;\"' : '',\n        customTn = target.find('img'),\n        srcType = 'src',\n        lazyClass = '',\n        settings = this._core.settings,\n        create = function create(path) {\n      icon = '<div class=\"owl-video-play-icon\"></div>';\n\n      if (settings.lazyLoad) {\n        tnLink = '<div class=\"owl-video-tn ' + lazyClass + '\" ' + srcType + '=\"' + path + '\"></div>';\n      } else {\n        tnLink = '<div class=\"owl-video-tn\" style=\"opacity:1;background-image:url(' + path + ')\"></div>';\n      }\n\n      target.after(tnLink);\n      target.after(icon);\n    }; // wrap video content into owl-video-wrapper div\n\n\n    target.wrap('<div class=\"owl-video-wrapper\"' + dimensions + '></div>');\n\n    if (this._core.settings.lazyLoad) {\n      srcType = 'data-src';\n      lazyClass = 'owl-lazy';\n    } // custom thumbnail\n\n\n    if (customTn.length) {\n      create(customTn.attr(srcType));\n      customTn.remove();\n      return false;\n    }\n\n    if (video.type === 'youtube') {\n      path = \"//img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";\n      create(path);\n    } else if (video.type === 'vimeo') {\n      $.ajax({\n        type: 'GET',\n        url: '//vimeo.com/api/v2/video/' + video.id + '.json',\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success: function success(data) {\n          path = data[0].thumbnail_large;\n          create(path);\n        }\n      });\n    } else if (video.type === 'vzaar') {\n      $.ajax({\n        type: 'GET',\n        url: '//vzaar.com/api/videos/' + video.id + '.json',\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success: function success(data) {\n          path = data.framegrab_url;\n          create(path);\n        }\n      });\n    }\n  };\n  /**\n   * Stops the current video.\n   * @public\n   */\n\n\n  Video.prototype.stop = function () {\n    this._core.trigger('stop', null, 'video');\n\n    this._playing.find('.owl-video-frame').remove();\n\n    this._playing.removeClass('owl-video-playing');\n\n    this._playing = null;\n\n    this._core.leave('playing');\n\n    this._core.trigger('stopped', null, 'video');\n  };\n  /**\n   * Starts the current video.\n   * @public\n   * @param {Event} event - The event arguments.\n   */\n\n\n  Video.prototype.play = function (event) {\n    var target = $(event.target),\n        item = target.closest('.' + this._core.settings.itemClass),\n        video = this._videos[item.attr('data-video')],\n        width = video.width || '100%',\n        height = video.height || this._core.$stage.height(),\n        html;\n\n    if (this._playing) {\n      return;\n    }\n\n    this._core.enter('playing');\n\n    this._core.trigger('play', null, 'video');\n\n    item = this._core.items(this._core.relative(item.index()));\n\n    this._core.reset(item.index());\n\n    if (video.type === 'youtube') {\n      html = '<iframe width=\"' + width + '\" height=\"' + height + '\" src=\"//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id + '\" frameborder=\"0\" allowfullscreen></iframe>';\n    } else if (video.type === 'vimeo') {\n      html = '<iframe src=\"//player.vimeo.com/video/' + video.id + '?autoplay=1\" width=\"' + width + '\" height=\"' + height + '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';\n    } else if (video.type === 'vzaar') {\n      html = '<iframe frameborder=\"0\"' + 'height=\"' + height + '\"' + 'width=\"' + width + '\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ' + 'src=\"//view.vzaar.com/' + video.id + '/player?autoplay=true\"></iframe>';\n    }\n\n    $('<div class=\"owl-video-frame\">' + html + '</div>').insertAfter(item.find('.owl-video'));\n    this._playing = item.addClass('owl-video-playing');\n  };\n  /**\n   * Checks whether an video is currently in full screen mode or not.\n   * @todo Bad style because looks like a readonly method but changes members.\n   * @protected\n   * @returns {Boolean}\n   */\n\n\n  Video.prototype.isInFullScreen = function () {\n    var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n    return element && $(element).parent().hasClass('owl-video-frame');\n  };\n  /**\n   * Destroys the plugin.\n   */\n\n\n  Video.prototype.destroy = function () {\n    var handler, property;\n\n    this._core.$element.off('click.owl.video');\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Video = Video;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * Animate Plugin\n * @version 2.1.0\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the animate plugin.\n   * @class The Navigation Plugin\n   * @param {Owl} scope - The Owl Carousel\n   */\n  var Animate = function Animate(scope) {\n    this.core = scope;\n    this.core.options = $.extend({}, Animate.Defaults, this.core.options);\n    this.swapping = true;\n    this.previous = undefined;\n    this.next = undefined;\n    this.handlers = {\n      'change.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name == 'position') {\n          this.previous = this.core.current();\n          this.next = e.property.value;\n        }\n      }, this),\n      'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          this.swapping = e.type == 'translated';\n        }\n      }, this),\n      'translate.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {\n          this.swap();\n        }\n      }, this)\n    };\n    this.core.$element.on(this.handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Animate.Defaults = {\n    animateOut: false,\n    animateIn: false\n  };\n  /**\n   * Toggles the animation classes whenever an translations starts.\n   * @protected\n   * @returns {Boolean|undefined}\n   */\n\n  Animate.prototype.swap = function () {\n    if (this.core.settings.items !== 1) {\n      return;\n    }\n\n    if (!$.support.animation || !$.support.transition) {\n      return;\n    }\n\n    this.core.speed(0);\n    var left,\n        clear = $.proxy(this.clear, this),\n        previous = this.core.$stage.children().eq(this.previous),\n        next = this.core.$stage.children().eq(this.next),\n        incoming = this.core.settings.animateIn,\n        outgoing = this.core.settings.animateOut;\n\n    if (this.core.current() === this.previous) {\n      return;\n    }\n\n    if (outgoing) {\n      left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);\n      previous.one($.support.animation.end, clear).css({\n        'left': left + 'px'\n      }).addClass('animated owl-animated-out').addClass(outgoing);\n    }\n\n    if (incoming) {\n      next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming);\n    }\n  };\n\n  Animate.prototype.clear = function (e) {\n    $(e.target).css({\n      'left': ''\n    }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);\n    this.core.onTransitionEnd();\n  };\n  /**\n   * Destroys the plugin.\n   * @public\n   */\n\n\n  Animate.prototype.destroy = function () {\n    var handler, property;\n\n    for (handler in this.handlers) {\n      this.core.$element.off(handler, this.handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * Autoplay Plugin\n * @version 2.1.0\n * @author Bartosz Wojciechowski\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  /**\n   * Creates the autoplay plugin.\n   * @class The Autoplay Plugin\n   * @param {Owl} scope - The Owl Carousel\n   */\n  var Autoplay = function Autoplay(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * The autoplay timeout.\n     * @type {Timeout}\n     */\n\n    this._timeout = null;\n    /**\n     * Indicates whenever the autoplay is paused.\n     * @type {Boolean}\n     */\n\n    this._paused = false;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'settings') {\n          if (this._core.settings.autoplay) {\n            this.play();\n          } else {\n            this.stop();\n          }\n        } else if (e.namespace && e.property.name === 'position') {\n          //console.log('play?', e);\n          if (this._core.settings.autoplay) {\n            this._setAutoPlayInterval();\n          }\n        }\n      }, this),\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.autoplay) {\n          this.play();\n        }\n      }, this),\n      'play.owl.autoplay': $.proxy(function (e, t, s) {\n        if (e.namespace) {\n          this.play(t, s);\n        }\n      }, this),\n      'stop.owl.autoplay': $.proxy(function (e) {\n        if (e.namespace) {\n          this.stop();\n        }\n      }, this),\n      'mouseover.owl.autoplay': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.pause();\n        }\n      }, this),\n      'mouseleave.owl.autoplay': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.play();\n        }\n      }, this),\n      'touchstart.owl.core': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n          this.pause();\n        }\n      }, this),\n      'touchend.owl.core': $.proxy(function () {\n        if (this._core.settings.autoplayHoverPause) {\n          this.play();\n        }\n      }, this)\n    }; // register event handlers\n\n    this._core.$element.on(this._handlers); // set default options\n\n\n    this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Autoplay.Defaults = {\n    autoplay: false,\n    autoplayTimeout: 5000,\n    autoplayHoverPause: false,\n    autoplaySpeed: false\n  };\n  /**\n   * Starts the autoplay.\n   * @public\n   * @param {Number} [timeout] - The interval before the next animation starts.\n   * @param {Number} [speed] - The animation speed for the animations.\n   */\n\n  Autoplay.prototype.play = function (timeout, speed) {\n    this._paused = false;\n\n    if (this._core.is('rotating')) {\n      return;\n    }\n\n    this._core.enter('rotating');\n\n    this._setAutoPlayInterval();\n  };\n  /**\n   * Gets a new timeout\n   * @private\n   * @param {Number} [timeout] - The interval before the next animation starts.\n   * @param {Number} [speed] - The animation speed for the animations.\n   * @return {Timeout}\n   */\n\n\n  Autoplay.prototype._getNextTimeout = function (timeout, speed) {\n    if (this._timeout) {\n      window.clearTimeout(this._timeout);\n    }\n\n    return window.setTimeout($.proxy(function () {\n      if (this._paused || this._core.is('busy') || this._core.is('interacting') || document.hidden) {\n        return;\n      }\n\n      this._core.next(speed || this._core.settings.autoplaySpeed);\n    }, this), timeout || this._core.settings.autoplayTimeout);\n  };\n  /**\n   * Sets autoplay in motion.\n   * @private\n   */\n\n\n  Autoplay.prototype._setAutoPlayInterval = function () {\n    this._timeout = this._getNextTimeout();\n  };\n  /**\n   * Stops the autoplay.\n   * @public\n   */\n\n\n  Autoplay.prototype.stop = function () {\n    if (!this._core.is('rotating')) {\n      return;\n    }\n\n    window.clearTimeout(this._timeout);\n\n    this._core.leave('rotating');\n  };\n  /**\n   * Stops the autoplay.\n   * @public\n   */\n\n\n  Autoplay.prototype.pause = function () {\n    if (!this._core.is('rotating')) {\n      return;\n    }\n\n    this._paused = true;\n  };\n  /**\n   * Destroys the plugin.\n   */\n\n\n  Autoplay.prototype.destroy = function () {\n    var handler, property;\n    this.stop();\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * Navigation Plugin\n * @version 2.1.0\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n  /**\n   * Creates the navigation plugin.\n   * @class The Navigation Plugin\n   * @param {Owl} carousel - The Owl Carousel.\n   */\n\n  var Navigation = function Navigation(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Indicates whether the plugin is initialized or not.\n     * @protected\n     * @type {Boolean}\n     */\n\n    this._initialized = false;\n    /**\n     * The current paging indexes.\n     * @protected\n     * @type {Array}\n     */\n\n    this._pages = [];\n    /**\n     * All DOM elements of the user interface.\n     * @protected\n     * @type {Object}\n     */\n\n    this._controls = {};\n    /**\n     * Markup for an indicator.\n     * @protected\n     * @type {Array.<String>}\n     */\n\n    this._templates = [];\n    /**\n     * The carousel element.\n     * @type {jQuery}\n     */\n\n    this.$element = this._core.$element;\n    /**\n     * Overridden methods of the carousel.\n     * @protected\n     * @type {Object}\n     */\n\n    this._overrides = {\n      next: this._core.next,\n      prev: this._core.prev,\n      to: this._core.to\n    };\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');\n        }\n      }, this),\n      'added.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.splice(e.position, 0, this._templates.pop());\n        }\n      }, this),\n      'remove.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.dotsData) {\n          this._templates.splice(e.position, 1);\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name == 'position') {\n          this.draw();\n        }\n      }, this),\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && !this._initialized) {\n          this._core.trigger('initialize', null, 'navigation');\n\n          this.initialize();\n          this.update();\n          this.draw();\n          this._initialized = true;\n\n          this._core.trigger('initialized', null, 'navigation');\n        }\n      }, this),\n      'refreshed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._initialized) {\n          this._core.trigger('refresh', null, 'navigation');\n\n          this.update();\n          this.draw();\n\n          this._core.trigger('refreshed', null, 'navigation');\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, Navigation.Defaults, this._core.options); // register event handlers\n\n    this.$element.on(this._handlers);\n  };\n  /**\n   * Default options.\n   * @public\n   * @todo Rename `slideBy` to `navBy`\n   */\n\n\n  Navigation.Defaults = {\n    nav: false,\n    navText: ['prev', 'next'],\n    navSpeed: false,\n    navElement: 'div',\n    navContainer: false,\n    navContainerClass: 'owl-nav',\n    navClass: ['owl-prev', 'owl-next'],\n    slideBy: 1,\n    dotClass: 'owl-dot',\n    dotsClass: 'owl-dots',\n    dots: true,\n    dotsEach: false,\n    dotsData: false,\n    dotsSpeed: false,\n    dotsContainer: false\n  };\n  /**\n   * Initializes the layout of the plugin and extends the carousel.\n   * @protected\n   */\n\n  Navigation.prototype.initialize = function () {\n    var override,\n        settings = this._core.settings; // create DOM structure for relative navigation\n\n    this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');\n    this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) {\n      this.prev(settings.navSpeed);\n    }, this));\n    this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) {\n      this.next(settings.navSpeed);\n    }, this)); // create DOM structure for absolute navigation\n\n    if (!settings.dotsData) {\n      this._templates = [$('<div>').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];\n    }\n\n    this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');\n\n    this._controls.$absolute.on('click', 'div', $.proxy(function (e) {\n      var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();\n      e.preventDefault();\n      this.to(index, settings.dotsSpeed);\n    }, this)); // override public methods of the carousel\n\n\n    for (override in this._overrides) {\n      this._core[override] = $.proxy(this[override], this);\n    }\n  };\n  /**\n   * Destroys the plugin.\n   * @protected\n   */\n\n\n  Navigation.prototype.destroy = function () {\n    var handler, control, property, override;\n\n    for (handler in this._handlers) {\n      this.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (control in this._controls) {\n      this._controls[control].remove();\n    }\n\n    for (override in this.overides) {\n      this._core[override] = this._overrides[override];\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n  /**\n   * Updates the internal state.\n   * @protected\n   */\n\n\n  Navigation.prototype.update = function () {\n    var i,\n        j,\n        k,\n        lower = this._core.clones().length / 2,\n        upper = lower + this._core.items().length,\n        maximum = this._core.maximum(true),\n        settings = this._core.settings,\n        size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;\n\n    if (settings.slideBy !== 'page') {\n      settings.slideBy = Math.min(settings.slideBy, settings.items);\n    }\n\n    if (settings.dots || settings.slideBy == 'page') {\n      this._pages = [];\n\n      for (i = lower, j = 0, k = 0; i < upper; i++) {\n        if (j >= size || j === 0) {\n          this._pages.push({\n            start: Math.min(maximum, i - lower),\n            end: i - lower + size - 1\n          });\n\n          if (Math.min(maximum, i - lower) === maximum) {\n            break;\n          }\n\n          j = 0, ++k;\n        }\n\n        j += this._core.mergers(this._core.relative(i));\n      }\n    }\n  };\n  /**\n   * Draws the user interface.\n   * @todo The option `dotsData` wont work.\n   * @protected\n   */\n\n\n  Navigation.prototype.draw = function () {\n    var difference,\n        settings = this._core.settings,\n        disabled = this._core.items().length <= settings.items,\n        index = this._core.relative(this._core.current()),\n        loop = settings.loop || settings.rewind;\n\n    this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);\n\n    if (settings.nav) {\n      this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));\n\n      this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));\n    }\n\n    this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);\n\n    if (settings.dots) {\n      difference = this._pages.length - this._controls.$absolute.children().length;\n\n      if (settings.dotsData && difference !== 0) {\n        this._controls.$absolute.html(this._templates.join(''));\n      } else if (difference > 0) {\n        this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));\n      } else if (difference < 0) {\n        this._controls.$absolute.children().slice(difference).remove();\n      }\n\n      this._controls.$absolute.find('.active').removeClass('active');\n\n      this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');\n    }\n  };\n  /**\n   * Extends event data.\n   * @protected\n   * @param {Event} event - The event object which gets thrown.\n   */\n\n\n  Navigation.prototype.onTrigger = function (event) {\n    var settings = this._core.settings;\n    event.page = {\n      index: $.inArray(this.current(), this._pages),\n      count: this._pages.length,\n      size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)\n    };\n  };\n  /**\n   * Gets the current page position of the carousel.\n   * @protected\n   * @returns {Number}\n   */\n\n\n  Navigation.prototype.current = function () {\n    var current = this._core.relative(this._core.current());\n\n    return $.grep(this._pages, $.proxy(function (page, index) {\n      return page.start <= current && page.end >= current;\n    }, this)).pop();\n  };\n  /**\n   * Gets the current succesor/predecessor position.\n   * @protected\n   * @returns {Number}\n   */\n\n\n  Navigation.prototype.getPosition = function (successor) {\n    var position,\n        length,\n        settings = this._core.settings;\n\n    if (settings.slideBy == 'page') {\n      position = $.inArray(this.current(), this._pages);\n      length = this._pages.length;\n      successor ? ++position : --position;\n      position = this._pages[(position % length + length) % length].start;\n    } else {\n      position = this._core.relative(this._core.current());\n      length = this._core.items().length;\n      successor ? position += settings.slideBy : position -= settings.slideBy;\n    }\n\n    return position;\n  };\n  /**\n   * Slides to the next item or page.\n   * @public\n   * @param {Number} [speed=false] - The time in milliseconds for the transition.\n   */\n\n\n  Navigation.prototype.next = function (speed) {\n    $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);\n  };\n  /**\n   * Slides to the previous item or page.\n   * @public\n   * @param {Number} [speed=false] - The time in milliseconds for the transition.\n   */\n\n\n  Navigation.prototype.prev = function (speed) {\n    $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);\n  };\n  /**\n   * Slides to the specified item or page.\n   * @public\n   * @param {Number} position - The position of the item or page.\n   * @param {Number} [speed] - The time in milliseconds for the transition.\n   * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.\n   */\n\n\n  Navigation.prototype.to = function (position, speed, standard) {\n    var length;\n\n    if (!standard && this._pages.length) {\n      length = this._pages.length;\n      $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);\n    } else {\n      $.proxy(this._overrides.to, this._core)(position, speed);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * Hash Plugin\n * @version 2.1.0\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n  /**\n   * Creates the hash plugin.\n   * @class The Hash Plugin\n   * @param {Owl} carousel - The Owl Carousel\n   */\n\n  var Hash = function Hash(carousel) {\n    /**\n     * Reference to the core.\n     * @protected\n     * @type {Owl}\n     */\n    this._core = carousel;\n    /**\n     * Hash index for the items.\n     * @protected\n     * @type {Object}\n     */\n\n    this._hashes = {};\n    /**\n     * The carousel element.\n     * @type {jQuery}\n     */\n\n    this.$element = this._core.$element;\n    /**\n     * All event handlers.\n     * @protected\n     * @type {Object}\n     */\n\n    this._handlers = {\n      'initialized.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && this._core.settings.startPosition === 'URLHash') {\n          $(window).trigger('hashchange.owl.navigation');\n        }\n      }, this),\n      'prepared.owl.carousel': $.proxy(function (e) {\n        if (e.namespace) {\n          var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');\n\n          if (!hash) {\n            return;\n          }\n\n          this._hashes[hash] = e.content;\n        }\n      }, this),\n      'changed.owl.carousel': $.proxy(function (e) {\n        if (e.namespace && e.property.name === 'position') {\n          var current = this._core.items(this._core.relative(this._core.current())),\n              hash = $.map(this._hashes, function (item, hash) {\n            return item === current ? hash : null;\n          }).join();\n\n          if (!hash || window.location.hash.slice(1) === hash) {\n            return;\n          }\n\n          window.location.hash = hash;\n        }\n      }, this)\n    }; // set default options\n\n    this._core.options = $.extend({}, Hash.Defaults, this._core.options); // register the event handlers\n\n    this.$element.on(this._handlers); // register event listener for hash navigation\n\n    $(window).on('hashchange.owl.navigation', $.proxy(function (e) {\n      var hash = window.location.hash.substring(1),\n          items = this._core.$stage.children(),\n          position = this._hashes[hash] && items.index(this._hashes[hash]);\n\n      if (position === undefined || position === this._core.current()) {\n        return;\n      }\n\n      this._core.to(this._core.relative(position), false, true);\n    }, this));\n  };\n  /**\n   * Default options.\n   * @public\n   */\n\n\n  Hash.Defaults = {\n    URLhashListener: false\n  };\n  /**\n   * Destroys the plugin.\n   * @public\n   */\n\n  Hash.prototype.destroy = function () {\n    var handler, property;\n    $(window).off('hashchange.owl.navigation');\n\n    for (handler in this._handlers) {\n      this._core.$element.off(handler, this._handlers[handler]);\n    }\n\n    for (property in Object.getOwnPropertyNames(this)) {\n      typeof this[property] != 'function' && (this[property] = null);\n    }\n  };\n\n  $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;\n})(window.Zepto || window.jQuery, window, document);\n/**\n * Support Plugin\n *\n * @version 2.1.0\n * @author Vivid Planet Software GmbH\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n\n\n;\n\n(function ($, window, document, undefined) {\n  var style = $('<support>').get(0).style,\n      prefixes = 'Webkit Moz O ms'.split(' '),\n      events = {\n    transition: {\n      end: {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        transition: 'transitionend'\n      }\n    },\n    animation: {\n      end: {\n        WebkitAnimation: 'webkitAnimationEnd',\n        MozAnimation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        animation: 'animationend'\n      }\n    }\n  },\n      tests = {\n    csstransforms: function csstransforms() {\n      return !!test('transform');\n    },\n    csstransforms3d: function csstransforms3d() {\n      return !!test('perspective');\n    },\n    csstransitions: function csstransitions() {\n      return !!test('transition');\n    },\n    cssanimations: function cssanimations() {\n      return !!test('animation');\n    }\n  };\n\n  function test(property, prefixed) {\n    var result = false,\n        upper = property.charAt(0).toUpperCase() + property.slice(1);\n    $.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) {\n      if (style[property] !== undefined) {\n        result = prefixed ? property : true;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  function prefixed(property) {\n    return test(property, true);\n  }\n\n  if (tests.csstransitions()) {\n    /* jshint -W053 */\n    $.support.transition = new String(prefixed('transition'));\n    $.support.transition.end = events.transition.end[$.support.transition];\n  }\n\n  if (tests.cssanimations()) {\n    /* jshint -W053 */\n    $.support.animation = new String(prefixed('animation'));\n    $.support.animation.end = events.animation.end[$.support.animation];\n  }\n\n  if (tests.csstransforms()) {\n    /* jshint -W053 */\n    $.support.transform = new String(prefixed('transform'));\n    $.support.transform3d = tests.csstransforms3d();\n  }\n})(window.Zepto || window.jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/assets/vendor/front/lib/owlcarousel/owl.carousel-eaf5ffd6d2e2ed832702c1ccd63cb439.js\n");

/***/ })

/******/ })));