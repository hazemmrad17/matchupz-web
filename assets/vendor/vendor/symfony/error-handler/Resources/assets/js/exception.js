(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./vendor/symfony/error-handler/Resources/assets/js/exception.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./vendor/symfony/error-handler/Resources/assets/js/exception.js":
/*!***********************************************************************!*\
  !*** ./vendor/symfony/error-handler/Resources/assets/js/exception.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* This file is based on WebProfilerBundle/Resources/views/Profiler/base_js.html.twig.\n   If you make any change in this file, verify the same change is needed in the other file. */\n\n/*<![CDATA[*/\n(function () {\n  \"use strict\";\n\n  if ('classList' in document.documentElement) {\n    var hasClass = function hasClass(el, cssClass) {\n      return el.classList.contains(cssClass);\n    };\n\n    var removeClass = function removeClass(el, cssClass) {\n      el.classList.remove(cssClass);\n    };\n\n    var addClass = function addClass(el, cssClass) {\n      el.classList.add(cssClass);\n    };\n\n    var toggleClass = function toggleClass(el, cssClass) {\n      el.classList.toggle(cssClass);\n    };\n  } else {\n    var hasClass = function hasClass(el, cssClass) {\n      return el.className.match(new RegExp('\\\\b' + cssClass + '\\\\b'));\n    };\n\n    var removeClass = function removeClass(el, cssClass) {\n      el.className = el.className.replace(new RegExp('\\\\b' + cssClass + '\\\\b'), ' ');\n    };\n\n    var addClass = function addClass(el, cssClass) {\n      if (!hasClass(el, cssClass)) {\n        el.className += \" \" + cssClass;\n      }\n    };\n\n    var toggleClass = function toggleClass(el, cssClass) {\n      hasClass(el, cssClass) ? removeClass(el, cssClass) : addClass(el, cssClass);\n    };\n  }\n\n  var addEventListener;\n  var el = document.createElement('div');\n\n  if (!('addEventListener' in el)) {\n    addEventListener = function addEventListener(element, eventName, callback) {\n      element.attachEvent('on' + eventName, callback);\n    };\n  } else {\n    addEventListener = function addEventListener(element, eventName, callback) {\n      element.addEventListener(eventName, callback, false);\n    };\n  }\n\n  if (navigator.clipboard) {\n    document.querySelectorAll('[data-clipboard-text]').forEach(function (element) {\n      removeClass(element, 'hidden');\n      element.addEventListener('click', function () {\n        navigator.clipboard.writeText(element.getAttribute('data-clipboard-text'));\n      });\n    });\n  }\n\n  (function createTabs() {\n    /* the accessibility options of this component have been defined according to: */\n\n    /* www.w3.org/WAI/ARIA/apg/example-index/tabs/tabs-manual.html */\n    var tabGroups = document.querySelectorAll('.sf-tabs:not([data-processed=true])');\n    /* create the tab navigation for each group of tabs */\n\n    for (var i = 0; i < tabGroups.length; i++) {\n      var tabs = tabGroups[i].querySelectorAll(':scope > .tab');\n      var tabNavigation = document.createElement('div');\n      tabNavigation.className = 'tab-navigation';\n      tabNavigation.setAttribute('role', 'tablist');\n      var selectedTabId = 'tab-' + i + '-0';\n      /* select the first tab by default */\n\n      for (var j = 0; j < tabs.length; j++) {\n        var tabId = 'tab-' + i + '-' + j;\n        var tabTitle = tabs[j].querySelector('.tab-title').innerHTML;\n        var tabNavigationItem = document.createElement('button');\n        addClass(tabNavigationItem, 'tab-control');\n        tabNavigationItem.setAttribute('data-tab-id', tabId);\n        tabNavigationItem.setAttribute('role', 'tab');\n        tabNavigationItem.setAttribute('aria-controls', tabId);\n\n        if (hasClass(tabs[j], 'active')) {\n          selectedTabId = tabId;\n        }\n\n        if (hasClass(tabs[j], 'disabled')) {\n          addClass(tabNavigationItem, 'disabled');\n        }\n\n        tabNavigationItem.innerHTML = tabTitle;\n        tabNavigation.appendChild(tabNavigationItem);\n        var tabContent = tabs[j].querySelector('.tab-content');\n        tabContent.parentElement.setAttribute('id', tabId);\n      }\n\n      tabGroups[i].insertBefore(tabNavigation, tabGroups[i].firstChild);\n      addClass(document.querySelector('[data-tab-id=\"' + selectedTabId + '\"]'), 'active');\n    }\n    /* display the active tab and add the 'click' event listeners */\n\n\n    for (i = 0; i < tabGroups.length; i++) {\n      tabNavigation = tabGroups[i].querySelectorAll(':scope > .tab-navigation .tab-control');\n\n      for (j = 0; j < tabNavigation.length; j++) {\n        tabId = tabNavigation[j].getAttribute('data-tab-id');\n        var tabPanel = document.getElementById(tabId);\n        tabPanel.setAttribute('role', 'tabpanel');\n        tabPanel.setAttribute('aria-labelledby', tabId);\n        tabPanel.querySelector('.tab-title').className = 'hidden';\n\n        if (hasClass(tabNavigation[j], 'active')) {\n          tabPanel.className = 'block';\n          tabNavigation[j].setAttribute('aria-selected', 'true');\n          tabNavigation[j].removeAttribute('tabindex');\n        } else {\n          tabPanel.className = 'hidden';\n          tabNavigation[j].removeAttribute('aria-selected');\n          tabNavigation[j].setAttribute('tabindex', '-1');\n        }\n\n        tabNavigation[j].addEventListener('click', function (e) {\n          var activeTab = e.target || e.srcElement;\n          /* needed because when the tab contains HTML contents, user can click */\n\n          /* on any of those elements instead of their parent '<button>' element */\n\n          while (activeTab.tagName.toLowerCase() !== 'button') {\n            activeTab = activeTab.parentNode;\n          }\n          /* get the full list of tabs through the parent of the active tab element */\n\n\n          var tabNavigation = activeTab.parentNode.children;\n\n          for (var k = 0; k < tabNavigation.length; k++) {\n            var tabId = tabNavigation[k].getAttribute('data-tab-id');\n            document.getElementById(tabId).className = 'hidden';\n            removeClass(tabNavigation[k], 'active');\n            tabNavigation[k].removeAttribute('aria-selected');\n            tabNavigation[k].setAttribute('tabindex', '-1');\n          }\n\n          addClass(activeTab, 'active');\n          activeTab.setAttribute('aria-selected', 'true');\n          activeTab.removeAttribute('tabindex');\n          var activeTabId = activeTab.getAttribute('data-tab-id');\n          document.getElementById(activeTabId).className = 'block';\n        });\n      }\n\n      tabGroups[i].setAttribute('data-processed', 'true');\n    }\n  })();\n\n  (function createToggles() {\n    var toggles = document.querySelectorAll('.sf-toggle:not([data-processed=true])');\n\n    for (var i = 0; i < toggles.length; i++) {\n      var elementSelector = toggles[i].getAttribute('data-toggle-selector');\n      var element = document.querySelector(elementSelector);\n      addClass(element, 'sf-toggle-content');\n\n      if (toggles[i].hasAttribute('data-toggle-initial') && toggles[i].getAttribute('data-toggle-initial') == 'display') {\n        addClass(toggles[i], 'sf-toggle-on');\n        addClass(element, 'sf-toggle-visible');\n      } else {\n        addClass(toggles[i], 'sf-toggle-off');\n        addClass(element, 'sf-toggle-hidden');\n      }\n\n      addEventListener(toggles[i], 'click', function (e) {\n        var toggle = e.currentTarget;\n\n        if (e.target.closest('a, span[data-clipboard-text], .sf-toggle') !== toggle) {\n          return;\n        }\n\n        e.preventDefault();\n\n        if ('' !== window.getSelection().toString()) {\n          /* Don't do anything on text selection */\n          return;\n        }\n\n        var element = document.querySelector(toggle.getAttribute('data-toggle-selector'));\n        toggleClass(toggle, 'sf-toggle-on');\n        toggleClass(toggle, 'sf-toggle-off');\n        toggleClass(element, 'sf-toggle-hidden');\n        toggleClass(element, 'sf-toggle-visible');\n        /* the toggle doesn't change its contents when clicking on it */\n\n        if (!toggle.hasAttribute('data-toggle-alt-content')) {\n          return;\n        }\n\n        if (!toggle.hasAttribute('data-toggle-original-content')) {\n          toggle.setAttribute('data-toggle-original-content', toggle.innerHTML);\n        }\n\n        var currentContent = toggle.innerHTML;\n        var originalContent = toggle.getAttribute('data-toggle-original-content');\n        var altContent = toggle.getAttribute('data-toggle-alt-content');\n        toggle.innerHTML = currentContent !== altContent ? altContent : originalContent;\n      });\n      toggles[i].setAttribute('data-processed', 'true');\n    }\n  })();\n\n  (function createFilters() {\n    document.querySelectorAll('[data-filters] [data-filter]').forEach(function (filter) {\n      var filters = filter.closest('[data-filters]'),\n          type = 'choice',\n          name = filter.dataset.filter,\n          ucName = name.charAt(0).toUpperCase() + name.slice(1),\n          list = document.createElement('ul'),\n          values = filters.dataset['filter' + ucName] || filters.querySelectorAll('[data-filter-' + name + ']'),\n          labels = {},\n          defaults = null,\n          indexed = {},\n          processed = {};\n\n      if (typeof values === 'string') {\n        type = 'level';\n        labels = values.split(',');\n        values = values.toLowerCase().split(',');\n        defaults = values.length - 1;\n      }\n\n      addClass(list, 'filter-list');\n      addClass(list, 'filter-list-' + type);\n      values.forEach(function (value, i) {\n        if (value instanceof HTMLElement) {\n          value = value.dataset['filter' + ucName];\n        }\n\n        if (value in processed) {\n          return;\n        }\n\n        var option = document.createElement('li'),\n            label = i in labels ? labels[i] : value,\n            active = false,\n            matches;\n\n        if ('' === label) {\n          option.innerHTML = '<em>(none)</em>';\n        } else {\n          option.innerText = label;\n        }\n\n        option.dataset.filter = value;\n        option.setAttribute('title', 1 === (matches = filters.querySelectorAll('[data-filter-' + name + '=\"' + value + '\"]').length) ? 'Matches 1 row' : 'Matches ' + matches + ' rows');\n        indexed[value] = i;\n        list.appendChild(option);\n        addEventListener(option, 'click', function () {\n          if ('choice' === type) {\n            filters.querySelectorAll('[data-filter-' + name + ']').forEach(function (row) {\n              if (option.dataset.filter === row.dataset['filter' + ucName]) {\n                toggleClass(row, 'filter-hidden-' + name);\n              }\n            });\n            toggleClass(option, 'active');\n          } else if ('level' === type) {\n            if (i === this.parentNode.querySelectorAll('.active').length - 1) {\n              return;\n            }\n\n            this.parentNode.querySelectorAll('li').forEach(function (currentOption, j) {\n              if (j <= i) {\n                addClass(currentOption, 'active');\n\n                if (i === j) {\n                  addClass(currentOption, 'last-active');\n                } else {\n                  removeClass(currentOption, 'last-active');\n                }\n              } else {\n                removeClass(currentOption, 'active');\n                removeClass(currentOption, 'last-active');\n              }\n            });\n            filters.querySelectorAll('[data-filter-' + name + ']').forEach(function (row) {\n              if (i < indexed[row.dataset['filter' + ucName]]) {\n                addClass(row, 'filter-hidden-' + name);\n              } else {\n                removeClass(row, 'filter-hidden-' + name);\n              }\n            });\n          }\n        });\n\n        if ('choice' === type) {\n          active = null === defaults || 0 <= defaults.indexOf(value);\n        } else if ('level' === type) {\n          active = i <= defaults;\n\n          if (active && i === defaults) {\n            addClass(option, 'last-active');\n          }\n        }\n\n        if (active) {\n          addClass(option, 'active');\n        } else {\n          filters.querySelectorAll('[data-filter-' + name + '=\"' + value + '\"]').forEach(function (row) {\n            toggleClass(row, 'filter-hidden-' + name);\n          });\n        }\n\n        processed[value] = true;\n      });\n\n      if (1 < list.childNodes.length) {\n        filter.appendChild(list);\n        filter.dataset.filtered = '';\n      }\n    });\n  })();\n})();\n/*]]>*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/symfony/error-handler/Resources/assets/js/exception.js\n");

/***/ })

/******/ })));