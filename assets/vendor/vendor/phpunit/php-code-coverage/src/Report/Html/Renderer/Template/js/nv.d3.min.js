(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/nv.d3.min.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/nv.d3.min.js":
/*!********************************************************************************************!*\
  !*** ./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/nv.d3.min.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/* nvd3 version 1.8.1 (https://github.com/novus/nvd3) 2015-06-15 */\n!function () {\n  var a = {};\n  a.dev = !1, a.tooltip = a.tooltip || {}, a.utils = a.utils || {}, a.models = a.models || {}, a.charts = {}, a.logs = {}, a.dom = {}, a.dispatch = d3.dispatch(\"render_start\", \"render_end\"), Function.prototype.bind || (Function.prototype.bind = function (a) {\n    if (\"function\" != typeof this) throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n\n    var b = Array.prototype.slice.call(arguments, 1),\n        c = this,\n        d = function d() {},\n        e = function e() {\n      return c.apply(this instanceof d && a ? this : a, b.concat(Array.prototype.slice.call(arguments)));\n    };\n\n    return d.prototype = this.prototype, e.prototype = new d(), e;\n  }), a.dev && (a.dispatch.on(\"render_start\", function () {\n    a.logs.startTime = +new Date();\n  }), a.dispatch.on(\"render_end\", function () {\n    a.logs.endTime = +new Date(), a.logs.totalTime = a.logs.endTime - a.logs.startTime, a.log(\"total\", a.logs.totalTime);\n  })), a.log = function () {\n    if (a.dev && window.console && console.log && console.log.apply) console.log.apply(console, arguments);else if (a.dev && window.console && \"function\" == typeof console.log && Function.prototype.bind) {\n      var b = Function.prototype.bind.call(console.log, console);\n      b.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n  }, a.deprecated = function (a, b) {\n    console && console.warn && console.warn(\"nvd3 warning: `\" + a + \"` has been deprecated. \", b || \"\");\n  }, a.render = function (b) {\n    b = b || 1, a.render.active = !0, a.dispatch.render_start();\n\n    var c = function c() {\n      for (var d, e, f = 0; b > f && (e = a.render.queue[f]); f++) {\n        d = e.generate(), _typeof(e.callback) == (typeof Function === \"undefined\" ? \"undefined\" : _typeof(Function)) && e.callback(d);\n      }\n\n      a.render.queue.splice(0, f), a.render.queue.length ? setTimeout(c) : (a.dispatch.render_end(), a.render.active = !1);\n    };\n\n    setTimeout(c);\n  }, a.render.active = !1, a.render.queue = [], a.addGraph = function (b) {\n    _typeof(arguments[0]) == (typeof Function === \"undefined\" ? \"undefined\" : _typeof(Function)) && (b = {\n      generate: arguments[0],\n      callback: arguments[1]\n    }), a.render.queue.push(b), a.render.active || a.render();\n  },  true && (module.exports = a), \"undefined\" != typeof window && (window.nv = a), a.dom.write = function (a) {\n    return void 0 !== window.fastdom ? fastdom.write(a) : a();\n  }, a.dom.read = function (a) {\n    return void 0 !== window.fastdom ? fastdom.read(a) : a();\n  }, a.interactiveGuideline = function () {\n    \"use strict\";\n\n    function b(l) {\n      l.each(function (l) {\n        function m() {\n          var a = d3.mouse(this),\n              d = a[0],\n              e = a[1],\n              i = !0,\n              j = !1;\n\n          if (k && (d = d3.event.offsetX, e = d3.event.offsetY, \"svg\" !== d3.event.target.tagName && (i = !1), d3.event.target.className.baseVal.match(\"nv-legend\") && (j = !0)), i && (d -= f.left, e -= f.top), 0 > d || 0 > e || d > o || e > p || d3.event.relatedTarget && void 0 === d3.event.relatedTarget.ownerSVGElement || j) {\n            if (k && d3.event.relatedTarget && void 0 === d3.event.relatedTarget.ownerSVGElement && (void 0 === d3.event.relatedTarget.className || d3.event.relatedTarget.className.match(c.nvPointerEventsClass))) return;\n            return h.elementMouseout({\n              mouseX: d,\n              mouseY: e\n            }), b.renderGuideLine(null), void c.hidden(!0);\n          }\n\n          c.hidden(!1);\n          var l = g.invert(d);\n          h.elementMousemove({\n            mouseX: d,\n            mouseY: e,\n            pointXValue: l\n          }), \"dblclick\" === d3.event.type && h.elementDblclick({\n            mouseX: d,\n            mouseY: e,\n            pointXValue: l\n          }), \"click\" === d3.event.type && h.elementClick({\n            mouseX: d,\n            mouseY: e,\n            pointXValue: l\n          });\n        }\n\n        var n = d3.select(this),\n            o = d || 960,\n            p = e || 400,\n            q = n.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\").data([l]),\n            r = q.enter().append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n        r.append(\"g\").attr(\"class\", \"nv-interactiveGuideLine\"), j && (j.on(\"touchmove\", m).on(\"mousemove\", m, !0).on(\"mouseout\", m, !0).on(\"dblclick\", m).on(\"click\", m), b.guideLine = null, b.renderGuideLine = function (c) {\n          i && (b.guideLine && b.guideLine.attr(\"x1\") === c || a.dom.write(function () {\n            var b = q.select(\".nv-interactiveGuideLine\").selectAll(\"line\").data(null != c ? [a.utils.NaNtoZero(c)] : [], String);\n            b.enter().append(\"line\").attr(\"class\", \"nv-guideline\").attr(\"x1\", function (a) {\n              return a;\n            }).attr(\"x2\", function (a) {\n              return a;\n            }).attr(\"y1\", p).attr(\"y2\", 0), b.exit().remove();\n          }));\n        });\n      });\n    }\n\n    var c = a.models.tooltip();\n\n    c.duration(0).hideDelay(0)._isInteractiveLayer(!0).hidden(!1);\n\n    var d = null,\n        e = null,\n        f = {\n      left: 0,\n      top: 0\n    },\n        g = d3.scale.linear(),\n        h = d3.dispatch(\"elementMousemove\", \"elementMouseout\", \"elementClick\", \"elementDblclick\"),\n        i = !0,\n        j = null,\n        k = (\"ActiveXObject\" in window);\n    return b.dispatch = h, b.tooltip = c, b.margin = function (a) {\n      return arguments.length ? (f.top = \"undefined\" != typeof a.top ? a.top : f.top, f.left = \"undefined\" != typeof a.left ? a.left : f.left, b) : f;\n    }, b.width = function (a) {\n      return arguments.length ? (d = a, b) : d;\n    }, b.height = function (a) {\n      return arguments.length ? (e = a, b) : e;\n    }, b.xScale = function (a) {\n      return arguments.length ? (g = a, b) : g;\n    }, b.showGuideLine = function (a) {\n      return arguments.length ? (i = a, b) : i;\n    }, b.svgContainer = function (a) {\n      return arguments.length ? (j = a, b) : j;\n    }, b;\n  }, a.interactiveBisect = function (a, b, c) {\n    \"use strict\";\n\n    if (!(a instanceof Array)) return null;\n    var d;\n    d = \"function\" != typeof c ? function (a) {\n      return a.x;\n    } : c;\n\n    var e = function e(a, b) {\n      return d(a) - b;\n    },\n        f = d3.bisector(e).left,\n        g = d3.max([0, f(a, b) - 1]),\n        h = d(a[g]);\n\n    if (\"undefined\" == typeof h && (h = g), h === b) return g;\n    var i = d3.min([g + 1, a.length - 1]),\n        j = d(a[i]);\n    return \"undefined\" == typeof j && (j = i), Math.abs(j - b) >= Math.abs(h - b) ? g : i;\n  }, a.nearestValueIndex = function (a, b, c) {\n    \"use strict\";\n\n    var d = 1 / 0,\n        e = null;\n    return a.forEach(function (a, f) {\n      var g = Math.abs(b - a);\n      null != a && d >= g && c > g && (d = g, e = f);\n    }), e;\n  }, function () {\n    \"use strict\";\n\n    a.models.tooltip = function () {\n      function b() {\n        if (k) {\n          var a = d3.select(k);\n          \"svg\" !== a.node().tagName && (a = a.select(\"svg\"));\n          var b = a.node() ? a.attr(\"viewBox\") : null;\n\n          if (b) {\n            b = b.split(\" \");\n            var c = parseInt(a.style(\"width\"), 10) / b[2];\n            p.left = p.left * c, p.top = p.top * c;\n          }\n        }\n      }\n\n      function c() {\n        if (!n) {\n          var a;\n          a = k ? k : document.body, n = d3.select(a).append(\"div\").attr(\"class\", \"nvtooltip \" + (j ? j : \"xy-tooltip\")).attr(\"id\", v), n.style(\"top\", 0).style(\"left\", 0), n.style(\"opacity\", 0), n.selectAll(\"div, table, td, tr\").classed(w, !0), n.classed(w, !0), o = n.node();\n        }\n      }\n\n      function d() {\n        if (r && B(e)) {\n          b();\n          var f = p.left,\n              g = null !== i ? i : p.top;\n          return a.dom.write(function () {\n            c();\n            var b = A(e);\n            b && (o.innerHTML = b), k && u ? a.dom.read(function () {\n              var a = k.getElementsByTagName(\"svg\")[0],\n                  b = {\n                left: 0,\n                top: 0\n              };\n\n              if (a) {\n                var c = a.getBoundingClientRect(),\n                    d = k.getBoundingClientRect(),\n                    e = c.top;\n\n                if (0 > e) {\n                  var i = k.getBoundingClientRect();\n                  e = Math.abs(e) > i.height ? 0 : e;\n                }\n\n                b.top = Math.abs(e - d.top), b.left = Math.abs(c.left - d.left);\n              }\n\n              f += k.offsetLeft + b.left - 2 * k.scrollLeft, g += k.offsetTop + b.top - 2 * k.scrollTop, h && h > 0 && (g = Math.floor(g / h) * h), C([f, g]);\n            }) : C([f, g]);\n          }), d;\n        }\n      }\n\n      var e = null,\n          f = \"w\",\n          g = 25,\n          h = 0,\n          i = null,\n          j = null,\n          k = null,\n          l = !0,\n          m = 400,\n          n = null,\n          o = null,\n          p = {\n        left: null,\n        top: null\n      },\n          q = {\n        left: 0,\n        top: 0\n      },\n          r = !0,\n          s = 100,\n          t = !0,\n          u = !1,\n          v = \"nvtooltip-\" + Math.floor(1e5 * Math.random()),\n          w = \"nv-pointer-events-none\",\n          x = function x(a) {\n        return a;\n      },\n          y = function y(a) {\n        return a;\n      },\n          z = function z(a) {\n        return a;\n      },\n          A = function A(a) {\n        if (null === a) return \"\";\n        var b = d3.select(document.createElement(\"table\"));\n\n        if (t) {\n          var c = b.selectAll(\"thead\").data([a]).enter().append(\"thead\");\n          c.append(\"tr\").append(\"td\").attr(\"colspan\", 3).append(\"strong\").classed(\"x-value\", !0).html(y(a.value));\n        }\n\n        var d = b.selectAll(\"tbody\").data([a]).enter().append(\"tbody\"),\n            e = d.selectAll(\"tr\").data(function (a) {\n          return a.series;\n        }).enter().append(\"tr\").classed(\"highlight\", function (a) {\n          return a.highlight;\n        });\n        e.append(\"td\").classed(\"legend-color-guide\", !0).append(\"div\").style(\"background-color\", function (a) {\n          return a.color;\n        }), e.append(\"td\").classed(\"key\", !0).html(function (a, b) {\n          return z(a.key, b);\n        }), e.append(\"td\").classed(\"value\", !0).html(function (a, b) {\n          return x(a.value, b);\n        }), e.selectAll(\"td\").each(function (a) {\n          if (a.highlight) {\n            var b = d3.scale.linear().domain([0, 1]).range([\"#fff\", a.color]),\n                c = .6;\n            d3.select(this).style(\"border-bottom-color\", b(c)).style(\"border-top-color\", b(c));\n          }\n        });\n        var f = b.node().outerHTML;\n        return void 0 !== a.footer && (f += \"<div class='footer'>\" + a.footer + \"</div>\"), f;\n      },\n          B = function B(a) {\n        if (a && a.series) {\n          if (a.series instanceof Array) return !!a.series.length;\n          if (a.series instanceof Object) return a.series = [a.series], !0;\n        }\n\n        return !1;\n      },\n          C = function C(b) {\n        o && a.dom.read(function () {\n          var c,\n              d,\n              e = parseInt(o.offsetHeight, 10),\n              h = parseInt(o.offsetWidth, 10),\n              i = a.utils.windowSize().width,\n              j = a.utils.windowSize().height,\n              k = window.pageYOffset,\n              p = window.pageXOffset;\n          j = window.innerWidth >= document.body.scrollWidth ? j : j - 16, i = window.innerHeight >= document.body.scrollHeight ? i : i - 16;\n\n          var r,\n              t,\n              u = function u(a) {\n            var b = d;\n\n            do {\n              isNaN(a.offsetTop) || (b += a.offsetTop), a = a.offsetParent;\n            } while (a);\n\n            return b;\n          },\n              v = function v(a) {\n            var b = c;\n\n            do {\n              isNaN(a.offsetLeft) || (b += a.offsetLeft), a = a.offsetParent;\n            } while (a);\n\n            return b;\n          };\n\n          switch (f) {\n            case \"e\":\n              c = b[0] - h - g, d = b[1] - e / 2, r = v(o), t = u(o), p > r && (c = b[0] + g > p ? b[0] + g : p - r + c), k > t && (d = k - t + d), t + e > k + j && (d = k + j - t + d - e);\n              break;\n\n            case \"w\":\n              c = b[0] + g, d = b[1] - e / 2, r = v(o), t = u(o), r + h > i && (c = b[0] - h - g), k > t && (d = k + 5), t + e > k + j && (d = k + j - t + d - e);\n              break;\n\n            case \"n\":\n              c = b[0] - h / 2 - 5, d = b[1] + g, r = v(o), t = u(o), p > r && (c = p + 5), r + h > i && (c = c - h / 2 + 5), t + e > k + j && (d = k + j - t + d - e);\n              break;\n\n            case \"s\":\n              c = b[0] - h / 2, d = b[1] - e - g, r = v(o), t = u(o), p > r && (c = p + 5), r + h > i && (c = c - h / 2 + 5), k > t && (d = k);\n              break;\n\n            case \"none\":\n              c = b[0], d = b[1] - g, r = v(o), t = u(o);\n          }\n\n          c -= q.left, d -= q.top;\n          var w = o.getBoundingClientRect(),\n              k = window.pageYOffset || document.documentElement.scrollTop,\n              p = window.pageXOffset || document.documentElement.scrollLeft,\n              x = \"translate(\" + (w.left + p) + \"px, \" + (w.top + k) + \"px)\",\n              y = \"translate(\" + c + \"px, \" + d + \"px)\",\n              z = d3.interpolateString(x, y),\n              A = n.style(\"opacity\") < .1;\n          l ? n.transition().delay(m).duration(0).style(\"opacity\", 0) : n.interrupt().transition().duration(A ? 0 : s).styleTween(\"transform\", function () {\n            return z;\n          }, \"important\").style(\"-webkit-transform\", y).style(\"opacity\", 1);\n        });\n      };\n\n      return d.nvPointerEventsClass = w, d.options = a.utils.optionsFunc.bind(d), d._options = Object.create({}, {\n        duration: {\n          get: function get() {\n            return s;\n          },\n          set: function set(a) {\n            s = a;\n          }\n        },\n        gravity: {\n          get: function get() {\n            return f;\n          },\n          set: function set(a) {\n            f = a;\n          }\n        },\n        distance: {\n          get: function get() {\n            return g;\n          },\n          set: function set(a) {\n            g = a;\n          }\n        },\n        snapDistance: {\n          get: function get() {\n            return h;\n          },\n          set: function set(a) {\n            h = a;\n          }\n        },\n        classes: {\n          get: function get() {\n            return j;\n          },\n          set: function set(a) {\n            j = a;\n          }\n        },\n        chartContainer: {\n          get: function get() {\n            return k;\n          },\n          set: function set(a) {\n            k = a;\n          }\n        },\n        fixedTop: {\n          get: function get() {\n            return i;\n          },\n          set: function set(a) {\n            i = a;\n          }\n        },\n        enabled: {\n          get: function get() {\n            return r;\n          },\n          set: function set(a) {\n            r = a;\n          }\n        },\n        hideDelay: {\n          get: function get() {\n            return m;\n          },\n          set: function set(a) {\n            m = a;\n          }\n        },\n        contentGenerator: {\n          get: function get() {\n            return A;\n          },\n          set: function set(a) {\n            A = a;\n          }\n        },\n        valueFormatter: {\n          get: function get() {\n            return x;\n          },\n          set: function set(a) {\n            x = a;\n          }\n        },\n        headerFormatter: {\n          get: function get() {\n            return y;\n          },\n          set: function set(a) {\n            y = a;\n          }\n        },\n        keyFormatter: {\n          get: function get() {\n            return z;\n          },\n          set: function set(a) {\n            z = a;\n          }\n        },\n        headerEnabled: {\n          get: function get() {\n            return t;\n          },\n          set: function set(a) {\n            t = a;\n          }\n        },\n        _isInteractiveLayer: {\n          get: function get() {\n            return u;\n          },\n          set: function set(a) {\n            u = !!a;\n          }\n        },\n        position: {\n          get: function get() {\n            return p;\n          },\n          set: function set(a) {\n            p.left = void 0 !== a.left ? a.left : p.left, p.top = void 0 !== a.top ? a.top : p.top;\n          }\n        },\n        offset: {\n          get: function get() {\n            return q;\n          },\n          set: function set(a) {\n            q.left = void 0 !== a.left ? a.left : q.left, q.top = void 0 !== a.top ? a.top : q.top;\n          }\n        },\n        hidden: {\n          get: function get() {\n            return l;\n          },\n          set: function set(a) {\n            l != a && (l = !!a, d());\n          }\n        },\n        data: {\n          get: function get() {\n            return e;\n          },\n          set: function set(a) {\n            a.point && (a.value = a.point.x, a.series = a.series || {}, a.series.value = a.point.y, a.series.color = a.point.color || a.series.color), e = a;\n          }\n        },\n        tooltipElem: {\n          get: function get() {\n            return o;\n          },\n          set: function set() {}\n        },\n        id: {\n          get: function get() {\n            return v;\n          },\n          set: function set() {}\n        }\n      }), a.utils.initOptions(d), d;\n    };\n  }(), a.utils.windowSize = function () {\n    var a = {\n      width: 640,\n      height: 480\n    };\n    return window.innerWidth && window.innerHeight ? (a.width = window.innerWidth, a.height = window.innerHeight, a) : \"CSS1Compat\" == document.compatMode && document.documentElement && document.documentElement.offsetWidth ? (a.width = document.documentElement.offsetWidth, a.height = document.documentElement.offsetHeight, a) : document.body && document.body.offsetWidth ? (a.width = document.body.offsetWidth, a.height = document.body.offsetHeight, a) : a;\n  }, a.utils.windowResize = function (b) {\n    return window.addEventListener ? window.addEventListener(\"resize\", b) : a.log(\"ERROR: Failed to bind to window.resize with: \", b), {\n      callback: b,\n      clear: function clear() {\n        window.removeEventListener(\"resize\", b);\n      }\n    };\n  }, a.utils.getColor = function (b) {\n    if (void 0 === b) return a.utils.defaultColor();\n\n    if (Array.isArray(b)) {\n      var c = d3.scale.ordinal().range(b);\n      return function (a, b) {\n        var d = void 0 === b ? a : b;\n        return a.color || c(d);\n      };\n    }\n\n    return b;\n  }, a.utils.defaultColor = function () {\n    return a.utils.getColor(d3.scale.category20().range());\n  }, a.utils.customTheme = function (a, b, c) {\n    b = b || function (a) {\n      return a.key;\n    }, c = c || d3.scale.category20().range();\n    var d = c.length;\n    return function (e) {\n      var f = b(e);\n      return \"function\" == typeof a[f] ? a[f]() : void 0 !== a[f] ? a[f] : (d || (d = c.length), d -= 1, c[d]);\n    };\n  }, a.utils.pjax = function (b, c) {\n    var d = function d(_d) {\n      d3.html(_d, function (d) {\n        var e = d3.select(c).node();\n        e.parentNode.replaceChild(d3.select(d).select(c).node(), e), a.utils.pjax(b, c);\n      });\n    };\n\n    d3.selectAll(b).on(\"click\", function () {\n      history.pushState(this.href, this.textContent, this.href), d(this.href), d3.event.preventDefault();\n    }), d3.select(window).on(\"popstate\", function () {\n      d3.event.state && d(d3.event.state);\n    });\n  }, a.utils.calcApproxTextWidth = function (a) {\n    if (\"function\" == typeof a.style && \"function\" == typeof a.text) {\n      var b = parseInt(a.style(\"font-size\").replace(\"px\", \"\"), 10),\n          c = a.text().length;\n      return c * b * .5;\n    }\n\n    return 0;\n  }, a.utils.NaNtoZero = function (a) {\n    return \"number\" != typeof a || isNaN(a) || null === a || 1 / 0 === a || a === -1 / 0 ? 0 : a;\n  }, d3.selection.prototype.watchTransition = function (a) {\n    var b = [this].concat([].slice.call(arguments, 1));\n    return a.transition.apply(a, b);\n  }, a.utils.renderWatch = function (b, c) {\n    if (!(this instanceof a.utils.renderWatch)) return new a.utils.renderWatch(b, c);\n    var d = void 0 !== c ? c : 250,\n        e = [],\n        f = this;\n    this.models = function (a) {\n      return a = [].slice.call(arguments, 0), a.forEach(function (a) {\n        a.__rendered = !1, function (a) {\n          a.dispatch.on(\"renderEnd\", function () {\n            a.__rendered = !0, f.renderEnd(\"model\");\n          });\n        }(a), e.indexOf(a) < 0 && e.push(a);\n      }), this;\n    }, this.reset = function (a) {\n      void 0 !== a && (d = a), e = [];\n    }, this.transition = function (a, b, c) {\n      if (b = arguments.length > 1 ? [].slice.call(arguments, 1) : [], c = b.length > 1 ? b.pop() : void 0 !== d ? d : 250, a.__rendered = !1, e.indexOf(a) < 0 && e.push(a), 0 === c) return a.__rendered = !0, a.delay = function () {\n        return this;\n      }, a.duration = function () {\n        return this;\n      }, a;\n      a.__rendered = 0 === a.length ? !0 : a.every(function (a) {\n        return !a.length;\n      }) ? !0 : !1;\n      var g = 0;\n      return a.transition().duration(c).each(function () {\n        ++g;\n      }).each(\"end\", function () {\n        0 === --g && (a.__rendered = !0, f.renderEnd.apply(this, b));\n      });\n    }, this.renderEnd = function () {\n      e.every(function (a) {\n        return a.__rendered;\n      }) && (e.forEach(function (a) {\n        a.__rendered = !1;\n      }), b.renderEnd.apply(this, arguments));\n    };\n  }, a.utils.deepExtend = function (b) {\n    var c = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    c.forEach(function (c) {\n      for (var d in c) {\n        var e = b[d] instanceof Array,\n            f = \"object\" == _typeof(b[d]),\n            g = \"object\" == _typeof(c[d]);\n\n        f && !e && g ? a.utils.deepExtend(b[d], c[d]) : b[d] = c[d];\n      }\n    });\n  }, a.utils.state = function () {\n    if (!(this instanceof a.utils.state)) return new a.utils.state();\n\n    var b = {},\n        c = function c() {},\n        d = function d() {\n      return {};\n    },\n        e = null,\n        f = null;\n\n    this.dispatch = d3.dispatch(\"change\", \"set\"), this.dispatch.on(\"set\", function (a) {\n      c(a, !0);\n    }), this.getter = function (a) {\n      return d = a, this;\n    }, this.setter = function (a, b) {\n      return b || (b = function b() {}), c = function c(_c, d) {\n        a(_c), d && b();\n      }, this;\n    }, this.init = function (b) {\n      e = e || {}, a.utils.deepExtend(e, b);\n    };\n\n    var g = function g() {\n      var a = d();\n      if (JSON.stringify(a) === JSON.stringify(b)) return !1;\n\n      for (var c in a) {\n        void 0 === b[c] && (b[c] = {}), b[c] = a[c], f = !0;\n      }\n\n      return !0;\n    };\n\n    this.update = function () {\n      e && (c(e, !1), e = null), g.call(this) && this.dispatch.change(b);\n    };\n  }, a.utils.optionsFunc = function (a) {\n    return a && d3.map(a).forEach(function (a, b) {\n      \"function\" == typeof this[a] && this[a](b);\n    }.bind(this)), this;\n  }, a.utils.calcTicksX = function (b, c) {\n    var d = 1,\n        e = 0;\n\n    for (e; e < c.length; e += 1) {\n      var f = c[e] && c[e].values ? c[e].values.length : 0;\n      d = f > d ? f : d;\n    }\n\n    return a.log(\"Requested number of ticks: \", b), a.log(\"Calculated max values to be: \", d), b = b > d ? b = d - 1 : b, b = 1 > b ? 1 : b, b = Math.floor(b), a.log(\"Calculating tick count as: \", b), b;\n  }, a.utils.calcTicksY = function (b, c) {\n    return a.utils.calcTicksX(b, c);\n  }, a.utils.initOption = function (a, b) {\n    a._calls && a._calls[b] ? a[b] = a._calls[b] : (a[b] = function (c) {\n      return arguments.length ? (a._overrides[b] = !0, a._options[b] = c, a) : a._options[b];\n    }, a[\"_\" + b] = function (c) {\n      return arguments.length ? (a._overrides[b] || (a._options[b] = c), a) : a._options[b];\n    });\n  }, a.utils.initOptions = function (b) {\n    b._overrides = b._overrides || {};\n    var c = Object.getOwnPropertyNames(b._options || {}),\n        d = Object.getOwnPropertyNames(b._calls || {});\n    c = c.concat(d);\n\n    for (var e in c) {\n      a.utils.initOption(b, c[e]);\n    }\n  }, a.utils.inheritOptionsD3 = function (a, b, c) {\n    a._d3options = c.concat(a._d3options || []), c.unshift(b), c.unshift(a), d3.rebind.apply(this, c);\n  }, a.utils.arrayUnique = function (a) {\n    return a.sort().filter(function (b, c) {\n      return !c || b != a[c - 1];\n    });\n  }, a.utils.symbolMap = d3.map(), a.utils.symbol = function () {\n    function b(b, e) {\n      var f = c.call(this, b, e),\n          g = d.call(this, b, e);\n      return -1 !== d3.svg.symbolTypes.indexOf(f) ? d3.svg.symbol().type(f).size(g)() : a.utils.symbolMap.get(f)(g);\n    }\n\n    var c,\n        d = 64;\n    return b.type = function (a) {\n      return arguments.length ? (c = d3.functor(a), b) : c;\n    }, b.size = function (a) {\n      return arguments.length ? (d = d3.functor(a), b) : d;\n    }, b;\n  }, a.utils.inheritOptions = function (b, c) {\n    var d = Object.getOwnPropertyNames(c._options || {}),\n        e = Object.getOwnPropertyNames(c._calls || {}),\n        f = c._inherited || [],\n        g = c._d3options || [],\n        h = d.concat(e).concat(f).concat(g);\n    h.unshift(c), h.unshift(b), d3.rebind.apply(this, h), b._inherited = a.utils.arrayUnique(d.concat(e).concat(f).concat(d).concat(b._inherited || [])), b._d3options = a.utils.arrayUnique(g.concat(b._d3options || []));\n  }, a.utils.initSVG = function (a) {\n    a.classed({\n      \"nvd3-svg\": !0\n    });\n  }, a.utils.sanitizeHeight = function (a, b) {\n    return a || parseInt(b.style(\"height\"), 10) || 400;\n  }, a.utils.sanitizeWidth = function (a, b) {\n    return a || parseInt(b.style(\"width\"), 10) || 960;\n  }, a.utils.availableHeight = function (b, c, d) {\n    return a.utils.sanitizeHeight(b, c) - d.top - d.bottom;\n  }, a.utils.availableWidth = function (b, c, d) {\n    return a.utils.sanitizeWidth(b, c) - d.left - d.right;\n  }, a.utils.noData = function (b, c) {\n    var d = b.options(),\n        e = d.margin(),\n        f = d.noData(),\n        g = null == f ? [\"No Data Available.\"] : [f],\n        h = a.utils.availableHeight(d.height(), c, e),\n        i = a.utils.availableWidth(d.width(), c, e),\n        j = e.left + i / 2,\n        k = e.top + h / 2;\n    c.selectAll(\"g\").remove();\n    var l = c.selectAll(\".nv-noData\").data(g);\n    l.enter().append(\"text\").attr(\"class\", \"nvd3 nv-noData\").attr(\"dy\", \"-.7em\").style(\"text-anchor\", \"middle\"), l.attr(\"x\", j).attr(\"y\", k).text(function (a) {\n      return a;\n    });\n  }, a.models.axis = function () {\n    \"use strict\";\n\n    function b(g) {\n      return s.reset(), g.each(function (b) {\n        var g = d3.select(this);\n        a.utils.initSVG(g);\n        var p = g.selectAll(\"g.nv-wrap.nv-axis\").data([b]),\n            q = p.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-axis\"),\n            t = (q.append(\"g\"), p.select(\"g\"));\n        null !== n ? c.ticks(n) : (\"top\" == c.orient() || \"bottom\" == c.orient()) && c.ticks(Math.abs(d.range()[1] - d.range()[0]) / 100), t.watchTransition(s, \"axis\").call(c), r = r || c.scale();\n        var u = c.tickFormat();\n        null == u && (u = r.tickFormat());\n        var v = t.selectAll(\"text.nv-axislabel\").data([h || null]);\n        v.exit().remove();\n        var w, x, y;\n\n        switch (c.orient()) {\n          case \"top\":\n            v.enter().append(\"text\").attr(\"class\", \"nv-axislabel\"), y = d.range().length < 2 ? 0 : 2 === d.range().length ? d.range()[1] : d.range()[d.range().length - 1] + (d.range()[1] - d.range()[0]), v.attr(\"text-anchor\", \"middle\").attr(\"y\", 0).attr(\"x\", y / 2), i && (x = p.selectAll(\"g.nv-axisMaxMin\").data(d.domain()), x.enter().append(\"g\").attr(\"class\", function (a, b) {\n              return [\"nv-axisMaxMin\", \"nv-axisMaxMin-x\", 0 == b ? \"nv-axisMin-x\" : \"nv-axisMax-x\"].join(\" \");\n            }).append(\"text\"), x.exit().remove(), x.attr(\"transform\", function (b) {\n              return \"translate(\" + a.utils.NaNtoZero(d(b)) + \",0)\";\n            }).select(\"text\").attr(\"dy\", \"-0.5em\").attr(\"y\", -c.tickPadding()).attr(\"text-anchor\", \"middle\").text(function (a) {\n              var b = u(a);\n              return (\"\" + b).match(\"NaN\") ? \"\" : b;\n            }), x.watchTransition(s, \"min-max top\").attr(\"transform\", function (b, c) {\n              return \"translate(\" + a.utils.NaNtoZero(d.range()[c]) + \",0)\";\n            }));\n            break;\n\n          case \"bottom\":\n            w = o + 36;\n            var z = 30,\n                A = 0,\n                B = t.selectAll(\"g\").select(\"text\"),\n                C = \"\";\n\n            if (j % 360) {\n              B.each(function () {\n                var a = this.getBoundingClientRect(),\n                    b = a.width;\n                A = a.height, b > z && (z = b);\n              }), C = \"rotate(\" + j + \" 0,\" + (A / 2 + c.tickPadding()) + \")\";\n              var D = Math.abs(Math.sin(j * Math.PI / 180));\n              w = (D ? D * z : z) + 30, B.attr(\"transform\", C).style(\"text-anchor\", j % 360 > 0 ? \"start\" : \"end\");\n            }\n\n            v.enter().append(\"text\").attr(\"class\", \"nv-axislabel\"), y = d.range().length < 2 ? 0 : 2 === d.range().length ? d.range()[1] : d.range()[d.range().length - 1] + (d.range()[1] - d.range()[0]), v.attr(\"text-anchor\", \"middle\").attr(\"y\", w).attr(\"x\", y / 2), i && (x = p.selectAll(\"g.nv-axisMaxMin\").data([d.domain()[0], d.domain()[d.domain().length - 1]]), x.enter().append(\"g\").attr(\"class\", function (a, b) {\n              return [\"nv-axisMaxMin\", \"nv-axisMaxMin-x\", 0 == b ? \"nv-axisMin-x\" : \"nv-axisMax-x\"].join(\" \");\n            }).append(\"text\"), x.exit().remove(), x.attr(\"transform\", function (b) {\n              return \"translate(\" + a.utils.NaNtoZero(d(b) + (m ? d.rangeBand() / 2 : 0)) + \",0)\";\n            }).select(\"text\").attr(\"dy\", \".71em\").attr(\"y\", c.tickPadding()).attr(\"transform\", C).style(\"text-anchor\", j ? j % 360 > 0 ? \"start\" : \"end\" : \"middle\").text(function (a) {\n              var b = u(a);\n              return (\"\" + b).match(\"NaN\") ? \"\" : b;\n            }), x.watchTransition(s, \"min-max bottom\").attr(\"transform\", function (b) {\n              return \"translate(\" + a.utils.NaNtoZero(d(b) + (m ? d.rangeBand() / 2 : 0)) + \",0)\";\n            })), l && B.attr(\"transform\", function (a, b) {\n              return \"translate(0,\" + (b % 2 == 0 ? \"0\" : \"12\") + \")\";\n            });\n            break;\n\n          case \"right\":\n            v.enter().append(\"text\").attr(\"class\", \"nv-axislabel\"), v.style(\"text-anchor\", k ? \"middle\" : \"begin\").attr(\"transform\", k ? \"rotate(90)\" : \"\").attr(\"y\", k ? -Math.max(e.right, f) + 12 : -10).attr(\"x\", k ? d3.max(d.range()) / 2 : c.tickPadding()), i && (x = p.selectAll(\"g.nv-axisMaxMin\").data(d.domain()), x.enter().append(\"g\").attr(\"class\", function (a, b) {\n              return [\"nv-axisMaxMin\", \"nv-axisMaxMin-y\", 0 == b ? \"nv-axisMin-y\" : \"nv-axisMax-y\"].join(\" \");\n            }).append(\"text\").style(\"opacity\", 0), x.exit().remove(), x.attr(\"transform\", function (b) {\n              return \"translate(0,\" + a.utils.NaNtoZero(d(b)) + \")\";\n            }).select(\"text\").attr(\"dy\", \".32em\").attr(\"y\", 0).attr(\"x\", c.tickPadding()).style(\"text-anchor\", \"start\").text(function (a) {\n              var b = u(a);\n              return (\"\" + b).match(\"NaN\") ? \"\" : b;\n            }), x.watchTransition(s, \"min-max right\").attr(\"transform\", function (b, c) {\n              return \"translate(0,\" + a.utils.NaNtoZero(d.range()[c]) + \")\";\n            }).select(\"text\").style(\"opacity\", 1));\n            break;\n\n          case \"left\":\n            v.enter().append(\"text\").attr(\"class\", \"nv-axislabel\"), v.style(\"text-anchor\", k ? \"middle\" : \"end\").attr(\"transform\", k ? \"rotate(-90)\" : \"\").attr(\"y\", k ? -Math.max(e.left, f) + 25 - (o || 0) : -10).attr(\"x\", k ? -d3.max(d.range()) / 2 : -c.tickPadding()), i && (x = p.selectAll(\"g.nv-axisMaxMin\").data(d.domain()), x.enter().append(\"g\").attr(\"class\", function (a, b) {\n              return [\"nv-axisMaxMin\", \"nv-axisMaxMin-y\", 0 == b ? \"nv-axisMin-y\" : \"nv-axisMax-y\"].join(\" \");\n            }).append(\"text\").style(\"opacity\", 0), x.exit().remove(), x.attr(\"transform\", function (b) {\n              return \"translate(0,\" + a.utils.NaNtoZero(r(b)) + \")\";\n            }).select(\"text\").attr(\"dy\", \".32em\").attr(\"y\", 0).attr(\"x\", -c.tickPadding()).attr(\"text-anchor\", \"end\").text(function (a) {\n              var b = u(a);\n              return (\"\" + b).match(\"NaN\") ? \"\" : b;\n            }), x.watchTransition(s, \"min-max right\").attr(\"transform\", function (b, c) {\n              return \"translate(0,\" + a.utils.NaNtoZero(d.range()[c]) + \")\";\n            }).select(\"text\").style(\"opacity\", 1));\n        }\n\n        if (v.text(function (a) {\n          return a;\n        }), !i || \"left\" !== c.orient() && \"right\" !== c.orient() || (t.selectAll(\"g\").each(function (a) {\n          d3.select(this).select(\"text\").attr(\"opacity\", 1), (d(a) < d.range()[1] + 10 || d(a) > d.range()[0] - 10) && ((a > 1e-10 || -1e-10 > a) && d3.select(this).attr(\"opacity\", 0), d3.select(this).select(\"text\").attr(\"opacity\", 0));\n        }), d.domain()[0] == d.domain()[1] && 0 == d.domain()[0] && p.selectAll(\"g.nv-axisMaxMin\").style(\"opacity\", function (a, b) {\n          return b ? 0 : 1;\n        })), i && (\"top\" === c.orient() || \"bottom\" === c.orient())) {\n          var E = [];\n          p.selectAll(\"g.nv-axisMaxMin\").each(function (a, b) {\n            try {\n              E.push(b ? d(a) - this.getBoundingClientRect().width - 4 : d(a) + this.getBoundingClientRect().width + 4);\n            } catch (c) {\n              E.push(b ? d(a) - 4 : d(a) + 4);\n            }\n          }), t.selectAll(\"g\").each(function (a) {\n            (d(a) < E[0] || d(a) > E[1]) && (a > 1e-10 || -1e-10 > a ? d3.select(this).remove() : d3.select(this).select(\"text\").remove());\n          });\n        }\n\n        t.selectAll(\".tick\").filter(function (a) {\n          return !parseFloat(Math.round(1e5 * a) / 1e6) && void 0 !== a;\n        }).classed(\"zero\", !0), r = d.copy();\n      }), s.renderEnd(\"axis immediate\"), b;\n    }\n\n    var c = d3.svg.axis(),\n        d = d3.scale.linear(),\n        e = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        f = 75,\n        g = 60,\n        h = null,\n        i = !0,\n        j = 0,\n        k = !0,\n        l = !1,\n        m = !1,\n        n = null,\n        o = 0,\n        p = 250,\n        q = d3.dispatch(\"renderEnd\");\n    c.scale(d).orient(\"bottom\").tickFormat(function (a) {\n      return a;\n    });\n    var r,\n        s = a.utils.renderWatch(q, p);\n    return b.axis = c, b.dispatch = q, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      axisLabelDistance: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      staggerLabels: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      rotateLabels: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      rotateYLabel: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      showMaxMin: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      axisLabel: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      ticks: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      width: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e.top = void 0 !== a.top ? a.top : e.top, e.right = void 0 !== a.right ? a.right : e.right, e.bottom = void 0 !== a.bottom ? a.bottom : e.bottom, e.left = void 0 !== a.left ? a.left : e.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a, s.reset(p);\n        }\n      },\n      scale: {\n        get: function get() {\n          return d;\n        },\n        set: function set(e) {\n          d = e, c.scale(d), m = \"function\" == typeof d.rangeBands, a.utils.inheritOptionsD3(b, d, [\"domain\", \"range\", \"rangeBand\", \"rangeBands\"]);\n        }\n      }\n    }), a.utils.initOptions(b), a.utils.inheritOptionsD3(b, c, [\"orient\", \"tickValues\", \"tickSubdivide\", \"tickSize\", \"tickPadding\", \"tickFormat\"]), a.utils.inheritOptionsD3(b, d, [\"domain\", \"range\", \"rangeBand\", \"rangeBands\"]), b;\n  }, a.models.boxPlot = function () {\n    \"use strict\";\n\n    function b(l) {\n      return v.reset(), l.each(function (b) {\n        var l = j - i.left - i.right,\n            p = k - i.top - i.bottom;\n        r = d3.select(this), a.utils.initSVG(r), m.domain(c || b.map(function (a, b) {\n          return o(a, b);\n        })).rangeBands(e || [0, l], .1);\n        var w = [];\n\n        if (!d) {\n          var x = d3.min(b.map(function (a) {\n            var b = [];\n            return b.push(a.values.Q1), a.values.hasOwnProperty(\"whisker_low\") && null !== a.values.whisker_low && b.push(a.values.whisker_low), a.values.hasOwnProperty(\"outliers\") && null !== a.values.outliers && (b = b.concat(a.values.outliers)), d3.min(b);\n          })),\n              y = d3.max(b.map(function (a) {\n            var b = [];\n            return b.push(a.values.Q3), a.values.hasOwnProperty(\"whisker_high\") && null !== a.values.whisker_high && b.push(a.values.whisker_high), a.values.hasOwnProperty(\"outliers\") && null !== a.values.outliers && (b = b.concat(a.values.outliers)), d3.max(b);\n          }));\n          w = [x, y];\n        }\n\n        n.domain(d || w), n.range(f || [p, 0]), g = g || m, h = h || n.copy().range([n(0), n(0)]);\n        {\n          var z = r.selectAll(\"g.nv-wrap\").data([b]);\n          z.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap\");\n        }\n        z.attr(\"transform\", \"translate(\" + i.left + \",\" + i.top + \")\");\n        var A = z.selectAll(\".nv-boxplot\").data(function (a) {\n          return a;\n        }),\n            B = A.enter().append(\"g\").style(\"stroke-opacity\", 1e-6).style(\"fill-opacity\", 1e-6);\n        A.attr(\"class\", \"nv-boxplot\").attr(\"transform\", function (a, b) {\n          return \"translate(\" + (m(o(a, b)) + .05 * m.rangeBand()) + \", 0)\";\n        }).classed(\"hover\", function (a) {\n          return a.hover;\n        }), A.watchTransition(v, \"nv-boxplot: boxplots\").style(\"stroke-opacity\", 1).style(\"fill-opacity\", .75).delay(function (a, c) {\n          return c * t / b.length;\n        }).attr(\"transform\", function (a, b) {\n          return \"translate(\" + (m(o(a, b)) + .05 * m.rangeBand()) + \", 0)\";\n        }), A.exit().remove(), B.each(function (a, b) {\n          var c = d3.select(this);\n          [\"low\", \"high\"].forEach(function (d) {\n            a.values.hasOwnProperty(\"whisker_\" + d) && null !== a.values[\"whisker_\" + d] && (c.append(\"line\").style(\"stroke\", a.color ? a.color : q(a, b)).attr(\"class\", \"nv-boxplot-whisker nv-boxplot-\" + d), c.append(\"line\").style(\"stroke\", a.color ? a.color : q(a, b)).attr(\"class\", \"nv-boxplot-tick nv-boxplot-\" + d));\n          });\n        });\n        var C = A.selectAll(\".nv-boxplot-outlier\").data(function (a) {\n          return a.values.hasOwnProperty(\"outliers\") && null !== a.values.outliers ? a.values.outliers : [];\n        });\n        C.enter().append(\"circle\").style(\"fill\", function (a, b, c) {\n          return q(a, c);\n        }).style(\"stroke\", function (a, b, c) {\n          return q(a, c);\n        }).on(\"mouseover\", function (a, b, c) {\n          d3.select(this).classed(\"hover\", !0), s.elementMouseover({\n            series: {\n              key: a,\n              color: q(a, c)\n            },\n            e: d3.event\n          });\n        }).on(\"mouseout\", function (a, b, c) {\n          d3.select(this).classed(\"hover\", !1), s.elementMouseout({\n            series: {\n              key: a,\n              color: q(a, c)\n            },\n            e: d3.event\n          });\n        }).on(\"mousemove\", function () {\n          s.elementMousemove({\n            e: d3.event\n          });\n        }), C.attr(\"class\", \"nv-boxplot-outlier\"), C.watchTransition(v, \"nv-boxplot: nv-boxplot-outlier\").attr(\"cx\", .45 * m.rangeBand()).attr(\"cy\", function (a) {\n          return n(a);\n        }).attr(\"r\", \"3\"), C.exit().remove();\n\n        var D = function D() {\n          return null === u ? .9 * m.rangeBand() : Math.min(75, .9 * m.rangeBand());\n        },\n            E = function E() {\n          return .45 * m.rangeBand() - D() / 2;\n        },\n            F = function F() {\n          return .45 * m.rangeBand() + D() / 2;\n        };\n\n        [\"low\", \"high\"].forEach(function (a) {\n          var b = \"low\" === a ? \"Q1\" : \"Q3\";\n          A.select(\"line.nv-boxplot-whisker.nv-boxplot-\" + a).watchTransition(v, \"nv-boxplot: boxplots\").attr(\"x1\", .45 * m.rangeBand()).attr(\"y1\", function (b) {\n            return n(b.values[\"whisker_\" + a]);\n          }).attr(\"x2\", .45 * m.rangeBand()).attr(\"y2\", function (a) {\n            return n(a.values[b]);\n          }), A.select(\"line.nv-boxplot-tick.nv-boxplot-\" + a).watchTransition(v, \"nv-boxplot: boxplots\").attr(\"x1\", E).attr(\"y1\", function (b) {\n            return n(b.values[\"whisker_\" + a]);\n          }).attr(\"x2\", F).attr(\"y2\", function (b) {\n            return n(b.values[\"whisker_\" + a]);\n          });\n        }), [\"low\", \"high\"].forEach(function (a) {\n          B.selectAll(\".nv-boxplot-\" + a).on(\"mouseover\", function (b, c, d) {\n            d3.select(this).classed(\"hover\", !0), s.elementMouseover({\n              series: {\n                key: b.values[\"whisker_\" + a],\n                color: q(b, d)\n              },\n              e: d3.event\n            });\n          }).on(\"mouseout\", function (b, c, d) {\n            d3.select(this).classed(\"hover\", !1), s.elementMouseout({\n              series: {\n                key: b.values[\"whisker_\" + a],\n                color: q(b, d)\n              },\n              e: d3.event\n            });\n          }).on(\"mousemove\", function () {\n            s.elementMousemove({\n              e: d3.event\n            });\n          });\n        }), B.append(\"rect\").attr(\"class\", \"nv-boxplot-box\").on(\"mouseover\", function (a, b) {\n          d3.select(this).classed(\"hover\", !0), s.elementMouseover({\n            key: a.label,\n            value: a.label,\n            series: [{\n              key: \"Q3\",\n              value: a.values.Q3,\n              color: a.color || q(a, b)\n            }, {\n              key: \"Q2\",\n              value: a.values.Q2,\n              color: a.color || q(a, b)\n            }, {\n              key: \"Q1\",\n              value: a.values.Q1,\n              color: a.color || q(a, b)\n            }],\n            data: a,\n            index: b,\n            e: d3.event\n          });\n        }).on(\"mouseout\", function (a, b) {\n          d3.select(this).classed(\"hover\", !1), s.elementMouseout({\n            key: a.label,\n            value: a.label,\n            series: [{\n              key: \"Q3\",\n              value: a.values.Q3,\n              color: a.color || q(a, b)\n            }, {\n              key: \"Q2\",\n              value: a.values.Q2,\n              color: a.color || q(a, b)\n            }, {\n              key: \"Q1\",\n              value: a.values.Q1,\n              color: a.color || q(a, b)\n            }],\n            data: a,\n            index: b,\n            e: d3.event\n          });\n        }).on(\"mousemove\", function () {\n          s.elementMousemove({\n            e: d3.event\n          });\n        }), A.select(\"rect.nv-boxplot-box\").watchTransition(v, \"nv-boxplot: boxes\").attr(\"y\", function (a) {\n          return n(a.values.Q3);\n        }).attr(\"width\", D).attr(\"x\", E).attr(\"height\", function (a) {\n          return Math.abs(n(a.values.Q3) - n(a.values.Q1)) || 1;\n        }).style(\"fill\", function (a, b) {\n          return a.color || q(a, b);\n        }).style(\"stroke\", function (a, b) {\n          return a.color || q(a, b);\n        }), B.append(\"line\").attr(\"class\", \"nv-boxplot-median\"), A.select(\"line.nv-boxplot-median\").watchTransition(v, \"nv-boxplot: boxplots line\").attr(\"x1\", E).attr(\"y1\", function (a) {\n          return n(a.values.Q2);\n        }).attr(\"x2\", F).attr(\"y2\", function (a) {\n          return n(a.values.Q2);\n        }), g = m.copy(), h = n.copy();\n      }), v.renderEnd(\"nv-boxplot immediate\"), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        j = 960,\n        k = 500,\n        l = Math.floor(1e4 * Math.random()),\n        m = d3.scale.ordinal(),\n        n = d3.scale.linear(),\n        o = function o(a) {\n      return a.x;\n    },\n        p = function p(a) {\n      return a.y;\n    },\n        q = a.utils.defaultColor(),\n        r = null,\n        s = d3.dispatch(\"elementMouseover\", \"elementMouseout\", \"elementMousemove\", \"renderEnd\"),\n        t = 250,\n        u = null,\n        v = a.utils.renderWatch(s, t);\n\n    return b.dispatch = s, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      maxBoxWidth: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      y: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i.top = void 0 !== a.top ? a.top : i.top, i.right = void 0 !== a.right ? a.right : i.right, i.bottom = void 0 !== a.bottom ? a.bottom : i.bottom, i.left = void 0 !== a.left ? a.left : i.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return q;\n        },\n        set: function set(b) {\n          q = a.utils.getColor(b);\n        }\n      },\n      duration: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a, v.reset(t);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.boxPlotChart = function () {\n    \"use strict\";\n\n    function b(k) {\n      return t.reset(), t.models(e), l && t.models(f), m && t.models(g), k.each(function (k) {\n        var p = d3.select(this);\n        a.utils.initSVG(p);\n        var t = (i || parseInt(p.style(\"width\")) || 960) - h.left - h.right,\n            u = (j || parseInt(p.style(\"height\")) || 400) - h.top - h.bottom;\n\n        if (b.update = function () {\n          r.beforeUpdate(), p.transition().duration(s).call(b);\n        }, b.container = this, !(k && k.length && k.filter(function (a) {\n          return a.values.hasOwnProperty(\"Q1\") && a.values.hasOwnProperty(\"Q2\") && a.values.hasOwnProperty(\"Q3\");\n        }).length)) {\n          var v = p.selectAll(\".nv-noData\").data([q]);\n          return v.enter().append(\"text\").attr(\"class\", \"nvd3 nv-noData\").attr(\"dy\", \"-.7em\").style(\"text-anchor\", \"middle\"), v.attr(\"x\", h.left + t / 2).attr(\"y\", h.top + u / 2).text(function (a) {\n            return a;\n          }), b;\n        }\n\n        p.selectAll(\".nv-noData\").remove(), c = e.xScale(), d = e.yScale().clamp(!0);\n        var w = p.selectAll(\"g.nv-wrap.nv-boxPlotWithAxes\").data([k]),\n            x = w.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-boxPlotWithAxes\").append(\"g\"),\n            y = x.append(\"defs\"),\n            z = w.select(\"g\");\n        x.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), x.append(\"g\").attr(\"class\", \"nv-y nv-axis\").append(\"g\").attr(\"class\", \"nv-zeroLine\").append(\"line\"), x.append(\"g\").attr(\"class\", \"nv-barsWrap\"), z.attr(\"transform\", \"translate(\" + h.left + \",\" + h.top + \")\"), n && z.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + t + \",0)\"), e.width(t).height(u);\n        var A = z.select(\".nv-barsWrap\").datum(k.filter(function (a) {\n          return !a.disabled;\n        }));\n\n        if (A.transition().call(e), y.append(\"clipPath\").attr(\"id\", \"nv-x-label-clip-\" + e.id()).append(\"rect\"), z.select(\"#nv-x-label-clip-\" + e.id() + \" rect\").attr(\"width\", c.rangeBand() * (o ? 2 : 1)).attr(\"height\", 16).attr(\"x\", -c.rangeBand() / (o ? 1 : 2)), l) {\n          f.scale(c).ticks(a.utils.calcTicksX(t / 100, k)).tickSize(-u, 0), z.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + d.range()[0] + \")\"), z.select(\".nv-x.nv-axis\").call(f);\n          var B = z.select(\".nv-x.nv-axis\").selectAll(\"g\");\n          o && B.selectAll(\"text\").attr(\"transform\", function (a, b, c) {\n            return \"translate(0,\" + (c % 2 == 0 ? \"5\" : \"17\") + \")\";\n          });\n        }\n\n        m && (g.scale(d).ticks(Math.floor(u / 36)).tickSize(-t, 0), z.select(\".nv-y.nv-axis\").call(g)), z.select(\".nv-zeroLine line\").attr(\"x1\", 0).attr(\"x2\", t).attr(\"y1\", d(0)).attr(\"y2\", d(0));\n      }), t.renderEnd(\"nv-boxplot chart immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = a.models.boxPlot(),\n        f = a.models.axis(),\n        g = a.models.axis(),\n        h = {\n      top: 15,\n      right: 10,\n      bottom: 50,\n      left: 60\n    },\n        i = null,\n        j = null,\n        k = a.utils.getColor(),\n        l = !0,\n        m = !0,\n        n = !1,\n        o = !1,\n        p = a.models.tooltip(),\n        q = \"No Data Available.\",\n        r = d3.dispatch(\"tooltipShow\", \"tooltipHide\", \"beforeUpdate\", \"renderEnd\"),\n        s = 250;\n    f.orient(\"bottom\").showMaxMin(!1).tickFormat(function (a) {\n      return a;\n    }), g.orient(n ? \"right\" : \"left\").tickFormat(d3.format(\",.1f\")), p.duration(0);\n    var t = a.utils.renderWatch(r, s);\n    return e.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      p.data(a).hidden(!1);\n    }), e.dispatch.on(\"elementMouseout.tooltip\", function (a) {\n      p.data(a).hidden(!0);\n    }), e.dispatch.on(\"elementMousemove.tooltip\", function () {\n      p.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.dispatch = r, b.boxplot = e, b.xAxis = f, b.yAxis = g, b.tooltip = p, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      staggerLabels: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return tooltips;\n        },\n        set: function set(a) {\n          tooltips = a;\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h.top = void 0 !== a.top ? a.top : h.top, h.right = void 0 !== a.right ? a.right : h.right, h.bottom = void 0 !== a.bottom ? a.bottom : h.bottom, h.left = void 0 !== a.left ? a.left : h.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a, t.reset(s), e.duration(s), f.duration(s), g.duration(s);\n        }\n      },\n      color: {\n        get: function get() {\n          return k;\n        },\n        set: function set(b) {\n          k = a.utils.getColor(b), e.color(k);\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a, g.orient(a ? \"right\" : \"left\");\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.bullet = function () {\n    \"use strict\";\n\n    function b(d) {\n      return d.each(function (b, d) {\n        var p = m - c.left - c.right,\n            s = n - c.top - c.bottom;\n        o = d3.select(this), a.utils.initSVG(o);\n        {\n          var t = f.call(this, b, d).slice().sort(d3.descending),\n              u = g.call(this, b, d).slice().sort(d3.descending),\n              v = h.call(this, b, d).slice().sort(d3.descending),\n              w = i.call(this, b, d).slice(),\n              x = j.call(this, b, d).slice(),\n              y = k.call(this, b, d).slice(),\n              z = d3.scale.linear().domain(d3.extent(d3.merge([l, t]))).range(e ? [p, 0] : [0, p]);\n          this.__chart__ || d3.scale.linear().domain([0, 1 / 0]).range(z.range());\n        }\n        this.__chart__ = z;\n        var A = d3.min(t),\n            B = d3.max(t),\n            C = t[1],\n            D = o.selectAll(\"g.nv-wrap.nv-bullet\").data([b]),\n            E = D.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-bullet\"),\n            F = E.append(\"g\"),\n            G = D.select(\"g\");\n        F.append(\"rect\").attr(\"class\", \"nv-range nv-rangeMax\"), F.append(\"rect\").attr(\"class\", \"nv-range nv-rangeAvg\"), F.append(\"rect\").attr(\"class\", \"nv-range nv-rangeMin\"), F.append(\"rect\").attr(\"class\", \"nv-measure\"), D.attr(\"transform\", \"translate(\" + c.left + \",\" + c.top + \")\");\n\n        var H = function H(a) {\n          return Math.abs(z(a) - z(0));\n        },\n            I = function I(a) {\n          return z(0 > a ? a : 0);\n        };\n\n        G.select(\"rect.nv-rangeMax\").attr(\"height\", s).attr(\"width\", H(B > 0 ? B : A)).attr(\"x\", I(B > 0 ? B : A)).datum(B > 0 ? B : A), G.select(\"rect.nv-rangeAvg\").attr(\"height\", s).attr(\"width\", H(C)).attr(\"x\", I(C)).datum(C), G.select(\"rect.nv-rangeMin\").attr(\"height\", s).attr(\"width\", H(B)).attr(\"x\", I(B)).attr(\"width\", H(B > 0 ? A : B)).attr(\"x\", I(B > 0 ? A : B)).datum(B > 0 ? A : B), G.select(\"rect.nv-measure\").style(\"fill\", q).attr(\"height\", s / 3).attr(\"y\", s / 3).attr(\"width\", 0 > v ? z(0) - z(v[0]) : z(v[0]) - z(0)).attr(\"x\", I(v)).on(\"mouseover\", function () {\n          r.elementMouseover({\n            value: v[0],\n            label: y[0] || \"Current\",\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mousemove\", function () {\n          r.elementMousemove({\n            value: v[0],\n            label: y[0] || \"Current\",\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function () {\n          r.elementMouseout({\n            value: v[0],\n            label: y[0] || \"Current\",\n            color: d3.select(this).style(\"fill\")\n          });\n        });\n        var J = s / 6,\n            K = u.map(function (a, b) {\n          return {\n            value: a,\n            label: x[b]\n          };\n        });\n        F.selectAll(\"path.nv-markerTriangle\").data(K).enter().append(\"path\").attr(\"class\", \"nv-markerTriangle\").attr(\"transform\", function (a) {\n          return \"translate(\" + z(a.value) + \",\" + s / 2 + \")\";\n        }).attr(\"d\", \"M0,\" + J + \"L\" + J + \",\" + -J + \" \" + -J + \",\" + -J + \"Z\").on(\"mouseover\", function (a) {\n          r.elementMouseover({\n            value: a.value,\n            label: a.label || \"Previous\",\n            color: d3.select(this).style(\"fill\"),\n            pos: [z(a.value), s / 2]\n          });\n        }).on(\"mousemove\", function (a) {\n          r.elementMousemove({\n            value: a.value,\n            label: a.label || \"Previous\",\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function (a) {\n          r.elementMouseout({\n            value: a.value,\n            label: a.label || \"Previous\",\n            color: d3.select(this).style(\"fill\")\n          });\n        }), D.selectAll(\".nv-range\").on(\"mouseover\", function (a, b) {\n          var c = w[b] || (b ? 1 == b ? \"Mean\" : \"Minimum\" : \"Maximum\");\n          r.elementMouseover({\n            value: a,\n            label: c,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mousemove\", function () {\n          r.elementMousemove({\n            value: v[0],\n            label: y[0] || \"Previous\",\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function (a, b) {\n          var c = w[b] || (b ? 1 == b ? \"Mean\" : \"Minimum\" : \"Maximum\");\n          r.elementMouseout({\n            value: a,\n            label: c,\n            color: d3.select(this).style(\"fill\")\n          });\n        });\n      }), b;\n    }\n\n    var c = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        d = \"left\",\n        e = !1,\n        f = function f(a) {\n      return a.ranges;\n    },\n        g = function g(a) {\n      return a.markers ? a.markers : [0];\n    },\n        h = function h(a) {\n      return a.measures;\n    },\n        i = function i(a) {\n      return a.rangeLabels ? a.rangeLabels : [];\n    },\n        j = function j(a) {\n      return a.markerLabels ? a.markerLabels : [];\n    },\n        k = function k(a) {\n      return a.measureLabels ? a.measureLabels : [];\n    },\n        l = [0],\n        m = 380,\n        n = 30,\n        o = null,\n        p = null,\n        q = a.utils.getColor([\"#1f77b4\"]),\n        r = d3.dispatch(\"elementMouseover\", \"elementMouseout\", \"elementMousemove\");\n\n    return b.dispatch = r, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      ranges: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      markers: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      measures: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      forceX: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      width: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      tickFormat: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c.top = void 0 !== a.top ? a.top : c.top, c.right = void 0 !== a.right ? a.right : c.right, c.bottom = void 0 !== a.bottom ? a.bottom : c.bottom, c.left = void 0 !== a.left ? a.left : c.left;\n        }\n      },\n      orient: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a, e = \"right\" == d || \"bottom\" == d;\n        }\n      },\n      color: {\n        get: function get() {\n          return q;\n        },\n        set: function set(b) {\n          q = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.bulletChart = function () {\n    \"use strict\";\n\n    function b(d) {\n      return d.each(function (e, o) {\n        var p = d3.select(this);\n        a.utils.initSVG(p);\n        var q = a.utils.availableWidth(k, p, g),\n            r = l - g.top - g.bottom;\n        if (b.update = function () {\n          b(d);\n        }, b.container = this, !e || !h.call(this, e, o)) return a.utils.noData(b, p), b;\n        p.selectAll(\".nv-noData\").remove();\n        var s = h.call(this, e, o).slice().sort(d3.descending),\n            t = i.call(this, e, o).slice().sort(d3.descending),\n            u = j.call(this, e, o).slice().sort(d3.descending),\n            v = p.selectAll(\"g.nv-wrap.nv-bulletChart\").data([e]),\n            w = v.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-bulletChart\"),\n            x = w.append(\"g\"),\n            y = v.select(\"g\");\n        x.append(\"g\").attr(\"class\", \"nv-bulletWrap\"), x.append(\"g\").attr(\"class\", \"nv-titles\"), v.attr(\"transform\", \"translate(\" + g.left + \",\" + g.top + \")\");\n        var z = d3.scale.linear().domain([0, Math.max(s[0], t[0], u[0])]).range(f ? [q, 0] : [0, q]),\n            A = this.__chart__ || d3.scale.linear().domain([0, 1 / 0]).range(z.range());\n        this.__chart__ = z;\n        var B = x.select(\".nv-titles\").append(\"g\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"translate(-6,\" + (l - g.top - g.bottom) / 2 + \")\");\n        B.append(\"text\").attr(\"class\", \"nv-title\").text(function (a) {\n          return a.title;\n        }), B.append(\"text\").attr(\"class\", \"nv-subtitle\").attr(\"dy\", \"1em\").text(function (a) {\n          return a.subtitle;\n        }), c.width(q).height(r);\n        var C = y.select(\".nv-bulletWrap\");\n        d3.transition(C).call(c);\n        var D = m || z.tickFormat(q / 100),\n            E = y.selectAll(\"g.nv-tick\").data(z.ticks(n ? n : q / 50), function (a) {\n          return this.textContent || D(a);\n        }),\n            F = E.enter().append(\"g\").attr(\"class\", \"nv-tick\").attr(\"transform\", function (a) {\n          return \"translate(\" + A(a) + \",0)\";\n        }).style(\"opacity\", 1e-6);\n        F.append(\"line\").attr(\"y1\", r).attr(\"y2\", 7 * r / 6), F.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \"1em\").attr(\"y\", 7 * r / 6).text(D);\n        var G = d3.transition(E).attr(\"transform\", function (a) {\n          return \"translate(\" + z(a) + \",0)\";\n        }).style(\"opacity\", 1);\n        G.select(\"line\").attr(\"y1\", r).attr(\"y2\", 7 * r / 6), G.select(\"text\").attr(\"y\", 7 * r / 6), d3.transition(E.exit()).attr(\"transform\", function (a) {\n          return \"translate(\" + z(a) + \",0)\";\n        }).style(\"opacity\", 1e-6).remove();\n      }), d3.timer.flush(), b;\n    }\n\n    var c = a.models.bullet(),\n        d = a.models.tooltip(),\n        e = \"left\",\n        f = !1,\n        g = {\n      top: 5,\n      right: 40,\n      bottom: 20,\n      left: 120\n    },\n        h = function h(a) {\n      return a.ranges;\n    },\n        i = function i(a) {\n      return a.markers ? a.markers : [0];\n    },\n        j = function j(a) {\n      return a.measures;\n    },\n        k = null,\n        l = 55,\n        m = null,\n        n = null,\n        o = null,\n        p = d3.dispatch(\"tooltipShow\", \"tooltipHide\");\n\n    return d.duration(0).headerEnabled(!1), c.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.series = {\n        key: a.label,\n        value: a.value,\n        color: a.color\n      }, d.data(a).hidden(!1);\n    }), c.dispatch.on(\"elementMouseout.tooltip\", function () {\n      d.hidden(!0);\n    }), c.dispatch.on(\"elementMousemove.tooltip\", function () {\n      d.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.bullet = c, b.dispatch = p, b.tooltip = d, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      ranges: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      markers: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      measures: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      width: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      tickFormat: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      ticks: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return d.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), d.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return d.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), d.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g.top = void 0 !== a.top ? a.top : g.top, g.right = void 0 !== a.right ? a.right : g.right, g.bottom = void 0 !== a.bottom ? a.bottom : g.bottom, g.left = void 0 !== a.left ? a.left : g.left;\n        }\n      },\n      orient: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a, f = \"right\" == e || \"bottom\" == e;\n        }\n      }\n    }), a.utils.inheritOptions(b, c), a.utils.initOptions(b), b;\n  }, a.models.candlestickBar = function () {\n    \"use strict\";\n\n    function b(x) {\n      return x.each(function (b) {\n        c = d3.select(this);\n        var x = a.utils.availableWidth(i, c, h),\n            y = a.utils.availableHeight(j, c, h);\n        a.utils.initSVG(c);\n        var A = x / b[0].values.length * .45;\n        l.domain(d || d3.extent(b[0].values.map(n).concat(t))), l.range(v ? f || [.5 * x / b[0].values.length, x * (b[0].values.length - .5) / b[0].values.length] : f || [5 + A / 2, x - A / 2 - 5]), m.domain(e || [d3.min(b[0].values.map(s).concat(u)), d3.max(b[0].values.map(r).concat(u))]).range(g || [y, 0]), l.domain()[0] === l.domain()[1] && l.domain(l.domain()[0] ? [l.domain()[0] - .01 * l.domain()[0], l.domain()[1] + .01 * l.domain()[1]] : [-1, 1]), m.domain()[0] === m.domain()[1] && m.domain(m.domain()[0] ? [m.domain()[0] + .01 * m.domain()[0], m.domain()[1] - .01 * m.domain()[1]] : [-1, 1]);\n        var B = d3.select(this).selectAll(\"g.nv-wrap.nv-candlestickBar\").data([b[0].values]),\n            C = B.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-candlestickBar\"),\n            D = C.append(\"defs\"),\n            E = C.append(\"g\"),\n            F = B.select(\"g\");\n        E.append(\"g\").attr(\"class\", \"nv-ticks\"), B.attr(\"transform\", \"translate(\" + h.left + \",\" + h.top + \")\"), c.on(\"click\", function (a, b) {\n          z.chartClick({\n            data: a,\n            index: b,\n            pos: d3.event,\n            id: k\n          });\n        }), D.append(\"clipPath\").attr(\"id\", \"nv-chart-clip-path-\" + k).append(\"rect\"), B.select(\"#nv-chart-clip-path-\" + k + \" rect\").attr(\"width\", x).attr(\"height\", y), F.attr(\"clip-path\", w ? \"url(#nv-chart-clip-path-\" + k + \")\" : \"\");\n        var G = B.select(\".nv-ticks\").selectAll(\".nv-tick\").data(function (a) {\n          return a;\n        });\n        G.exit().remove();\n        {\n          var H = G.enter().append(\"g\").attr(\"class\", function (a, b, c) {\n            return (p(a, b) > q(a, b) ? \"nv-tick negative\" : \"nv-tick positive\") + \" nv-tick-\" + c + \"-\" + b;\n          });\n          H.append(\"line\").attr(\"class\", \"nv-candlestick-lines\").attr(\"transform\", function (a, b) {\n            return \"translate(\" + l(n(a, b)) + \",0)\";\n          }).attr(\"x1\", 0).attr(\"y1\", function (a, b) {\n            return m(r(a, b));\n          }).attr(\"x2\", 0).attr(\"y2\", function (a, b) {\n            return m(s(a, b));\n          }), H.append(\"rect\").attr(\"class\", \"nv-candlestick-rects nv-bars\").attr(\"transform\", function (a, b) {\n            return \"translate(\" + (l(n(a, b)) - A / 2) + \",\" + (m(o(a, b)) - (p(a, b) > q(a, b) ? m(q(a, b)) - m(p(a, b)) : 0)) + \")\";\n          }).attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", A).attr(\"height\", function (a, b) {\n            var c = p(a, b),\n                d = q(a, b);\n            return c > d ? m(d) - m(c) : m(c) - m(d);\n          });\n        }\n        c.selectAll(\".nv-candlestick-lines\").transition().attr(\"transform\", function (a, b) {\n          return \"translate(\" + l(n(a, b)) + \",0)\";\n        }).attr(\"x1\", 0).attr(\"y1\", function (a, b) {\n          return m(r(a, b));\n        }).attr(\"x2\", 0).attr(\"y2\", function (a, b) {\n          return m(s(a, b));\n        }), c.selectAll(\".nv-candlestick-rects\").transition().attr(\"transform\", function (a, b) {\n          return \"translate(\" + (l(n(a, b)) - A / 2) + \",\" + (m(o(a, b)) - (p(a, b) > q(a, b) ? m(q(a, b)) - m(p(a, b)) : 0)) + \")\";\n        }).attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", A).attr(\"height\", function (a, b) {\n          var c = p(a, b),\n              d = q(a, b);\n          return c > d ? m(d) - m(c) : m(c) - m(d);\n        });\n      }), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        i = null,\n        j = null,\n        k = Math.floor(1e4 * Math.random()),\n        l = d3.scale.linear(),\n        m = d3.scale.linear(),\n        n = function n(a) {\n      return a.x;\n    },\n        o = function o(a) {\n      return a.y;\n    },\n        p = function p(a) {\n      return a.open;\n    },\n        q = function q(a) {\n      return a.close;\n    },\n        r = function r(a) {\n      return a.high;\n    },\n        s = function s(a) {\n      return a.low;\n    },\n        t = [],\n        u = [],\n        v = !1,\n        w = !0,\n        x = a.utils.defaultColor(),\n        y = !1,\n        z = d3.dispatch(\"tooltipShow\", \"tooltipHide\", \"stateChange\", \"changeState\", \"renderEnd\", \"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"elementMousemove\");\n\n    return b.highlightPoint = function (a, d) {\n      b.clearHighlights(), c.select(\".nv-candlestickBar .nv-tick-0-\" + a).classed(\"hover\", d);\n    }, b.clearHighlights = function () {\n      c.select(\".nv-candlestickBar .nv-tick.hover\").classed(\"hover\", !1);\n    }, b.dispatch = z, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      forceX: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      forceY: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      padData: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      clipEdge: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      interactive: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      y: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      open: {\n        get: function get() {\n          return p();\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      close: {\n        get: function get() {\n          return q();\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      high: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      low: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h.top = void 0 != a.top ? a.top : h.top, h.right = void 0 != a.right ? a.right : h.right, h.bottom = void 0 != a.bottom ? a.bottom : h.bottom, h.left = void 0 != a.left ? a.left : h.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return x;\n        },\n        set: function set(b) {\n          x = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.cumulativeLineChart = function () {\n    \"use strict\";\n\n    function b(l) {\n      return H.reset(), H.models(f), r && H.models(g), s && H.models(h), l.each(function (l) {\n        function A() {\n          d3.select(b.container).style(\"cursor\", \"ew-resize\");\n        }\n\n        function E() {\n          G.x = d3.event.x, G.i = Math.round(F.invert(G.x)), K();\n        }\n\n        function H() {\n          d3.select(b.container).style(\"cursor\", \"auto\"), y.index = G.i, C.stateChange(y);\n        }\n\n        function K() {\n          bb.data([G]);\n          var a = b.duration();\n          b.duration(0), b.update(), b.duration(a);\n        }\n\n        var L = d3.select(this);\n        a.utils.initSVG(L), L.classed(\"nv-chart-\" + x, !0);\n        var M = this,\n            N = a.utils.availableWidth(o, L, m),\n            O = a.utils.availableHeight(p, L, m);\n\n        if (b.update = function () {\n          0 === D ? L.call(b) : L.transition().duration(D).call(b);\n        }, b.container = this, y.setter(J(l), b.update).getter(I(l)).update(), y.disabled = l.map(function (a) {\n          return !!a.disabled;\n        }), !z) {\n          var P;\n          z = {};\n\n          for (P in y) {\n            z[P] = y[P] instanceof Array ? y[P].slice(0) : y[P];\n          }\n        }\n\n        var Q = d3.behavior.drag().on(\"dragstart\", A).on(\"drag\", E).on(\"dragend\", H);\n        if (!(l && l.length && l.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, L), b;\n        if (L.selectAll(\".nv-noData\").remove(), d = f.xScale(), e = f.yScale(), w) f.yDomain(null);else {\n          var R = l.filter(function (a) {\n            return !a.disabled;\n          }).map(function (a) {\n            var b = d3.extent(a.values, f.y());\n            return b[0] < -.95 && (b[0] = -.95), [(b[0] - b[1]) / (1 + b[1]), (b[1] - b[0]) / (1 + b[0])];\n          }),\n              S = [d3.min(R, function (a) {\n            return a[0];\n          }), d3.max(R, function (a) {\n            return a[1];\n          })];\n          f.yDomain(S);\n        }\n        F.domain([0, l[0].values.length - 1]).range([0, N]).clamp(!0);\n        var l = c(G.i, l),\n            T = v ? \"none\" : \"all\",\n            U = L.selectAll(\"g.nv-wrap.nv-cumulativeLine\").data([l]),\n            V = U.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-cumulativeLine\").append(\"g\"),\n            W = U.select(\"g\");\n\n        if (V.append(\"g\").attr(\"class\", \"nv-interactive\"), V.append(\"g\").attr(\"class\", \"nv-x nv-axis\").style(\"pointer-events\", \"none\"), V.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), V.append(\"g\").attr(\"class\", \"nv-background\"), V.append(\"g\").attr(\"class\", \"nv-linesWrap\").style(\"pointer-events\", T), V.append(\"g\").attr(\"class\", \"nv-avgLinesWrap\").style(\"pointer-events\", \"none\"), V.append(\"g\").attr(\"class\", \"nv-legendWrap\"), V.append(\"g\").attr(\"class\", \"nv-controlsWrap\"), q && (i.width(N), W.select(\".nv-legendWrap\").datum(l).call(i), m.top != i.height() && (m.top = i.height(), O = a.utils.availableHeight(p, L, m)), W.select(\".nv-legendWrap\").attr(\"transform\", \"translate(0,\" + -m.top + \")\")), u) {\n          var X = [{\n            key: \"Re-scale y-axis\",\n            disabled: !w\n          }];\n          j.width(140).color([\"#444\", \"#444\", \"#444\"]).rightAlign(!1).margin({\n            top: 5,\n            right: 0,\n            bottom: 5,\n            left: 20\n          }), W.select(\".nv-controlsWrap\").datum(X).attr(\"transform\", \"translate(0,\" + -m.top + \")\").call(j);\n        }\n\n        U.attr(\"transform\", \"translate(\" + m.left + \",\" + m.top + \")\"), t && W.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + N + \",0)\");\n        var Y = l.filter(function (a) {\n          return a.tempDisabled;\n        });\n        U.select(\".tempDisabled\").remove(), Y.length && U.append(\"text\").attr(\"class\", \"tempDisabled\").attr(\"x\", N / 2).attr(\"y\", \"-.71em\").style(\"text-anchor\", \"end\").text(Y.map(function (a) {\n          return a.key;\n        }).join(\", \") + \" values cannot be calculated for this time period.\"), v && (k.width(N).height(O).margin({\n          left: m.left,\n          top: m.top\n        }).svgContainer(L).xScale(d), U.select(\".nv-interactive\").call(k)), V.select(\".nv-background\").append(\"rect\"), W.select(\".nv-background rect\").attr(\"width\", N).attr(\"height\", O), f.y(function (a) {\n          return a.display.y;\n        }).width(N).height(O).color(l.map(function (a, b) {\n          return a.color || n(a, b);\n        }).filter(function (a, b) {\n          return !l[b].disabled && !l[b].tempDisabled;\n        }));\n        var Z = W.select(\".nv-linesWrap\").datum(l.filter(function (a) {\n          return !a.disabled && !a.tempDisabled;\n        }));\n        Z.call(f), l.forEach(function (a, b) {\n          a.seriesIndex = b;\n        });\n\n        var $ = l.filter(function (a) {\n          return !a.disabled && !!B(a);\n        }),\n            _ = W.select(\".nv-avgLinesWrap\").selectAll(\"line\").data($, function (a) {\n          return a.key;\n        }),\n            ab = function ab(a) {\n          var b = e(B(a));\n          return 0 > b ? 0 : b > O ? O : b;\n        };\n\n        _.enter().append(\"line\").style(\"stroke-width\", 2).style(\"stroke-dasharray\", \"10,10\").style(\"stroke\", function (a) {\n          return f.color()(a, a.seriesIndex);\n        }).attr(\"x1\", 0).attr(\"x2\", N).attr(\"y1\", ab).attr(\"y2\", ab), _.style(\"stroke-opacity\", function (a) {\n          var b = e(B(a));\n          return 0 > b || b > O ? 0 : 1;\n        }).attr(\"x1\", 0).attr(\"x2\", N).attr(\"y1\", ab).attr(\"y2\", ab), _.exit().remove();\n        var bb = Z.selectAll(\".nv-indexLine\").data([G]);\n        bb.enter().append(\"rect\").attr(\"class\", \"nv-indexLine\").attr(\"width\", 3).attr(\"x\", -2).attr(\"fill\", \"red\").attr(\"fill-opacity\", .5).style(\"pointer-events\", \"all\").call(Q), bb.attr(\"transform\", function (a) {\n          return \"translate(\" + F(a.i) + \",0)\";\n        }).attr(\"height\", O), r && (g.scale(d)._ticks(a.utils.calcTicksX(N / 70, l)).tickSize(-O, 0), W.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + e.range()[0] + \")\"), W.select(\".nv-x.nv-axis\").call(g)), s && (h.scale(e)._ticks(a.utils.calcTicksY(O / 36, l)).tickSize(-N, 0), W.select(\".nv-y.nv-axis\").call(h)), W.select(\".nv-background rect\").on(\"click\", function () {\n          G.x = d3.mouse(this)[0], G.i = Math.round(F.invert(G.x)), y.index = G.i, C.stateChange(y), K();\n        }), f.dispatch.on(\"elementClick\", function (a) {\n          G.i = a.pointIndex, G.x = F(G.i), y.index = G.i, C.stateChange(y), K();\n        }), j.dispatch.on(\"legendClick\", function (a) {\n          a.disabled = !a.disabled, w = !a.disabled, y.rescaleY = w, C.stateChange(y), b.update();\n        }), i.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            y[c] = a[c];\n          }\n\n          C.stateChange(y), b.update();\n        }), k.dispatch.on(\"elementMousemove\", function (c) {\n          f.clearHighlights();\n          var d,\n              e,\n              i,\n              j = [];\n\n          if (l.filter(function (a, b) {\n            return a.seriesIndex = b, !a.disabled;\n          }).forEach(function (g, h) {\n            e = a.interactiveBisect(g.values, c.pointXValue, b.x()), f.highlightPoint(h, e, !0);\n            var k = g.values[e];\n            \"undefined\" != typeof k && (\"undefined\" == typeof d && (d = k), \"undefined\" == typeof i && (i = b.xScale()(b.x()(k, e))), j.push({\n              key: g.key,\n              value: b.y()(k, e),\n              color: n(g, g.seriesIndex)\n            }));\n          }), j.length > 2) {\n            var o = b.yScale().invert(c.mouseY),\n                p = Math.abs(b.yScale().domain()[0] - b.yScale().domain()[1]),\n                q = .03 * p,\n                r = a.nearestValueIndex(j.map(function (a) {\n              return a.value;\n            }), o, q);\n            null !== r && (j[r].highlight = !0);\n          }\n\n          var s = g.tickFormat()(b.x()(d, e), e);\n          k.tooltip.position({\n            left: i + m.left,\n            top: c.mouseY + m.top\n          }).chartContainer(M.parentNode).valueFormatter(function (a) {\n            return h.tickFormat()(a);\n          }).data({\n            value: s,\n            series: j\n          })(), k.renderGuideLine(i);\n        }), k.dispatch.on(\"elementMouseout\", function () {\n          f.clearHighlights();\n        }), C.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && (l.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), y.disabled = a.disabled), \"undefined\" != typeof a.index && (G.i = a.index, G.x = F(G.i), y.index = a.index, bb.data([G])), \"undefined\" != typeof a.rescaleY && (w = a.rescaleY), b.update();\n        });\n      }), H.renderEnd(\"cumulativeLineChart immediate\"), b;\n    }\n\n    function c(a, b) {\n      return K || (K = f.y()), b.map(function (b) {\n        if (!b.values) return b;\n        var c = b.values[a];\n        if (null == c) return b;\n        var d = K(c, a);\n        return -.95 > d && !E ? (b.tempDisabled = !0, b) : (b.tempDisabled = !1, b.values = b.values.map(function (a, b) {\n          return a.display = {\n            y: (K(a, b) - d) / (1 + d)\n          }, a;\n        }), b);\n      });\n    }\n\n    var d,\n        e,\n        f = a.models.line(),\n        g = a.models.axis(),\n        h = a.models.axis(),\n        i = a.models.legend(),\n        j = a.models.legend(),\n        k = a.interactiveGuideline(),\n        l = a.models.tooltip(),\n        m = {\n      top: 30,\n      right: 30,\n      bottom: 50,\n      left: 60\n    },\n        n = a.utils.defaultColor(),\n        o = null,\n        p = null,\n        q = !0,\n        r = !0,\n        s = !0,\n        t = !1,\n        u = !0,\n        v = !1,\n        w = !0,\n        x = f.id(),\n        y = a.utils.state(),\n        z = null,\n        A = null,\n        B = function B(a) {\n      return a.average;\n    },\n        C = d3.dispatch(\"stateChange\", \"changeState\", \"renderEnd\"),\n        D = 250,\n        E = !1;\n\n    y.index = 0, y.rescaleY = w, g.orient(\"bottom\").tickPadding(7), h.orient(t ? \"right\" : \"left\"), l.valueFormatter(function (a, b) {\n      return h.tickFormat()(a, b);\n    }).headerFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    }), j.updateState(!1);\n\n    var F = d3.scale.linear(),\n        G = {\n      i: 0,\n      x: 0\n    },\n        H = a.utils.renderWatch(C, D),\n        I = function I(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          }),\n          index: G.i,\n          rescaleY: w\n        };\n      };\n    },\n        J = function J(a) {\n      return function (b) {\n        void 0 !== b.index && (G.i = b.index), void 0 !== b.rescaleY && (w = b.rescaleY), void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    };\n\n    f.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      var c = {\n        x: b.x()(a.point),\n        y: b.y()(a.point),\n        color: a.point.color\n      };\n      a.point = c, l.data(a).position(a.pos).hidden(!1);\n    }), f.dispatch.on(\"elementMouseout.tooltip\", function () {\n      l.hidden(!0);\n    });\n    var K = null;\n    return b.dispatch = C, b.lines = f, b.legend = i, b.controls = j, b.xAxis = g, b.yAxis = h, b.interactiveLayer = k, b.state = y, b.tooltip = l, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      rescaleY: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      showControls: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      average: {\n        get: function get() {\n          return B;\n        },\n        set: function set(a) {\n          B = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return A;\n        },\n        set: function set(a) {\n          A = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      noErrorCheck: {\n        get: function get() {\n          return E;\n        },\n        set: function set(a) {\n          E = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return l.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), l.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return l.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), l.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m.top = void 0 !== a.top ? a.top : m.top, m.right = void 0 !== a.right ? a.right : m.right, m.bottom = void 0 !== a.bottom ? a.bottom : m.bottom, m.left = void 0 !== a.left ? a.left : m.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return n;\n        },\n        set: function set(b) {\n          n = a.utils.getColor(b), i.color(n);\n        }\n      },\n      useInteractiveGuideline: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a, a === !0 && (b.interactive(!1), b.useVoronoi(!1));\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a, h.orient(a ? \"right\" : \"left\");\n        }\n      },\n      duration: {\n        get: function get() {\n          return D;\n        },\n        set: function set(a) {\n          D = a, f.duration(D), g.duration(D), h.duration(D), H.reset(D);\n        }\n      }\n    }), a.utils.inheritOptions(b, f), a.utils.initOptions(b), b;\n  }, a.models.discreteBar = function () {\n    \"use strict\";\n\n    function b(m) {\n      return y.reset(), m.each(function (b) {\n        var m = k - j.left - j.right,\n            x = l - j.top - j.bottom;\n        c = d3.select(this), a.utils.initSVG(c), b.forEach(function (a, b) {\n          a.values.forEach(function (a) {\n            a.series = b;\n          });\n        });\n        var z = d && e ? [] : b.map(function (a) {\n          return a.values.map(function (a, b) {\n            return {\n              x: p(a, b),\n              y: q(a, b),\n              y0: a.y0\n            };\n          });\n        });\n        n.domain(d || d3.merge(z).map(function (a) {\n          return a.x;\n        })).rangeBands(f || [0, m], .1), o.domain(e || d3.extent(d3.merge(z).map(function (a) {\n          return a.y;\n        }).concat(r))), o.range(t ? g || [x - (o.domain()[0] < 0 ? 12 : 0), o.domain()[1] > 0 ? 12 : 0] : g || [x, 0]), h = h || n, i = i || o.copy().range([o(0), o(0)]);\n        {\n          var A = c.selectAll(\"g.nv-wrap.nv-discretebar\").data([b]),\n              B = A.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-discretebar\"),\n              C = B.append(\"g\");\n          A.select(\"g\");\n        }\n        C.append(\"g\").attr(\"class\", \"nv-groups\"), A.attr(\"transform\", \"translate(\" + j.left + \",\" + j.top + \")\");\n        var D = A.select(\".nv-groups\").selectAll(\".nv-group\").data(function (a) {\n          return a;\n        }, function (a) {\n          return a.key;\n        });\n        D.enter().append(\"g\").style(\"stroke-opacity\", 1e-6).style(\"fill-opacity\", 1e-6), D.exit().watchTransition(y, \"discreteBar: exit groups\").style(\"stroke-opacity\", 1e-6).style(\"fill-opacity\", 1e-6).remove(), D.attr(\"class\", function (a, b) {\n          return \"nv-group nv-series-\" + b;\n        }).classed(\"hover\", function (a) {\n          return a.hover;\n        }), D.watchTransition(y, \"discreteBar: groups\").style(\"stroke-opacity\", 1).style(\"fill-opacity\", .75);\n        var E = D.selectAll(\"g.nv-bar\").data(function (a) {\n          return a.values;\n        });\n        E.exit().remove();\n        var F = E.enter().append(\"g\").attr(\"transform\", function (a, b) {\n          return \"translate(\" + (n(p(a, b)) + .05 * n.rangeBand()) + \", \" + o(0) + \")\";\n        }).on(\"mouseover\", function (a, b) {\n          d3.select(this).classed(\"hover\", !0), v.elementMouseover({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function (a, b) {\n          d3.select(this).classed(\"hover\", !1), v.elementMouseout({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mousemove\", function (a, b) {\n          v.elementMousemove({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"click\", function (a, b) {\n          v.elementClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation();\n        }).on(\"dblclick\", function (a, b) {\n          v.elementDblClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation();\n        });\n        F.append(\"rect\").attr(\"height\", 0).attr(\"width\", .9 * n.rangeBand() / b.length), t ? (F.append(\"text\").attr(\"text-anchor\", \"middle\"), E.select(\"text\").text(function (a, b) {\n          return u(q(a, b));\n        }).watchTransition(y, \"discreteBar: bars text\").attr(\"x\", .9 * n.rangeBand() / 2).attr(\"y\", function (a, b) {\n          return q(a, b) < 0 ? o(q(a, b)) - o(0) + 12 : -4;\n        })) : E.selectAll(\"text\").remove(), E.attr(\"class\", function (a, b) {\n          return q(a, b) < 0 ? \"nv-bar negative\" : \"nv-bar positive\";\n        }).style(\"fill\", function (a, b) {\n          return a.color || s(a, b);\n        }).style(\"stroke\", function (a, b) {\n          return a.color || s(a, b);\n        }).select(\"rect\").attr(\"class\", w).watchTransition(y, \"discreteBar: bars rect\").attr(\"width\", .9 * n.rangeBand() / b.length), E.watchTransition(y, \"discreteBar: bars\").attr(\"transform\", function (a, b) {\n          var c = n(p(a, b)) + .05 * n.rangeBand(),\n              d = q(a, b) < 0 ? o(0) : o(0) - o(q(a, b)) < 1 ? o(0) - 1 : o(q(a, b));\n          return \"translate(\" + c + \", \" + d + \")\";\n        }).select(\"rect\").attr(\"height\", function (a, b) {\n          return Math.max(Math.abs(o(q(a, b)) - o(e && e[0] || 0)) || 1);\n        }), h = n.copy(), i = o.copy();\n      }), y.renderEnd(\"discreteBar immediate\"), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        k = 960,\n        l = 500,\n        m = Math.floor(1e4 * Math.random()),\n        n = d3.scale.ordinal(),\n        o = d3.scale.linear(),\n        p = function p(a) {\n      return a.x;\n    },\n        q = function q(a) {\n      return a.y;\n    },\n        r = [0],\n        s = a.utils.defaultColor(),\n        t = !1,\n        u = d3.format(\",.2f\"),\n        v = d3.dispatch(\"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"elementMousemove\", \"renderEnd\"),\n        w = \"discreteBar\",\n        x = 250,\n        y = a.utils.renderWatch(v, x);\n\n    return b.dispatch = v, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      forceY: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      showValues: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      y: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      valueFormat: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      rectClass: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j.top = void 0 !== a.top ? a.top : j.top, j.right = void 0 !== a.right ? a.right : j.right, j.bottom = void 0 !== a.bottom ? a.bottom : j.bottom, j.left = void 0 !== a.left ? a.left : j.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return s;\n        },\n        set: function set(b) {\n          s = a.utils.getColor(b);\n        }\n      },\n      duration: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a, y.reset(x);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.discreteBarChart = function () {\n    \"use strict\";\n\n    function b(h) {\n      return t.reset(), t.models(e), m && t.models(f), n && t.models(g), h.each(function (h) {\n        var l = d3.select(this);\n        a.utils.initSVG(l);\n        var q = a.utils.availableWidth(j, l, i),\n            t = a.utils.availableHeight(k, l, i);\n        if (b.update = function () {\n          r.beforeUpdate(), l.transition().duration(s).call(b);\n        }, b.container = this, !(h && h.length && h.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, l), b;\n        l.selectAll(\".nv-noData\").remove(), c = e.xScale(), d = e.yScale().clamp(!0);\n        var u = l.selectAll(\"g.nv-wrap.nv-discreteBarWithAxes\").data([h]),\n            v = u.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-discreteBarWithAxes\").append(\"g\"),\n            w = v.append(\"defs\"),\n            x = u.select(\"g\");\n        v.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), v.append(\"g\").attr(\"class\", \"nv-y nv-axis\").append(\"g\").attr(\"class\", \"nv-zeroLine\").append(\"line\"), v.append(\"g\").attr(\"class\", \"nv-barsWrap\"), x.attr(\"transform\", \"translate(\" + i.left + \",\" + i.top + \")\"), o && x.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + q + \",0)\"), e.width(q).height(t);\n        var y = x.select(\".nv-barsWrap\").datum(h.filter(function (a) {\n          return !a.disabled;\n        }));\n\n        if (y.transition().call(e), w.append(\"clipPath\").attr(\"id\", \"nv-x-label-clip-\" + e.id()).append(\"rect\"), x.select(\"#nv-x-label-clip-\" + e.id() + \" rect\").attr(\"width\", c.rangeBand() * (p ? 2 : 1)).attr(\"height\", 16).attr(\"x\", -c.rangeBand() / (p ? 1 : 2)), m) {\n          f.scale(c)._ticks(a.utils.calcTicksX(q / 100, h)).tickSize(-t, 0), x.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + (d.range()[0] + (e.showValues() && d.domain()[0] < 0 ? 16 : 0)) + \")\"), x.select(\".nv-x.nv-axis\").call(f);\n          var z = x.select(\".nv-x.nv-axis\").selectAll(\"g\");\n          p && z.selectAll(\"text\").attr(\"transform\", function (a, b, c) {\n            return \"translate(0,\" + (c % 2 == 0 ? \"5\" : \"17\") + \")\";\n          });\n        }\n\n        n && (g.scale(d)._ticks(a.utils.calcTicksY(t / 36, h)).tickSize(-q, 0), x.select(\".nv-y.nv-axis\").call(g)), x.select(\".nv-zeroLine line\").attr(\"x1\", 0).attr(\"x2\", q).attr(\"y1\", d(0)).attr(\"y2\", d(0));\n      }), t.renderEnd(\"discreteBar chart immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = a.models.discreteBar(),\n        f = a.models.axis(),\n        g = a.models.axis(),\n        h = a.models.tooltip(),\n        i = {\n      top: 15,\n      right: 10,\n      bottom: 50,\n      left: 60\n    },\n        j = null,\n        k = null,\n        l = a.utils.getColor(),\n        m = !0,\n        n = !0,\n        o = !1,\n        p = !1,\n        q = null,\n        r = d3.dispatch(\"beforeUpdate\", \"renderEnd\"),\n        s = 250;\n    f.orient(\"bottom\").showMaxMin(!1).tickFormat(function (a) {\n      return a;\n    }), g.orient(o ? \"right\" : \"left\").tickFormat(d3.format(\",.1f\")), h.duration(0).headerEnabled(!1).valueFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    }).keyFormatter(function (a, b) {\n      return f.tickFormat()(a, b);\n    });\n    var t = a.utils.renderWatch(r, s);\n    return e.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.series = {\n        key: b.x()(a.data),\n        value: b.y()(a.data),\n        color: a.color\n      }, h.data(a).hidden(!1);\n    }), e.dispatch.on(\"elementMouseout.tooltip\", function () {\n      h.hidden(!0);\n    }), e.dispatch.on(\"elementMousemove.tooltip\", function () {\n      h.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.dispatch = r, b.discretebar = e, b.xAxis = f, b.yAxis = g, b.tooltip = h, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      staggerLabels: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return h.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), h.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return h.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), h.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i.top = void 0 !== a.top ? a.top : i.top, i.right = void 0 !== a.right ? a.right : i.right, i.bottom = void 0 !== a.bottom ? a.bottom : i.bottom, i.left = void 0 !== a.left ? a.left : i.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a, t.reset(s), e.duration(s), f.duration(s), g.duration(s);\n        }\n      },\n      color: {\n        get: function get() {\n          return l;\n        },\n        set: function set(b) {\n          l = a.utils.getColor(b), e.color(l);\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a, g.orient(a ? \"right\" : \"left\");\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.distribution = function () {\n    \"use strict\";\n\n    function b(k) {\n      return m.reset(), k.each(function (b) {\n        var k = (e - (\"x\" === g ? d.left + d.right : d.top + d.bottom), \"x\" == g ? \"y\" : \"x\"),\n            l = d3.select(this);\n        a.utils.initSVG(l), c = c || j;\n        var n = l.selectAll(\"g.nv-distribution\").data([b]),\n            o = n.enter().append(\"g\").attr(\"class\", \"nvd3 nv-distribution\"),\n            p = (o.append(\"g\"), n.select(\"g\"));\n        n.attr(\"transform\", \"translate(\" + d.left + \",\" + d.top + \")\");\n        var q = p.selectAll(\"g.nv-dist\").data(function (a) {\n          return a;\n        }, function (a) {\n          return a.key;\n        });\n        q.enter().append(\"g\"), q.attr(\"class\", function (a, b) {\n          return \"nv-dist nv-series-\" + b;\n        }).style(\"stroke\", function (a, b) {\n          return i(a, b);\n        });\n        var r = q.selectAll(\"line.nv-dist\" + g).data(function (a) {\n          return a.values;\n        });\n        r.enter().append(\"line\").attr(g + \"1\", function (a, b) {\n          return c(h(a, b));\n        }).attr(g + \"2\", function (a, b) {\n          return c(h(a, b));\n        }), m.transition(q.exit().selectAll(\"line.nv-dist\" + g), \"dist exit\").attr(g + \"1\", function (a, b) {\n          return j(h(a, b));\n        }).attr(g + \"2\", function (a, b) {\n          return j(h(a, b));\n        }).style(\"stroke-opacity\", 0).remove(), r.attr(\"class\", function (a, b) {\n          return \"nv-dist\" + g + \" nv-dist\" + g + \"-\" + b;\n        }).attr(k + \"1\", 0).attr(k + \"2\", f), m.transition(r, \"dist\").attr(g + \"1\", function (a, b) {\n          return j(h(a, b));\n        }).attr(g + \"2\", function (a, b) {\n          return j(h(a, b));\n        }), c = j.copy();\n      }), m.renderEnd(\"distribution immediate\"), b;\n    }\n\n    var c,\n        d = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        e = 400,\n        f = 8,\n        g = \"x\",\n        h = function h(a) {\n      return a[g];\n    },\n        i = a.utils.defaultColor(),\n        j = d3.scale.linear(),\n        k = 250,\n        l = d3.dispatch(\"renderEnd\"),\n        m = a.utils.renderWatch(l, k);\n\n    return b.options = a.utils.optionsFunc.bind(b), b.dispatch = l, b.margin = function (a) {\n      return arguments.length ? (d.top = \"undefined\" != typeof a.top ? a.top : d.top, d.right = \"undefined\" != typeof a.right ? a.right : d.right, d.bottom = \"undefined\" != typeof a.bottom ? a.bottom : d.bottom, d.left = \"undefined\" != typeof a.left ? a.left : d.left, b) : d;\n    }, b.width = function (a) {\n      return arguments.length ? (e = a, b) : e;\n    }, b.axis = function (a) {\n      return arguments.length ? (g = a, b) : g;\n    }, b.size = function (a) {\n      return arguments.length ? (f = a, b) : f;\n    }, b.getData = function (a) {\n      return arguments.length ? (h = d3.functor(a), b) : h;\n    }, b.scale = function (a) {\n      return arguments.length ? (j = a, b) : j;\n    }, b.color = function (c) {\n      return arguments.length ? (i = a.utils.getColor(c), b) : i;\n    }, b.duration = function (a) {\n      return arguments.length ? (k = a, m.reset(k), b) : k;\n    }, b;\n  }, a.models.furiousLegend = function () {\n    \"use strict\";\n\n    function b(p) {\n      function q(a, b) {\n        return \"furious\" != o ? \"#000\" : m ? a.disengaged ? g(a, b) : \"#fff\" : m ? void 0 : a.disabled ? g(a, b) : \"#fff\";\n      }\n\n      function r(a, b) {\n        return m && \"furious\" == o ? a.disengaged ? \"#fff\" : g(a, b) : a.disabled ? \"#fff\" : g(a, b);\n      }\n\n      return p.each(function (b) {\n        var p = d - c.left - c.right,\n            s = d3.select(this);\n        a.utils.initSVG(s);\n        var t = s.selectAll(\"g.nv-legend\").data([b]),\n            u = (t.enter().append(\"g\").attr(\"class\", \"nvd3 nv-legend\").append(\"g\"), t.select(\"g\"));\n        t.attr(\"transform\", \"translate(\" + c.left + \",\" + c.top + \")\");\n        var v,\n            w = u.selectAll(\".nv-series\").data(function (a) {\n          return \"furious\" != o ? a : a.filter(function (a) {\n            return m ? !0 : !a.disengaged;\n          });\n        }),\n            x = w.enter().append(\"g\").attr(\"class\", \"nv-series\");\n        if (\"classic\" == o) x.append(\"circle\").style(\"stroke-width\", 2).attr(\"class\", \"nv-legend-symbol\").attr(\"r\", 5), v = w.select(\"circle\");else if (\"furious\" == o) {\n          x.append(\"rect\").style(\"stroke-width\", 2).attr(\"class\", \"nv-legend-symbol\").attr(\"rx\", 3).attr(\"ry\", 3), v = w.select(\"rect\"), x.append(\"g\").attr(\"class\", \"nv-check-box\").property(\"innerHTML\", '<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>').attr(\"transform\", \"translate(-10,-8)scale(0.5)\");\n          var y = w.select(\".nv-check-box\");\n          y.each(function (a, b) {\n            d3.select(this).selectAll(\"path\").attr(\"stroke\", q(a, b));\n          });\n        }\n        x.append(\"text\").attr(\"text-anchor\", \"start\").attr(\"class\", \"nv-legend-text\").attr(\"dy\", \".32em\").attr(\"dx\", \"8\");\n        var z = w.select(\"text.nv-legend-text\");\n        w.on(\"mouseover\", function (a, b) {\n          n.legendMouseover(a, b);\n        }).on(\"mouseout\", function (a, b) {\n          n.legendMouseout(a, b);\n        }).on(\"click\", function (a, b) {\n          n.legendClick(a, b);\n          var c = w.data();\n\n          if (k) {\n            if (\"classic\" == o) l ? (c.forEach(function (a) {\n              a.disabled = !0;\n            }), a.disabled = !1) : (a.disabled = !a.disabled, c.every(function (a) {\n              return a.disabled;\n            }) && c.forEach(function (a) {\n              a.disabled = !1;\n            }));else if (\"furious\" == o) if (m) a.disengaged = !a.disengaged, a.userDisabled = void 0 == a.userDisabled ? !!a.disabled : a.userDisabled, a.disabled = a.disengaged || a.userDisabled;else if (!m) {\n              a.disabled = !a.disabled, a.userDisabled = a.disabled;\n              var d = c.filter(function (a) {\n                return !a.disengaged;\n              });\n              d.every(function (a) {\n                return a.userDisabled;\n              }) && c.forEach(function (a) {\n                a.disabled = a.userDisabled = !1;\n              });\n            }\n            n.stateChange({\n              disabled: c.map(function (a) {\n                return !!a.disabled;\n              }),\n              disengaged: c.map(function (a) {\n                return !!a.disengaged;\n              })\n            });\n          }\n        }).on(\"dblclick\", function (a, b) {\n          if ((\"furious\" != o || !m) && (n.legendDblclick(a, b), k)) {\n            var c = w.data();\n            c.forEach(function (a) {\n              a.disabled = !0, \"furious\" == o && (a.userDisabled = a.disabled);\n            }), a.disabled = !1, \"furious\" == o && (a.userDisabled = a.disabled), n.stateChange({\n              disabled: c.map(function (a) {\n                return !!a.disabled;\n              })\n            });\n          }\n        }), w.classed(\"nv-disabled\", function (a) {\n          return a.userDisabled;\n        }), w.exit().remove(), z.attr(\"fill\", q).text(f);\n        var A;\n\n        switch (o) {\n          case \"furious\":\n            A = 23;\n            break;\n\n          case \"classic\":\n            A = 20;\n        }\n\n        if (h) {\n          var B = [];\n          w.each(function () {\n            var b,\n                c = d3.select(this).select(\"text\");\n\n            try {\n              if (b = c.node().getComputedTextLength(), 0 >= b) throw Error();\n            } catch (d) {\n              b = a.utils.calcApproxTextWidth(c);\n            }\n\n            B.push(b + i);\n          });\n\n          for (var C = 0, D = 0, E = []; p > D && C < B.length;) {\n            E[C] = B[C], D += B[C++];\n          }\n\n          for (0 === C && (C = 1); D > p && C > 1;) {\n            E = [], C--;\n\n            for (var F = 0; F < B.length; F++) {\n              B[F] > (E[F % C] || 0) && (E[F % C] = B[F]);\n            }\n\n            D = E.reduce(function (a, b) {\n              return a + b;\n            });\n          }\n\n          for (var G = [], H = 0, I = 0; C > H; H++) {\n            G[H] = I, I += E[H];\n          }\n\n          w.attr(\"transform\", function (a, b) {\n            return \"translate(\" + G[b % C] + \",\" + (5 + Math.floor(b / C) * A) + \")\";\n          }), j ? u.attr(\"transform\", \"translate(\" + (d - c.right - D) + \",\" + c.top + \")\") : u.attr(\"transform\", \"translate(0,\" + c.top + \")\"), e = c.top + c.bottom + Math.ceil(B.length / C) * A;\n        } else {\n          var J,\n              K = 5,\n              L = 5,\n              M = 0;\n          w.attr(\"transform\", function () {\n            var a = d3.select(this).select(\"text\").node().getComputedTextLength() + i;\n            return J = L, d < c.left + c.right + J + a && (L = J = 5, K += A), L += a, L > M && (M = L), \"translate(\" + J + \",\" + K + \")\";\n          }), u.attr(\"transform\", \"translate(\" + (d - c.right - M) + \",\" + c.top + \")\"), e = c.top + c.bottom + K + 15;\n        }\n\n        \"furious\" == o && v.attr(\"width\", function (a, b) {\n          return z[0][b].getComputedTextLength() + 27;\n        }).attr(\"height\", 18).attr(\"y\", -9).attr(\"x\", -15), v.style(\"fill\", r).style(\"stroke\", function (a, b) {\n          return a.color || g(a, b);\n        });\n      }), b;\n    }\n\n    var c = {\n      top: 5,\n      right: 0,\n      bottom: 5,\n      left: 0\n    },\n        d = 400,\n        e = 20,\n        f = function f(a) {\n      return a.key;\n    },\n        g = a.utils.getColor(),\n        h = !0,\n        i = 28,\n        j = !0,\n        k = !0,\n        l = !1,\n        m = !1,\n        n = d3.dispatch(\"legendClick\", \"legendDblclick\", \"legendMouseover\", \"legendMouseout\", \"stateChange\"),\n        o = \"classic\";\n\n    return b.dispatch = n, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      key: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      align: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      rightAlign: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      padding: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      updateState: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      radioButtonMode: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      expanded: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      vers: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c.top = void 0 !== a.top ? a.top : c.top, c.right = void 0 !== a.right ? a.right : c.right, c.bottom = void 0 !== a.bottom ? a.bottom : c.bottom, c.left = void 0 !== a.left ? a.left : c.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return g;\n        },\n        set: function set(b) {\n          g = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.historicalBar = function () {\n    \"use strict\";\n\n    function b(x) {\n      return x.each(function (b) {\n        w.reset(), k = d3.select(this);\n        var x = a.utils.availableWidth(h, k, g),\n            y = a.utils.availableHeight(i, k, g);\n        a.utils.initSVG(k), l.domain(c || d3.extent(b[0].values.map(n).concat(p))), l.range(r ? e || [.5 * x / b[0].values.length, x * (b[0].values.length - .5) / b[0].values.length] : e || [0, x]), m.domain(d || d3.extent(b[0].values.map(o).concat(q))).range(f || [y, 0]), l.domain()[0] === l.domain()[1] && l.domain(l.domain()[0] ? [l.domain()[0] - .01 * l.domain()[0], l.domain()[1] + .01 * l.domain()[1]] : [-1, 1]), m.domain()[0] === m.domain()[1] && m.domain(m.domain()[0] ? [m.domain()[0] + .01 * m.domain()[0], m.domain()[1] - .01 * m.domain()[1]] : [-1, 1]);\n        var z = k.selectAll(\"g.nv-wrap.nv-historicalBar-\" + j).data([b[0].values]),\n            A = z.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-historicalBar-\" + j),\n            B = A.append(\"defs\"),\n            C = A.append(\"g\"),\n            D = z.select(\"g\");\n        C.append(\"g\").attr(\"class\", \"nv-bars\"), z.attr(\"transform\", \"translate(\" + g.left + \",\" + g.top + \")\"), k.on(\"click\", function (a, b) {\n          u.chartClick({\n            data: a,\n            index: b,\n            pos: d3.event,\n            id: j\n          });\n        }), B.append(\"clipPath\").attr(\"id\", \"nv-chart-clip-path-\" + j).append(\"rect\"), z.select(\"#nv-chart-clip-path-\" + j + \" rect\").attr(\"width\", x).attr(\"height\", y), D.attr(\"clip-path\", s ? \"url(#nv-chart-clip-path-\" + j + \")\" : \"\");\n        var E = z.select(\".nv-bars\").selectAll(\".nv-bar\").data(function (a) {\n          return a;\n        }, function (a, b) {\n          return n(a, b);\n        });\n        E.exit().remove(), E.enter().append(\"rect\").attr(\"x\", 0).attr(\"y\", function (b, c) {\n          return a.utils.NaNtoZero(m(Math.max(0, o(b, c))));\n        }).attr(\"height\", function (b, c) {\n          return a.utils.NaNtoZero(Math.abs(m(o(b, c)) - m(0)));\n        }).attr(\"transform\", function (a, c) {\n          return \"translate(\" + (l(n(a, c)) - x / b[0].values.length * .45) + \",0)\";\n        }).on(\"mouseover\", function (a, b) {\n          v && (d3.select(this).classed(\"hover\", !0), u.elementMouseover({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }));\n        }).on(\"mouseout\", function (a, b) {\n          v && (d3.select(this).classed(\"hover\", !1), u.elementMouseout({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }));\n        }).on(\"mousemove\", function (a, b) {\n          v && u.elementMousemove({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"click\", function (a, b) {\n          v && (u.elementClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation());\n        }).on(\"dblclick\", function (a, b) {\n          v && (u.elementDblClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation());\n        }), E.attr(\"fill\", function (a, b) {\n          return t(a, b);\n        }).attr(\"class\", function (a, b, c) {\n          return (o(a, b) < 0 ? \"nv-bar negative\" : \"nv-bar positive\") + \" nv-bar-\" + c + \"-\" + b;\n        }).watchTransition(w, \"bars\").attr(\"transform\", function (a, c) {\n          return \"translate(\" + (l(n(a, c)) - x / b[0].values.length * .45) + \",0)\";\n        }).attr(\"width\", x / b[0].values.length * .9), E.watchTransition(w, \"bars\").attr(\"y\", function (b, c) {\n          var d = o(b, c) < 0 ? m(0) : m(0) - m(o(b, c)) < 1 ? m(0) - 1 : m(o(b, c));\n          return a.utils.NaNtoZero(d);\n        }).attr(\"height\", function (b, c) {\n          return a.utils.NaNtoZero(Math.max(Math.abs(m(o(b, c)) - m(0)), 1));\n        });\n      }), w.renderEnd(\"historicalBar immediate\"), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        h = null,\n        i = null,\n        j = Math.floor(1e4 * Math.random()),\n        k = null,\n        l = d3.scale.linear(),\n        m = d3.scale.linear(),\n        n = function n(a) {\n      return a.x;\n    },\n        o = function o(a) {\n      return a.y;\n    },\n        p = [],\n        q = [0],\n        r = !1,\n        s = !0,\n        t = a.utils.defaultColor(),\n        u = d3.dispatch(\"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"elementMousemove\", \"renderEnd\"),\n        v = !0,\n        w = a.utils.renderWatch(u, 0);\n\n    return b.highlightPoint = function (a, b) {\n      k.select(\".nv-bars .nv-bar-0-\" + a).classed(\"hover\", b);\n    }, b.clearHighlights = function () {\n      k.select(\".nv-bars .nv-bar.hover\").classed(\"hover\", !1);\n    }, b.dispatch = u, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      forceX: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      forceY: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      padData: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      y: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      clipEdge: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      interactive: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g.top = void 0 !== a.top ? a.top : g.top, g.right = void 0 !== a.right ? a.right : g.right, g.bottom = void 0 !== a.bottom ? a.bottom : g.bottom, g.left = void 0 !== a.left ? a.left : g.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return t;\n        },\n        set: function set(b) {\n          t = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.historicalBarChart = function (b) {\n    \"use strict\";\n\n    function c(b) {\n      return b.each(function (k) {\n        z.reset(), z.models(f), q && z.models(g), r && z.models(h);\n        var w = d3.select(this),\n            A = this;\n        a.utils.initSVG(w);\n        var B = a.utils.availableWidth(n, w, l),\n            C = a.utils.availableHeight(o, w, l);\n\n        if (c.update = function () {\n          w.transition().duration(y).call(c);\n        }, c.container = this, u.disabled = k.map(function (a) {\n          return !!a.disabled;\n        }), !v) {\n          var D;\n          v = {};\n\n          for (D in u) {\n            v[D] = u[D] instanceof Array ? u[D].slice(0) : u[D];\n          }\n        }\n\n        if (!(k && k.length && k.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(c, w), c;\n        w.selectAll(\".nv-noData\").remove(), d = f.xScale(), e = f.yScale();\n        var E = w.selectAll(\"g.nv-wrap.nv-historicalBarChart\").data([k]),\n            F = E.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-historicalBarChart\").append(\"g\"),\n            G = E.select(\"g\");\n        F.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), F.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), F.append(\"g\").attr(\"class\", \"nv-barsWrap\"), F.append(\"g\").attr(\"class\", \"nv-legendWrap\"), F.append(\"g\").attr(\"class\", \"nv-interactive\"), p && (i.width(B), G.select(\".nv-legendWrap\").datum(k).call(i), l.top != i.height() && (l.top = i.height(), C = a.utils.availableHeight(o, w, l)), E.select(\".nv-legendWrap\").attr(\"transform\", \"translate(0,\" + -l.top + \")\")), E.attr(\"transform\", \"translate(\" + l.left + \",\" + l.top + \")\"), s && G.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + B + \",0)\"), t && (j.width(B).height(C).margin({\n          left: l.left,\n          top: l.top\n        }).svgContainer(w).xScale(d), E.select(\".nv-interactive\").call(j)), f.width(B).height(C).color(k.map(function (a, b) {\n          return a.color || m(a, b);\n        }).filter(function (a, b) {\n          return !k[b].disabled;\n        }));\n        var H = G.select(\".nv-barsWrap\").datum(k.filter(function (a) {\n          return !a.disabled;\n        }));\n        H.transition().call(f), q && (g.scale(d)._ticks(a.utils.calcTicksX(B / 100, k)).tickSize(-C, 0), G.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + e.range()[0] + \")\"), G.select(\".nv-x.nv-axis\").transition().call(g)), r && (h.scale(e)._ticks(a.utils.calcTicksY(C / 36, k)).tickSize(-B, 0), G.select(\".nv-y.nv-axis\").transition().call(h)), j.dispatch.on(\"elementMousemove\", function (b) {\n          f.clearHighlights();\n          var d,\n              e,\n              i,\n              n = [];\n          k.filter(function (a, b) {\n            return a.seriesIndex = b, !a.disabled;\n          }).forEach(function (g) {\n            e = a.interactiveBisect(g.values, b.pointXValue, c.x()), f.highlightPoint(e, !0);\n            var h = g.values[e];\n            void 0 !== h && (void 0 === d && (d = h), void 0 === i && (i = c.xScale()(c.x()(h, e))), n.push({\n              key: g.key,\n              value: c.y()(h, e),\n              color: m(g, g.seriesIndex),\n              data: g.values[e]\n            }));\n          });\n          var o = g.tickFormat()(c.x()(d, e));\n          j.tooltip.position({\n            left: i + l.left,\n            top: b.mouseY + l.top\n          }).chartContainer(A.parentNode).valueFormatter(function (a) {\n            return h.tickFormat()(a);\n          }).data({\n            value: o,\n            index: e,\n            series: n\n          })(), j.renderGuideLine(i);\n        }), j.dispatch.on(\"elementMouseout\", function () {\n          x.tooltipHide(), f.clearHighlights();\n        }), i.dispatch.on(\"legendClick\", function (a) {\n          a.disabled = !a.disabled, k.filter(function (a) {\n            return !a.disabled;\n          }).length || k.map(function (a) {\n            return a.disabled = !1, E.selectAll(\".nv-series\").classed(\"disabled\", !1), a;\n          }), u.disabled = k.map(function (a) {\n            return !!a.disabled;\n          }), x.stateChange(u), b.transition().call(c);\n        }), i.dispatch.on(\"legendDblclick\", function (a) {\n          k.forEach(function (a) {\n            a.disabled = !0;\n          }), a.disabled = !1, u.disabled = k.map(function (a) {\n            return !!a.disabled;\n          }), x.stateChange(u), c.update();\n        }), x.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && (k.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), u.disabled = a.disabled), c.update();\n        });\n      }), z.renderEnd(\"historicalBarChart immediate\"), c;\n    }\n\n    var d,\n        e,\n        f = b || a.models.historicalBar(),\n        g = a.models.axis(),\n        h = a.models.axis(),\n        i = a.models.legend(),\n        j = a.interactiveGuideline(),\n        k = a.models.tooltip(),\n        l = {\n      top: 30,\n      right: 90,\n      bottom: 50,\n      left: 90\n    },\n        m = a.utils.defaultColor(),\n        n = null,\n        o = null,\n        p = !1,\n        q = !0,\n        r = !0,\n        s = !1,\n        t = !1,\n        u = {},\n        v = null,\n        w = null,\n        x = d3.dispatch(\"tooltipHide\", \"stateChange\", \"changeState\", \"renderEnd\"),\n        y = 250;\n    g.orient(\"bottom\").tickPadding(7), h.orient(s ? \"right\" : \"left\"), k.duration(0).headerEnabled(!1).valueFormatter(function (a, b) {\n      return h.tickFormat()(a, b);\n    }).headerFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    });\n    var z = a.utils.renderWatch(x, 0);\n    return f.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.series = {\n        key: c.x()(a.data),\n        value: c.y()(a.data),\n        color: a.color\n      }, k.data(a).hidden(!1);\n    }), f.dispatch.on(\"elementMouseout.tooltip\", function () {\n      k.hidden(!0);\n    }), f.dispatch.on(\"elementMousemove.tooltip\", function () {\n      k.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), c.dispatch = x, c.bars = f, c.legend = i, c.xAxis = g, c.yAxis = h, c.interactiveLayer = j, c.tooltip = k, c.options = a.utils.optionsFunc.bind(c), c._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return k.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), k.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return k.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), k.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l.top = void 0 !== a.top ? a.top : l.top, l.right = void 0 !== a.right ? a.right : l.right, l.bottom = void 0 !== a.bottom ? a.bottom : l.bottom, l.left = void 0 !== a.left ? a.left : l.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return m;\n        },\n        set: function set(b) {\n          m = a.utils.getColor(b), i.color(m), f.color(m);\n        }\n      },\n      duration: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a, z.reset(y), h.duration(y), g.duration(y);\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a, h.orient(a ? \"right\" : \"left\");\n        }\n      },\n      useInteractiveGuideline: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a, a === !0 && c.interactive(!1);\n        }\n      }\n    }), a.utils.inheritOptions(c, f), a.utils.initOptions(c), c;\n  }, a.models.ohlcBarChart = function () {\n    var b = a.models.historicalBarChart(a.models.ohlcBar());\n    return b.useInteractiveGuideline(!0), b.interactiveLayer.tooltip.contentGenerator(function (a) {\n      var c = a.series[0].data,\n          d = c.open < c.close ? \"2ca02c\" : \"d62728\";\n      return '<h3 style=\"color: #' + d + '\">' + a.value + \"</h3><table><tr><td>open:</td><td>\" + b.yAxis.tickFormat()(c.open) + \"</td></tr><tr><td>close:</td><td>\" + b.yAxis.tickFormat()(c.close) + \"</td></tr><tr><td>high</td><td>\" + b.yAxis.tickFormat()(c.high) + \"</td></tr><tr><td>low:</td><td>\" + b.yAxis.tickFormat()(c.low) + \"</td></tr></table>\";\n    }), b;\n  }, a.models.candlestickBarChart = function () {\n    var b = a.models.historicalBarChart(a.models.candlestickBar());\n    return b.useInteractiveGuideline(!0), b.interactiveLayer.tooltip.contentGenerator(function (a) {\n      var c = a.series[0].data,\n          d = c.open < c.close ? \"2ca02c\" : \"d62728\";\n      return '<h3 style=\"color: #' + d + '\">' + a.value + \"</h3><table><tr><td>open:</td><td>\" + b.yAxis.tickFormat()(c.open) + \"</td></tr><tr><td>close:</td><td>\" + b.yAxis.tickFormat()(c.close) + \"</td></tr><tr><td>high</td><td>\" + b.yAxis.tickFormat()(c.high) + \"</td></tr><tr><td>low:</td><td>\" + b.yAxis.tickFormat()(c.low) + \"</td></tr></table>\";\n    }), b;\n  }, a.models.legend = function () {\n    \"use strict\";\n\n    function b(p) {\n      function q(a, b) {\n        return \"furious\" != o ? \"#000\" : m ? a.disengaged ? \"#000\" : \"#fff\" : m ? void 0 : (a.color || (a.color = g(a, b)), a.disabled ? a.color : \"#fff\");\n      }\n\n      function r(a, b) {\n        return m && \"furious\" == o && a.disengaged ? \"#eee\" : a.color || g(a, b);\n      }\n\n      function s(a) {\n        return m && \"furious\" == o ? 1 : a.disabled ? 0 : 1;\n      }\n\n      return p.each(function (b) {\n        var g = d - c.left - c.right,\n            p = d3.select(this);\n        a.utils.initSVG(p);\n        var t = p.selectAll(\"g.nv-legend\").data([b]),\n            u = t.enter().append(\"g\").attr(\"class\", \"nvd3 nv-legend\").append(\"g\"),\n            v = t.select(\"g\");\n        t.attr(\"transform\", \"translate(\" + c.left + \",\" + c.top + \")\");\n        var w,\n            x,\n            y = v.selectAll(\".nv-series\").data(function (a) {\n          return \"furious\" != o ? a : a.filter(function (a) {\n            return m ? !0 : !a.disengaged;\n          });\n        }),\n            z = y.enter().append(\"g\").attr(\"class\", \"nv-series\");\n\n        switch (o) {\n          case \"furious\":\n            x = 23;\n            break;\n\n          case \"classic\":\n            x = 20;\n        }\n\n        if (\"classic\" == o) z.append(\"circle\").style(\"stroke-width\", 2).attr(\"class\", \"nv-legend-symbol\").attr(\"r\", 5), w = y.select(\"circle\");else if (\"furious\" == o) {\n          z.append(\"rect\").style(\"stroke-width\", 2).attr(\"class\", \"nv-legend-symbol\").attr(\"rx\", 3).attr(\"ry\", 3), w = y.select(\".nv-legend-symbol\"), z.append(\"g\").attr(\"class\", \"nv-check-box\").property(\"innerHTML\", '<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>').attr(\"transform\", \"translate(-10,-8)scale(0.5)\");\n          var A = y.select(\".nv-check-box\");\n          A.each(function (a, b) {\n            d3.select(this).selectAll(\"path\").attr(\"stroke\", q(a, b));\n          });\n        }\n        z.append(\"text\").attr(\"text-anchor\", \"start\").attr(\"class\", \"nv-legend-text\").attr(\"dy\", \".32em\").attr(\"dx\", \"8\");\n        var B = y.select(\"text.nv-legend-text\");\n        y.on(\"mouseover\", function (a, b) {\n          n.legendMouseover(a, b);\n        }).on(\"mouseout\", function (a, b) {\n          n.legendMouseout(a, b);\n        }).on(\"click\", function (a, b) {\n          n.legendClick(a, b);\n          var c = y.data();\n\n          if (k) {\n            if (\"classic\" == o) l ? (c.forEach(function (a) {\n              a.disabled = !0;\n            }), a.disabled = !1) : (a.disabled = !a.disabled, c.every(function (a) {\n              return a.disabled;\n            }) && c.forEach(function (a) {\n              a.disabled = !1;\n            }));else if (\"furious\" == o) if (m) a.disengaged = !a.disengaged, a.userDisabled = void 0 == a.userDisabled ? !!a.disabled : a.userDisabled, a.disabled = a.disengaged || a.userDisabled;else if (!m) {\n              a.disabled = !a.disabled, a.userDisabled = a.disabled;\n              var d = c.filter(function (a) {\n                return !a.disengaged;\n              });\n              d.every(function (a) {\n                return a.userDisabled;\n              }) && c.forEach(function (a) {\n                a.disabled = a.userDisabled = !1;\n              });\n            }\n            n.stateChange({\n              disabled: c.map(function (a) {\n                return !!a.disabled;\n              }),\n              disengaged: c.map(function (a) {\n                return !!a.disengaged;\n              })\n            });\n          }\n        }).on(\"dblclick\", function (a, b) {\n          if ((\"furious\" != o || !m) && (n.legendDblclick(a, b), k)) {\n            var c = y.data();\n            c.forEach(function (a) {\n              a.disabled = !0, \"furious\" == o && (a.userDisabled = a.disabled);\n            }), a.disabled = !1, \"furious\" == o && (a.userDisabled = a.disabled), n.stateChange({\n              disabled: c.map(function (a) {\n                return !!a.disabled;\n              })\n            });\n          }\n        }), y.classed(\"nv-disabled\", function (a) {\n          return a.userDisabled;\n        }), y.exit().remove(), B.attr(\"fill\", q).text(f);\n        var C = 0;\n\n        if (h) {\n          var D = [];\n          y.each(function () {\n            var b,\n                c = d3.select(this).select(\"text\");\n\n            try {\n              if (b = c.node().getComputedTextLength(), 0 >= b) throw Error();\n            } catch (d) {\n              b = a.utils.calcApproxTextWidth(c);\n            }\n\n            D.push(b + i);\n          });\n          var E = 0,\n              F = [];\n\n          for (C = 0; g > C && E < D.length;) {\n            F[E] = D[E], C += D[E++];\n          }\n\n          for (0 === E && (E = 1); C > g && E > 1;) {\n            F = [], E--;\n\n            for (var G = 0; G < D.length; G++) {\n              D[G] > (F[G % E] || 0) && (F[G % E] = D[G]);\n            }\n\n            C = F.reduce(function (a, b) {\n              return a + b;\n            });\n          }\n\n          for (var H = [], I = 0, J = 0; E > I; I++) {\n            H[I] = J, J += F[I];\n          }\n\n          y.attr(\"transform\", function (a, b) {\n            return \"translate(\" + H[b % E] + \",\" + (5 + Math.floor(b / E) * x) + \")\";\n          }), j ? v.attr(\"transform\", \"translate(\" + (d - c.right - C) + \",\" + c.top + \")\") : v.attr(\"transform\", \"translate(0,\" + c.top + \")\"), e = c.top + c.bottom + Math.ceil(D.length / E) * x;\n        } else {\n          var K,\n              L = 5,\n              M = 5,\n              N = 0;\n          y.attr(\"transform\", function () {\n            var a = d3.select(this).select(\"text\").node().getComputedTextLength() + i;\n            return K = M, d < c.left + c.right + K + a && (M = K = 5, L += x), M += a, M > N && (N = M), K + N > C && (C = K + N), \"translate(\" + K + \",\" + L + \")\";\n          }), v.attr(\"transform\", \"translate(\" + (d - c.right - N) + \",\" + c.top + \")\"), e = c.top + c.bottom + L + 15;\n        }\n\n        if (\"furious\" == o) {\n          w.attr(\"width\", function (a, b) {\n            return B[0][b].getComputedTextLength() + 27;\n          }).attr(\"height\", 18).attr(\"y\", -9).attr(\"x\", -15), u.insert(\"rect\", \":first-child\").attr(\"class\", \"nv-legend-bg\").attr(\"fill\", \"#eee\").attr(\"opacity\", 0);\n          var O = v.select(\".nv-legend-bg\");\n          O.transition().duration(300).attr(\"x\", -x).attr(\"width\", C + x - 12).attr(\"height\", e + 10).attr(\"y\", -c.top - 10).attr(\"opacity\", m ? 1 : 0);\n        }\n\n        w.style(\"fill\", r).style(\"fill-opacity\", s).style(\"stroke\", r);\n      }), b;\n    }\n\n    var c = {\n      top: 5,\n      right: 0,\n      bottom: 5,\n      left: 0\n    },\n        d = 400,\n        e = 20,\n        f = function f(a) {\n      return a.key;\n    },\n        g = a.utils.getColor(),\n        h = !0,\n        i = 32,\n        j = !0,\n        k = !0,\n        l = !1,\n        m = !1,\n        n = d3.dispatch(\"legendClick\", \"legendDblclick\", \"legendMouseover\", \"legendMouseout\", \"stateChange\"),\n        o = \"classic\";\n\n    return b.dispatch = n, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      key: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      align: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      rightAlign: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      padding: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      updateState: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      radioButtonMode: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      expanded: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      vers: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c.top = void 0 !== a.top ? a.top : c.top, c.right = void 0 !== a.right ? a.right : c.right, c.bottom = void 0 !== a.bottom ? a.bottom : c.bottom, c.left = void 0 !== a.left ? a.left : c.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return g;\n        },\n        set: function set(b) {\n          g = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.line = function () {\n    \"use strict\";\n\n    function b(r) {\n      return v.reset(), v.models(e), r.each(function (b) {\n        i = d3.select(this);\n        var r = a.utils.availableWidth(g, i, f),\n            s = a.utils.availableHeight(h, i, f);\n        a.utils.initSVG(i), c = e.xScale(), d = e.yScale(), t = t || c, u = u || d;\n        var w = i.selectAll(\"g.nv-wrap.nv-line\").data([b]),\n            x = w.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-line\"),\n            y = x.append(\"defs\"),\n            z = x.append(\"g\"),\n            A = w.select(\"g\");\n        z.append(\"g\").attr(\"class\", \"nv-groups\"), z.append(\"g\").attr(\"class\", \"nv-scatterWrap\"), w.attr(\"transform\", \"translate(\" + f.left + \",\" + f.top + \")\"), e.width(r).height(s);\n        var B = w.select(\".nv-scatterWrap\");\n        B.call(e), y.append(\"clipPath\").attr(\"id\", \"nv-edge-clip-\" + e.id()).append(\"rect\"), w.select(\"#nv-edge-clip-\" + e.id() + \" rect\").attr(\"width\", r).attr(\"height\", s > 0 ? s : 0), A.attr(\"clip-path\", p ? \"url(#nv-edge-clip-\" + e.id() + \")\" : \"\"), B.attr(\"clip-path\", p ? \"url(#nv-edge-clip-\" + e.id() + \")\" : \"\");\n        var C = w.select(\".nv-groups\").selectAll(\".nv-group\").data(function (a) {\n          return a;\n        }, function (a) {\n          return a.key;\n        });\n        C.enter().append(\"g\").style(\"stroke-opacity\", 1e-6).style(\"stroke-width\", function (a) {\n          return a.strokeWidth || j;\n        }).style(\"fill-opacity\", 1e-6), C.exit().remove(), C.attr(\"class\", function (a, b) {\n          return (a.classed || \"\") + \" nv-group nv-series-\" + b;\n        }).classed(\"hover\", function (a) {\n          return a.hover;\n        }).style(\"fill\", function (a, b) {\n          return k(a, b);\n        }).style(\"stroke\", function (a, b) {\n          return k(a, b);\n        }), C.watchTransition(v, \"line: groups\").style(\"stroke-opacity\", 1).style(\"fill-opacity\", function (a) {\n          return a.fillOpacity || .5;\n        });\n        var D = C.selectAll(\"path.nv-area\").data(function (a) {\n          return o(a) ? [a] : [];\n        });\n        D.enter().append(\"path\").attr(\"class\", \"nv-area\").attr(\"d\", function (b) {\n          return d3.svg.area().interpolate(q).defined(n).x(function (b, c) {\n            return a.utils.NaNtoZero(t(l(b, c)));\n          }).y0(function (b, c) {\n            return a.utils.NaNtoZero(u(m(b, c)));\n          }).y1(function () {\n            return u(d.domain()[0] <= 0 ? d.domain()[1] >= 0 ? 0 : d.domain()[1] : d.domain()[0]);\n          }).apply(this, [b.values]);\n        }), C.exit().selectAll(\"path.nv-area\").remove(), D.watchTransition(v, \"line: areaPaths\").attr(\"d\", function (b) {\n          return d3.svg.area().interpolate(q).defined(n).x(function (b, d) {\n            return a.utils.NaNtoZero(c(l(b, d)));\n          }).y0(function (b, c) {\n            return a.utils.NaNtoZero(d(m(b, c)));\n          }).y1(function () {\n            return d(d.domain()[0] <= 0 ? d.domain()[1] >= 0 ? 0 : d.domain()[1] : d.domain()[0]);\n          }).apply(this, [b.values]);\n        });\n        var E = C.selectAll(\"path.nv-line\").data(function (a) {\n          return [a.values];\n        });\n        E.enter().append(\"path\").attr(\"class\", \"nv-line\").attr(\"d\", d3.svg.line().interpolate(q).defined(n).x(function (b, c) {\n          return a.utils.NaNtoZero(t(l(b, c)));\n        }).y(function (b, c) {\n          return a.utils.NaNtoZero(u(m(b, c)));\n        })), E.watchTransition(v, \"line: linePaths\").attr(\"d\", d3.svg.line().interpolate(q).defined(n).x(function (b, d) {\n          return a.utils.NaNtoZero(c(l(b, d)));\n        }).y(function (b, c) {\n          return a.utils.NaNtoZero(d(m(b, c)));\n        })), t = c.copy(), u = d.copy();\n      }), v.renderEnd(\"line immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = a.models.scatter(),\n        f = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        g = 960,\n        h = 500,\n        i = null,\n        j = 1.5,\n        k = a.utils.defaultColor(),\n        l = function l(a) {\n      return a.x;\n    },\n        m = function m(a) {\n      return a.y;\n    },\n        n = function n(a, b) {\n      return !isNaN(m(a, b)) && null !== m(a, b);\n    },\n        o = function o(a) {\n      return a.area;\n    },\n        p = !1,\n        q = \"linear\",\n        r = 250,\n        s = d3.dispatch(\"elementClick\", \"elementMouseover\", \"elementMouseout\", \"renderEnd\");\n\n    e.pointSize(16).pointDomain([16, 256]);\n    var t,\n        u,\n        v = a.utils.renderWatch(s, r);\n    return b.dispatch = s, b.scatter = e, e.dispatch.on(\"elementClick\", function () {\n      s.elementClick.apply(this, arguments);\n    }), e.dispatch.on(\"elementMouseover\", function () {\n      s.elementMouseover.apply(this, arguments);\n    }), e.dispatch.on(\"elementMouseout\", function () {\n      s.elementMouseout.apply(this, arguments);\n    }), b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      defined: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      interpolate: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      clipEdge: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f.top = void 0 !== a.top ? a.top : f.top, f.right = void 0 !== a.right ? a.right : f.right, f.bottom = void 0 !== a.bottom ? a.bottom : f.bottom, f.left = void 0 !== a.left ? a.left : f.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a, v.reset(r), e.duration(r);\n        }\n      },\n      isArea: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = d3.functor(a);\n        }\n      },\n      x: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a, e.x(a);\n        }\n      },\n      y: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a, e.y(a);\n        }\n      },\n      color: {\n        get: function get() {\n          return k;\n        },\n        set: function set(b) {\n          k = a.utils.getColor(b), e.color(k);\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.lineChart = function () {\n    \"use strict\";\n\n    function b(j) {\n      return y.reset(), y.models(e), p && y.models(f), q && y.models(g), j.each(function (j) {\n        var v = d3.select(this),\n            y = this;\n        a.utils.initSVG(v);\n        var B = a.utils.availableWidth(m, v, k),\n            C = a.utils.availableHeight(n, v, k);\n\n        if (b.update = function () {\n          0 === x ? v.call(b) : v.transition().duration(x).call(b);\n        }, b.container = this, t.setter(A(j), b.update).getter(z(j)).update(), t.disabled = j.map(function (a) {\n          return !!a.disabled;\n        }), !u) {\n          var D;\n          u = {};\n\n          for (D in t) {\n            u[D] = t[D] instanceof Array ? t[D].slice(0) : t[D];\n          }\n        }\n\n        if (!(j && j.length && j.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, v), b;\n        v.selectAll(\".nv-noData\").remove(), c = e.xScale(), d = e.yScale();\n        var E = v.selectAll(\"g.nv-wrap.nv-lineChart\").data([j]),\n            F = E.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-lineChart\").append(\"g\"),\n            G = E.select(\"g\");\n        F.append(\"rect\").style(\"opacity\", 0), F.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), F.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), F.append(\"g\").attr(\"class\", \"nv-linesWrap\"), F.append(\"g\").attr(\"class\", \"nv-legendWrap\"), F.append(\"g\").attr(\"class\", \"nv-interactive\"), G.select(\"rect\").attr(\"width\", B).attr(\"height\", C > 0 ? C : 0), o && (h.width(B), G.select(\".nv-legendWrap\").datum(j).call(h), k.top != h.height() && (k.top = h.height(), C = a.utils.availableHeight(n, v, k)), E.select(\".nv-legendWrap\").attr(\"transform\", \"translate(0,\" + -k.top + \")\")), E.attr(\"transform\", \"translate(\" + k.left + \",\" + k.top + \")\"), r && G.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + B + \",0)\"), s && (i.width(B).height(C).margin({\n          left: k.left,\n          top: k.top\n        }).svgContainer(v).xScale(c), E.select(\".nv-interactive\").call(i)), e.width(B).height(C).color(j.map(function (a, b) {\n          return a.color || l(a, b);\n        }).filter(function (a, b) {\n          return !j[b].disabled;\n        }));\n        var H = G.select(\".nv-linesWrap\").datum(j.filter(function (a) {\n          return !a.disabled;\n        }));\n        H.call(e), p && (f.scale(c)._ticks(a.utils.calcTicksX(B / 100, j)).tickSize(-C, 0), G.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + d.range()[0] + \")\"), G.select(\".nv-x.nv-axis\").call(f)), q && (g.scale(d)._ticks(a.utils.calcTicksY(C / 36, j)).tickSize(-B, 0), G.select(\".nv-y.nv-axis\").call(g)), h.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            t[c] = a[c];\n          }\n\n          w.stateChange(t), b.update();\n        }), i.dispatch.on(\"elementMousemove\", function (c) {\n          e.clearHighlights();\n          var d,\n              h,\n              m,\n              n = [];\n\n          if (j.filter(function (a, b) {\n            return a.seriesIndex = b, !a.disabled;\n          }).forEach(function (f, g) {\n            h = a.interactiveBisect(f.values, c.pointXValue, b.x());\n            var i = f.values[h],\n                j = b.y()(i, h);\n            null != j && e.highlightPoint(g, h, !0), void 0 !== i && (void 0 === d && (d = i), void 0 === m && (m = b.xScale()(b.x()(i, h))), n.push({\n              key: f.key,\n              value: j,\n              color: l(f, f.seriesIndex)\n            }));\n          }), n.length > 2) {\n            var o = b.yScale().invert(c.mouseY),\n                p = Math.abs(b.yScale().domain()[0] - b.yScale().domain()[1]),\n                q = .03 * p,\n                r = a.nearestValueIndex(n.map(function (a) {\n              return a.value;\n            }), o, q);\n            null !== r && (n[r].highlight = !0);\n          }\n\n          var s = f.tickFormat()(b.x()(d, h));\n          i.tooltip.position({\n            left: c.mouseX + k.left,\n            top: c.mouseY + k.top\n          }).chartContainer(y.parentNode).valueFormatter(function (a) {\n            return null == a ? \"N/A\" : g.tickFormat()(a);\n          }).data({\n            value: s,\n            index: h,\n            series: n\n          })(), i.renderGuideLine(m);\n        }), i.dispatch.on(\"elementClick\", function (c) {\n          var d,\n              f = [];\n          j.filter(function (a, b) {\n            return a.seriesIndex = b, !a.disabled;\n          }).forEach(function (e) {\n            var g = a.interactiveBisect(e.values, c.pointXValue, b.x()),\n                h = e.values[g];\n\n            if (\"undefined\" != typeof h) {\n              \"undefined\" == typeof d && (d = b.xScale()(b.x()(h, g)));\n              var i = b.yScale()(b.y()(h, g));\n              f.push({\n                point: h,\n                pointIndex: g,\n                pos: [d, i],\n                seriesIndex: e.seriesIndex,\n                series: e\n              });\n            }\n          }), e.dispatch.elementClick(f);\n        }), i.dispatch.on(\"elementMouseout\", function () {\n          e.clearHighlights();\n        }), w.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && j.length === a.disabled.length && (j.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), t.disabled = a.disabled), b.update();\n        });\n      }), y.renderEnd(\"lineChart immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = a.models.line(),\n        f = a.models.axis(),\n        g = a.models.axis(),\n        h = a.models.legend(),\n        i = a.interactiveGuideline(),\n        j = a.models.tooltip(),\n        k = {\n      top: 30,\n      right: 20,\n      bottom: 50,\n      left: 60\n    },\n        l = a.utils.defaultColor(),\n        m = null,\n        n = null,\n        o = !0,\n        p = !0,\n        q = !0,\n        r = !1,\n        s = !1,\n        t = a.utils.state(),\n        u = null,\n        v = null,\n        w = d3.dispatch(\"tooltipShow\", \"tooltipHide\", \"stateChange\", \"changeState\", \"renderEnd\"),\n        x = 250;\n    f.orient(\"bottom\").tickPadding(7), g.orient(r ? \"right\" : \"left\"), j.valueFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    }).headerFormatter(function (a, b) {\n      return f.tickFormat()(a, b);\n    });\n\n    var y = a.utils.renderWatch(w, x),\n        z = function z(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          })\n        };\n      };\n    },\n        A = function A(a) {\n      return function (b) {\n        void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    };\n\n    return e.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      j.data(a).position(a.pos).hidden(!1);\n    }), e.dispatch.on(\"elementMouseout.tooltip\", function () {\n      j.hidden(!0);\n    }), b.dispatch = w, b.lines = e, b.legend = h, b.xAxis = f, b.yAxis = g, b.interactiveLayer = i, b.tooltip = j, b.dispatch = w, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return j.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), j.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return j.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), j.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k.top = void 0 !== a.top ? a.top : k.top, k.right = void 0 !== a.right ? a.right : k.right, k.bottom = void 0 !== a.bottom ? a.bottom : k.bottom, k.left = void 0 !== a.left ? a.left : k.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a, y.reset(x), e.duration(x), f.duration(x), g.duration(x);\n        }\n      },\n      color: {\n        get: function get() {\n          return l;\n        },\n        set: function set(b) {\n          l = a.utils.getColor(b), h.color(l), e.color(l);\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a, g.orient(r ? \"right\" : \"left\");\n        }\n      },\n      useInteractiveGuideline: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a, s && (e.interactive(!1), e.useVoronoi(!1));\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.linePlusBarChart = function () {\n    \"use strict\";\n\n    function b(v) {\n      return v.each(function (v) {\n        function J(a) {\n          var b = +(\"e\" == a),\n              c = b ? 1 : -1,\n              d = X / 3;\n          return \"M\" + .5 * c + \",\" + d + \"A6,6 0 0 \" + b + \" \" + 6.5 * c + \",\" + (d + 6) + \"V\" + (2 * d - 6) + \"A6,6 0 0 \" + b + \" \" + .5 * c + \",\" + 2 * d + \"ZM\" + 2.5 * c + \",\" + (d + 8) + \"V\" + (2 * d - 8) + \"M\" + 4.5 * c + \",\" + (d + 8) + \"V\" + (2 * d - 8);\n        }\n\n        function S() {\n          u.empty() || u.extent(I), kb.data([u.empty() ? e.domain() : I]).each(function (a) {\n            var b = e(a[0]) - e.range()[0],\n                c = e.range()[1] - e(a[1]);\n            d3.select(this).select(\".left\").attr(\"width\", 0 > b ? 0 : b), d3.select(this).select(\".right\").attr(\"x\", e(a[1])).attr(\"width\", 0 > c ? 0 : c);\n          });\n        }\n\n        function T() {\n          I = u.empty() ? null : u.extent(), c = u.empty() ? e.domain() : u.extent(), K.brush({\n            extent: c,\n            brush: u\n          }), S(), l.width(V).height(W).color(v.map(function (a, b) {\n            return a.color || C(a, b);\n          }).filter(function (a, b) {\n            return !v[b].disabled && v[b].bar;\n          })), j.width(V).height(W).color(v.map(function (a, b) {\n            return a.color || C(a, b);\n          }).filter(function (a, b) {\n            return !v[b].disabled && !v[b].bar;\n          }));\n          var b = db.select(\".nv-focus .nv-barsWrap\").datum(Z.length ? Z.map(function (a) {\n            return {\n              key: a.key,\n              values: a.values.filter(function (a, b) {\n                return l.x()(a, b) >= c[0] && l.x()(a, b) <= c[1];\n              })\n            };\n          }) : [{\n            values: []\n          }]),\n              h = db.select(\".nv-focus .nv-linesWrap\").datum($[0].disabled ? [{\n            values: []\n          }] : $.map(function (a) {\n            return {\n              area: a.area,\n              fillOpacity: a.fillOpacity,\n              key: a.key,\n              values: a.values.filter(function (a, b) {\n                return j.x()(a, b) >= c[0] && j.x()(a, b) <= c[1];\n              })\n            };\n          }));\n          d = Z.length ? l.xScale() : j.xScale(), n.scale(d)._ticks(a.utils.calcTicksX(V / 100, v)).tickSize(-W, 0), n.domain([Math.ceil(c[0]), Math.floor(c[1])]), db.select(\".nv-x.nv-axis\").transition().duration(L).call(n), b.transition().duration(L).call(l), h.transition().duration(L).call(j), db.select(\".nv-focus .nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + f.range()[0] + \")\"), p.scale(f)._ticks(a.utils.calcTicksY(W / 36, v)).tickSize(-V, 0), q.scale(g)._ticks(a.utils.calcTicksY(W / 36, v)).tickSize(Z.length ? 0 : -V, 0), db.select(\".nv-focus .nv-y1.nv-axis\").style(\"opacity\", Z.length ? 1 : 0), db.select(\".nv-focus .nv-y2.nv-axis\").style(\"opacity\", $.length && !$[0].disabled ? 1 : 0).attr(\"transform\", \"translate(\" + d.range()[1] + \",0)\"), db.select(\".nv-focus .nv-y1.nv-axis\").transition().duration(L).call(p), db.select(\".nv-focus .nv-y2.nv-axis\").transition().duration(L).call(q);\n        }\n\n        var U = d3.select(this);\n        a.utils.initSVG(U);\n        var V = a.utils.availableWidth(y, U, w),\n            W = a.utils.availableHeight(z, U, w) - (E ? H : 0),\n            X = H - x.top - x.bottom;\n\n        if (b.update = function () {\n          U.transition().duration(L).call(b);\n        }, b.container = this, M.setter(R(v), b.update).getter(Q(v)).update(), M.disabled = v.map(function (a) {\n          return !!a.disabled;\n        }), !N) {\n          var Y;\n          N = {};\n\n          for (Y in M) {\n            N[Y] = M[Y] instanceof Array ? M[Y].slice(0) : M[Y];\n          }\n        }\n\n        if (!(v && v.length && v.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, U), b;\n        U.selectAll(\".nv-noData\").remove();\n        var Z = v.filter(function (a) {\n          return !a.disabled && a.bar;\n        }),\n            $ = v.filter(function (a) {\n          return !a.bar;\n        });\n        d = l.xScale(), e = o.scale(), f = l.yScale(), g = j.yScale(), h = m.yScale(), i = k.yScale();\n\n        var _ = v.filter(function (a) {\n          return !a.disabled && a.bar;\n        }).map(function (a) {\n          return a.values.map(function (a, b) {\n            return {\n              x: A(a, b),\n              y: B(a, b)\n            };\n          });\n        }),\n            ab = v.filter(function (a) {\n          return !a.disabled && !a.bar;\n        }).map(function (a) {\n          return a.values.map(function (a, b) {\n            return {\n              x: A(a, b),\n              y: B(a, b)\n            };\n          });\n        });\n\n        d.range([0, V]), e.domain(d3.extent(d3.merge(_.concat(ab)), function (a) {\n          return a.x;\n        })).range([0, V]);\n        var bb = U.selectAll(\"g.nv-wrap.nv-linePlusBar\").data([v]),\n            cb = bb.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-linePlusBar\").append(\"g\"),\n            db = bb.select(\"g\");\n        cb.append(\"g\").attr(\"class\", \"nv-legendWrap\");\n        var eb = cb.append(\"g\").attr(\"class\", \"nv-focus\");\n        eb.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), eb.append(\"g\").attr(\"class\", \"nv-y1 nv-axis\"), eb.append(\"g\").attr(\"class\", \"nv-y2 nv-axis\"), eb.append(\"g\").attr(\"class\", \"nv-barsWrap\"), eb.append(\"g\").attr(\"class\", \"nv-linesWrap\");\n        var fb = cb.append(\"g\").attr(\"class\", \"nv-context\");\n\n        if (fb.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), fb.append(\"g\").attr(\"class\", \"nv-y1 nv-axis\"), fb.append(\"g\").attr(\"class\", \"nv-y2 nv-axis\"), fb.append(\"g\").attr(\"class\", \"nv-barsWrap\"), fb.append(\"g\").attr(\"class\", \"nv-linesWrap\"), fb.append(\"g\").attr(\"class\", \"nv-brushBackground\"), fb.append(\"g\").attr(\"class\", \"nv-x nv-brush\"), D) {\n          var gb = t.align() ? V / 2 : V,\n              hb = t.align() ? gb : 0;\n          t.width(gb), db.select(\".nv-legendWrap\").datum(v.map(function (a) {\n            return a.originalKey = void 0 === a.originalKey ? a.key : a.originalKey, a.key = a.originalKey + (a.bar ? O : P), a;\n          })).call(t), w.top != t.height() && (w.top = t.height(), W = a.utils.availableHeight(z, U, w) - H), db.select(\".nv-legendWrap\").attr(\"transform\", \"translate(\" + hb + \",\" + -w.top + \")\");\n        }\n\n        bb.attr(\"transform\", \"translate(\" + w.left + \",\" + w.top + \")\"), db.select(\".nv-context\").style(\"display\", E ? \"initial\" : \"none\"), m.width(V).height(X).color(v.map(function (a, b) {\n          return a.color || C(a, b);\n        }).filter(function (a, b) {\n          return !v[b].disabled && v[b].bar;\n        })), k.width(V).height(X).color(v.map(function (a, b) {\n          return a.color || C(a, b);\n        }).filter(function (a, b) {\n          return !v[b].disabled && !v[b].bar;\n        }));\n        var ib = db.select(\".nv-context .nv-barsWrap\").datum(Z.length ? Z : [{\n          values: []\n        }]),\n            jb = db.select(\".nv-context .nv-linesWrap\").datum($[0].disabled ? [{\n          values: []\n        }] : $);\n        db.select(\".nv-context\").attr(\"transform\", \"translate(0,\" + (W + w.bottom + x.top) + \")\"), ib.transition().call(m), jb.transition().call(k), G && (o._ticks(a.utils.calcTicksX(V / 100, v)).tickSize(-X, 0), db.select(\".nv-context .nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + h.range()[0] + \")\"), db.select(\".nv-context .nv-x.nv-axis\").transition().call(o)), F && (r.scale(h)._ticks(X / 36).tickSize(-V, 0), s.scale(i)._ticks(X / 36).tickSize(Z.length ? 0 : -V, 0), db.select(\".nv-context .nv-y3.nv-axis\").style(\"opacity\", Z.length ? 1 : 0).attr(\"transform\", \"translate(0,\" + e.range()[0] + \")\"), db.select(\".nv-context .nv-y2.nv-axis\").style(\"opacity\", $.length ? 1 : 0).attr(\"transform\", \"translate(\" + e.range()[1] + \",0)\"), db.select(\".nv-context .nv-y1.nv-axis\").transition().call(r), db.select(\".nv-context .nv-y2.nv-axis\").transition().call(s)), u.x(e).on(\"brush\", T), I && u.extent(I);\n        var kb = db.select(\".nv-brushBackground\").selectAll(\"g\").data([I || u.extent()]),\n            lb = kb.enter().append(\"g\");\n        lb.append(\"rect\").attr(\"class\", \"left\").attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", X), lb.append(\"rect\").attr(\"class\", \"right\").attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", X);\n        var mb = db.select(\".nv-x.nv-brush\").call(u);\n        mb.selectAll(\"rect\").attr(\"height\", X), mb.selectAll(\".resize\").append(\"path\").attr(\"d\", J), t.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            M[c] = a[c];\n          }\n\n          K.stateChange(M), b.update();\n        }), K.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && (v.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), M.disabled = a.disabled), b.update();\n        }), T();\n      }), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j = a.models.line(),\n        k = a.models.line(),\n        l = a.models.historicalBar(),\n        m = a.models.historicalBar(),\n        n = a.models.axis(),\n        o = a.models.axis(),\n        p = a.models.axis(),\n        q = a.models.axis(),\n        r = a.models.axis(),\n        s = a.models.axis(),\n        t = a.models.legend(),\n        u = d3.svg.brush(),\n        v = a.models.tooltip(),\n        w = {\n      top: 30,\n      right: 30,\n      bottom: 30,\n      left: 60\n    },\n        x = {\n      top: 0,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        y = null,\n        z = null,\n        A = function A(a) {\n      return a.x;\n    },\n        B = function B(a) {\n      return a.y;\n    },\n        C = a.utils.defaultColor(),\n        D = !0,\n        E = !0,\n        F = !1,\n        G = !0,\n        H = 50,\n        I = null,\n        J = null,\n        K = d3.dispatch(\"brush\", \"stateChange\", \"changeState\"),\n        L = 0,\n        M = a.utils.state(),\n        N = null,\n        O = \" (left axis)\",\n        P = \" (right axis)\";\n\n    j.clipEdge(!0), k.interactive(!1), n.orient(\"bottom\").tickPadding(5), p.orient(\"left\"), q.orient(\"right\"), o.orient(\"bottom\").tickPadding(5), r.orient(\"left\"), s.orient(\"right\"), v.headerEnabled(!0).headerFormatter(function (a, b) {\n      return n.tickFormat()(a, b);\n    });\n\n    var Q = function Q(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          })\n        };\n      };\n    },\n        R = function R(a) {\n      return function (b) {\n        void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    };\n\n    return j.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      v.duration(100).valueFormatter(function (a, b) {\n        return q.tickFormat()(a, b);\n      }).data(a).position(a.pos).hidden(!1);\n    }), j.dispatch.on(\"elementMouseout.tooltip\", function () {\n      v.hidden(!0);\n    }), l.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.value = b.x()(a.data), a.series = {\n        value: b.y()(a.data),\n        color: a.color\n      }, v.duration(0).valueFormatter(function (a, b) {\n        return p.tickFormat()(a, b);\n      }).data(a).hidden(!1);\n    }), l.dispatch.on(\"elementMouseout.tooltip\", function () {\n      v.hidden(!0);\n    }), l.dispatch.on(\"elementMousemove.tooltip\", function () {\n      v.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.dispatch = K, b.legend = t, b.lines = j, b.lines2 = k, b.bars = l, b.bars2 = m, b.xAxis = n, b.x2Axis = o, b.y1Axis = p, b.y2Axis = q, b.y3Axis = r, b.y4Axis = s, b.tooltip = v, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return D;\n        },\n        set: function set(a) {\n          D = a;\n        }\n      },\n      brushExtent: {\n        get: function get() {\n          return I;\n        },\n        set: function set(a) {\n          I = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return J;\n        },\n        set: function set(a) {\n          J = a;\n        }\n      },\n      focusEnable: {\n        get: function get() {\n          return E;\n        },\n        set: function set(a) {\n          E = a;\n        }\n      },\n      focusHeight: {\n        get: function get() {\n          return H;\n        },\n        set: function set(a) {\n          H = a;\n        }\n      },\n      focusShowAxisX: {\n        get: function get() {\n          return G;\n        },\n        set: function set(a) {\n          G = a;\n        }\n      },\n      focusShowAxisY: {\n        get: function get() {\n          return F;\n        },\n        set: function set(a) {\n          F = a;\n        }\n      },\n      legendLeftAxisHint: {\n        get: function get() {\n          return O;\n        },\n        set: function set(a) {\n          O = a;\n        }\n      },\n      legendRightAxisHint: {\n        get: function get() {\n          return P;\n        },\n        set: function set(a) {\n          P = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return v.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), v.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return v.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), v.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w.top = void 0 !== a.top ? a.top : w.top, w.right = void 0 !== a.right ? a.right : w.right, w.bottom = void 0 !== a.bottom ? a.bottom : w.bottom, w.left = void 0 !== a.left ? a.left : w.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return L;\n        },\n        set: function set(a) {\n          L = a;\n        }\n      },\n      color: {\n        get: function get() {\n          return C;\n        },\n        set: function set(b) {\n          C = a.utils.getColor(b), t.color(C);\n        }\n      },\n      x: {\n        get: function get() {\n          return A;\n        },\n        set: function set(a) {\n          A = a, j.x(a), k.x(a), l.x(a), m.x(a);\n        }\n      },\n      y: {\n        get: function get() {\n          return B;\n        },\n        set: function set(a) {\n          B = a, j.y(a), k.y(a), l.y(a), m.y(a);\n        }\n      }\n    }), a.utils.inheritOptions(b, j), a.utils.initOptions(b), b;\n  }, a.models.lineWithFocusChart = function () {\n    \"use strict\";\n\n    function b(o) {\n      return o.each(function (o) {\n        function z(a) {\n          var b = +(\"e\" == a),\n              c = b ? 1 : -1,\n              d = M / 3;\n          return \"M\" + .5 * c + \",\" + d + \"A6,6 0 0 \" + b + \" \" + 6.5 * c + \",\" + (d + 6) + \"V\" + (2 * d - 6) + \"A6,6 0 0 \" + b + \" \" + .5 * c + \",\" + 2 * d + \"ZM\" + 2.5 * c + \",\" + (d + 8) + \"V\" + (2 * d - 8) + \"M\" + 4.5 * c + \",\" + (d + 8) + \"V\" + (2 * d - 8);\n        }\n\n        function G() {\n          n.empty() || n.extent(y), U.data([n.empty() ? e.domain() : y]).each(function (a) {\n            var b = e(a[0]) - c.range()[0],\n                d = K - e(a[1]);\n            d3.select(this).select(\".left\").attr(\"width\", 0 > b ? 0 : b), d3.select(this).select(\".right\").attr(\"x\", e(a[1])).attr(\"width\", 0 > d ? 0 : d);\n          });\n        }\n\n        function H() {\n          y = n.empty() ? null : n.extent();\n          var a = n.empty() ? e.domain() : n.extent();\n\n          if (!(Math.abs(a[0] - a[1]) <= 1)) {\n            A.brush({\n              extent: a,\n              brush: n\n            }), G();\n            var b = Q.select(\".nv-focus .nv-linesWrap\").datum(o.filter(function (a) {\n              return !a.disabled;\n            }).map(function (b) {\n              return {\n                key: b.key,\n                area: b.area,\n                values: b.values.filter(function (b, c) {\n                  return g.x()(b, c) >= a[0] && g.x()(b, c) <= a[1];\n                })\n              };\n            }));\n            b.transition().duration(B).call(g), Q.select(\".nv-focus .nv-x.nv-axis\").transition().duration(B).call(i), Q.select(\".nv-focus .nv-y.nv-axis\").transition().duration(B).call(j);\n          }\n        }\n\n        var I = d3.select(this),\n            J = this;\n        a.utils.initSVG(I);\n        var K = a.utils.availableWidth(t, I, q),\n            L = a.utils.availableHeight(u, I, q) - v,\n            M = v - r.top - r.bottom;\n\n        if (b.update = function () {\n          I.transition().duration(B).call(b);\n        }, b.container = this, C.setter(F(o), b.update).getter(E(o)).update(), C.disabled = o.map(function (a) {\n          return !!a.disabled;\n        }), !D) {\n          var N;\n          D = {};\n\n          for (N in C) {\n            D[N] = C[N] instanceof Array ? C[N].slice(0) : C[N];\n          }\n        }\n\n        if (!(o && o.length && o.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, I), b;\n        I.selectAll(\".nv-noData\").remove(), c = g.xScale(), d = g.yScale(), e = h.xScale(), f = h.yScale();\n        var O = I.selectAll(\"g.nv-wrap.nv-lineWithFocusChart\").data([o]),\n            P = O.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-lineWithFocusChart\").append(\"g\"),\n            Q = O.select(\"g\");\n        P.append(\"g\").attr(\"class\", \"nv-legendWrap\");\n        var R = P.append(\"g\").attr(\"class\", \"nv-focus\");\n        R.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), R.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), R.append(\"g\").attr(\"class\", \"nv-linesWrap\"), R.append(\"g\").attr(\"class\", \"nv-interactive\");\n        var S = P.append(\"g\").attr(\"class\", \"nv-context\");\n        S.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), S.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), S.append(\"g\").attr(\"class\", \"nv-linesWrap\"), S.append(\"g\").attr(\"class\", \"nv-brushBackground\"), S.append(\"g\").attr(\"class\", \"nv-x nv-brush\"), x && (m.width(K), Q.select(\".nv-legendWrap\").datum(o).call(m), q.top != m.height() && (q.top = m.height(), L = a.utils.availableHeight(u, I, q) - v), Q.select(\".nv-legendWrap\").attr(\"transform\", \"translate(0,\" + -q.top + \")\")), O.attr(\"transform\", \"translate(\" + q.left + \",\" + q.top + \")\"), w && (p.width(K).height(L).margin({\n          left: q.left,\n          top: q.top\n        }).svgContainer(I).xScale(c), O.select(\".nv-interactive\").call(p)), g.width(K).height(L).color(o.map(function (a, b) {\n          return a.color || s(a, b);\n        }).filter(function (a, b) {\n          return !o[b].disabled;\n        })), h.defined(g.defined()).width(K).height(M).color(o.map(function (a, b) {\n          return a.color || s(a, b);\n        }).filter(function (a, b) {\n          return !o[b].disabled;\n        })), Q.select(\".nv-context\").attr(\"transform\", \"translate(0,\" + (L + q.bottom + r.top) + \")\");\n        var T = Q.select(\".nv-context .nv-linesWrap\").datum(o.filter(function (a) {\n          return !a.disabled;\n        }));\n        d3.transition(T).call(h), i.scale(c)._ticks(a.utils.calcTicksX(K / 100, o)).tickSize(-L, 0), j.scale(d)._ticks(a.utils.calcTicksY(L / 36, o)).tickSize(-K, 0), Q.select(\".nv-focus .nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + L + \")\"), n.x(e).on(\"brush\", function () {\n          H();\n        }), y && n.extent(y);\n        var U = Q.select(\".nv-brushBackground\").selectAll(\"g\").data([y || n.extent()]),\n            V = U.enter().append(\"g\");\n        V.append(\"rect\").attr(\"class\", \"left\").attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", M), V.append(\"rect\").attr(\"class\", \"right\").attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", M);\n        var W = Q.select(\".nv-x.nv-brush\").call(n);\n        W.selectAll(\"rect\").attr(\"height\", M), W.selectAll(\".resize\").append(\"path\").attr(\"d\", z), H(), k.scale(e)._ticks(a.utils.calcTicksX(K / 100, o)).tickSize(-M, 0), Q.select(\".nv-context .nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + f.range()[0] + \")\"), d3.transition(Q.select(\".nv-context .nv-x.nv-axis\")).call(k), l.scale(f)._ticks(a.utils.calcTicksY(M / 36, o)).tickSize(-K, 0), d3.transition(Q.select(\".nv-context .nv-y.nv-axis\")).call(l), Q.select(\".nv-context .nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + f.range()[0] + \")\"), m.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            C[c] = a[c];\n          }\n\n          A.stateChange(C), b.update();\n        }), p.dispatch.on(\"elementMousemove\", function (c) {\n          g.clearHighlights();\n          var d,\n              f,\n              h,\n              k = [];\n\n          if (o.filter(function (a, b) {\n            return a.seriesIndex = b, !a.disabled;\n          }).forEach(function (i, j) {\n            var l = n.empty() ? e.domain() : n.extent(),\n                m = i.values.filter(function (a, b) {\n              return g.x()(a, b) >= l[0] && g.x()(a, b) <= l[1];\n            });\n            f = a.interactiveBisect(m, c.pointXValue, g.x());\n            var o = m[f],\n                p = b.y()(o, f);\n            null != p && g.highlightPoint(j, f, !0), void 0 !== o && (void 0 === d && (d = o), void 0 === h && (h = b.xScale()(b.x()(o, f))), k.push({\n              key: i.key,\n              value: b.y()(o, f),\n              color: s(i, i.seriesIndex)\n            }));\n          }), k.length > 2) {\n            var l = b.yScale().invert(c.mouseY),\n                m = Math.abs(b.yScale().domain()[0] - b.yScale().domain()[1]),\n                r = .03 * m,\n                t = a.nearestValueIndex(k.map(function (a) {\n              return a.value;\n            }), l, r);\n            null !== t && (k[t].highlight = !0);\n          }\n\n          var u = i.tickFormat()(b.x()(d, f));\n          p.tooltip.position({\n            left: c.mouseX + q.left,\n            top: c.mouseY + q.top\n          }).chartContainer(J.parentNode).valueFormatter(function (a) {\n            return null == a ? \"N/A\" : j.tickFormat()(a);\n          }).data({\n            value: u,\n            index: f,\n            series: k\n          })(), p.renderGuideLine(h);\n        }), p.dispatch.on(\"elementMouseout\", function () {\n          g.clearHighlights();\n        }), A.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && o.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), b.update();\n        });\n      }), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g = a.models.line(),\n        h = a.models.line(),\n        i = a.models.axis(),\n        j = a.models.axis(),\n        k = a.models.axis(),\n        l = a.models.axis(),\n        m = a.models.legend(),\n        n = d3.svg.brush(),\n        o = a.models.tooltip(),\n        p = a.interactiveGuideline(),\n        q = {\n      top: 30,\n      right: 30,\n      bottom: 30,\n      left: 60\n    },\n        r = {\n      top: 0,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        s = a.utils.defaultColor(),\n        t = null,\n        u = null,\n        v = 50,\n        w = !1,\n        x = !0,\n        y = null,\n        z = null,\n        A = d3.dispatch(\"brush\", \"stateChange\", \"changeState\"),\n        B = 250,\n        C = a.utils.state(),\n        D = null;\n    g.clipEdge(!0).duration(0), h.interactive(!1), i.orient(\"bottom\").tickPadding(5), j.orient(\"left\"), k.orient(\"bottom\").tickPadding(5), l.orient(\"left\"), o.valueFormatter(function (a, b) {\n      return j.tickFormat()(a, b);\n    }).headerFormatter(function (a, b) {\n      return i.tickFormat()(a, b);\n    });\n\n    var E = function E(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          })\n        };\n      };\n    },\n        F = function F(a) {\n      return function (b) {\n        void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    };\n\n    return g.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      o.data(a).position(a.pos).hidden(!1);\n    }), g.dispatch.on(\"elementMouseout.tooltip\", function () {\n      o.hidden(!0);\n    }), b.dispatch = A, b.legend = m, b.lines = g, b.lines2 = h, b.xAxis = i, b.yAxis = j, b.x2Axis = k, b.y2Axis = l, b.interactiveLayer = p, b.tooltip = o, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      focusHeight: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a;\n        }\n      },\n      brushExtent: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return D;\n        },\n        set: function set(a) {\n          D = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return o.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), o.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return o.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), o.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q.top = void 0 !== a.top ? a.top : q.top, q.right = void 0 !== a.right ? a.right : q.right, q.bottom = void 0 !== a.bottom ? a.bottom : q.bottom, q.left = void 0 !== a.left ? a.left : q.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return s;\n        },\n        set: function set(b) {\n          s = a.utils.getColor(b), m.color(s);\n        }\n      },\n      interpolate: {\n        get: function get() {\n          return g.interpolate();\n        },\n        set: function set(a) {\n          g.interpolate(a), h.interpolate(a);\n        }\n      },\n      xTickFormat: {\n        get: function get() {\n          return i.tickFormat();\n        },\n        set: function set(a) {\n          i.tickFormat(a), k.tickFormat(a);\n        }\n      },\n      yTickFormat: {\n        get: function get() {\n          return j.tickFormat();\n        },\n        set: function set(a) {\n          j.tickFormat(a), l.tickFormat(a);\n        }\n      },\n      duration: {\n        get: function get() {\n          return B;\n        },\n        set: function set(a) {\n          B = a, j.duration(B), l.duration(B), i.duration(B), k.duration(B);\n        }\n      },\n      x: {\n        get: function get() {\n          return g.x();\n        },\n        set: function set(a) {\n          g.x(a), h.x(a);\n        }\n      },\n      y: {\n        get: function get() {\n          return g.y();\n        },\n        set: function set(a) {\n          g.y(a), h.y(a);\n        }\n      },\n      useInteractiveGuideline: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a, w && (g.interactive(!1), g.useVoronoi(!1));\n        }\n      }\n    }), a.utils.inheritOptions(b, g), a.utils.initOptions(b), b;\n  }, a.models.multiBar = function () {\n    \"use strict\";\n\n    function b(E) {\n      return C.reset(), E.each(function (b) {\n        var E = k - j.left - j.right,\n            F = l - j.top - j.bottom;\n        p = d3.select(this), a.utils.initSVG(p);\n        var G = 0;\n\n        if (x && b.length && (x = [{\n          values: b[0].values.map(function (a) {\n            return {\n              x: a.x,\n              y: 0,\n              series: a.series,\n              size: .01\n            };\n          })\n        }]), u) {\n          var H = d3.layout.stack().offset(v).values(function (a) {\n            return a.values;\n          }).y(r)(!b.length && x ? x : b);\n          H.forEach(function (a, c) {\n            a.nonStackable ? (b[c].nonStackableSeries = G++, H[c] = b[c]) : c > 0 && H[c - 1].nonStackable && H[c].values.map(function (a, b) {\n              a.y0 -= H[c - 1].values[b].y, a.y1 = a.y0 + a.y;\n            });\n          }), b = H;\n        }\n\n        b.forEach(function (a, b) {\n          a.values.forEach(function (c) {\n            c.series = b, c.key = a.key;\n          });\n        }), u && b[0].values.map(function (a, c) {\n          var d = 0,\n              e = 0;\n          b.map(function (a, f) {\n            if (!b[f].nonStackable) {\n              var g = a.values[c];\n              g.size = Math.abs(g.y), g.y < 0 ? (g.y1 = e, e -= g.size) : (g.y1 = g.size + d, d += g.size);\n            }\n          });\n        });\n        var I = d && e ? [] : b.map(function (a, b) {\n          return a.values.map(function (a, c) {\n            return {\n              x: q(a, c),\n              y: r(a, c),\n              y0: a.y0,\n              y1: a.y1,\n              idx: b\n            };\n          });\n        });\n        m.domain(d || d3.merge(I).map(function (a) {\n          return a.x;\n        })).rangeBands(f || [0, E], A), n.domain(e || d3.extent(d3.merge(I).map(function (a) {\n          var c = a.y;\n          return u && !b[a.idx].nonStackable && (c = a.y > 0 ? a.y1 : a.y1 + a.y), c;\n        }).concat(s))).range(g || [F, 0]), m.domain()[0] === m.domain()[1] && m.domain(m.domain()[0] ? [m.domain()[0] - .01 * m.domain()[0], m.domain()[1] + .01 * m.domain()[1]] : [-1, 1]), n.domain()[0] === n.domain()[1] && n.domain(n.domain()[0] ? [n.domain()[0] + .01 * n.domain()[0], n.domain()[1] - .01 * n.domain()[1]] : [-1, 1]), h = h || m, i = i || n;\n        var J = p.selectAll(\"g.nv-wrap.nv-multibar\").data([b]),\n            K = J.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-multibar\"),\n            L = K.append(\"defs\"),\n            M = K.append(\"g\"),\n            N = J.select(\"g\");\n        M.append(\"g\").attr(\"class\", \"nv-groups\"), J.attr(\"transform\", \"translate(\" + j.left + \",\" + j.top + \")\"), L.append(\"clipPath\").attr(\"id\", \"nv-edge-clip-\" + o).append(\"rect\"), J.select(\"#nv-edge-clip-\" + o + \" rect\").attr(\"width\", E).attr(\"height\", F), N.attr(\"clip-path\", t ? \"url(#nv-edge-clip-\" + o + \")\" : \"\");\n        var O = J.select(\".nv-groups\").selectAll(\".nv-group\").data(function (a) {\n          return a;\n        }, function (a, b) {\n          return b;\n        });\n        O.enter().append(\"g\").style(\"stroke-opacity\", 1e-6).style(\"fill-opacity\", 1e-6);\n        var P = C.transition(O.exit().selectAll(\"rect.nv-bar\"), \"multibarExit\", Math.min(100, z)).attr(\"y\", function (a) {\n          var c = i(0) || 0;\n          return u && b[a.series] && !b[a.series].nonStackable && (c = i(a.y0)), c;\n        }).attr(\"height\", 0).remove();\n        P.delay && P.delay(function (a, b) {\n          var c = b * (z / (D + 1)) - b;\n          return c;\n        }), O.attr(\"class\", function (a, b) {\n          return \"nv-group nv-series-\" + b;\n        }).classed(\"hover\", function (a) {\n          return a.hover;\n        }).style(\"fill\", function (a, b) {\n          return w(a, b);\n        }).style(\"stroke\", function (a, b) {\n          return w(a, b);\n        }), O.style(\"stroke-opacity\", 1).style(\"fill-opacity\", .75);\n        var Q = O.selectAll(\"rect.nv-bar\").data(function (a) {\n          return x && !b.length ? x.values : a.values;\n        });\n        Q.exit().remove();\n        Q.enter().append(\"rect\").attr(\"class\", function (a, b) {\n          return r(a, b) < 0 ? \"nv-bar negative\" : \"nv-bar positive\";\n        }).attr(\"x\", function (a, c, d) {\n          return u && !b[d].nonStackable ? 0 : d * m.rangeBand() / b.length;\n        }).attr(\"y\", function (a, c, d) {\n          return i(u && !b[d].nonStackable ? a.y0 : 0) || 0;\n        }).attr(\"height\", 0).attr(\"width\", function (a, c, d) {\n          return m.rangeBand() / (u && !b[d].nonStackable ? 1 : b.length);\n        }).attr(\"transform\", function (a, b) {\n          return \"translate(\" + m(q(a, b)) + \",0)\";\n        });\n        Q.style(\"fill\", function (a, b, c) {\n          return w(a, c, b);\n        }).style(\"stroke\", function (a, b, c) {\n          return w(a, c, b);\n        }).on(\"mouseover\", function (a, b) {\n          d3.select(this).classed(\"hover\", !0), B.elementMouseover({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function (a, b) {\n          d3.select(this).classed(\"hover\", !1), B.elementMouseout({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mousemove\", function (a, b) {\n          B.elementMousemove({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"click\", function (a, b) {\n          B.elementClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation();\n        }).on(\"dblclick\", function (a, b) {\n          B.elementDblClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation();\n        }), Q.attr(\"class\", function (a, b) {\n          return r(a, b) < 0 ? \"nv-bar negative\" : \"nv-bar positive\";\n        }).attr(\"transform\", function (a, b) {\n          return \"translate(\" + m(q(a, b)) + \",0)\";\n        }), y && (c || (c = b.map(function () {\n          return !0;\n        })), Q.style(\"fill\", function (a, b, d) {\n          return d3.rgb(y(a, b)).darker(c.map(function (a, b) {\n            return b;\n          }).filter(function (a, b) {\n            return !c[b];\n          })[d]).toString();\n        }).style(\"stroke\", function (a, b, d) {\n          return d3.rgb(y(a, b)).darker(c.map(function (a, b) {\n            return b;\n          }).filter(function (a, b) {\n            return !c[b];\n          })[d]).toString();\n        }));\n        var R = Q.watchTransition(C, \"multibar\", Math.min(250, z)).delay(function (a, c) {\n          return c * z / b[0].values.length;\n        });\n        u ? R.attr(\"y\", function (a, c, d) {\n          var e = 0;\n          return e = b[d].nonStackable ? r(a, c) < 0 ? n(0) : n(0) - n(r(a, c)) < -1 ? n(0) - 1 : n(r(a, c)) || 0 : n(a.y1);\n        }).attr(\"height\", function (a, c, d) {\n          return b[d].nonStackable ? Math.max(Math.abs(n(r(a, c)) - n(0)), 1) || 0 : Math.max(Math.abs(n(a.y + a.y0) - n(a.y0)), 1);\n        }).attr(\"x\", function (a, c, d) {\n          var e = 0;\n          return b[d].nonStackable && (e = a.series * m.rangeBand() / b.length, b.length !== G && (e = b[d].nonStackableSeries * m.rangeBand() / (2 * G))), e;\n        }).attr(\"width\", function (a, c, d) {\n          if (b[d].nonStackable) {\n            var e = m.rangeBand() / G;\n            return b.length !== G && (e = m.rangeBand() / (2 * G)), e;\n          }\n\n          return m.rangeBand();\n        }) : R.attr(\"x\", function (a) {\n          return a.series * m.rangeBand() / b.length;\n        }).attr(\"width\", m.rangeBand() / b.length).attr(\"y\", function (a, b) {\n          return r(a, b) < 0 ? n(0) : n(0) - n(r(a, b)) < 1 ? n(0) - 1 : n(r(a, b)) || 0;\n        }).attr(\"height\", function (a, b) {\n          return Math.max(Math.abs(n(r(a, b)) - n(0)), 1) || 0;\n        }), h = m.copy(), i = n.copy(), b[0] && b[0].values && (D = b[0].values.length);\n      }), C.renderEnd(\"multibar immediate\"), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        k = 960,\n        l = 500,\n        m = d3.scale.ordinal(),\n        n = d3.scale.linear(),\n        o = Math.floor(1e4 * Math.random()),\n        p = null,\n        q = function q(a) {\n      return a.x;\n    },\n        r = function r(a) {\n      return a.y;\n    },\n        s = [0],\n        t = !0,\n        u = !1,\n        v = \"zero\",\n        w = a.utils.defaultColor(),\n        x = !1,\n        y = null,\n        z = 500,\n        A = .1,\n        B = d3.dispatch(\"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"elementMousemove\", \"renderEnd\"),\n        C = a.utils.renderWatch(B, z),\n        D = 0;\n\n    return b.dispatch = B, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      y: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      forceY: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      stacked: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      stackOffset: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      clipEdge: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      disabled: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      hideable: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a;\n        }\n      },\n      groupSpacing: {\n        get: function get() {\n          return A;\n        },\n        set: function set(a) {\n          A = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j.top = void 0 !== a.top ? a.top : j.top, j.right = void 0 !== a.right ? a.right : j.right, j.bottom = void 0 !== a.bottom ? a.bottom : j.bottom, j.left = void 0 !== a.left ? a.left : j.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a, C.reset(z);\n        }\n      },\n      color: {\n        get: function get() {\n          return w;\n        },\n        set: function set(b) {\n          w = a.utils.getColor(b);\n        }\n      },\n      barColor: {\n        get: function get() {\n          return y;\n        },\n        set: function set(b) {\n          y = b ? a.utils.getColor(b) : null;\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.multiBarChart = function () {\n    \"use strict\";\n\n    function b(j) {\n      return D.reset(), D.models(e), r && D.models(f), s && D.models(g), j.each(function (j) {\n        var z = d3.select(this);\n        a.utils.initSVG(z);\n        var D = a.utils.availableWidth(l, z, k),\n            H = a.utils.availableHeight(m, z, k);\n\n        if (b.update = function () {\n          0 === C ? z.call(b) : z.transition().duration(C).call(b);\n        }, b.container = this, x.setter(G(j), b.update).getter(F(j)).update(), x.disabled = j.map(function (a) {\n          return !!a.disabled;\n        }), !y) {\n          var I;\n          y = {};\n\n          for (I in x) {\n            y[I] = x[I] instanceof Array ? x[I].slice(0) : x[I];\n          }\n        }\n\n        if (!(j && j.length && j.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, z), b;\n        z.selectAll(\".nv-noData\").remove(), c = e.xScale(), d = e.yScale();\n        var J = z.selectAll(\"g.nv-wrap.nv-multiBarWithLegend\").data([j]),\n            K = J.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-multiBarWithLegend\").append(\"g\"),\n            L = J.select(\"g\");\n\n        if (K.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), K.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), K.append(\"g\").attr(\"class\", \"nv-barsWrap\"), K.append(\"g\").attr(\"class\", \"nv-legendWrap\"), K.append(\"g\").attr(\"class\", \"nv-controlsWrap\"), q && (h.width(D - B()), L.select(\".nv-legendWrap\").datum(j).call(h), k.top != h.height() && (k.top = h.height(), H = a.utils.availableHeight(m, z, k)), L.select(\".nv-legendWrap\").attr(\"transform\", \"translate(\" + B() + \",\" + -k.top + \")\")), o) {\n          var M = [{\n            key: p.grouped || \"Grouped\",\n            disabled: e.stacked()\n          }, {\n            key: p.stacked || \"Stacked\",\n            disabled: !e.stacked()\n          }];\n          i.width(B()).color([\"#444\", \"#444\", \"#444\"]), L.select(\".nv-controlsWrap\").datum(M).attr(\"transform\", \"translate(0,\" + -k.top + \")\").call(i);\n        }\n\n        J.attr(\"transform\", \"translate(\" + k.left + \",\" + k.top + \")\"), t && L.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + D + \",0)\"), e.disabled(j.map(function (a) {\n          return a.disabled;\n        })).width(D).height(H).color(j.map(function (a, b) {\n          return a.color || n(a, b);\n        }).filter(function (a, b) {\n          return !j[b].disabled;\n        }));\n        var N = L.select(\".nv-barsWrap\").datum(j.filter(function (a) {\n          return !a.disabled;\n        }));\n\n        if (N.call(e), r) {\n          f.scale(c)._ticks(a.utils.calcTicksX(D / 100, j)).tickSize(-H, 0), L.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + d.range()[0] + \")\"), L.select(\".nv-x.nv-axis\").call(f);\n          var O = L.select(\".nv-x.nv-axis > g\").selectAll(\"g\");\n\n          if (O.selectAll(\"line, text\").style(\"opacity\", 1), v) {\n            var P = function P(a, b) {\n              return \"translate(\" + a + \",\" + b + \")\";\n            },\n                Q = 5,\n                R = 17;\n\n            O.selectAll(\"text\").attr(\"transform\", function (a, b, c) {\n              return P(0, c % 2 == 0 ? Q : R);\n            });\n            var S = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n            L.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\").attr(\"transform\", function (a, b) {\n              return P(0, 0 === b || S % 2 !== 0 ? R : Q);\n            });\n          }\n\n          u && O.filter(function (a, b) {\n            return b % Math.ceil(j[0].values.length / (D / 100)) !== 0;\n          }).selectAll(\"text, line\").style(\"opacity\", 0), w && O.selectAll(\".tick text\").attr(\"transform\", \"rotate(\" + w + \" 0,0)\").style(\"text-anchor\", w > 0 ? \"start\" : \"end\"), L.select(\".nv-x.nv-axis\").selectAll(\"g.nv-axisMaxMin text\").style(\"opacity\", 1);\n        }\n\n        s && (g.scale(d)._ticks(a.utils.calcTicksY(H / 36, j)).tickSize(-D, 0), L.select(\".nv-y.nv-axis\").call(g)), h.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            x[c] = a[c];\n          }\n\n          A.stateChange(x), b.update();\n        }), i.dispatch.on(\"legendClick\", function (a) {\n          if (a.disabled) {\n            switch (M = M.map(function (a) {\n              return a.disabled = !0, a;\n            }), a.disabled = !1, a.key) {\n              case \"Grouped\":\n              case p.grouped:\n                e.stacked(!1);\n                break;\n\n              case \"Stacked\":\n              case p.stacked:\n                e.stacked(!0);\n            }\n\n            x.stacked = e.stacked(), A.stateChange(x), b.update();\n          }\n        }), A.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && (j.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), x.disabled = a.disabled), \"undefined\" != typeof a.stacked && (e.stacked(a.stacked), x.stacked = a.stacked, E = a.stacked), b.update();\n        });\n      }), D.renderEnd(\"multibarchart immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = a.models.multiBar(),\n        f = a.models.axis(),\n        g = a.models.axis(),\n        h = a.models.legend(),\n        i = a.models.legend(),\n        j = a.models.tooltip(),\n        k = {\n      top: 30,\n      right: 20,\n      bottom: 50,\n      left: 60\n    },\n        l = null,\n        m = null,\n        n = a.utils.defaultColor(),\n        o = !0,\n        p = {},\n        q = !0,\n        r = !0,\n        s = !0,\n        t = !1,\n        u = !0,\n        v = !1,\n        w = 0,\n        x = a.utils.state(),\n        y = null,\n        z = null,\n        A = d3.dispatch(\"stateChange\", \"changeState\", \"renderEnd\"),\n        B = function B() {\n      return o ? 180 : 0;\n    },\n        C = 250;\n\n    x.stacked = !1, e.stacked(!1), f.orient(\"bottom\").tickPadding(7).showMaxMin(!1).tickFormat(function (a) {\n      return a;\n    }), g.orient(t ? \"right\" : \"left\").tickFormat(d3.format(\",.1f\")), j.duration(0).valueFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    }).headerFormatter(function (a, b) {\n      return f.tickFormat()(a, b);\n    }), i.updateState(!1);\n\n    var D = a.utils.renderWatch(A),\n        E = !1,\n        F = function F(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          }),\n          stacked: E\n        };\n      };\n    },\n        G = function G(a) {\n      return function (b) {\n        void 0 !== b.stacked && (E = b.stacked), void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    };\n\n    return e.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.value = b.x()(a.data), a.series = {\n        key: a.data.key,\n        value: b.y()(a.data),\n        color: a.color\n      }, j.data(a).hidden(!1);\n    }), e.dispatch.on(\"elementMouseout.tooltip\", function () {\n      j.hidden(!0);\n    }), e.dispatch.on(\"elementMousemove.tooltip\", function () {\n      j.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.dispatch = A, b.multibar = e, b.legend = h, b.controls = i, b.xAxis = f, b.yAxis = g, b.state = x, b.tooltip = j, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      showControls: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      controlLabels: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      reduceXTicks: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      rotateLabels: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      staggerLabels: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return j.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), j.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return j.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), j.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k.top = void 0 !== a.top ? a.top : k.top, k.right = void 0 !== a.right ? a.right : k.right, k.bottom = void 0 !== a.bottom ? a.bottom : k.bottom, k.left = void 0 !== a.left ? a.left : k.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return C;\n        },\n        set: function set(a) {\n          C = a, e.duration(C), f.duration(C), g.duration(C), D.reset(C);\n        }\n      },\n      color: {\n        get: function get() {\n          return n;\n        },\n        set: function set(b) {\n          n = a.utils.getColor(b), h.color(n);\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a, g.orient(t ? \"right\" : \"left\");\n        }\n      },\n      barColor: {\n        get: function get() {\n          return e.barColor;\n        },\n        set: function set(a) {\n          e.barColor(a), h.color(function (a, b) {\n            return d3.rgb(\"#ccc\").darker(1.5 * b).toString();\n          });\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.multiBarHorizontal = function () {\n    \"use strict\";\n\n    function b(m) {\n      return E.reset(), m.each(function (b) {\n        var m = k - j.left - j.right,\n            C = l - j.top - j.bottom;\n        n = d3.select(this), a.utils.initSVG(n), w && (b = d3.layout.stack().offset(\"zero\").values(function (a) {\n          return a.values;\n        }).y(r)(b)), b.forEach(function (a, b) {\n          a.values.forEach(function (c) {\n            c.series = b, c.key = a.key;\n          });\n        }), w && b[0].values.map(function (a, c) {\n          var d = 0,\n              e = 0;\n          b.map(function (a) {\n            var b = a.values[c];\n            b.size = Math.abs(b.y), b.y < 0 ? (b.y1 = e - b.size, e -= b.size) : (b.y1 = d, d += b.size);\n          });\n        });\n        var F = d && e ? [] : b.map(function (a) {\n          return a.values.map(function (a, b) {\n            return {\n              x: q(a, b),\n              y: r(a, b),\n              y0: a.y0,\n              y1: a.y1\n            };\n          });\n        });\n        o.domain(d || d3.merge(F).map(function (a) {\n          return a.x;\n        })).rangeBands(f || [0, C], A), p.domain(e || d3.extent(d3.merge(F).map(function (a) {\n          return w ? a.y > 0 ? a.y1 + a.y : a.y1 : a.y;\n        }).concat(t))), p.range(x && !w ? g || [p.domain()[0] < 0 ? z : 0, m - (p.domain()[1] > 0 ? z : 0)] : g || [0, m]), h = h || o, i = i || d3.scale.linear().domain(p.domain()).range([p(0), p(0)]);\n        {\n          var G = d3.select(this).selectAll(\"g.nv-wrap.nv-multibarHorizontal\").data([b]),\n              H = G.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-multibarHorizontal\"),\n              I = (H.append(\"defs\"), H.append(\"g\"));\n          G.select(\"g\");\n        }\n        I.append(\"g\").attr(\"class\", \"nv-groups\"), G.attr(\"transform\", \"translate(\" + j.left + \",\" + j.top + \")\");\n        var J = G.select(\".nv-groups\").selectAll(\".nv-group\").data(function (a) {\n          return a;\n        }, function (a, b) {\n          return b;\n        });\n        J.enter().append(\"g\").style(\"stroke-opacity\", 1e-6).style(\"fill-opacity\", 1e-6), J.exit().watchTransition(E, \"multibarhorizontal: exit groups\").style(\"stroke-opacity\", 1e-6).style(\"fill-opacity\", 1e-6).remove(), J.attr(\"class\", function (a, b) {\n          return \"nv-group nv-series-\" + b;\n        }).classed(\"hover\", function (a) {\n          return a.hover;\n        }).style(\"fill\", function (a, b) {\n          return u(a, b);\n        }).style(\"stroke\", function (a, b) {\n          return u(a, b);\n        }), J.watchTransition(E, \"multibarhorizontal: groups\").style(\"stroke-opacity\", 1).style(\"fill-opacity\", .75);\n        var K = J.selectAll(\"g.nv-bar\").data(function (a) {\n          return a.values;\n        });\n        K.exit().remove();\n        var L = K.enter().append(\"g\").attr(\"transform\", function (a, c, d) {\n          return \"translate(\" + i(w ? a.y0 : 0) + \",\" + (w ? 0 : d * o.rangeBand() / b.length + o(q(a, c))) + \")\";\n        });\n        L.append(\"rect\").attr(\"width\", 0).attr(\"height\", o.rangeBand() / (w ? 1 : b.length)), K.on(\"mouseover\", function (a, b) {\n          d3.select(this).classed(\"hover\", !0), D.elementMouseover({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function (a, b) {\n          d3.select(this).classed(\"hover\", !1), D.elementMouseout({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function (a, b) {\n          D.elementMouseout({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mousemove\", function (a, b) {\n          D.elementMousemove({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"click\", function (a, b) {\n          D.elementClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation();\n        }).on(\"dblclick\", function (a, b) {\n          D.elementDblClick({\n            data: a,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          }), d3.event.stopPropagation();\n        }), s(b[0], 0) && (L.append(\"polyline\"), K.select(\"polyline\").attr(\"fill\", \"none\").attr(\"points\", function (a, c) {\n          var d = s(a, c),\n              e = .8 * o.rangeBand() / (2 * (w ? 1 : b.length));\n          d = d.length ? d : [-Math.abs(d), Math.abs(d)], d = d.map(function (a) {\n            return p(a) - p(0);\n          });\n          var f = [[d[0], -e], [d[0], e], [d[0], 0], [d[1], 0], [d[1], -e], [d[1], e]];\n          return f.map(function (a) {\n            return a.join(\",\");\n          }).join(\" \");\n        }).attr(\"transform\", function (a, c) {\n          var d = o.rangeBand() / (2 * (w ? 1 : b.length));\n          return \"translate(\" + (r(a, c) < 0 ? 0 : p(r(a, c)) - p(0)) + \", \" + d + \")\";\n        })), L.append(\"text\"), x && !w ? (K.select(\"text\").attr(\"text-anchor\", function (a, b) {\n          return r(a, b) < 0 ? \"end\" : \"start\";\n        }).attr(\"y\", o.rangeBand() / (2 * b.length)).attr(\"dy\", \".32em\").text(function (a, b) {\n          var c = B(r(a, b)),\n              d = s(a, b);\n          return void 0 === d ? c : d.length ? c + \"+\" + B(Math.abs(d[1])) + \"-\" + B(Math.abs(d[0])) : c + \"±\" + B(Math.abs(d));\n        }), K.watchTransition(E, \"multibarhorizontal: bars\").select(\"text\").attr(\"x\", function (a, b) {\n          return r(a, b) < 0 ? -4 : p(r(a, b)) - p(0) + 4;\n        })) : K.selectAll(\"text\").text(\"\"), y && !w ? (L.append(\"text\").classed(\"nv-bar-label\", !0), K.select(\"text.nv-bar-label\").attr(\"text-anchor\", function (a, b) {\n          return r(a, b) < 0 ? \"start\" : \"end\";\n        }).attr(\"y\", o.rangeBand() / (2 * b.length)).attr(\"dy\", \".32em\").text(function (a, b) {\n          return q(a, b);\n        }), K.watchTransition(E, \"multibarhorizontal: bars\").select(\"text.nv-bar-label\").attr(\"x\", function (a, b) {\n          return r(a, b) < 0 ? p(0) - p(r(a, b)) + 4 : -4;\n        })) : K.selectAll(\"text.nv-bar-label\").text(\"\"), K.attr(\"class\", function (a, b) {\n          return r(a, b) < 0 ? \"nv-bar negative\" : \"nv-bar positive\";\n        }), v && (c || (c = b.map(function () {\n          return !0;\n        })), K.style(\"fill\", function (a, b, d) {\n          return d3.rgb(v(a, b)).darker(c.map(function (a, b) {\n            return b;\n          }).filter(function (a, b) {\n            return !c[b];\n          })[d]).toString();\n        }).style(\"stroke\", function (a, b, d) {\n          return d3.rgb(v(a, b)).darker(c.map(function (a, b) {\n            return b;\n          }).filter(function (a, b) {\n            return !c[b];\n          })[d]).toString();\n        })), w ? K.watchTransition(E, \"multibarhorizontal: bars\").attr(\"transform\", function (a, b) {\n          return \"translate(\" + p(a.y1) + \",\" + o(q(a, b)) + \")\";\n        }).select(\"rect\").attr(\"width\", function (a, b) {\n          return Math.abs(p(r(a, b) + a.y0) - p(a.y0));\n        }).attr(\"height\", o.rangeBand()) : K.watchTransition(E, \"multibarhorizontal: bars\").attr(\"transform\", function (a, c) {\n          return \"translate(\" + p(r(a, c) < 0 ? r(a, c) : 0) + \",\" + (a.series * o.rangeBand() / b.length + o(q(a, c))) + \")\";\n        }).select(\"rect\").attr(\"height\", o.rangeBand() / b.length).attr(\"width\", function (a, b) {\n          return Math.max(Math.abs(p(r(a, b)) - p(0)), 1);\n        }), h = o.copy(), i = p.copy();\n      }), E.renderEnd(\"multibarHorizontal immediate\"), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        k = 960,\n        l = 500,\n        m = Math.floor(1e4 * Math.random()),\n        n = null,\n        o = d3.scale.ordinal(),\n        p = d3.scale.linear(),\n        q = function q(a) {\n      return a.x;\n    },\n        r = function r(a) {\n      return a.y;\n    },\n        s = function s(a) {\n      return a.yErr;\n    },\n        t = [0],\n        u = a.utils.defaultColor(),\n        v = null,\n        w = !1,\n        x = !1,\n        y = !1,\n        z = 60,\n        A = .1,\n        B = d3.format(\",.2f\"),\n        C = 250,\n        D = d3.dispatch(\"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"elementMousemove\", \"renderEnd\"),\n        E = a.utils.renderWatch(D, C);\n\n    return b.dispatch = D, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      y: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      yErr: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      forceY: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      stacked: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      showValues: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a;\n        }\n      },\n      disabled: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      valueFormat: {\n        get: function get() {\n          return B;\n        },\n        set: function set(a) {\n          B = a;\n        }\n      },\n      valuePadding: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      groupSpacing: {\n        get: function get() {\n          return A;\n        },\n        set: function set(a) {\n          A = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j.top = void 0 !== a.top ? a.top : j.top, j.right = void 0 !== a.right ? a.right : j.right, j.bottom = void 0 !== a.bottom ? a.bottom : j.bottom, j.left = void 0 !== a.left ? a.left : j.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return C;\n        },\n        set: function set(a) {\n          C = a, E.reset(C);\n        }\n      },\n      color: {\n        get: function get() {\n          return u;\n        },\n        set: function set(b) {\n          u = a.utils.getColor(b);\n        }\n      },\n      barColor: {\n        get: function get() {\n          return v;\n        },\n        set: function set(b) {\n          v = b ? a.utils.getColor(b) : null;\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.multiBarHorizontalChart = function () {\n    \"use strict\";\n\n    function b(j) {\n      return C.reset(), C.models(e), r && C.models(f), s && C.models(g), j.each(function (j) {\n        var w = d3.select(this);\n        a.utils.initSVG(w);\n        var C = a.utils.availableWidth(l, w, k),\n            D = a.utils.availableHeight(m, w, k);\n\n        if (b.update = function () {\n          w.transition().duration(z).call(b);\n        }, b.container = this, t = e.stacked(), u.setter(B(j), b.update).getter(A(j)).update(), u.disabled = j.map(function (a) {\n          return !!a.disabled;\n        }), !v) {\n          var E;\n          v = {};\n\n          for (E in u) {\n            v[E] = u[E] instanceof Array ? u[E].slice(0) : u[E];\n          }\n        }\n\n        if (!(j && j.length && j.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, w), b;\n        w.selectAll(\".nv-noData\").remove(), c = e.xScale(), d = e.yScale();\n        var F = w.selectAll(\"g.nv-wrap.nv-multiBarHorizontalChart\").data([j]),\n            G = F.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-multiBarHorizontalChart\").append(\"g\"),\n            H = F.select(\"g\");\n\n        if (G.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), G.append(\"g\").attr(\"class\", \"nv-y nv-axis\").append(\"g\").attr(\"class\", \"nv-zeroLine\").append(\"line\"), G.append(\"g\").attr(\"class\", \"nv-barsWrap\"), G.append(\"g\").attr(\"class\", \"nv-legendWrap\"), G.append(\"g\").attr(\"class\", \"nv-controlsWrap\"), q && (h.width(C - y()), H.select(\".nv-legendWrap\").datum(j).call(h), k.top != h.height() && (k.top = h.height(), D = a.utils.availableHeight(m, w, k)), H.select(\".nv-legendWrap\").attr(\"transform\", \"translate(\" + y() + \",\" + -k.top + \")\")), o) {\n          var I = [{\n            key: p.grouped || \"Grouped\",\n            disabled: e.stacked()\n          }, {\n            key: p.stacked || \"Stacked\",\n            disabled: !e.stacked()\n          }];\n          i.width(y()).color([\"#444\", \"#444\", \"#444\"]), H.select(\".nv-controlsWrap\").datum(I).attr(\"transform\", \"translate(0,\" + -k.top + \")\").call(i);\n        }\n\n        F.attr(\"transform\", \"translate(\" + k.left + \",\" + k.top + \")\"), e.disabled(j.map(function (a) {\n          return a.disabled;\n        })).width(C).height(D).color(j.map(function (a, b) {\n          return a.color || n(a, b);\n        }).filter(function (a, b) {\n          return !j[b].disabled;\n        }));\n        var J = H.select(\".nv-barsWrap\").datum(j.filter(function (a) {\n          return !a.disabled;\n        }));\n\n        if (J.transition().call(e), r) {\n          f.scale(c)._ticks(a.utils.calcTicksY(D / 24, j)).tickSize(-C, 0), H.select(\".nv-x.nv-axis\").call(f);\n          var K = H.select(\".nv-x.nv-axis\").selectAll(\"g\");\n          K.selectAll(\"line, text\");\n        }\n\n        s && (g.scale(d)._ticks(a.utils.calcTicksX(C / 100, j)).tickSize(-D, 0), H.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(0,\" + D + \")\"), H.select(\".nv-y.nv-axis\").call(g)), H.select(\".nv-zeroLine line\").attr(\"x1\", d(0)).attr(\"x2\", d(0)).attr(\"y1\", 0).attr(\"y2\", -D), h.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            u[c] = a[c];\n          }\n\n          x.stateChange(u), b.update();\n        }), i.dispatch.on(\"legendClick\", function (a) {\n          if (a.disabled) {\n            switch (I = I.map(function (a) {\n              return a.disabled = !0, a;\n            }), a.disabled = !1, a.key) {\n              case \"Grouped\":\n                e.stacked(!1);\n                break;\n\n              case \"Stacked\":\n                e.stacked(!0);\n            }\n\n            u.stacked = e.stacked(), x.stateChange(u), t = e.stacked(), b.update();\n          }\n        }), x.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && (j.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), u.disabled = a.disabled), \"undefined\" != typeof a.stacked && (e.stacked(a.stacked), u.stacked = a.stacked, t = a.stacked), b.update();\n        });\n      }), C.renderEnd(\"multibar horizontal chart immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = a.models.multiBarHorizontal(),\n        f = a.models.axis(),\n        g = a.models.axis(),\n        h = a.models.legend().height(30),\n        i = a.models.legend().height(30),\n        j = a.models.tooltip(),\n        k = {\n      top: 30,\n      right: 20,\n      bottom: 50,\n      left: 60\n    },\n        l = null,\n        m = null,\n        n = a.utils.defaultColor(),\n        o = !0,\n        p = {},\n        q = !0,\n        r = !0,\n        s = !0,\n        t = !1,\n        u = a.utils.state(),\n        v = null,\n        w = null,\n        x = d3.dispatch(\"stateChange\", \"changeState\", \"renderEnd\"),\n        y = function y() {\n      return o ? 180 : 0;\n    },\n        z = 250;\n\n    u.stacked = !1, e.stacked(t), f.orient(\"left\").tickPadding(5).showMaxMin(!1).tickFormat(function (a) {\n      return a;\n    }), g.orient(\"bottom\").tickFormat(d3.format(\",.1f\")), j.duration(0).valueFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    }).headerFormatter(function (a, b) {\n      return f.tickFormat()(a, b);\n    }), i.updateState(!1);\n\n    var A = function A(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          }),\n          stacked: t\n        };\n      };\n    },\n        B = function B(a) {\n      return function (b) {\n        void 0 !== b.stacked && (t = b.stacked), void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    },\n        C = a.utils.renderWatch(x, z);\n\n    return e.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.value = b.x()(a.data), a.series = {\n        key: a.data.key,\n        value: b.y()(a.data),\n        color: a.color\n      }, j.data(a).hidden(!1);\n    }), e.dispatch.on(\"elementMouseout.tooltip\", function () {\n      j.hidden(!0);\n    }), e.dispatch.on(\"elementMousemove.tooltip\", function () {\n      j.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.dispatch = x, b.multibar = e, b.legend = h, b.controls = i, b.xAxis = f, b.yAxis = g, b.state = u, b.tooltip = j, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      showControls: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      controlLabels: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return j.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), j.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return j.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), j.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k.top = void 0 !== a.top ? a.top : k.top, k.right = void 0 !== a.right ? a.right : k.right, k.bottom = void 0 !== a.bottom ? a.bottom : k.bottom, k.left = void 0 !== a.left ? a.left : k.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a, C.reset(z), e.duration(z), f.duration(z), g.duration(z);\n        }\n      },\n      color: {\n        get: function get() {\n          return n;\n        },\n        set: function set(b) {\n          n = a.utils.getColor(b), h.color(n);\n        }\n      },\n      barColor: {\n        get: function get() {\n          return e.barColor;\n        },\n        set: function set(a) {\n          e.barColor(a), h.color(function (a, b) {\n            return d3.rgb(\"#ccc\").darker(1.5 * b).toString();\n          });\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.multiChart = function () {\n    \"use strict\";\n\n    function b(j) {\n      return j.each(function (j) {\n        function k(a) {\n          var b = 2 === j[a.seriesIndex].yAxis ? z : y;\n          a.value = a.point.x, a.series = {\n            value: a.point.y,\n            color: a.point.color\n          }, B.duration(100).valueFormatter(function (a, c) {\n            return b.tickFormat()(a, c);\n          }).data(a).position(a.pos).hidden(!1);\n        }\n\n        function l(a) {\n          var b = 2 === j[a.seriesIndex].yAxis ? z : y;\n          a.point.x = v.x()(a.point), a.point.y = v.y()(a.point), B.duration(100).valueFormatter(function (a, c) {\n            return b.tickFormat()(a, c);\n          }).data(a).position(a.pos).hidden(!1);\n        }\n\n        function n(a) {\n          var b = 2 === j[a.data.series].yAxis ? z : y;\n          a.value = t.x()(a.data), a.series = {\n            value: t.y()(a.data),\n            color: a.color\n          }, B.duration(0).valueFormatter(function (a, c) {\n            return b.tickFormat()(a, c);\n          }).data(a).hidden(!1);\n        }\n\n        var C = d3.select(this);\n        a.utils.initSVG(C), b.update = function () {\n          C.transition().call(b);\n        }, b.container = this;\n        var D = a.utils.availableWidth(g, C, e),\n            E = a.utils.availableHeight(h, C, e),\n            F = j.filter(function (a) {\n          return \"line\" == a.type && 1 == a.yAxis;\n        }),\n            G = j.filter(function (a) {\n          return \"line\" == a.type && 2 == a.yAxis;\n        }),\n            H = j.filter(function (a) {\n          return \"bar\" == a.type && 1 == a.yAxis;\n        }),\n            I = j.filter(function (a) {\n          return \"bar\" == a.type && 2 == a.yAxis;\n        }),\n            J = j.filter(function (a) {\n          return \"area\" == a.type && 1 == a.yAxis;\n        }),\n            K = j.filter(function (a) {\n          return \"area\" == a.type && 2 == a.yAxis;\n        });\n        if (!(j && j.length && j.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, C), b;\n        C.selectAll(\".nv-noData\").remove();\n        var L = j.filter(function (a) {\n          return !a.disabled && 1 == a.yAxis;\n        }).map(function (a) {\n          return a.values.map(function (a) {\n            return {\n              x: a.x,\n              y: a.y\n            };\n          });\n        }),\n            M = j.filter(function (a) {\n          return !a.disabled && 2 == a.yAxis;\n        }).map(function (a) {\n          return a.values.map(function (a) {\n            return {\n              x: a.x,\n              y: a.y\n            };\n          });\n        });\n        o.domain(d3.extent(d3.merge(L.concat(M)), function (a) {\n          return a.x;\n        })).range([0, D]);\n        var N = C.selectAll(\"g.wrap.multiChart\").data([j]),\n            O = N.enter().append(\"g\").attr(\"class\", \"wrap nvd3 multiChart\").append(\"g\");\n        O.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), O.append(\"g\").attr(\"class\", \"nv-y1 nv-axis\"), O.append(\"g\").attr(\"class\", \"nv-y2 nv-axis\"), O.append(\"g\").attr(\"class\", \"lines1Wrap\"), O.append(\"g\").attr(\"class\", \"lines2Wrap\"), O.append(\"g\").attr(\"class\", \"bars1Wrap\"), O.append(\"g\").attr(\"class\", \"bars2Wrap\"), O.append(\"g\").attr(\"class\", \"stack1Wrap\"), O.append(\"g\").attr(\"class\", \"stack2Wrap\"), O.append(\"g\").attr(\"class\", \"legendWrap\");\n        var P = N.select(\"g\"),\n            Q = j.map(function (a, b) {\n          return j[b].color || f(a, b);\n        });\n\n        if (i) {\n          var R = A.align() ? D / 2 : D,\n              S = A.align() ? R : 0;\n          A.width(R), A.color(Q), P.select(\".legendWrap\").datum(j.map(function (a) {\n            return a.originalKey = void 0 === a.originalKey ? a.key : a.originalKey, a.key = a.originalKey + (1 == a.yAxis ? \"\" : \" (right axis)\"), a;\n          })).call(A), e.top != A.height() && (e.top = A.height(), E = a.utils.availableHeight(h, C, e)), P.select(\".legendWrap\").attr(\"transform\", \"translate(\" + S + \",\" + -e.top + \")\");\n        }\n\n        r.width(D).height(E).interpolate(m).color(Q.filter(function (a, b) {\n          return !j[b].disabled && 1 == j[b].yAxis && \"line\" == j[b].type;\n        })), s.width(D).height(E).interpolate(m).color(Q.filter(function (a, b) {\n          return !j[b].disabled && 2 == j[b].yAxis && \"line\" == j[b].type;\n        })), t.width(D).height(E).color(Q.filter(function (a, b) {\n          return !j[b].disabled && 1 == j[b].yAxis && \"bar\" == j[b].type;\n        })), u.width(D).height(E).color(Q.filter(function (a, b) {\n          return !j[b].disabled && 2 == j[b].yAxis && \"bar\" == j[b].type;\n        })), v.width(D).height(E).color(Q.filter(function (a, b) {\n          return !j[b].disabled && 1 == j[b].yAxis && \"area\" == j[b].type;\n        })), w.width(D).height(E).color(Q.filter(function (a, b) {\n          return !j[b].disabled && 2 == j[b].yAxis && \"area\" == j[b].type;\n        })), P.attr(\"transform\", \"translate(\" + e.left + \",\" + e.top + \")\");\n        var T = P.select(\".lines1Wrap\").datum(F.filter(function (a) {\n          return !a.disabled;\n        })),\n            U = P.select(\".bars1Wrap\").datum(H.filter(function (a) {\n          return !a.disabled;\n        })),\n            V = P.select(\".stack1Wrap\").datum(J.filter(function (a) {\n          return !a.disabled;\n        })),\n            W = P.select(\".lines2Wrap\").datum(G.filter(function (a) {\n          return !a.disabled;\n        })),\n            X = P.select(\".bars2Wrap\").datum(I.filter(function (a) {\n          return !a.disabled;\n        })),\n            Y = P.select(\".stack2Wrap\").datum(K.filter(function (a) {\n          return !a.disabled;\n        })),\n            Z = J.length ? J.map(function (a) {\n          return a.values;\n        }).reduce(function (a, b) {\n          return a.map(function (a, c) {\n            return {\n              x: a.x,\n              y: a.y + b[c].y\n            };\n          });\n        }).concat([{\n          x: 0,\n          y: 0\n        }]) : [],\n            $ = K.length ? K.map(function (a) {\n          return a.values;\n        }).reduce(function (a, b) {\n          return a.map(function (a, c) {\n            return {\n              x: a.x,\n              y: a.y + b[c].y\n            };\n          });\n        }).concat([{\n          x: 0,\n          y: 0\n        }]) : [];\n        p.domain(c || d3.extent(d3.merge(L).concat(Z), function (a) {\n          return a.y;\n        })).range([0, E]), q.domain(d || d3.extent(d3.merge(M).concat($), function (a) {\n          return a.y;\n        })).range([0, E]), r.yDomain(p.domain()), t.yDomain(p.domain()), v.yDomain(p.domain()), s.yDomain(q.domain()), u.yDomain(q.domain()), w.yDomain(q.domain()), J.length && d3.transition(V).call(v), K.length && d3.transition(Y).call(w), H.length && d3.transition(U).call(t), I.length && d3.transition(X).call(u), F.length && d3.transition(T).call(r), G.length && d3.transition(W).call(s), x._ticks(a.utils.calcTicksX(D / 100, j)).tickSize(-E, 0), P.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + E + \")\"), d3.transition(P.select(\".nv-x.nv-axis\")).call(x), y._ticks(a.utils.calcTicksY(E / 36, j)).tickSize(-D, 0), d3.transition(P.select(\".nv-y1.nv-axis\")).call(y), z._ticks(a.utils.calcTicksY(E / 36, j)).tickSize(-D, 0), d3.transition(P.select(\".nv-y2.nv-axis\")).call(z), P.select(\".nv-y1.nv-axis\").classed(\"nv-disabled\", L.length ? !1 : !0).attr(\"transform\", \"translate(\" + o.range()[0] + \",0)\"), P.select(\".nv-y2.nv-axis\").classed(\"nv-disabled\", M.length ? !1 : !0).attr(\"transform\", \"translate(\" + o.range()[1] + \",0)\"), A.dispatch.on(\"stateChange\", function () {\n          b.update();\n        }), r.dispatch.on(\"elementMouseover.tooltip\", k), s.dispatch.on(\"elementMouseover.tooltip\", k), r.dispatch.on(\"elementMouseout.tooltip\", function () {\n          B.hidden(!0);\n        }), s.dispatch.on(\"elementMouseout.tooltip\", function () {\n          B.hidden(!0);\n        }), v.dispatch.on(\"elementMouseover.tooltip\", l), w.dispatch.on(\"elementMouseover.tooltip\", l), v.dispatch.on(\"elementMouseout.tooltip\", function () {\n          B.hidden(!0);\n        }), w.dispatch.on(\"elementMouseout.tooltip\", function () {\n          B.hidden(!0);\n        }), t.dispatch.on(\"elementMouseover.tooltip\", n), u.dispatch.on(\"elementMouseover.tooltip\", n), t.dispatch.on(\"elementMouseout.tooltip\", function () {\n          B.hidden(!0);\n        }), u.dispatch.on(\"elementMouseout.tooltip\", function () {\n          B.hidden(!0);\n        }), t.dispatch.on(\"elementMousemove.tooltip\", function () {\n          B.position({\n            top: d3.event.pageY,\n            left: d3.event.pageX\n          })();\n        }), u.dispatch.on(\"elementMousemove.tooltip\", function () {\n          B.position({\n            top: d3.event.pageY,\n            left: d3.event.pageX\n          })();\n        });\n      }), b;\n    }\n\n    var c,\n        d,\n        e = {\n      top: 30,\n      right: 20,\n      bottom: 50,\n      left: 60\n    },\n        f = a.utils.defaultColor(),\n        g = null,\n        h = null,\n        i = !0,\n        j = null,\n        k = function k(a) {\n      return a.x;\n    },\n        l = function l(a) {\n      return a.y;\n    },\n        m = \"monotone\",\n        n = !0,\n        o = d3.scale.linear(),\n        p = d3.scale.linear(),\n        q = d3.scale.linear(),\n        r = a.models.line().yScale(p),\n        s = a.models.line().yScale(q),\n        t = a.models.multiBar().stacked(!1).yScale(p),\n        u = a.models.multiBar().stacked(!1).yScale(q),\n        v = a.models.stackedArea().yScale(p),\n        w = a.models.stackedArea().yScale(q),\n        x = a.models.axis().scale(o).orient(\"bottom\").tickPadding(5),\n        y = a.models.axis().scale(p).orient(\"left\"),\n        z = a.models.axis().scale(q).orient(\"right\"),\n        A = a.models.legend().height(30),\n        B = a.models.tooltip(),\n        C = d3.dispatch();\n\n    return b.dispatch = C, b.lines1 = r, b.lines2 = s, b.bars1 = t, b.bars2 = u, b.stack1 = v, b.stack2 = w, b.xAxis = x, b.yAxis1 = y, b.yAxis2 = z, b.tooltip = B, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      yDomain1: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c = a;\n        }\n      },\n      yDomain2: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      interpolate: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return B.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), B.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return B.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), B.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e.top = void 0 !== a.top ? a.top : e.top, e.right = void 0 !== a.right ? a.right : e.right, e.bottom = void 0 !== a.bottom ? a.bottom : e.bottom, e.left = void 0 !== a.left ? a.left : e.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return f;\n        },\n        set: function set(b) {\n          f = a.utils.getColor(b);\n        }\n      },\n      x: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a, r.x(a), s.x(a), t.x(a), u.x(a), v.x(a), w.x(a);\n        }\n      },\n      y: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a, r.y(a), s.y(a), v.y(a), w.y(a), t.y(a), u.y(a);\n        }\n      },\n      useVoronoi: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a, r.useVoronoi(a), s.useVoronoi(a), v.useVoronoi(a), w.useVoronoi(a);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.ohlcBar = function () {\n    \"use strict\";\n\n    function b(y) {\n      return y.each(function (b) {\n        k = d3.select(this);\n        var y = a.utils.availableWidth(h, k, g),\n            A = a.utils.availableHeight(i, k, g);\n        a.utils.initSVG(k);\n        var B = y / b[0].values.length * .9;\n        l.domain(c || d3.extent(b[0].values.map(n).concat(t))), l.range(v ? e || [.5 * y / b[0].values.length, y * (b[0].values.length - .5) / b[0].values.length] : e || [5 + B / 2, y - B / 2 - 5]), m.domain(d || [d3.min(b[0].values.map(s).concat(u)), d3.max(b[0].values.map(r).concat(u))]).range(f || [A, 0]), l.domain()[0] === l.domain()[1] && l.domain(l.domain()[0] ? [l.domain()[0] - .01 * l.domain()[0], l.domain()[1] + .01 * l.domain()[1]] : [-1, 1]), m.domain()[0] === m.domain()[1] && m.domain(m.domain()[0] ? [m.domain()[0] + .01 * m.domain()[0], m.domain()[1] - .01 * m.domain()[1]] : [-1, 1]);\n        var C = d3.select(this).selectAll(\"g.nv-wrap.nv-ohlcBar\").data([b[0].values]),\n            D = C.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-ohlcBar\"),\n            E = D.append(\"defs\"),\n            F = D.append(\"g\"),\n            G = C.select(\"g\");\n        F.append(\"g\").attr(\"class\", \"nv-ticks\"), C.attr(\"transform\", \"translate(\" + g.left + \",\" + g.top + \")\"), k.on(\"click\", function (a, b) {\n          z.chartClick({\n            data: a,\n            index: b,\n            pos: d3.event,\n            id: j\n          });\n        }), E.append(\"clipPath\").attr(\"id\", \"nv-chart-clip-path-\" + j).append(\"rect\"), C.select(\"#nv-chart-clip-path-\" + j + \" rect\").attr(\"width\", y).attr(\"height\", A), G.attr(\"clip-path\", w ? \"url(#nv-chart-clip-path-\" + j + \")\" : \"\");\n        var H = C.select(\".nv-ticks\").selectAll(\".nv-tick\").data(function (a) {\n          return a;\n        });\n        H.exit().remove(), H.enter().append(\"path\").attr(\"class\", function (a, b, c) {\n          return (p(a, b) > q(a, b) ? \"nv-tick negative\" : \"nv-tick positive\") + \" nv-tick-\" + c + \"-\" + b;\n        }).attr(\"d\", function (a, b) {\n          return \"m0,0l0,\" + (m(p(a, b)) - m(r(a, b))) + \"l\" + -B / 2 + \",0l\" + B / 2 + \",0l0,\" + (m(s(a, b)) - m(p(a, b))) + \"l0,\" + (m(q(a, b)) - m(s(a, b))) + \"l\" + B / 2 + \",0l\" + -B / 2 + \",0z\";\n        }).attr(\"transform\", function (a, b) {\n          return \"translate(\" + l(n(a, b)) + \",\" + m(r(a, b)) + \")\";\n        }).attr(\"fill\", function () {\n          return x[0];\n        }).attr(\"stroke\", function () {\n          return x[0];\n        }).attr(\"x\", 0).attr(\"y\", function (a, b) {\n          return m(Math.max(0, o(a, b)));\n        }).attr(\"height\", function (a, b) {\n          return Math.abs(m(o(a, b)) - m(0));\n        }), H.attr(\"class\", function (a, b, c) {\n          return (p(a, b) > q(a, b) ? \"nv-tick negative\" : \"nv-tick positive\") + \" nv-tick-\" + c + \"-\" + b;\n        }), d3.transition(H).attr(\"transform\", function (a, b) {\n          return \"translate(\" + l(n(a, b)) + \",\" + m(r(a, b)) + \")\";\n        }).attr(\"d\", function (a, c) {\n          var d = y / b[0].values.length * .9;\n          return \"m0,0l0,\" + (m(p(a, c)) - m(r(a, c))) + \"l\" + -d / 2 + \",0l\" + d / 2 + \",0l0,\" + (m(s(a, c)) - m(p(a, c))) + \"l0,\" + (m(q(a, c)) - m(s(a, c))) + \"l\" + d / 2 + \",0l\" + -d / 2 + \",0z\";\n        });\n      }), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        h = null,\n        i = null,\n        j = Math.floor(1e4 * Math.random()),\n        k = null,\n        l = d3.scale.linear(),\n        m = d3.scale.linear(),\n        n = function n(a) {\n      return a.x;\n    },\n        o = function o(a) {\n      return a.y;\n    },\n        p = function p(a) {\n      return a.open;\n    },\n        q = function q(a) {\n      return a.close;\n    },\n        r = function r(a) {\n      return a.high;\n    },\n        s = function s(a) {\n      return a.low;\n    },\n        t = [],\n        u = [],\n        v = !1,\n        w = !0,\n        x = a.utils.defaultColor(),\n        y = !1,\n        z = d3.dispatch(\"tooltipShow\", \"tooltipHide\", \"stateChange\", \"changeState\", \"renderEnd\", \"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"elementMousemove\");\n\n    return b.highlightPoint = function (a, c) {\n      b.clearHighlights(), k.select(\".nv-ohlcBar .nv-tick-0-\" + a).classed(\"hover\", c);\n    }, b.clearHighlights = function () {\n      k.select(\".nv-ohlcBar .nv-tick.hover\").classed(\"hover\", !1);\n    }, b.dispatch = z, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      forceX: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      forceY: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      padData: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      clipEdge: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      interactive: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      y: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      open: {\n        get: function get() {\n          return p();\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      close: {\n        get: function get() {\n          return q();\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      high: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      low: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g.top = void 0 != a.top ? a.top : g.top, g.right = void 0 != a.right ? a.right : g.right, g.bottom = void 0 != a.bottom ? a.bottom : g.bottom, g.left = void 0 != a.left ? a.left : g.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return x;\n        },\n        set: function set(b) {\n          x = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.parallelCoordinates = function () {\n    \"use strict\";\n\n    function b(p) {\n      return p.each(function (b) {\n        function p(a) {\n          return F(h.map(function (b) {\n            if (isNaN(a[b]) || isNaN(parseFloat(a[b]))) {\n              var c = g[b].domain(),\n                  d = g[b].range(),\n                  e = c[0] - (c[1] - c[0]) / 9;\n\n              if (J.indexOf(b) < 0) {\n                var h = d3.scale.linear().domain([e, c[1]]).range([x - 12, d[1]]);\n                g[b].brush.y(h), J.push(b);\n              }\n\n              return [f(b), g[b](e)];\n            }\n\n            return J.length > 0 ? (D.style(\"display\", \"inline\"), E.style(\"display\", \"inline\")) : (D.style(\"display\", \"none\"), E.style(\"display\", \"none\")), [f(b), g[b](a[b])];\n          }));\n        }\n\n        function q() {\n          var a = h.filter(function (a) {\n            return !g[a].brush.empty();\n          }),\n              b = a.map(function (a) {\n            return g[a].brush.extent();\n          });\n          k = [], a.forEach(function (a, c) {\n            k[c] = {\n              dimension: a,\n              extent: b[c]\n            };\n          }), l = [], M.style(\"display\", function (c) {\n            var d = a.every(function (a, d) {\n              return isNaN(c[a]) && b[d][0] == g[a].brush.y().domain()[0] ? !0 : b[d][0] <= c[a] && c[a] <= b[d][1];\n            });\n            return d && l.push(c), d ? null : \"none\";\n          }), o.brush({\n            filters: k,\n            active: l\n          });\n        }\n\n        function r(a) {\n          m[a] = this.parentNode.__origin__ = f(a), L.attr(\"visibility\", \"hidden\");\n        }\n\n        function s(a) {\n          m[a] = Math.min(w, Math.max(0, this.parentNode.__origin__ += d3.event.x)), M.attr(\"d\", p), h.sort(function (a, b) {\n            return u(a) - u(b);\n          }), f.domain(h), N.attr(\"transform\", function (a) {\n            return \"translate(\" + u(a) + \")\";\n          });\n        }\n\n        function t(a) {\n          delete this.parentNode.__origin__, delete m[a], d3.select(this.parentNode).attr(\"transform\", \"translate(\" + f(a) + \")\"), M.attr(\"d\", p), L.attr(\"d\", p).attr(\"visibility\", null);\n        }\n\n        function u(a) {\n          var b = m[a];\n          return null == b ? f(a) : b;\n        }\n\n        var v = d3.select(this),\n            w = a.utils.availableWidth(d, v, c),\n            x = a.utils.availableHeight(e, v, c);\n        a.utils.initSVG(v), l = b, f.rangePoints([0, w], 1).domain(h);\n        var y = {};\n        h.forEach(function (a) {\n          var c = d3.extent(b, function (b) {\n            return +b[a];\n          });\n          return y[a] = !1, void 0 === c[0] && (y[a] = !0, c[0] = 0, c[1] = 0), c[0] === c[1] && (c[0] = c[0] - 1, c[1] = c[1] + 1), g[a] = d3.scale.linear().domain(c).range([.9 * (x - 12), 0]), g[a].brush = d3.svg.brush().y(g[a]).on(\"brush\", q), \"name\" != a;\n        });\n        var z = v.selectAll(\"g.nv-wrap.nv-parallelCoordinates\").data([b]),\n            A = z.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-parallelCoordinates\"),\n            B = A.append(\"g\"),\n            C = z.select(\"g\");\n        B.append(\"g\").attr(\"class\", \"nv-parallelCoordinates background\"), B.append(\"g\").attr(\"class\", \"nv-parallelCoordinates foreground\"), B.append(\"g\").attr(\"class\", \"nv-parallelCoordinates missingValuesline\"), z.attr(\"transform\", \"translate(\" + c.left + \",\" + c.top + \")\");\n        var D,\n            E,\n            F = d3.svg.line().interpolate(\"cardinal\").tension(n),\n            G = d3.svg.axis().orient(\"left\"),\n            H = d3.behavior.drag().on(\"dragstart\", r).on(\"drag\", s).on(\"dragend\", t),\n            I = f.range()[1] - f.range()[0],\n            J = [],\n            K = [0 + I / 2, x - 12, w - I / 2, x - 12];\n        D = z.select(\".missingValuesline\").selectAll(\"line\").data([K]), D.enter().append(\"line\"), D.exit().remove(), D.attr(\"x1\", function (a) {\n          return a[0];\n        }).attr(\"y1\", function (a) {\n          return a[1];\n        }).attr(\"x2\", function (a) {\n          return a[2];\n        }).attr(\"y2\", function (a) {\n          return a[3];\n        }), E = z.select(\".missingValuesline\").selectAll(\"text\").data([\"undefined values\"]), E.append(\"text\").data([\"undefined values\"]), E.enter().append(\"text\"), E.exit().remove(), E.attr(\"y\", x).attr(\"x\", w - 92 - I / 2).text(function (a) {\n          return a;\n        });\n        var L = z.select(\".background\").selectAll(\"path\").data(b);\n        L.enter().append(\"path\"), L.exit().remove(), L.attr(\"d\", p);\n        var M = z.select(\".foreground\").selectAll(\"path\").data(b);\n        M.enter().append(\"path\"), M.exit().remove(), M.attr(\"d\", p).attr(\"stroke\", j), M.on(\"mouseover\", function (a, b) {\n          d3.select(this).classed(\"hover\", !0), o.elementMouseover({\n            label: a.name,\n            data: a.data,\n            index: b,\n            pos: [d3.mouse(this.parentNode)[0], d3.mouse(this.parentNode)[1]]\n          });\n        }), M.on(\"mouseout\", function (a, b) {\n          d3.select(this).classed(\"hover\", !1), o.elementMouseout({\n            label: a.name,\n            data: a.data,\n            index: b\n          });\n        });\n        var N = C.selectAll(\".dimension\").data(h),\n            O = N.enter().append(\"g\").attr(\"class\", \"nv-parallelCoordinates dimension\");\n        O.append(\"g\").attr(\"class\", \"nv-parallelCoordinates nv-axis\"), O.append(\"g\").attr(\"class\", \"nv-parallelCoordinates-brush\"), O.append(\"text\").attr(\"class\", \"nv-parallelCoordinates nv-label\"), N.attr(\"transform\", function (a) {\n          return \"translate(\" + f(a) + \",0)\";\n        }), N.exit().remove(), N.select(\".nv-label\").style(\"cursor\", \"move\").attr(\"dy\", \"-1em\").attr(\"text-anchor\", \"middle\").text(String).on(\"mouseover\", function (a) {\n          o.elementMouseover({\n            dim: a,\n            pos: [d3.mouse(this.parentNode.parentNode)[0], d3.mouse(this.parentNode.parentNode)[1]]\n          });\n        }).on(\"mouseout\", function (a) {\n          o.elementMouseout({\n            dim: a\n          });\n        }).call(H), N.select(\".nv-axis\").each(function (a, b) {\n          d3.select(this).call(G.scale(g[a]).tickFormat(d3.format(i[b])));\n        }), N.select(\".nv-parallelCoordinates-brush\").each(function (a) {\n          d3.select(this).call(g[a].brush);\n        }).selectAll(\"rect\").attr(\"x\", -8).attr(\"width\", 16);\n      }), b;\n    }\n\n    var c = {\n      top: 30,\n      right: 0,\n      bottom: 10,\n      left: 0\n    },\n        d = null,\n        e = null,\n        f = d3.scale.ordinal(),\n        g = {},\n        h = [],\n        i = [],\n        j = a.utils.defaultColor(),\n        k = [],\n        l = [],\n        m = [],\n        n = 1,\n        o = d3.dispatch(\"brush\", \"elementMouseover\", \"elementMouseout\");\n    return b.dispatch = o, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      dimensionNames: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      dimensionFormats: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      lineTension: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      dimensions: {\n        get: function get() {\n          return h;\n        },\n        set: function set(b) {\n          a.deprecated(\"dimensions\", \"use dimensionNames instead\"), h = b;\n        }\n      },\n      margin: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c.top = void 0 !== a.top ? a.top : c.top, c.right = void 0 !== a.right ? a.right : c.right, c.bottom = void 0 !== a.bottom ? a.bottom : c.bottom, c.left = void 0 !== a.left ? a.left : c.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return j;\n        },\n        set: function set(b) {\n          j = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.pie = function () {\n    \"use strict\";\n\n    function b(E) {\n      return D.reset(), E.each(function (b) {\n        function E(a, b) {\n          a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle, a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle, p || (a.innerRadius = 0);\n          var c = d3.interpolate(this._current, a);\n          return this._current = c(0), function (a) {\n            return B[b](c(a));\n          };\n        }\n\n        var F = d - c.left - c.right,\n            G = e - c.top - c.bottom,\n            H = Math.min(F, G) / 2,\n            I = [],\n            J = [];\n        if (i = d3.select(this), 0 === z.length) for (var K = H - H / 5, L = y * H, M = 0; M < b[0].length; M++) {\n          I.push(K), J.push(L);\n        } else I = z.map(function (a) {\n          return (a.outer - a.outer / 5) * H;\n        }), J = z.map(function (a) {\n          return (a.inner - a.inner / 5) * H;\n        }), y = d3.min(z.map(function (a) {\n          return a.inner - a.inner / 5;\n        }));\n        a.utils.initSVG(i);\n        var N = i.selectAll(\".nv-wrap.nv-pie\").data(b),\n            O = N.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-pie nv-chart-\" + h),\n            P = O.append(\"g\"),\n            Q = N.select(\"g\"),\n            R = P.append(\"g\").attr(\"class\", \"nv-pie\");\n        P.append(\"g\").attr(\"class\", \"nv-pieLabels\"), N.attr(\"transform\", \"translate(\" + c.left + \",\" + c.top + \")\"), Q.select(\".nv-pie\").attr(\"transform\", \"translate(\" + F / 2 + \",\" + G / 2 + \")\"), Q.select(\".nv-pieLabels\").attr(\"transform\", \"translate(\" + F / 2 + \",\" + G / 2 + \")\"), i.on(\"click\", function (a, b) {\n          A.chartClick({\n            data: a,\n            index: b,\n            pos: d3.event,\n            id: h\n          });\n        }), B = [], C = [];\n\n        for (var M = 0; M < b[0].length; M++) {\n          var S = d3.svg.arc().outerRadius(I[M]),\n              T = d3.svg.arc().outerRadius(I[M] + 5);\n          u !== !1 && (S.startAngle(u), T.startAngle(u)), w !== !1 && (S.endAngle(w), T.endAngle(w)), p && (S.innerRadius(J[M]), T.innerRadius(J[M])), S.cornerRadius && x && (S.cornerRadius(x), T.cornerRadius(x)), B.push(S), C.push(T);\n        }\n\n        var U = d3.layout.pie().sort(null).value(function (a) {\n          return a.disabled ? 0 : g(a);\n        });\n        U.padAngle && v && U.padAngle(v), p && q && (R.append(\"text\").attr(\"class\", \"nv-pie-title\"), N.select(\".nv-pie-title\").style(\"text-anchor\", \"middle\").text(function () {\n          return q;\n        }).style(\"font-size\", Math.min(F, G) * y * 2 / (q.length + 2) + \"px\").attr(\"dy\", \"0.35em\").attr(\"transform\", function () {\n          return \"translate(0, \" + s + \")\";\n        }));\n        var V = N.select(\".nv-pie\").selectAll(\".nv-slice\").data(U),\n            W = N.select(\".nv-pieLabels\").selectAll(\".nv-label\").data(U);\n        V.exit().remove(), W.exit().remove();\n        var X = V.enter().append(\"g\");\n        X.attr(\"class\", \"nv-slice\"), X.on(\"mouseover\", function (a, b) {\n          d3.select(this).classed(\"hover\", !0), r && d3.select(this).select(\"path\").transition().duration(70).attr(\"d\", C[b]), A.elementMouseover({\n            data: a.data,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }), X.on(\"mouseout\", function (a, b) {\n          d3.select(this).classed(\"hover\", !1), r && d3.select(this).select(\"path\").transition().duration(50).attr(\"d\", B[b]), A.elementMouseout({\n            data: a.data,\n            index: b\n          });\n        }), X.on(\"mousemove\", function (a, b) {\n          A.elementMousemove({\n            data: a.data,\n            index: b\n          });\n        }), X.on(\"click\", function (a, b) {\n          A.elementClick({\n            data: a.data,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }), X.on(\"dblclick\", function (a, b) {\n          A.elementDblClick({\n            data: a.data,\n            index: b,\n            color: d3.select(this).style(\"fill\")\n          });\n        }), V.attr(\"fill\", function (a, b) {\n          return j(a.data, b);\n        }), V.attr(\"stroke\", function (a, b) {\n          return j(a.data, b);\n        });\n        X.append(\"path\").each(function (a) {\n          this._current = a;\n        });\n\n        if (V.select(\"path\").transition().attr(\"d\", function (a, b) {\n          return B[b](a);\n        }).attrTween(\"d\", E), l) {\n          for (var Y = [], M = 0; M < b[0].length; M++) {\n            Y.push(B[M]), m ? p && (Y[M] = d3.svg.arc().outerRadius(B[M].outerRadius()), u !== !1 && Y[M].startAngle(u), w !== !1 && Y[M].endAngle(w)) : p || Y[M].innerRadius(0);\n          }\n\n          W.enter().append(\"g\").classed(\"nv-label\", !0).each(function (a) {\n            var b = d3.select(this);\n            b.attr(\"transform\", function (a, b) {\n              if (t) {\n                a.outerRadius = I[b] + 10, a.innerRadius = I[b] + 15;\n                var c = (a.startAngle + a.endAngle) / 2 * (180 / Math.PI);\n                return (a.startAngle + a.endAngle) / 2 < Math.PI ? c -= 90 : c += 90, \"translate(\" + Y[b].centroid(a) + \") rotate(\" + c + \")\";\n              }\n\n              return a.outerRadius = H + 10, a.innerRadius = H + 15, \"translate(\" + Y[b].centroid(a) + \")\";\n            }), b.append(\"rect\").style(\"stroke\", \"#fff\").style(\"fill\", \"#fff\").attr(\"rx\", 3).attr(\"ry\", 3), b.append(\"text\").style(\"text-anchor\", t ? (a.startAngle + a.endAngle) / 2 < Math.PI ? \"start\" : \"end\" : \"middle\").style(\"fill\", \"#000\");\n          });\n\n          var Z = {},\n              $ = 14,\n              _ = 140,\n              ab = function ab(a) {\n            return Math.floor(a[0] / _) * _ + \",\" + Math.floor(a[1] / $) * $;\n          };\n\n          W.watchTransition(D, \"pie labels\").attr(\"transform\", function (a, b) {\n            if (t) {\n              a.outerRadius = I[b] + 10, a.innerRadius = I[b] + 15;\n              var c = (a.startAngle + a.endAngle) / 2 * (180 / Math.PI);\n              return (a.startAngle + a.endAngle) / 2 < Math.PI ? c -= 90 : c += 90, \"translate(\" + Y[b].centroid(a) + \") rotate(\" + c + \")\";\n            }\n\n            a.outerRadius = H + 10, a.innerRadius = H + 15;\n            var d = Y[b].centroid(a);\n\n            if (a.value) {\n              var e = ab(d);\n              Z[e] && (d[1] -= $), Z[ab(d)] = !0;\n            }\n\n            return \"translate(\" + d + \")\";\n          }), W.select(\".nv-label text\").style(\"text-anchor\", function (a) {\n            return t ? (a.startAngle + a.endAngle) / 2 < Math.PI ? \"start\" : \"end\" : \"middle\";\n          }).text(function (a, b) {\n            var c = (a.endAngle - a.startAngle) / (2 * Math.PI),\n                d = \"\";\n            if (!a.value || o > c) return \"\";\n            if (\"function\" == typeof n) d = n(a, b, {\n              key: f(a.data),\n              value: g(a.data),\n              percent: k(c)\n            });else switch (n) {\n              case \"key\":\n                d = f(a.data);\n                break;\n\n              case \"value\":\n                d = k(g(a.data));\n                break;\n\n              case \"percent\":\n                d = d3.format(\"%\")(c);\n            }\n            return d;\n          });\n        }\n      }), D.renderEnd(\"pie immediate\"), b;\n    }\n\n    var c = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        d = 500,\n        e = 500,\n        f = function f(a) {\n      return a.x;\n    },\n        g = function g(a) {\n      return a.y;\n    },\n        h = Math.floor(1e4 * Math.random()),\n        i = null,\n        j = a.utils.defaultColor(),\n        k = d3.format(\",.2f\"),\n        l = !0,\n        m = !1,\n        n = \"key\",\n        o = .02,\n        p = !1,\n        q = !1,\n        r = !0,\n        s = 0,\n        t = !1,\n        u = !1,\n        v = !1,\n        w = !1,\n        x = 0,\n        y = .5,\n        z = [],\n        A = d3.dispatch(\"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"elementMousemove\", \"renderEnd\"),\n        B = [],\n        C = [],\n        D = a.utils.renderWatch(A);\n\n    return b.dispatch = A, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      arcsRadius: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      width: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      showLabels: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      title: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      titleOffset: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      labelThreshold: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      valueFormat: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      endAngle: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      startAngle: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      padAngle: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      cornerRadius: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a;\n        }\n      },\n      donutRatio: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a;\n        }\n      },\n      labelsOutside: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      labelSunbeamLayout: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      donut: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      growOnHover: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      pieLabelsOutside: {\n        get: function get() {\n          return m;\n        },\n        set: function set(b) {\n          m = b, a.deprecated(\"pieLabelsOutside\", \"use labelsOutside instead\");\n        }\n      },\n      donutLabelsOutside: {\n        get: function get() {\n          return m;\n        },\n        set: function set(b) {\n          m = b, a.deprecated(\"donutLabelsOutside\", \"use labelsOutside instead\");\n        }\n      },\n      labelFormat: {\n        get: function get() {\n          return k;\n        },\n        set: function set(b) {\n          k = b, a.deprecated(\"labelFormat\", \"use valueFormat instead\");\n        }\n      },\n      margin: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c.top = \"undefined\" != typeof a.top ? a.top : c.top, c.right = \"undefined\" != typeof a.right ? a.right : c.right, c.bottom = \"undefined\" != typeof a.bottom ? a.bottom : c.bottom, c.left = \"undefined\" != typeof a.left ? a.left : c.left;\n        }\n      },\n      y: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = d3.functor(a);\n        }\n      },\n      color: {\n        get: function get() {\n          return j;\n        },\n        set: function set(b) {\n          j = a.utils.getColor(b);\n        }\n      },\n      labelType: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a || \"key\";\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.pieChart = function () {\n    \"use strict\";\n\n    function b(e) {\n      return q.reset(), q.models(c), e.each(function (e) {\n        var k = d3.select(this);\n        a.utils.initSVG(k);\n        var n = a.utils.availableWidth(g, k, f),\n            o = a.utils.availableHeight(h, k, f);\n\n        if (b.update = function () {\n          k.transition().call(b);\n        }, b.container = this, l.setter(s(e), b.update).getter(r(e)).update(), l.disabled = e.map(function (a) {\n          return !!a.disabled;\n        }), !m) {\n          var q;\n          m = {};\n\n          for (q in l) {\n            m[q] = l[q] instanceof Array ? l[q].slice(0) : l[q];\n          }\n        }\n\n        if (!e || !e.length) return a.utils.noData(b, k), b;\n        k.selectAll(\".nv-noData\").remove();\n        var t = k.selectAll(\"g.nv-wrap.nv-pieChart\").data([e]),\n            u = t.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-pieChart\").append(\"g\"),\n            v = t.select(\"g\");\n        if (u.append(\"g\").attr(\"class\", \"nv-pieWrap\"), u.append(\"g\").attr(\"class\", \"nv-legendWrap\"), i) if (\"top\" === j) d.width(n).key(c.x()), t.select(\".nv-legendWrap\").datum(e).call(d), f.top != d.height() && (f.top = d.height(), o = a.utils.availableHeight(h, k, f)), t.select(\".nv-legendWrap\").attr(\"transform\", \"translate(0,\" + -f.top + \")\");else if (\"right\" === j) {\n          var w = a.models.legend().width();\n          w > n / 2 && (w = n / 2), d.height(o).key(c.x()), d.width(w), n -= d.width(), t.select(\".nv-legendWrap\").datum(e).call(d).attr(\"transform\", \"translate(\" + n + \",0)\");\n        }\n        t.attr(\"transform\", \"translate(\" + f.left + \",\" + f.top + \")\"), c.width(n).height(o);\n        var x = v.select(\".nv-pieWrap\").datum([e]);\n        d3.transition(x).call(c), d.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            l[c] = a[c];\n          }\n\n          p.stateChange(l), b.update();\n        }), p.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && (e.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), l.disabled = a.disabled), b.update();\n        });\n      }), q.renderEnd(\"pieChart immediate\"), b;\n    }\n\n    var c = a.models.pie(),\n        d = a.models.legend(),\n        e = a.models.tooltip(),\n        f = {\n      top: 30,\n      right: 20,\n      bottom: 20,\n      left: 20\n    },\n        g = null,\n        h = null,\n        i = !0,\n        j = \"top\",\n        k = a.utils.defaultColor(),\n        l = a.utils.state(),\n        m = null,\n        n = null,\n        o = 250,\n        p = d3.dispatch(\"tooltipShow\", \"tooltipHide\", \"stateChange\", \"changeState\", \"renderEnd\");\n    e.headerEnabled(!1).duration(0).valueFormatter(function (a, b) {\n      return c.valueFormat()(a, b);\n    });\n\n    var q = a.utils.renderWatch(p),\n        r = function r(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          })\n        };\n      };\n    },\n        s = function s(a) {\n      return function (b) {\n        void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    };\n\n    return c.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.series = {\n        key: b.x()(a.data),\n        value: b.y()(a.data),\n        color: a.color\n      }, e.data(a).hidden(!1);\n    }), c.dispatch.on(\"elementMouseout.tooltip\", function () {\n      e.hidden(!0);\n    }), c.dispatch.on(\"elementMousemove.tooltip\", function () {\n      e.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.legend = d, b.dispatch = p, b.pie = c, b.tooltip = e, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      noData: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      legendPosition: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return e.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), e.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return e.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), e.contentGenerator(b);\n        }\n      },\n      color: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a, d.color(k), c.color(k);\n        }\n      },\n      duration: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a, q.reset(o);\n        }\n      },\n      margin: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f.top = void 0 !== a.top ? a.top : f.top, f.right = void 0 !== a.right ? a.right : f.right, f.bottom = void 0 !== a.bottom ? a.bottom : f.bottom, f.left = void 0 !== a.left ? a.left : f.left;\n        }\n      }\n    }), a.utils.inheritOptions(b, c), a.utils.initOptions(b), b;\n  }, a.models.scatter = function () {\n    \"use strict\";\n\n    function b(N) {\n      return P.reset(), N.each(function (b) {\n        function N() {\n          if (O = !1, !w) return !1;\n\n          if (M === !0) {\n            var a = d3.merge(b.map(function (a, b) {\n              return a.values.map(function (a, c) {\n                var d = p(a, c),\n                    e = q(a, c);\n                return [m(d) + 1e-4 * Math.random(), n(e) + 1e-4 * Math.random(), b, c, a];\n              }).filter(function (a, b) {\n                return x(a[4], b);\n              });\n            }));\n            if (0 == a.length) return !1;\n            a.length < 3 && (a.push([m.range()[0] - 20, n.range()[0] - 20, null, null]), a.push([m.range()[1] + 20, n.range()[1] + 20, null, null]), a.push([m.range()[0] - 20, n.range()[0] + 20, null, null]), a.push([m.range()[1] + 20, n.range()[1] - 20, null, null]));\n            var c = d3.geom.polygon([[-10, -10], [-10, i + 10], [h + 10, i + 10], [h + 10, -10]]),\n                d = d3.geom.voronoi(a).map(function (b, d) {\n              return {\n                data: c.clip(b),\n                series: a[d][2],\n                point: a[d][3]\n              };\n            });\n            U.select(\".nv-point-paths\").selectAll(\"path\").remove();\n            var e = U.select(\".nv-point-paths\").selectAll(\"path\").data(d),\n                f = e.enter().append(\"svg:path\").attr(\"d\", function (a) {\n              return a && a.data && 0 !== a.data.length ? \"M\" + a.data.join(\",\") + \"Z\" : \"M 0 0\";\n            }).attr(\"id\", function (a, b) {\n              return \"nv-path-\" + b;\n            }).attr(\"clip-path\", function (a, b) {\n              return \"url(#nv-clip-\" + b + \")\";\n            });\n            C && f.style(\"fill\", d3.rgb(230, 230, 230)).style(\"fill-opacity\", .4).style(\"stroke-opacity\", 1).style(\"stroke\", d3.rgb(200, 200, 200)), B && (U.select(\".nv-point-clips\").selectAll(\"clipPath\").remove(), U.select(\".nv-point-clips\").selectAll(\"clipPath\").data(a).enter().append(\"svg:clipPath\").attr(\"id\", function (a, b) {\n              return \"nv-clip-\" + b;\n            }).append(\"svg:circle\").attr(\"cx\", function (a) {\n              return a[0];\n            }).attr(\"cy\", function (a) {\n              return a[1];\n            }).attr(\"r\", D));\n\n            var k = function k(a, c) {\n              if (O) return 0;\n              var d = b[a.series];\n\n              if (void 0 !== d) {\n                var e = d.values[a.point];\n                e.color = j(d, a.series), e.x = p(e), e.y = q(e);\n                var f = l.node().getBoundingClientRect(),\n                    h = window.pageYOffset || document.documentElement.scrollTop,\n                    i = window.pageXOffset || document.documentElement.scrollLeft,\n                    k = {\n                  left: m(p(e, a.point)) + f.left + i + g.left + 10,\n                  top: n(q(e, a.point)) + f.top + h + g.top + 10\n                };\n                c({\n                  point: e,\n                  series: d,\n                  pos: k,\n                  seriesIndex: a.series,\n                  pointIndex: a.point\n                });\n              }\n            };\n\n            e.on(\"click\", function (a) {\n              k(a, L.elementClick);\n            }).on(\"dblclick\", function (a) {\n              k(a, L.elementDblClick);\n            }).on(\"mouseover\", function (a) {\n              k(a, L.elementMouseover);\n            }).on(\"mouseout\", function (a) {\n              k(a, L.elementMouseout);\n            });\n          } else U.select(\".nv-groups\").selectAll(\".nv-group\").selectAll(\".nv-point\").on(\"click\", function (a, c) {\n            if (O || !b[a.series]) return 0;\n            var d = b[a.series],\n                e = d.values[c];\n            L.elementClick({\n              point: e,\n              series: d,\n              pos: [m(p(e, c)) + g.left, n(q(e, c)) + g.top],\n              seriesIndex: a.series,\n              pointIndex: c\n            });\n          }).on(\"dblclick\", function (a, c) {\n            if (O || !b[a.series]) return 0;\n            var d = b[a.series],\n                e = d.values[c];\n            L.elementDblClick({\n              point: e,\n              series: d,\n              pos: [m(p(e, c)) + g.left, n(q(e, c)) + g.top],\n              seriesIndex: a.series,\n              pointIndex: c\n            });\n          }).on(\"mouseover\", function (a, c) {\n            if (O || !b[a.series]) return 0;\n            var d = b[a.series],\n                e = d.values[c];\n            L.elementMouseover({\n              point: e,\n              series: d,\n              pos: [m(p(e, c)) + g.left, n(q(e, c)) + g.top],\n              seriesIndex: a.series,\n              pointIndex: c,\n              color: j(a, c)\n            });\n          }).on(\"mouseout\", function (a, c) {\n            if (O || !b[a.series]) return 0;\n            var d = b[a.series],\n                e = d.values[c];\n            L.elementMouseout({\n              point: e,\n              series: d,\n              seriesIndex: a.series,\n              pointIndex: c,\n              color: j(a, c)\n            });\n          });\n        }\n\n        l = d3.select(this);\n        var R = a.utils.availableWidth(h, l, g),\n            S = a.utils.availableHeight(i, l, g);\n        a.utils.initSVG(l), b.forEach(function (a, b) {\n          a.values.forEach(function (a) {\n            a.series = b;\n          });\n        });\n        var T = E && F && I ? [] : d3.merge(b.map(function (a) {\n          return a.values.map(function (a, b) {\n            return {\n              x: p(a, b),\n              y: q(a, b),\n              size: r(a, b)\n            };\n          });\n        }));\n        m.domain(E || d3.extent(T.map(function (a) {\n          return a.x;\n        }).concat(t))), m.range(y && b[0] ? G || [(R * z + R) / (2 * b[0].values.length), R - R * (1 + z) / (2 * b[0].values.length)] : G || [0, R]), n.domain(F || d3.extent(T.map(function (a) {\n          return a.y;\n        }).concat(u))).range(H || [S, 0]), o.domain(I || d3.extent(T.map(function (a) {\n          return a.size;\n        }).concat(v))).range(J || Q), K = m.domain()[0] === m.domain()[1] || n.domain()[0] === n.domain()[1], m.domain()[0] === m.domain()[1] && m.domain(m.domain()[0] ? [m.domain()[0] - .01 * m.domain()[0], m.domain()[1] + .01 * m.domain()[1]] : [-1, 1]), n.domain()[0] === n.domain()[1] && n.domain(n.domain()[0] ? [n.domain()[0] - .01 * n.domain()[0], n.domain()[1] + .01 * n.domain()[1]] : [-1, 1]), isNaN(m.domain()[0]) && m.domain([-1, 1]), isNaN(n.domain()[0]) && n.domain([-1, 1]), c = c || m, d = d || n, e = e || o;\n        var U = l.selectAll(\"g.nv-wrap.nv-scatter\").data([b]),\n            V = U.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-scatter nv-chart-\" + k),\n            W = V.append(\"defs\"),\n            X = V.append(\"g\"),\n            Y = U.select(\"g\");\n        U.classed(\"nv-single-point\", K), X.append(\"g\").attr(\"class\", \"nv-groups\"), X.append(\"g\").attr(\"class\", \"nv-point-paths\"), V.append(\"g\").attr(\"class\", \"nv-point-clips\"), U.attr(\"transform\", \"translate(\" + g.left + \",\" + g.top + \")\"), W.append(\"clipPath\").attr(\"id\", \"nv-edge-clip-\" + k).append(\"rect\"), U.select(\"#nv-edge-clip-\" + k + \" rect\").attr(\"width\", R).attr(\"height\", S > 0 ? S : 0), Y.attr(\"clip-path\", A ? \"url(#nv-edge-clip-\" + k + \")\" : \"\"), O = !0;\n        var Z = U.select(\".nv-groups\").selectAll(\".nv-group\").data(function (a) {\n          return a;\n        }, function (a) {\n          return a.key;\n        });\n        Z.enter().append(\"g\").style(\"stroke-opacity\", 1e-6).style(\"fill-opacity\", 1e-6), Z.exit().remove(), Z.attr(\"class\", function (a, b) {\n          return \"nv-group nv-series-\" + b;\n        }).classed(\"hover\", function (a) {\n          return a.hover;\n        }), Z.watchTransition(P, \"scatter: groups\").style(\"fill\", function (a, b) {\n          return j(a, b);\n        }).style(\"stroke\", function (a, b) {\n          return j(a, b);\n        }).style(\"stroke-opacity\", 1).style(\"fill-opacity\", .5);\n        var $ = Z.selectAll(\"path.nv-point\").data(function (a) {\n          return a.values.map(function (a, b) {\n            return [a, b];\n          }).filter(function (a, b) {\n            return x(a[0], b);\n          });\n        });\n        $.enter().append(\"path\").style(\"fill\", function (a) {\n          return a.color;\n        }).style(\"stroke\", function (a) {\n          return a.color;\n        }).attr(\"transform\", function (a) {\n          return \"translate(\" + c(p(a[0], a[1])) + \",\" + d(q(a[0], a[1])) + \")\";\n        }).attr(\"d\", a.utils.symbol().type(function (a) {\n          return s(a[0]);\n        }).size(function (a) {\n          return o(r(a[0], a[1]));\n        })), $.exit().remove(), Z.exit().selectAll(\"path.nv-point\").watchTransition(P, \"scatter exit\").attr(\"transform\", function (a) {\n          return \"translate(\" + m(p(a[0], a[1])) + \",\" + n(q(a[0], a[1])) + \")\";\n        }).remove(), $.each(function (a) {\n          d3.select(this).classed(\"nv-point\", !0).classed(\"nv-point-\" + a[1], !0).classed(\"nv-noninteractive\", !w).classed(\"hover\", !1);\n        }), $.watchTransition(P, \"scatter points\").attr(\"transform\", function (a) {\n          return \"translate(\" + m(p(a[0], a[1])) + \",\" + n(q(a[0], a[1])) + \")\";\n        }).attr(\"d\", a.utils.symbol().type(function (a) {\n          return s(a[0]);\n        }).size(function (a) {\n          return o(r(a[0], a[1]));\n        })), clearTimeout(f), f = setTimeout(N, 300), c = m.copy(), d = n.copy(), e = o.copy();\n      }), P.renderEnd(\"scatter immediate\"), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        h = null,\n        i = null,\n        j = a.utils.defaultColor(),\n        k = Math.floor(1e5 * Math.random()),\n        l = null,\n        m = d3.scale.linear(),\n        n = d3.scale.linear(),\n        o = d3.scale.linear(),\n        p = function p(a) {\n      return a.x;\n    },\n        q = function q(a) {\n      return a.y;\n    },\n        r = function r(a) {\n      return a.size || 1;\n    },\n        s = function s(a) {\n      return a.shape || \"circle\";\n    },\n        t = [],\n        u = [],\n        v = [],\n        w = !0,\n        x = function x(a) {\n      return !a.notActive;\n    },\n        y = !1,\n        z = .1,\n        A = !1,\n        B = !0,\n        C = !1,\n        D = function D() {\n      return 25;\n    },\n        E = null,\n        F = null,\n        G = null,\n        H = null,\n        I = null,\n        J = null,\n        K = !1,\n        L = d3.dispatch(\"elementClick\", \"elementDblClick\", \"elementMouseover\", \"elementMouseout\", \"renderEnd\"),\n        M = !0,\n        N = 250,\n        O = !1,\n        P = a.utils.renderWatch(L, N),\n        Q = [16, 256];\n\n    return b.dispatch = L, b.options = a.utils.optionsFunc.bind(b), b._calls = new function () {\n      this.clearHighlights = function () {\n        return a.dom.write(function () {\n          l.selectAll(\".nv-point.hover\").classed(\"hover\", !1);\n        }), null;\n      }, this.highlightPoint = function (b, c, d) {\n        a.dom.write(function () {\n          l.select(\" .nv-series-\" + b + \" .nv-point-\" + c).classed(\"hover\", d);\n        });\n      };\n    }(), L.on(\"elementMouseover.point\", function (a) {\n      w && b._calls.highlightPoint(a.seriesIndex, a.pointIndex, !0);\n    }), L.on(\"elementMouseout.point\", function (a) {\n      w && b._calls.highlightPoint(a.seriesIndex, a.pointIndex, !1);\n    }), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      pointScale: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return E;\n        },\n        set: function set(a) {\n          E = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return F;\n        },\n        set: function set(a) {\n          F = a;\n        }\n      },\n      pointDomain: {\n        get: function get() {\n          return I;\n        },\n        set: function set(a) {\n          I = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return G;\n        },\n        set: function set(a) {\n          G = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return H;\n        },\n        set: function set(a) {\n          H = a;\n        }\n      },\n      pointRange: {\n        get: function get() {\n          return J;\n        },\n        set: function set(a) {\n          J = a;\n        }\n      },\n      forceX: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      forceY: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      forcePoint: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a;\n        }\n      },\n      interactive: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      pointActive: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a;\n        }\n      },\n      padDataOuter: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      padData: {\n        get: function get() {\n          return y;\n        },\n        set: function set(a) {\n          y = a;\n        }\n      },\n      clipEdge: {\n        get: function get() {\n          return A;\n        },\n        set: function set(a) {\n          A = a;\n        }\n      },\n      clipVoronoi: {\n        get: function get() {\n          return B;\n        },\n        set: function set(a) {\n          B = a;\n        }\n      },\n      clipRadius: {\n        get: function get() {\n          return D;\n        },\n        set: function set(a) {\n          D = a;\n        }\n      },\n      showVoronoi: {\n        get: function get() {\n          return C;\n        },\n        set: function set(a) {\n          C = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = d3.functor(a);\n        }\n      },\n      y: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = d3.functor(a);\n        }\n      },\n      pointSize: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = d3.functor(a);\n        }\n      },\n      pointShape: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = d3.functor(a);\n        }\n      },\n      margin: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g.top = void 0 !== a.top ? a.top : g.top, g.right = void 0 !== a.right ? a.right : g.right, g.bottom = void 0 !== a.bottom ? a.bottom : g.bottom, g.left = void 0 !== a.left ? a.left : g.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return N;\n        },\n        set: function set(a) {\n          N = a, P.reset(N);\n        }\n      },\n      color: {\n        get: function get() {\n          return j;\n        },\n        set: function set(b) {\n          j = a.utils.getColor(b);\n        }\n      },\n      useVoronoi: {\n        get: function get() {\n          return M;\n        },\n        set: function set(a) {\n          M = a, M === !1 && (B = !1);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.scatterChart = function () {\n    \"use strict\";\n\n    function b(z) {\n      return D.reset(), D.models(c), t && D.models(d), u && D.models(e), q && D.models(g), r && D.models(h), z.each(function (z) {\n        m = d3.select(this), a.utils.initSVG(m);\n        var G = a.utils.availableWidth(k, m, j),\n            H = a.utils.availableHeight(l, m, j);\n\n        if (b.update = function () {\n          0 === A ? m.call(b) : m.transition().duration(A).call(b);\n        }, b.container = this, w.setter(F(z), b.update).getter(E(z)).update(), w.disabled = z.map(function (a) {\n          return !!a.disabled;\n        }), !x) {\n          var I;\n          x = {};\n\n          for (I in w) {\n            x[I] = w[I] instanceof Array ? w[I].slice(0) : w[I];\n          }\n        }\n\n        if (!(z && z.length && z.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, m), D.renderEnd(\"scatter immediate\"), b;\n        m.selectAll(\".nv-noData\").remove(), o = c.xScale(), p = c.yScale();\n        var J = m.selectAll(\"g.nv-wrap.nv-scatterChart\").data([z]),\n            K = J.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-scatterChart nv-chart-\" + c.id()),\n            L = K.append(\"g\"),\n            M = J.select(\"g\");\n\n        if (L.append(\"rect\").attr(\"class\", \"nvd3 nv-background\").style(\"pointer-events\", \"none\"), L.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), L.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), L.append(\"g\").attr(\"class\", \"nv-scatterWrap\"), L.append(\"g\").attr(\"class\", \"nv-regressionLinesWrap\"), L.append(\"g\").attr(\"class\", \"nv-distWrap\"), L.append(\"g\").attr(\"class\", \"nv-legendWrap\"), v && M.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + G + \",0)\"), s) {\n          var N = G;\n          f.width(N), J.select(\".nv-legendWrap\").datum(z).call(f), j.top != f.height() && (j.top = f.height(), H = a.utils.availableHeight(l, m, j)), J.select(\".nv-legendWrap\").attr(\"transform\", \"translate(0,\" + -j.top + \")\");\n        }\n\n        J.attr(\"transform\", \"translate(\" + j.left + \",\" + j.top + \")\"), c.width(G).height(H).color(z.map(function (a, b) {\n          return a.color = a.color || n(a, b), a.color;\n        }).filter(function (a, b) {\n          return !z[b].disabled;\n        })), J.select(\".nv-scatterWrap\").datum(z.filter(function (a) {\n          return !a.disabled;\n        })).call(c), J.select(\".nv-regressionLinesWrap\").attr(\"clip-path\", \"url(#nv-edge-clip-\" + c.id() + \")\");\n        var O = J.select(\".nv-regressionLinesWrap\").selectAll(\".nv-regLines\").data(function (a) {\n          return a;\n        });\n        O.enter().append(\"g\").attr(\"class\", \"nv-regLines\");\n        var P = O.selectAll(\".nv-regLine\").data(function (a) {\n          return [a];\n        });\n        P.enter().append(\"line\").attr(\"class\", \"nv-regLine\").style(\"stroke-opacity\", 0), P.filter(function (a) {\n          return a.intercept && a.slope;\n        }).watchTransition(D, \"scatterPlusLineChart: regline\").attr(\"x1\", o.range()[0]).attr(\"x2\", o.range()[1]).attr(\"y1\", function (a) {\n          return p(o.domain()[0] * a.slope + a.intercept);\n        }).attr(\"y2\", function (a) {\n          return p(o.domain()[1] * a.slope + a.intercept);\n        }).style(\"stroke\", function (a, b, c) {\n          return n(a, c);\n        }).style(\"stroke-opacity\", function (a) {\n          return a.disabled || \"undefined\" == typeof a.slope || \"undefined\" == typeof a.intercept ? 0 : 1;\n        }), t && (d.scale(o)._ticks(a.utils.calcTicksX(G / 100, z)).tickSize(-H, 0), M.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + p.range()[0] + \")\").call(d)), u && (e.scale(p)._ticks(a.utils.calcTicksY(H / 36, z)).tickSize(-G, 0), M.select(\".nv-y.nv-axis\").call(e)), q && (g.getData(c.x()).scale(o).width(G).color(z.map(function (a, b) {\n          return a.color || n(a, b);\n        }).filter(function (a, b) {\n          return !z[b].disabled;\n        })), L.select(\".nv-distWrap\").append(\"g\").attr(\"class\", \"nv-distributionX\"), M.select(\".nv-distributionX\").attr(\"transform\", \"translate(0,\" + p.range()[0] + \")\").datum(z.filter(function (a) {\n          return !a.disabled;\n        })).call(g)), r && (h.getData(c.y()).scale(p).width(H).color(z.map(function (a, b) {\n          return a.color || n(a, b);\n        }).filter(function (a, b) {\n          return !z[b].disabled;\n        })), L.select(\".nv-distWrap\").append(\"g\").attr(\"class\", \"nv-distributionY\"), M.select(\".nv-distributionY\").attr(\"transform\", \"translate(\" + (v ? G : -h.size()) + \",0)\").datum(z.filter(function (a) {\n          return !a.disabled;\n        })).call(h)), f.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            w[c] = a[c];\n          }\n\n          y.stateChange(w), b.update();\n        }), y.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && (z.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), w.disabled = a.disabled), b.update();\n        }), c.dispatch.on(\"elementMouseout.tooltip\", function (a) {\n          i.hidden(!0), m.select(\".nv-chart-\" + c.id() + \" .nv-series-\" + a.seriesIndex + \" .nv-distx-\" + a.pointIndex).attr(\"y1\", 0), m.select(\".nv-chart-\" + c.id() + \" .nv-series-\" + a.seriesIndex + \" .nv-disty-\" + a.pointIndex).attr(\"x2\", h.size());\n        }), c.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n          m.select(\".nv-series-\" + a.seriesIndex + \" .nv-distx-\" + a.pointIndex).attr(\"y1\", a.pos.top - H - j.top), m.select(\".nv-series-\" + a.seriesIndex + \" .nv-disty-\" + a.pointIndex).attr(\"x2\", a.pos.left + g.size() - j.left), i.position(a.pos).data(a).hidden(!1);\n        }), B = o.copy(), C = p.copy();\n      }), D.renderEnd(\"scatter with line immediate\"), b;\n    }\n\n    var c = a.models.scatter(),\n        d = a.models.axis(),\n        e = a.models.axis(),\n        f = a.models.legend(),\n        g = a.models.distribution(),\n        h = a.models.distribution(),\n        i = a.models.tooltip(),\n        j = {\n      top: 30,\n      right: 20,\n      bottom: 50,\n      left: 75\n    },\n        k = null,\n        l = null,\n        m = null,\n        n = a.utils.defaultColor(),\n        o = c.xScale(),\n        p = c.yScale(),\n        q = !1,\n        r = !1,\n        s = !0,\n        t = !0,\n        u = !0,\n        v = !1,\n        w = a.utils.state(),\n        x = null,\n        y = d3.dispatch(\"stateChange\", \"changeState\", \"renderEnd\"),\n        z = null,\n        A = 250;\n    c.xScale(o).yScale(p), d.orient(\"bottom\").tickPadding(10), e.orient(v ? \"right\" : \"left\").tickPadding(10), g.axis(\"x\"), h.axis(\"y\"), i.headerFormatter(function (a, b) {\n      return d.tickFormat()(a, b);\n    }).valueFormatter(function (a, b) {\n      return e.tickFormat()(a, b);\n    });\n\n    var B,\n        C,\n        D = a.utils.renderWatch(y, A),\n        E = function E(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          })\n        };\n      };\n    },\n        F = function F(a) {\n      return function (b) {\n        void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    };\n\n    return b.dispatch = y, b.scatter = c, b.legend = f, b.xAxis = d, b.yAxis = e, b.distX = g, b.distY = h, b.tooltip = i, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      container: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      showDistX: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      showDistY: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return z;\n        },\n        set: function set(a) {\n          z = a;\n        }\n      },\n      duration: {\n        get: function get() {\n          return A;\n        },\n        set: function set(a) {\n          A = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return i.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), i.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return i.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), i.contentGenerator(b);\n        }\n      },\n      tooltipXContent: {\n        get: function get() {\n          return i.contentGenerator();\n        },\n        set: function set() {\n          a.deprecated(\"tooltipContent\", \"This option is removed, put values into main tooltip.\");\n        }\n      },\n      tooltipYContent: {\n        get: function get() {\n          return i.contentGenerator();\n        },\n        set: function set() {\n          a.deprecated(\"tooltipContent\", \"This option is removed, put values into main tooltip.\");\n        }\n      },\n      margin: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j.top = void 0 !== a.top ? a.top : j.top, j.right = void 0 !== a.right ? a.right : j.right, j.bottom = void 0 !== a.bottom ? a.bottom : j.bottom, j.left = void 0 !== a.left ? a.left : j.left;\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return v;\n        },\n        set: function set(a) {\n          v = a, e.orient(a ? \"right\" : \"left\");\n        }\n      },\n      color: {\n        get: function get() {\n          return n;\n        },\n        set: function set(b) {\n          n = a.utils.getColor(b), f.color(n), g.color(n), h.color(n);\n        }\n      }\n    }), a.utils.inheritOptions(b, c), a.utils.initOptions(b), b;\n  }, a.models.sparkline = function () {\n    \"use strict\";\n\n    function b(k) {\n      return k.each(function (b) {\n        var k = h - g.left - g.right,\n            q = i - g.top - g.bottom;\n        j = d3.select(this), a.utils.initSVG(j), l.domain(c || d3.extent(b, n)).range(e || [0, k]), m.domain(d || d3.extent(b, o)).range(f || [q, 0]);\n        {\n          var r = j.selectAll(\"g.nv-wrap.nv-sparkline\").data([b]),\n              s = r.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-sparkline\");\n          s.append(\"g\"), r.select(\"g\");\n        }\n        r.attr(\"transform\", \"translate(\" + g.left + \",\" + g.top + \")\");\n        var t = r.selectAll(\"path\").data(function (a) {\n          return [a];\n        });\n        t.enter().append(\"path\"), t.exit().remove(), t.style(\"stroke\", function (a, b) {\n          return a.color || p(a, b);\n        }).attr(\"d\", d3.svg.line().x(function (a, b) {\n          return l(n(a, b));\n        }).y(function (a, b) {\n          return m(o(a, b));\n        }));\n        var u = r.selectAll(\"circle.nv-point\").data(function (a) {\n          function b(b) {\n            if (-1 != b) {\n              var c = a[b];\n              return c.pointIndex = b, c;\n            }\n\n            return null;\n          }\n\n          var c = a.map(function (a, b) {\n            return o(a, b);\n          }),\n              d = b(c.lastIndexOf(m.domain()[1])),\n              e = b(c.indexOf(m.domain()[0])),\n              f = b(c.length - 1);\n          return [e, d, f].filter(function (a) {\n            return null != a;\n          });\n        });\n        u.enter().append(\"circle\"), u.exit().remove(), u.attr(\"cx\", function (a) {\n          return l(n(a, a.pointIndex));\n        }).attr(\"cy\", function (a) {\n          return m(o(a, a.pointIndex));\n        }).attr(\"r\", 2).attr(\"class\", function (a) {\n          return n(a, a.pointIndex) == l.domain()[1] ? \"nv-point nv-currentValue\" : o(a, a.pointIndex) == m.domain()[0] ? \"nv-point nv-minValue\" : \"nv-point nv-maxValue\";\n        });\n      }), b;\n    }\n\n    var c,\n        d,\n        e,\n        f,\n        g = {\n      top: 2,\n      right: 0,\n      bottom: 2,\n      left: 0\n    },\n        h = 400,\n        i = 32,\n        j = null,\n        k = !0,\n        l = d3.scale.linear(),\n        m = d3.scale.linear(),\n        n = function n(a) {\n      return a.x;\n    },\n        o = function o(a) {\n      return a.y;\n    },\n        p = a.utils.getColor([\"#000\"]);\n\n    return b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      xDomain: {\n        get: function get() {\n          return c;\n        },\n        set: function set(a) {\n          c = a;\n        }\n      },\n      yDomain: {\n        get: function get() {\n          return d;\n        },\n        set: function set(a) {\n          d = a;\n        }\n      },\n      xRange: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e = a;\n        }\n      },\n      yRange: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      xScale: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      yScale: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      animate: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = d3.functor(a);\n        }\n      },\n      y: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = d3.functor(a);\n        }\n      },\n      margin: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g.top = void 0 !== a.top ? a.top : g.top, g.right = void 0 !== a.right ? a.right : g.right, g.bottom = void 0 !== a.bottom ? a.bottom : g.bottom, g.left = void 0 !== a.left ? a.left : g.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return p;\n        },\n        set: function set(b) {\n          p = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.sparklinePlus = function () {\n    \"use strict\";\n\n    function b(p) {\n      return p.each(function (p) {\n        function q() {\n          if (!j) {\n            var a = z.selectAll(\".nv-hoverValue\").data(i),\n                b = a.enter().append(\"g\").attr(\"class\", \"nv-hoverValue\").style(\"stroke-opacity\", 0).style(\"fill-opacity\", 0);\n            a.exit().transition().duration(250).style(\"stroke-opacity\", 0).style(\"fill-opacity\", 0).remove(), a.attr(\"transform\", function (a) {\n              return \"translate(\" + c(e.x()(p[a], a)) + \",0)\";\n            }).transition().duration(250).style(\"stroke-opacity\", 1).style(\"fill-opacity\", 1), i.length && (b.append(\"line\").attr(\"x1\", 0).attr(\"y1\", -f.top).attr(\"x2\", 0).attr(\"y2\", u), b.append(\"text\").attr(\"class\", \"nv-xValue\").attr(\"x\", -6).attr(\"y\", -f.top).attr(\"text-anchor\", \"end\").attr(\"dy\", \".9em\"), z.select(\".nv-hoverValue .nv-xValue\").text(k(e.x()(p[i[0]], i[0]))), b.append(\"text\").attr(\"class\", \"nv-yValue\").attr(\"x\", 6).attr(\"y\", -f.top).attr(\"text-anchor\", \"start\").attr(\"dy\", \".9em\"), z.select(\".nv-hoverValue .nv-yValue\").text(l(e.y()(p[i[0]], i[0]))));\n          }\n        }\n\n        function r() {\n          function a(a, b) {\n            for (var c = Math.abs(e.x()(a[0], 0) - b), d = 0, f = 0; f < a.length; f++) {\n              Math.abs(e.x()(a[f], f) - b) < c && (c = Math.abs(e.x()(a[f], f) - b), d = f);\n            }\n\n            return d;\n          }\n\n          if (!j) {\n            var b = d3.mouse(this)[0] - f.left;\n            i = [a(p, Math.round(c.invert(b)))], q();\n          }\n        }\n\n        var s = d3.select(this);\n        a.utils.initSVG(s);\n        var t = a.utils.availableWidth(g, s, f),\n            u = a.utils.availableHeight(h, s, f);\n        if (b.update = function () {\n          s.call(b);\n        }, b.container = this, !p || !p.length) return a.utils.noData(b, s), b;\n        s.selectAll(\".nv-noData\").remove();\n        var v = e.y()(p[p.length - 1], p.length - 1);\n        c = e.xScale(), d = e.yScale();\n        var w = s.selectAll(\"g.nv-wrap.nv-sparklineplus\").data([p]),\n            x = w.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-sparklineplus\"),\n            y = x.append(\"g\"),\n            z = w.select(\"g\");\n        y.append(\"g\").attr(\"class\", \"nv-sparklineWrap\"), y.append(\"g\").attr(\"class\", \"nv-valueWrap\"), y.append(\"g\").attr(\"class\", \"nv-hoverArea\"), w.attr(\"transform\", \"translate(\" + f.left + \",\" + f.top + \")\");\n        var A = z.select(\".nv-sparklineWrap\");\n\n        if (e.width(t).height(u), A.call(e), m) {\n          var B = z.select(\".nv-valueWrap\"),\n              C = B.selectAll(\".nv-currentValue\").data([v]);\n          C.enter().append(\"text\").attr(\"class\", \"nv-currentValue\").attr(\"dx\", o ? -8 : 8).attr(\"dy\", \".9em\").style(\"text-anchor\", o ? \"end\" : \"start\"), C.attr(\"x\", t + (o ? f.right : 0)).attr(\"y\", n ? function (a) {\n            return d(a);\n          } : 0).style(\"fill\", e.color()(p[p.length - 1], p.length - 1)).text(l(v));\n        }\n\n        y.select(\".nv-hoverArea\").append(\"rect\").on(\"mousemove\", r).on(\"click\", function () {\n          j = !j;\n        }).on(\"mouseout\", function () {\n          i = [], q();\n        }), z.select(\".nv-hoverArea rect\").attr(\"transform\", function () {\n          return \"translate(\" + -f.left + \",\" + -f.top + \")\";\n        }).attr(\"width\", t + f.left + f.right).attr(\"height\", u + f.top);\n      }), b;\n    }\n\n    var c,\n        d,\n        e = a.models.sparkline(),\n        f = {\n      top: 15,\n      right: 100,\n      bottom: 10,\n      left: 50\n    },\n        g = null,\n        h = null,\n        i = [],\n        j = !1,\n        k = d3.format(\",r\"),\n        l = d3.format(\",.2f\"),\n        m = !0,\n        n = !0,\n        o = !1,\n        p = null;\n    return b.sparkline = e, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      xTickFormat: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      yTickFormat: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = a;\n        }\n      },\n      showLastValue: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      alignValue: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      rightAlignValue: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f.top = void 0 !== a.top ? a.top : f.top, f.right = void 0 !== a.right ? a.right : f.right, f.bottom = void 0 !== a.bottom ? a.bottom : f.bottom, f.left = void 0 !== a.left ? a.left : f.left;\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.stackedArea = function () {\n    \"use strict\";\n\n    function b(m) {\n      return u.reset(), u.models(r), m.each(function (m) {\n        var s = f - e.left - e.right,\n            v = g - e.top - e.bottom;\n        j = d3.select(this), a.utils.initSVG(j), c = r.xScale(), d = r.yScale();\n        var w = m;\n        m.forEach(function (a, b) {\n          a.seriesIndex = b, a.values = a.values.map(function (a, c) {\n            return a.index = c, a.seriesIndex = b, a;\n          });\n        });\n        var x = m.filter(function (a) {\n          return !a.disabled;\n        });\n        m = d3.layout.stack().order(o).offset(n).values(function (a) {\n          return a.values;\n        }).x(k).y(l).out(function (a, b, c) {\n          a.display = {\n            y: c,\n            y0: b\n          };\n        })(x);\n        var y = j.selectAll(\"g.nv-wrap.nv-stackedarea\").data([m]),\n            z = y.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-stackedarea\"),\n            A = z.append(\"defs\"),\n            B = z.append(\"g\"),\n            C = y.select(\"g\");\n        B.append(\"g\").attr(\"class\", \"nv-areaWrap\"), B.append(\"g\").attr(\"class\", \"nv-scatterWrap\"), y.attr(\"transform\", \"translate(\" + e.left + \",\" + e.top + \")\"), 0 == r.forceY().length && r.forceY().push(0), r.width(s).height(v).x(k).y(function (a) {\n          return a.display.y + a.display.y0;\n        }).forceY([0]).color(m.map(function (a) {\n          return a.color || h(a, a.seriesIndex);\n        }));\n        var D = C.select(\".nv-scatterWrap\").datum(m);\n        D.call(r), A.append(\"clipPath\").attr(\"id\", \"nv-edge-clip-\" + i).append(\"rect\"), y.select(\"#nv-edge-clip-\" + i + \" rect\").attr(\"width\", s).attr(\"height\", v), C.attr(\"clip-path\", q ? \"url(#nv-edge-clip-\" + i + \")\" : \"\");\n        var E = d3.svg.area().x(function (a, b) {\n          return c(k(a, b));\n        }).y0(function (a) {\n          return d(a.display.y0);\n        }).y1(function (a) {\n          return d(a.display.y + a.display.y0);\n        }).interpolate(p),\n            F = d3.svg.area().x(function (a, b) {\n          return c(k(a, b));\n        }).y0(function (a) {\n          return d(a.display.y0);\n        }).y1(function (a) {\n          return d(a.display.y0);\n        }),\n            G = C.select(\".nv-areaWrap\").selectAll(\"path.nv-area\").data(function (a) {\n          return a;\n        });\n        G.enter().append(\"path\").attr(\"class\", function (a, b) {\n          return \"nv-area nv-area-\" + b;\n        }).attr(\"d\", function (a) {\n          return F(a.values, a.seriesIndex);\n        }).on(\"mouseover\", function (a) {\n          d3.select(this).classed(\"hover\", !0), t.areaMouseover({\n            point: a,\n            series: a.key,\n            pos: [d3.event.pageX, d3.event.pageY],\n            seriesIndex: a.seriesIndex\n          });\n        }).on(\"mouseout\", function (a) {\n          d3.select(this).classed(\"hover\", !1), t.areaMouseout({\n            point: a,\n            series: a.key,\n            pos: [d3.event.pageX, d3.event.pageY],\n            seriesIndex: a.seriesIndex\n          });\n        }).on(\"click\", function (a) {\n          d3.select(this).classed(\"hover\", !1), t.areaClick({\n            point: a,\n            series: a.key,\n            pos: [d3.event.pageX, d3.event.pageY],\n            seriesIndex: a.seriesIndex\n          });\n        }), G.exit().remove(), G.style(\"fill\", function (a) {\n          return a.color || h(a, a.seriesIndex);\n        }).style(\"stroke\", function (a) {\n          return a.color || h(a, a.seriesIndex);\n        }), G.watchTransition(u, \"stackedArea path\").attr(\"d\", function (a, b) {\n          return E(a.values, b);\n        }), r.dispatch.on(\"elementMouseover.area\", function (a) {\n          C.select(\".nv-chart-\" + i + \" .nv-area-\" + a.seriesIndex).classed(\"hover\", !0);\n        }), r.dispatch.on(\"elementMouseout.area\", function (a) {\n          C.select(\".nv-chart-\" + i + \" .nv-area-\" + a.seriesIndex).classed(\"hover\", !1);\n        }), b.d3_stackedOffset_stackPercent = function (a) {\n          var b,\n              c,\n              d,\n              e = a.length,\n              f = a[0].length,\n              g = [];\n\n          for (c = 0; f > c; ++c) {\n            for (b = 0, d = 0; b < w.length; b++) {\n              d += l(w[b].values[c]);\n            }\n\n            if (d) for (b = 0; e > b; b++) {\n              a[b][c][1] /= d;\n            } else for (b = 0; e > b; b++) {\n              a[b][c][1] = 0;\n            }\n          }\n\n          for (c = 0; f > c; ++c) {\n            g[c] = 0;\n          }\n\n          return g;\n        };\n      }), u.renderEnd(\"stackedArea immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        f = 960,\n        g = 500,\n        h = a.utils.defaultColor(),\n        i = Math.floor(1e5 * Math.random()),\n        j = null,\n        k = function k(a) {\n      return a.x;\n    },\n        l = function l(a) {\n      return a.y;\n    },\n        m = \"stack\",\n        n = \"zero\",\n        o = \"default\",\n        p = \"linear\",\n        q = !1,\n        r = a.models.scatter(),\n        s = 250,\n        t = d3.dispatch(\"areaClick\", \"areaMouseover\", \"areaMouseout\", \"renderEnd\", \"elementClick\", \"elementMouseover\", \"elementMouseout\");\n\n    r.pointSize(2.2).pointDomain([2.2, 2.2]);\n    var u = a.utils.renderWatch(t, s);\n    return b.dispatch = t, b.scatter = r, r.dispatch.on(\"elementClick\", function () {\n      t.elementClick.apply(this, arguments);\n    }), r.dispatch.on(\"elementMouseover\", function () {\n      t.elementMouseover.apply(this, arguments);\n    }), r.dispatch.on(\"elementMouseout\", function () {\n      t.elementMouseout.apply(this, arguments);\n    }), b.interpolate = function (a) {\n      return arguments.length ? (p = a, b) : p;\n    }, b.duration = function (a) {\n      return arguments.length ? (s = a, u.reset(s), r.duration(s), b) : s;\n    }, b.dispatch = t, b.scatter = r, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      clipEdge: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      offset: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      order: {\n        get: function get() {\n          return o;\n        },\n        set: function set(a) {\n          o = a;\n        }\n      },\n      interpolate: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      x: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = d3.functor(a);\n        }\n      },\n      y: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l = d3.functor(a);\n        }\n      },\n      margin: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e.top = void 0 !== a.top ? a.top : e.top, e.right = void 0 !== a.right ? a.right : e.right, e.bottom = void 0 !== a.bottom ? a.bottom : e.bottom, e.left = void 0 !== a.left ? a.left : e.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return h;\n        },\n        set: function set(b) {\n          h = a.utils.getColor(b);\n        }\n      },\n      style: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          switch (m = a) {\n            case \"stack\":\n              b.offset(\"zero\"), b.order(\"default\");\n              break;\n\n            case \"stream\":\n              b.offset(\"wiggle\"), b.order(\"inside-out\");\n              break;\n\n            case \"stream-center\":\n              b.offset(\"silhouette\"), b.order(\"inside-out\");\n              break;\n\n            case \"expand\":\n              b.offset(\"expand\"), b.order(\"default\");\n              break;\n\n            case \"stack_percent\":\n              b.offset(b.d3_stackedOffset_stackPercent), b.order(\"default\");\n          }\n        }\n      },\n      duration: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a, u.reset(s), r.duration(s);\n        }\n      }\n    }), a.utils.inheritOptions(b, r), a.utils.initOptions(b), b;\n  }, a.models.stackedAreaChart = function () {\n    \"use strict\";\n\n    function b(k) {\n      return F.reset(), F.models(e), r && F.models(f), s && F.models(g), k.each(function (k) {\n        var x = d3.select(this),\n            F = this;\n        a.utils.initSVG(x);\n        var K = a.utils.availableWidth(m, x, l),\n            L = a.utils.availableHeight(n, x, l);\n\n        if (b.update = function () {\n          x.transition().duration(C).call(b);\n        }, b.container = this, v.setter(I(k), b.update).getter(H(k)).update(), v.disabled = k.map(function (a) {\n          return !!a.disabled;\n        }), !w) {\n          var M;\n          w = {};\n\n          for (M in v) {\n            w[M] = v[M] instanceof Array ? v[M].slice(0) : v[M];\n          }\n        }\n\n        if (!(k && k.length && k.filter(function (a) {\n          return a.values.length;\n        }).length)) return a.utils.noData(b, x), b;\n        x.selectAll(\".nv-noData\").remove(), c = e.xScale(), d = e.yScale();\n        var N = x.selectAll(\"g.nv-wrap.nv-stackedAreaChart\").data([k]),\n            O = N.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-stackedAreaChart\").append(\"g\"),\n            P = N.select(\"g\");\n\n        if (O.append(\"rect\").style(\"opacity\", 0), O.append(\"g\").attr(\"class\", \"nv-x nv-axis\"), O.append(\"g\").attr(\"class\", \"nv-y nv-axis\"), O.append(\"g\").attr(\"class\", \"nv-stackedWrap\"), O.append(\"g\").attr(\"class\", \"nv-legendWrap\"), O.append(\"g\").attr(\"class\", \"nv-controlsWrap\"), O.append(\"g\").attr(\"class\", \"nv-interactive\"), P.select(\"rect\").attr(\"width\", K).attr(\"height\", L), q) {\n          var Q = p ? K - z : K;\n          h.width(Q), P.select(\".nv-legendWrap\").datum(k).call(h), l.top != h.height() && (l.top = h.height(), L = a.utils.availableHeight(n, x, l)), P.select(\".nv-legendWrap\").attr(\"transform\", \"translate(\" + (K - Q) + \",\" + -l.top + \")\");\n        }\n\n        if (p) {\n          var R = [{\n            key: B.stacked || \"Stacked\",\n            metaKey: \"Stacked\",\n            disabled: \"stack\" != e.style(),\n            style: \"stack\"\n          }, {\n            key: B.stream || \"Stream\",\n            metaKey: \"Stream\",\n            disabled: \"stream\" != e.style(),\n            style: \"stream\"\n          }, {\n            key: B.expanded || \"Expanded\",\n            metaKey: \"Expanded\",\n            disabled: \"expand\" != e.style(),\n            style: \"expand\"\n          }, {\n            key: B.stack_percent || \"Stack %\",\n            metaKey: \"Stack_Percent\",\n            disabled: \"stack_percent\" != e.style(),\n            style: \"stack_percent\"\n          }];\n          z = A.length / 3 * 260, R = R.filter(function (a) {\n            return -1 !== A.indexOf(a.metaKey);\n          }), i.width(z).color([\"#444\", \"#444\", \"#444\"]), P.select(\".nv-controlsWrap\").datum(R).call(i), l.top != Math.max(i.height(), h.height()) && (l.top = Math.max(i.height(), h.height()), L = a.utils.availableHeight(n, x, l)), P.select(\".nv-controlsWrap\").attr(\"transform\", \"translate(0,\" + -l.top + \")\");\n        }\n\n        N.attr(\"transform\", \"translate(\" + l.left + \",\" + l.top + \")\"), t && P.select(\".nv-y.nv-axis\").attr(\"transform\", \"translate(\" + K + \",0)\"), u && (j.width(K).height(L).margin({\n          left: l.left,\n          top: l.top\n        }).svgContainer(x).xScale(c), N.select(\".nv-interactive\").call(j)), e.width(K).height(L);\n        var S = P.select(\".nv-stackedWrap\").datum(k);\n\n        if (S.transition().call(e), r && (f.scale(c)._ticks(a.utils.calcTicksX(K / 100, k)).tickSize(-L, 0), P.select(\".nv-x.nv-axis\").attr(\"transform\", \"translate(0,\" + L + \")\"), P.select(\".nv-x.nv-axis\").transition().duration(0).call(f)), s) {\n          var T;\n\n          if (T = \"wiggle\" === e.offset() ? 0 : a.utils.calcTicksY(L / 36, k), g.scale(d)._ticks(T).tickSize(-K, 0), \"expand\" === e.style() || \"stack_percent\" === e.style()) {\n            var U = g.tickFormat();\n            D && U === J || (D = U), g.tickFormat(J);\n          } else D && (g.tickFormat(D), D = null);\n\n          P.select(\".nv-y.nv-axis\").transition().duration(0).call(g);\n        }\n\n        e.dispatch.on(\"areaClick.toggle\", function (a) {\n          k.forEach(1 === k.filter(function (a) {\n            return !a.disabled;\n          }).length ? function (a) {\n            a.disabled = !1;\n          } : function (b, c) {\n            b.disabled = c != a.seriesIndex;\n          }), v.disabled = k.map(function (a) {\n            return !!a.disabled;\n          }), y.stateChange(v), b.update();\n        }), h.dispatch.on(\"stateChange\", function (a) {\n          for (var c in a) {\n            v[c] = a[c];\n          }\n\n          y.stateChange(v), b.update();\n        }), i.dispatch.on(\"legendClick\", function (a) {\n          a.disabled && (R = R.map(function (a) {\n            return a.disabled = !0, a;\n          }), a.disabled = !1, e.style(a.style), v.style = e.style(), y.stateChange(v), b.update());\n        }), j.dispatch.on(\"elementMousemove\", function (c) {\n          e.clearHighlights();\n          var d,\n              g,\n              h,\n              i = [];\n\n          if (k.filter(function (a, b) {\n            return a.seriesIndex = b, !a.disabled;\n          }).forEach(function (f, j) {\n            g = a.interactiveBisect(f.values, c.pointXValue, b.x());\n            var k = f.values[g],\n                l = b.y()(k, g);\n\n            if (null != l && e.highlightPoint(j, g, !0), \"undefined\" != typeof k) {\n              \"undefined\" == typeof d && (d = k), \"undefined\" == typeof h && (h = b.xScale()(b.x()(k, g)));\n              var m = \"expand\" == e.style() ? k.display.y : b.y()(k, g);\n              i.push({\n                key: f.key,\n                value: m,\n                color: o(f, f.seriesIndex),\n                stackedValue: k.display\n              });\n            }\n          }), i.reverse(), i.length > 2) {\n            var m = b.yScale().invert(c.mouseY),\n                n = null;\n            i.forEach(function (a, b) {\n              m = Math.abs(m);\n              var c = Math.abs(a.stackedValue.y0),\n                  d = Math.abs(a.stackedValue.y);\n              return m >= c && d + c >= m ? void (n = b) : void 0;\n            }), null != n && (i[n].highlight = !0);\n          }\n\n          var p = f.tickFormat()(b.x()(d, g)),\n              q = j.tooltip.valueFormatter();\n          \"expand\" === e.style() || \"stack_percent\" === e.style() ? (E || (E = q), q = d3.format(\".1%\")) : E && (q = E, E = null), j.tooltip.position({\n            left: h + l.left,\n            top: c.mouseY + l.top\n          }).chartContainer(F.parentNode).valueFormatter(q).data({\n            value: p,\n            series: i\n          })(), j.renderGuideLine(h);\n        }), j.dispatch.on(\"elementMouseout\", function () {\n          e.clearHighlights();\n        }), y.on(\"changeState\", function (a) {\n          \"undefined\" != typeof a.disabled && k.length === a.disabled.length && (k.forEach(function (b, c) {\n            b.disabled = a.disabled[c];\n          }), v.disabled = a.disabled), \"undefined\" != typeof a.style && (e.style(a.style), G = a.style), b.update();\n        });\n      }), F.renderEnd(\"stacked Area chart immediate\"), b;\n    }\n\n    var c,\n        d,\n        e = a.models.stackedArea(),\n        f = a.models.axis(),\n        g = a.models.axis(),\n        h = a.models.legend(),\n        i = a.models.legend(),\n        j = a.interactiveGuideline(),\n        k = a.models.tooltip(),\n        l = {\n      top: 30,\n      right: 25,\n      bottom: 50,\n      left: 60\n    },\n        m = null,\n        n = null,\n        o = a.utils.defaultColor(),\n        p = !0,\n        q = !0,\n        r = !0,\n        s = !0,\n        t = !1,\n        u = !1,\n        v = a.utils.state(),\n        w = null,\n        x = null,\n        y = d3.dispatch(\"stateChange\", \"changeState\", \"renderEnd\"),\n        z = 250,\n        A = [\"Stacked\", \"Stream\", \"Expanded\"],\n        B = {},\n        C = 250;\n    v.style = e.style(), f.orient(\"bottom\").tickPadding(7), g.orient(t ? \"right\" : \"left\"), k.headerFormatter(function (a, b) {\n      return f.tickFormat()(a, b);\n    }).valueFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    }), j.tooltip.headerFormatter(function (a, b) {\n      return f.tickFormat()(a, b);\n    }).valueFormatter(function (a, b) {\n      return g.tickFormat()(a, b);\n    });\n    var D = null,\n        E = null;\n    i.updateState(!1);\n\n    var F = a.utils.renderWatch(y),\n        G = e.style(),\n        H = function H(a) {\n      return function () {\n        return {\n          active: a.map(function (a) {\n            return !a.disabled;\n          }),\n          style: e.style()\n        };\n      };\n    },\n        I = function I(a) {\n      return function (b) {\n        void 0 !== b.style && (G = b.style), void 0 !== b.active && a.forEach(function (a, c) {\n          a.disabled = !b.active[c];\n        });\n      };\n    },\n        J = d3.format(\"%\");\n\n    return e.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.point.x = e.x()(a.point), a.point.y = e.y()(a.point), k.data(a).position(a.pos).hidden(!1);\n    }), e.dispatch.on(\"elementMouseout.tooltip\", function () {\n      k.hidden(!0);\n    }), b.dispatch = y, b.stacked = e, b.legend = h, b.controls = i, b.xAxis = f, b.yAxis = g, b.interactiveLayer = j, b.tooltip = k, b.dispatch = y, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return m;\n        },\n        set: function set(a) {\n          m = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      showLegend: {\n        get: function get() {\n          return q;\n        },\n        set: function set(a) {\n          q = a;\n        }\n      },\n      showXAxis: {\n        get: function get() {\n          return r;\n        },\n        set: function set(a) {\n          r = a;\n        }\n      },\n      showYAxis: {\n        get: function get() {\n          return s;\n        },\n        set: function set(a) {\n          s = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return w;\n        },\n        set: function set(a) {\n          w = a;\n        }\n      },\n      noData: {\n        get: function get() {\n          return x;\n        },\n        set: function set(a) {\n          x = a;\n        }\n      },\n      showControls: {\n        get: function get() {\n          return p;\n        },\n        set: function set(a) {\n          p = a;\n        }\n      },\n      controlLabels: {\n        get: function get() {\n          return B;\n        },\n        set: function set(a) {\n          B = a;\n        }\n      },\n      controlOptions: {\n        get: function get() {\n          return A;\n        },\n        set: function set(a) {\n          A = a;\n        }\n      },\n      tooltips: {\n        get: function get() {\n          return k.enabled();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltips\", \"use chart.tooltip.enabled() instead\"), k.enabled(!!b);\n        }\n      },\n      tooltipContent: {\n        get: function get() {\n          return k.contentGenerator();\n        },\n        set: function set(b) {\n          a.deprecated(\"tooltipContent\", \"use chart.tooltip.contentGenerator() instead\"), k.contentGenerator(b);\n        }\n      },\n      margin: {\n        get: function get() {\n          return l;\n        },\n        set: function set(a) {\n          l.top = void 0 !== a.top ? a.top : l.top, l.right = void 0 !== a.right ? a.right : l.right, l.bottom = void 0 !== a.bottom ? a.bottom : l.bottom, l.left = void 0 !== a.left ? a.left : l.left;\n        }\n      },\n      duration: {\n        get: function get() {\n          return C;\n        },\n        set: function set(a) {\n          C = a, F.reset(C), e.duration(C), f.duration(C), g.duration(C);\n        }\n      },\n      color: {\n        get: function get() {\n          return o;\n        },\n        set: function set(b) {\n          o = a.utils.getColor(b), h.color(o), e.color(o);\n        }\n      },\n      rightAlignYAxis: {\n        get: function get() {\n          return t;\n        },\n        set: function set(a) {\n          t = a, g.orient(t ? \"right\" : \"left\");\n        }\n      },\n      useInteractiveGuideline: {\n        get: function get() {\n          return u;\n        },\n        set: function set(a) {\n          u = !!a, b.interactive(!a), b.useVoronoi(!a), e.scatter.interactive(!a);\n        }\n      }\n    }), a.utils.inheritOptions(b, e), a.utils.initOptions(b), b;\n  }, a.models.sunburst = function () {\n    \"use strict\";\n\n    function b(u) {\n      return t.reset(), u.each(function (b) {\n        function t(a) {\n          a.x0 = a.x, a.dx0 = a.dx;\n        }\n\n        function u(a) {\n          var b = d3.interpolate(p.domain(), [a.x, a.x + a.dx]),\n              c = d3.interpolate(q.domain(), [a.y, 1]),\n              d = d3.interpolate(q.range(), [a.y ? 20 : 0, y]);\n          return function (a, e) {\n            return e ? function () {\n              return s(a);\n            } : function (e) {\n              return p.domain(b(e)), q.domain(c(e)).range(d(e)), s(a);\n            };\n          };\n        }\n\n        l = d3.select(this);\n        var v,\n            w = a.utils.availableWidth(g, l, f),\n            x = a.utils.availableHeight(h, l, f),\n            y = Math.min(w, x) / 2;\n        a.utils.initSVG(l);\n        var z = l.selectAll(\".nv-wrap.nv-sunburst\").data(b),\n            A = z.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-sunburst nv-chart-\" + k),\n            B = A.selectAll(\"nv-sunburst\");\n        z.attr(\"transform\", \"translate(\" + w / 2 + \",\" + x / 2 + \")\"), l.on(\"click\", function (a, b) {\n          o.chartClick({\n            data: a,\n            index: b,\n            pos: d3.event,\n            id: k\n          });\n        }), q.range([0, y]), c = c || b, e = b[0], r.value(j[i] || j.count), v = B.data(r.nodes).enter().append(\"path\").attr(\"d\", s).style(\"fill\", function (a) {\n          return m((a.children ? a : a.parent).name);\n        }).style(\"stroke\", \"#FFF\").on(\"click\", function (a) {\n          d !== c && c !== a && (d = c), c = a, v.transition().duration(n).attrTween(\"d\", u(a));\n        }).each(t).on(\"dblclick\", function (a) {\n          d.parent == a && v.transition().duration(n).attrTween(\"d\", u(e));\n        }).each(t).on(\"mouseover\", function (a) {\n          d3.select(this).classed(\"hover\", !0).style(\"opacity\", .8), o.elementMouseover({\n            data: a,\n            color: d3.select(this).style(\"fill\")\n          });\n        }).on(\"mouseout\", function (a) {\n          d3.select(this).classed(\"hover\", !1).style(\"opacity\", 1), o.elementMouseout({\n            data: a\n          });\n        }).on(\"mousemove\", function (a) {\n          o.elementMousemove({\n            data: a\n          });\n        });\n      }), t.renderEnd(\"sunburst immediate\"), b;\n    }\n\n    var c,\n        d,\n        e,\n        f = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n        g = null,\n        h = null,\n        i = \"count\",\n        j = {\n      count: function count() {\n        return 1;\n      },\n      size: function size(a) {\n        return a.size;\n      }\n    },\n        k = Math.floor(1e4 * Math.random()),\n        l = null,\n        m = a.utils.defaultColor(),\n        n = 500,\n        o = d3.dispatch(\"chartClick\", \"elementClick\", \"elementDblClick\", \"elementMousemove\", \"elementMouseover\", \"elementMouseout\", \"renderEnd\"),\n        p = d3.scale.linear().range([0, 2 * Math.PI]),\n        q = d3.scale.sqrt(),\n        r = d3.layout.partition().sort(null).value(function () {\n      return 1;\n    }),\n        s = d3.svg.arc().startAngle(function (a) {\n      return Math.max(0, Math.min(2 * Math.PI, p(a.x)));\n    }).endAngle(function (a) {\n      return Math.max(0, Math.min(2 * Math.PI, p(a.x + a.dx)));\n    }).innerRadius(function (a) {\n      return Math.max(0, q(a.y));\n    }).outerRadius(function (a) {\n      return Math.max(0, q(a.y + a.dy));\n    }),\n        t = a.utils.renderWatch(o);\n    return b.dispatch = o, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      width: {\n        get: function get() {\n          return g;\n        },\n        set: function set(a) {\n          g = a;\n        }\n      },\n      height: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a;\n        }\n      },\n      mode: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      id: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a;\n        }\n      },\n      duration: {\n        get: function get() {\n          return n;\n        },\n        set: function set(a) {\n          n = a;\n        }\n      },\n      margin: {\n        get: function get() {\n          return f;\n        },\n        set: function set(a) {\n          f.top = void 0 != a.top ? a.top : f.top, f.right = void 0 != a.right ? a.right : f.right, f.bottom = void 0 != a.bottom ? a.bottom : f.bottom, f.left = void 0 != a.left ? a.left : f.left;\n        }\n      },\n      color: {\n        get: function get() {\n          return m;\n        },\n        set: function set(b) {\n          m = a.utils.getColor(b);\n        }\n      }\n    }), a.utils.initOptions(b), b;\n  }, a.models.sunburstChart = function () {\n    \"use strict\";\n\n    function b(d) {\n      return m.reset(), m.models(c), d.each(function (d) {\n        var h = d3.select(this);\n        a.utils.initSVG(h);\n        var i = a.utils.availableWidth(f, h, e),\n            j = a.utils.availableHeight(g, h, e);\n        if (b.update = function () {\n          0 === k ? h.call(b) : h.transition().duration(k).call(b);\n        }, b.container = this, !d || !d.length) return a.utils.noData(b, h), b;\n        h.selectAll(\".nv-noData\").remove();\n        var l = h.selectAll(\"g.nv-wrap.nv-sunburstChart\").data(d),\n            m = l.enter().append(\"g\").attr(\"class\", \"nvd3 nv-wrap nv-sunburstChart\").append(\"g\"),\n            n = l.select(\"g\");\n        m.append(\"g\").attr(\"class\", \"nv-sunburstWrap\"), l.attr(\"transform\", \"translate(\" + e.left + \",\" + e.top + \")\"), c.width(i).height(j);\n        var o = n.select(\".nv-sunburstWrap\").datum(d);\n        d3.transition(o).call(c);\n      }), m.renderEnd(\"sunburstChart immediate\"), b;\n    }\n\n    var c = a.models.sunburst(),\n        d = a.models.tooltip(),\n        e = {\n      top: 30,\n      right: 20,\n      bottom: 20,\n      left: 20\n    },\n        f = null,\n        g = null,\n        h = a.utils.defaultColor(),\n        i = (Math.round(1e5 * Math.random()), null),\n        j = null,\n        k = 250,\n        l = d3.dispatch(\"tooltipShow\", \"tooltipHide\", \"stateChange\", \"changeState\", \"renderEnd\"),\n        m = a.utils.renderWatch(l);\n    return d.headerEnabled(!1).duration(0).valueFormatter(function (a) {\n      return a;\n    }), c.dispatch.on(\"elementMouseover.tooltip\", function (a) {\n      a.series = {\n        key: a.data.name,\n        value: a.data.size,\n        color: a.color\n      }, d.data(a).hidden(!1);\n    }), c.dispatch.on(\"elementMouseout.tooltip\", function () {\n      d.hidden(!0);\n    }), c.dispatch.on(\"elementMousemove.tooltip\", function () {\n      d.position({\n        top: d3.event.pageY,\n        left: d3.event.pageX\n      })();\n    }), b.dispatch = l, b.sunburst = c, b.tooltip = d, b.options = a.utils.optionsFunc.bind(b), b._options = Object.create({}, {\n      noData: {\n        get: function get() {\n          return j;\n        },\n        set: function set(a) {\n          j = a;\n        }\n      },\n      defaultState: {\n        get: function get() {\n          return i;\n        },\n        set: function set(a) {\n          i = a;\n        }\n      },\n      color: {\n        get: function get() {\n          return h;\n        },\n        set: function set(a) {\n          h = a, c.color(h);\n        }\n      },\n      duration: {\n        get: function get() {\n          return k;\n        },\n        set: function set(a) {\n          k = a, m.reset(k), c.duration(k);\n        }\n      },\n      margin: {\n        get: function get() {\n          return e;\n        },\n        set: function set(a) {\n          e.top = void 0 !== a.top ? a.top : e.top, e.right = void 0 !== a.right ? a.right : e.right, e.bottom = void 0 !== a.bottom ? a.bottom : e.bottom, e.left = void 0 !== a.left ? a.left : e.left;\n        }\n      }\n    }), a.utils.inheritOptions(b, c), a.utils.initOptions(b), b;\n  }, a.version = \"1.8.1\";\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi92ZW5kb3IvcGhwdW5pdC9waHAtY29kZS1jb3ZlcmFnZS9zcmMvUmVwb3J0L0h0bWwvUmVuZGVyZXIvVGVtcGxhdGUvanMvbnYuZDMubWluLmpzPzA1YTMiXSwibmFtZXMiOlsiYSIsImRldiIsInRvb2x0aXAiLCJ1dGlscyIsIm1vZGVscyIsImNoYXJ0cyIsImxvZ3MiLCJkb20iLCJkaXNwYXRjaCIsImQzIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJiaW5kIiwiVHlwZUVycm9yIiwiYiIsIkFycmF5Iiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwiYyIsImQiLCJlIiwiYXBwbHkiLCJjb25jYXQiLCJvbiIsInN0YXJ0VGltZSIsIkRhdGUiLCJlbmRUaW1lIiwidG90YWxUaW1lIiwibG9nIiwid2luZG93IiwiY29uc29sZSIsImxlbmd0aCIsImRlcHJlY2F0ZWQiLCJ3YXJuIiwicmVuZGVyIiwiYWN0aXZlIiwicmVuZGVyX3N0YXJ0IiwiZiIsInF1ZXVlIiwiZ2VuZXJhdGUiLCJjYWxsYmFjayIsInNwbGljZSIsInNldFRpbWVvdXQiLCJyZW5kZXJfZW5kIiwiYWRkR3JhcGgiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyIsIm52Iiwid3JpdGUiLCJmYXN0ZG9tIiwicmVhZCIsImludGVyYWN0aXZlR3VpZGVsaW5lIiwibCIsImVhY2giLCJtIiwibW91c2UiLCJpIiwiaiIsImsiLCJldmVudCIsIm9mZnNldFgiLCJvZmZzZXRZIiwidGFyZ2V0IiwidGFnTmFtZSIsImNsYXNzTmFtZSIsImJhc2VWYWwiLCJtYXRjaCIsImxlZnQiLCJ0b3AiLCJvIiwicCIsInJlbGF0ZWRUYXJnZXQiLCJvd25lclNWR0VsZW1lbnQiLCJudlBvaW50ZXJFdmVudHNDbGFzcyIsImgiLCJlbGVtZW50TW91c2VvdXQiLCJtb3VzZVgiLCJtb3VzZVkiLCJyZW5kZXJHdWlkZUxpbmUiLCJoaWRkZW4iLCJnIiwiaW52ZXJ0IiwiZWxlbWVudE1vdXNlbW92ZSIsInBvaW50WFZhbHVlIiwidHlwZSIsImVsZW1lbnREYmxjbGljayIsImVsZW1lbnRDbGljayIsIm4iLCJzZWxlY3QiLCJxIiwic2VsZWN0QWxsIiwiZGF0YSIsInIiLCJlbnRlciIsImFwcGVuZCIsImF0dHIiLCJndWlkZUxpbmUiLCJOYU50b1plcm8iLCJTdHJpbmciLCJleGl0IiwicmVtb3ZlIiwiZHVyYXRpb24iLCJoaWRlRGVsYXkiLCJfaXNJbnRlcmFjdGl2ZUxheWVyIiwic2NhbGUiLCJsaW5lYXIiLCJtYXJnaW4iLCJ3aWR0aCIsImhlaWdodCIsInhTY2FsZSIsInNob3dHdWlkZUxpbmUiLCJzdmdDb250YWluZXIiLCJpbnRlcmFjdGl2ZUJpc2VjdCIsIngiLCJiaXNlY3RvciIsIm1heCIsIm1pbiIsIk1hdGgiLCJhYnMiLCJuZWFyZXN0VmFsdWVJbmRleCIsImZvckVhY2giLCJub2RlIiwic3BsaXQiLCJwYXJzZUludCIsInN0eWxlIiwiZG9jdW1lbnQiLCJib2R5IiwidiIsImNsYXNzZWQiLCJ3IiwiQiIsIkEiLCJpbm5lckhUTUwiLCJ1IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXRMZWZ0Iiwic2Nyb2xsTGVmdCIsIm9mZnNldFRvcCIsInNjcm9sbFRvcCIsImZsb29yIiwiQyIsInMiLCJ0IiwicmFuZG9tIiwieSIsInoiLCJjcmVhdGVFbGVtZW50IiwiaHRtbCIsInZhbHVlIiwic2VyaWVzIiwiaGlnaGxpZ2h0IiwiY29sb3IiLCJrZXkiLCJkb21haW4iLCJyYW5nZSIsIm91dGVySFRNTCIsImZvb3RlciIsIk9iamVjdCIsIm9mZnNldEhlaWdodCIsIm9mZnNldFdpZHRoIiwid2luZG93U2l6ZSIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJpbm5lcldpZHRoIiwic2Nyb2xsV2lkdGgiLCJpbm5lckhlaWdodCIsInNjcm9sbEhlaWdodCIsImlzTmFOIiwib2Zmc2V0UGFyZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiaW50ZXJwb2xhdGVTdHJpbmciLCJ0cmFuc2l0aW9uIiwiZGVsYXkiLCJpbnRlcnJ1cHQiLCJzdHlsZVR3ZWVuIiwib3B0aW9ucyIsIm9wdGlvbnNGdW5jIiwiX29wdGlvbnMiLCJjcmVhdGUiLCJnZXQiLCJzZXQiLCJncmF2aXR5IiwiZGlzdGFuY2UiLCJzbmFwRGlzdGFuY2UiLCJjbGFzc2VzIiwiY2hhcnRDb250YWluZXIiLCJmaXhlZFRvcCIsImVuYWJsZWQiLCJjb250ZW50R2VuZXJhdG9yIiwidmFsdWVGb3JtYXR0ZXIiLCJoZWFkZXJGb3JtYXR0ZXIiLCJrZXlGb3JtYXR0ZXIiLCJoZWFkZXJFbmFibGVkIiwicG9zaXRpb24iLCJvZmZzZXQiLCJwb2ludCIsInRvb2x0aXBFbGVtIiwiaWQiLCJpbml0T3B0aW9ucyIsImNvbXBhdE1vZGUiLCJ3aW5kb3dSZXNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xlYXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0Q29sb3IiLCJkZWZhdWx0Q29sb3IiLCJpc0FycmF5Iiwib3JkaW5hbCIsImNhdGVnb3J5MjAiLCJjdXN0b21UaGVtZSIsInBqYXgiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImhyZWYiLCJ0ZXh0Q29udGVudCIsInByZXZlbnREZWZhdWx0Iiwic3RhdGUiLCJjYWxjQXBwcm94VGV4dFdpZHRoIiwidGV4dCIsInJlcGxhY2UiLCJzZWxlY3Rpb24iLCJ3YXRjaFRyYW5zaXRpb24iLCJyZW5kZXJXYXRjaCIsIl9fcmVuZGVyZWQiLCJyZW5kZXJFbmQiLCJpbmRleE9mIiwicmVzZXQiLCJwb3AiLCJldmVyeSIsImRlZXBFeHRlbmQiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJpbml0IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZSIsImNoYW5nZSIsIm1hcCIsImNhbGNUaWNrc1giLCJ2YWx1ZXMiLCJjYWxjVGlja3NZIiwiaW5pdE9wdGlvbiIsIl9jYWxscyIsIl9vdmVycmlkZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaW5oZXJpdE9wdGlvbnNEMyIsIl9kM29wdGlvbnMiLCJ1bnNoaWZ0IiwicmViaW5kIiwiYXJyYXlVbmlxdWUiLCJzb3J0IiwiZmlsdGVyIiwic3ltYm9sTWFwIiwic3ltYm9sIiwic3ZnIiwic3ltYm9sVHlwZXMiLCJzaXplIiwiZnVuY3RvciIsImluaGVyaXRPcHRpb25zIiwiX2luaGVyaXRlZCIsImluaXRTVkciLCJzYW5pdGl6ZUhlaWdodCIsInNhbml0aXplV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJib3R0b20iLCJhdmFpbGFibGVXaWR0aCIsInJpZ2h0Iiwibm9EYXRhIiwiYXhpcyIsInRpY2tzIiwib3JpZW50IiwidGlja0Zvcm1hdCIsImpvaW4iLCJ0aWNrUGFkZGluZyIsIkQiLCJzaW4iLCJQSSIsInJhbmdlQmFuZCIsIkUiLCJwYXJzZUZsb2F0Iiwicm91bmQiLCJjb3B5IiwiYXhpc0xhYmVsRGlzdGFuY2UiLCJzdGFnZ2VyTGFiZWxzIiwicm90YXRlTGFiZWxzIiwicm90YXRlWUxhYmVsIiwic2hvd01heE1pbiIsImF4aXNMYWJlbCIsInJhbmdlQmFuZHMiLCJib3hQbG90IiwiUTEiLCJoYXNPd25Qcm9wZXJ0eSIsIndoaXNrZXJfbG93Iiwib3V0bGllcnMiLCJRMyIsIndoaXNrZXJfaGlnaCIsImhvdmVyIiwiZWxlbWVudE1vdXNlb3ZlciIsIkYiLCJsYWJlbCIsIlEyIiwiaW5kZXgiLCJtYXhCb3hXaWR0aCIsInlTY2FsZSIsInhEb21haW4iLCJ5RG9tYWluIiwieFJhbmdlIiwieVJhbmdlIiwiYm94UGxvdENoYXJ0IiwiYmVmb3JlVXBkYXRlIiwiY29udGFpbmVyIiwiY2xhbXAiLCJkYXR1bSIsImRpc2FibGVkIiwidGlja1NpemUiLCJmb3JtYXQiLCJwYWdlWSIsInBhZ2VYIiwiYm94cGxvdCIsInhBeGlzIiwieUF4aXMiLCJzaG93WEF4aXMiLCJzaG93WUF4aXMiLCJ0b29sdGlwcyIsInRvb2x0aXBDb250ZW50IiwicmlnaHRBbGlnbllBeGlzIiwiYnVsbGV0IiwiZGVzY2VuZGluZyIsImV4dGVudCIsIm1lcmdlIiwiX19jaGFydF9fIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJwb3MiLCJyYW5nZXMiLCJtYXJrZXJzIiwibWVhc3VyZXMiLCJyYW5nZUxhYmVscyIsIm1hcmtlckxhYmVscyIsIm1lYXN1cmVMYWJlbHMiLCJmb3JjZVgiLCJidWxsZXRDaGFydCIsInRpdGxlIiwic3VidGl0bGUiLCJ0aW1lciIsImZsdXNoIiwiY2FuZGxlc3RpY2tCYXIiLCJjaGFydENsaWNrIiwib3BlbiIsImNsb3NlIiwiaGlnaCIsImxvdyIsImhpZ2hsaWdodFBvaW50IiwiY2xlYXJIaWdobGlnaHRzIiwiZm9yY2VZIiwicGFkRGF0YSIsImNsaXBFZGdlIiwiaW50ZXJhY3RpdmUiLCJjdW11bGF0aXZlTGluZUNoYXJ0Iiwic3RhdGVDaGFuZ2UiLCJiYiIsIkwiLCJNIiwiTiIsIk8iLCJQIiwiUSIsImJlaGF2aW9yIiwiZHJhZyIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiVyIsIlgiLCJyaWdodEFsaWduIiwiWSIsInRlbXBEaXNhYmxlZCIsImRpc3BsYXkiLCJaIiwic2VyaWVzSW5kZXgiLCIkIiwiXyIsImFiIiwiX3RpY2tzIiwicG9pbnRJbmRleCIsInJlc2NhbGVZIiwibGluZSIsImxlZ2VuZCIsImF2ZXJhZ2UiLCJ1cGRhdGVTdGF0ZSIsImxpbmVzIiwiY29udHJvbHMiLCJpbnRlcmFjdGl2ZUxheWVyIiwic2hvd0NvbnRyb2xzIiwic2hvd0xlZ2VuZCIsImRlZmF1bHRTdGF0ZSIsIm5vRXJyb3JDaGVjayIsInVzZUludGVyYWN0aXZlR3VpZGVsaW5lIiwidXNlVm9yb25vaSIsImRpc2NyZXRlQmFyIiwieTAiLCJzdG9wUHJvcGFnYXRpb24iLCJlbGVtZW50RGJsQ2xpY2siLCJzaG93VmFsdWVzIiwidmFsdWVGb3JtYXQiLCJyZWN0Q2xhc3MiLCJkaXNjcmV0ZUJhckNoYXJ0IiwiZGlzY3JldGViYXIiLCJkaXN0cmlidXRpb24iLCJnZXREYXRhIiwiZnVyaW91c0xlZ2VuZCIsImRpc2VuZ2FnZWQiLCJwcm9wZXJ0eSIsImxlZ2VuZE1vdXNlb3ZlciIsImxlZ2VuZE1vdXNlb3V0IiwibGVnZW5kQ2xpY2siLCJ1c2VyRGlzYWJsZWQiLCJsZWdlbmREYmxjbGljayIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsIkVycm9yIiwicmVkdWNlIiwiY2VpbCIsImFsaWduIiwicGFkZGluZyIsInJhZGlvQnV0dG9uTW9kZSIsImV4cGFuZGVkIiwidmVycyIsImhpc3RvcmljYWxCYXIiLCJoaXN0b3JpY2FsQmFyQ2hhcnQiLCJ0b29sdGlwSGlkZSIsImJhcnMiLCJvaGxjQmFyQ2hhcnQiLCJvaGxjQmFyIiwiY2FuZGxlc3RpY2tCYXJDaGFydCIsImluc2VydCIsInN0cm9rZVdpZHRoIiwiZmlsbE9wYWNpdHkiLCJhcmVhIiwiaW50ZXJwb2xhdGUiLCJkZWZpbmVkIiwieTEiLCJzY2F0dGVyIiwicG9pbnRTaXplIiwicG9pbnREb21haW4iLCJpc0FyZWEiLCJsaW5lQ2hhcnQiLCJsaW5lUGx1c0JhckNoYXJ0IiwiZW1wdHkiLCJrYiIsImJydXNoIiwiYmFyIiwiZGIiLCJjYiIsImViIiwiZmIiLCJnYiIsImhiIiwib3JpZ2luYWxLZXkiLCJpYiIsImpiIiwibGIiLCJtYiIsImxpbmVzMiIsImJhcnMyIiwieDJBeGlzIiwieTFBeGlzIiwieTJBeGlzIiwieTNBeGlzIiwieTRBeGlzIiwiYnJ1c2hFeHRlbnQiLCJmb2N1c0VuYWJsZSIsImZvY3VzSGVpZ2h0IiwiZm9jdXNTaG93QXhpc1giLCJmb2N1c1Nob3dBeGlzWSIsImxlZ2VuZExlZnRBeGlzSGludCIsImxlZ2VuZFJpZ2h0QXhpc0hpbnQiLCJsaW5lV2l0aEZvY3VzQ2hhcnQiLCJ4VGlja0Zvcm1hdCIsInlUaWNrRm9ybWF0IiwibXVsdGlCYXIiLCJsYXlvdXQiLCJzdGFjayIsIm5vblN0YWNrYWJsZSIsIm5vblN0YWNrYWJsZVNlcmllcyIsImlkeCIsInJnYiIsImRhcmtlciIsInRvU3RyaW5nIiwic3RhY2tlZCIsInN0YWNrT2Zmc2V0IiwiaGlkZWFibGUiLCJncm91cFNwYWNpbmciLCJiYXJDb2xvciIsIm11bHRpQmFyQ2hhcnQiLCJncm91cGVkIiwibXVsdGliYXIiLCJjb250cm9sTGFiZWxzIiwicmVkdWNlWFRpY2tzIiwibXVsdGlCYXJIb3Jpem9udGFsIiwieUVyciIsInZhbHVlUGFkZGluZyIsIm11bHRpQmFySG9yaXpvbnRhbENoYXJ0IiwibXVsdGlDaGFydCIsInN0YWNrZWRBcmVhIiwibGluZXMxIiwiYmFyczEiLCJzdGFjazEiLCJzdGFjazIiLCJ5QXhpczEiLCJ5QXhpczIiLCJ5RG9tYWluMSIsInlEb21haW4yIiwicGFyYWxsZWxDb29yZGluYXRlcyIsImRpbWVuc2lvbiIsImZpbHRlcnMiLCJfX29yaWdpbl9fIiwicmFuZ2VQb2ludHMiLCJ0ZW5zaW9uIiwibmFtZSIsImRpbSIsImRpbWVuc2lvbk5hbWVzIiwiZGltZW5zaW9uRm9ybWF0cyIsImxpbmVUZW5zaW9uIiwiZGltZW5zaW9ucyIsInBpZSIsImVuZEFuZ2xlIiwic3RhcnRBbmdsZSIsImlubmVyUmFkaXVzIiwiX2N1cnJlbnQiLCJvdXRlciIsImlubmVyIiwiYXJjIiwib3V0ZXJSYWRpdXMiLCJjb3JuZXJSYWRpdXMiLCJwYWRBbmdsZSIsImF0dHJUd2VlbiIsImNlbnRyb2lkIiwicGVyY2VudCIsImFyY3NSYWRpdXMiLCJzaG93TGFiZWxzIiwidGl0bGVPZmZzZXQiLCJsYWJlbFRocmVzaG9sZCIsImRvbnV0UmF0aW8iLCJsYWJlbHNPdXRzaWRlIiwibGFiZWxTdW5iZWFtTGF5b3V0IiwiZG9udXQiLCJncm93T25Ib3ZlciIsInBpZUxhYmVsc091dHNpZGUiLCJkb251dExhYmVsc091dHNpZGUiLCJsYWJlbEZvcm1hdCIsImxhYmVsVHlwZSIsInBpZUNoYXJ0IiwibGVnZW5kUG9zaXRpb24iLCJnZW9tIiwicG9seWdvbiIsInZvcm9ub2kiLCJjbGlwIiwiY2xlYXJUaW1lb3V0Iiwic2hhcGUiLCJub3RBY3RpdmUiLCJwb2ludFNjYWxlIiwicG9pbnRSYW5nZSIsImZvcmNlUG9pbnQiLCJwb2ludEFjdGl2ZSIsInBhZERhdGFPdXRlciIsImNsaXBWb3Jvbm9pIiwiY2xpcFJhZGl1cyIsInNob3dWb3Jvbm9pIiwicG9pbnRTaGFwZSIsInNjYXR0ZXJDaGFydCIsImludGVyY2VwdCIsInNsb3BlIiwiZGlzdFgiLCJkaXN0WSIsInNob3dEaXN0WCIsInNob3dEaXN0WSIsInRvb2x0aXBYQ29udGVudCIsInRvb2x0aXBZQ29udGVudCIsInNwYXJrbGluZSIsImxhc3RJbmRleE9mIiwiYW5pbWF0ZSIsInNwYXJrbGluZVBsdXMiLCJzaG93TGFzdFZhbHVlIiwiYWxpZ25WYWx1ZSIsInJpZ2h0QWxpZ25WYWx1ZSIsIm9yZGVyIiwib3V0IiwiYXJlYU1vdXNlb3ZlciIsImFyZWFNb3VzZW91dCIsImFyZWFDbGljayIsImQzX3N0YWNrZWRPZmZzZXRfc3RhY2tQZXJjZW50Iiwic3RhY2tlZEFyZWFDaGFydCIsIm1ldGFLZXkiLCJzdHJlYW0iLCJzdGFja19wZXJjZW50Iiwic3RhY2tlZFZhbHVlIiwicmV2ZXJzZSIsImNvbnRyb2xPcHRpb25zIiwic3VuYnVyc3QiLCJ4MCIsImR4MCIsImR4IiwiY291bnQiLCJub2RlcyIsImNoaWxkcmVuIiwicGFyZW50Iiwic3FydCIsInBhcnRpdGlvbiIsImR5IiwibW9kZSIsInN1bmJ1cnN0Q2hhcnQiLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsQ0FBQyxZQUFVO0FBQUMsTUFBSUEsQ0FBQyxHQUFDLEVBQU47QUFBU0EsR0FBQyxDQUFDQyxHQUFGLEdBQU0sQ0FBQyxDQUFQLEVBQVNELENBQUMsQ0FBQ0UsT0FBRixHQUFVRixDQUFDLENBQUNFLE9BQUYsSUFBVyxFQUE5QixFQUFpQ0YsQ0FBQyxDQUFDRyxLQUFGLEdBQVFILENBQUMsQ0FBQ0csS0FBRixJQUFTLEVBQWxELEVBQXFESCxDQUFDLENBQUNJLE1BQUYsR0FBU0osQ0FBQyxDQUFDSSxNQUFGLElBQVUsRUFBeEUsRUFBMkVKLENBQUMsQ0FB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QUwsS0FBU3JFLENBQUMsQ0FBQ3FFLElBQVgsR0FBZ0JyRSxDQUFDLENBQUNxRSxJQUFsQixHQUF1QmhELENBQUMsQ0FBQ2dELElBQXZKO0FBQTRKO0FBQXRNO0FBQS9RLEtBQWpCLENBQW5kLEVBQTY3QnJFLENBQUMsQ0FBQ0csS0FBRixDQUFRb1EsY0FBUixDQUF1QnpQLENBQXZCLEVBQXlCSyxDQUF6QixDQUE3N0IsRUFBeTlCbkIsQ0FBQyxDQUFDRyxLQUFGLENBQVFzTSxXQUFSLENBQW9CM0wsQ0FBcEIsQ0FBejlCLEVBQWcvQkEsQ0FBdi9CO0FBQXkvQixHQU4vb3hCLEVBTWdweEJkLENBQUMsQ0FBQzZtQixPQUFGLEdBQVUsT0FOMXB4QjtBQU1rcXhCLENBTnRyeEIsRUFBRCIsImZpbGUiOiIuL3ZlbmRvci9waHB1bml0L3BocC1jb2RlLWNvdmVyYWdlL3NyYy9SZXBvcnQvSHRtbC9SZW5kZXJlci9UZW1wbGF0ZS9qcy9udi5kMy5taW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBudmQzIHZlcnNpb24gMS44LjEgKGh0dHBzOi8vZ2l0aHViLmNvbS9ub3Z1cy9udmQzKSAyMDE1LTA2LTE1ICovXG4hZnVuY3Rpb24oKXt2YXIgYT17fTthLmRldj0hMSxhLnRvb2x0aXA9YS50b29sdGlwfHx7fSxhLnV0aWxzPWEudXRpbHN8fHt9LGEubW9kZWxzPWEubW9kZWxzfHx7fSxhLmNoYXJ0cz17fSxhLmxvZ3M9e30sYS5kb209e30sYS5kaXNwYXRjaD1kMy5kaXNwYXRjaChcInJlbmRlcl9zdGFydFwiLFwicmVuZGVyX2VuZFwiKSxGdW5jdGlvbi5wcm90b3R5cGUuYmluZHx8KEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kPWZ1bmN0aW9uKGEpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlXCIpO3ZhciBiPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxjPXRoaXMsZD1mdW5jdGlvbigpe30sZT1mdW5jdGlvbigpe3JldHVybiBjLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBkJiZhP3RoaXM6YSxiLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSl9O3JldHVybiBkLnByb3RvdHlwZT10aGlzLnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgZCxlfSksYS5kZXYmJihhLmRpc3BhdGNoLm9uKFwicmVuZGVyX3N0YXJ0XCIsZnVuY3Rpb24oKXthLmxvZ3Muc3RhcnRUaW1lPStuZXcgRGF0ZX0pLGEuZGlzcGF0Y2gub24oXCJyZW5kZXJfZW5kXCIsZnVuY3Rpb24oKXthLmxvZ3MuZW5kVGltZT0rbmV3IERhdGUsYS5sb2dzLnRvdGFsVGltZT1hLmxvZ3MuZW5kVGltZS1hLmxvZ3Muc3RhcnRUaW1lLGEubG9nKFwidG90YWxcIixhLmxvZ3MudG90YWxUaW1lKX0pKSxhLmxvZz1mdW5jdGlvbigpe2lmKGEuZGV2JiZ3aW5kb3cuY29uc29sZSYmY29uc29sZS5sb2cmJmNvbnNvbGUubG9nLmFwcGx5KWNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsYXJndW1lbnRzKTtlbHNlIGlmKGEuZGV2JiZ3aW5kb3cuY29uc29sZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgY29uc29sZS5sb2cmJkZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKXt2YXIgYj1GdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKGNvbnNvbGUubG9nLGNvbnNvbGUpO2IuYXBwbHkoY29uc29sZSxhcmd1bWVudHMpfXJldHVybiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXX0sYS5kZXByZWNhdGVkPWZ1bmN0aW9uKGEsYil7Y29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oXCJudmQzIHdhcm5pbmc6IGBcIithK1wiYCBoYXMgYmVlbiBkZXByZWNhdGVkLiBcIixifHxcIlwiKX0sYS5yZW5kZXI9ZnVuY3Rpb24oYil7Yj1ifHwxLGEucmVuZGVyLmFjdGl2ZT0hMCxhLmRpc3BhdGNoLnJlbmRlcl9zdGFydCgpO3ZhciBjPWZ1bmN0aW9uKCl7Zm9yKHZhciBkLGUsZj0wO2I+ZiYmKGU9YS5yZW5kZXIucXVldWVbZl0pO2YrKylkPWUuZ2VuZXJhdGUoKSx0eXBlb2YgZS5jYWxsYmFjaz09dHlwZW9mIEZ1bmN0aW9uJiZlLmNhbGxiYWNrKGQpO2EucmVuZGVyLnF1ZXVlLnNwbGljZSgwLGYpLGEucmVuZGVyLnF1ZXVlLmxlbmd0aD9zZXRUaW1lb3V0KGMpOihhLmRpc3BhdGNoLnJlbmRlcl9lbmQoKSxhLnJlbmRlci5hY3RpdmU9ITEpfTtzZXRUaW1lb3V0KGMpfSxhLnJlbmRlci5hY3RpdmU9ITEsYS5yZW5kZXIucXVldWU9W10sYS5hZGRHcmFwaD1mdW5jdGlvbihiKXt0eXBlb2YgYXJndW1lbnRzWzBdPT10eXBlb2YgRnVuY3Rpb24mJihiPXtnZW5lcmF0ZTphcmd1bWVudHNbMF0sY2FsbGJhY2s6YXJndW1lbnRzWzFdfSksYS5yZW5kZXIucXVldWUucHVzaChiKSxhLnJlbmRlci5hY3RpdmV8fGEucmVuZGVyKCl9LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9YSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvdy5udj1hKSxhLmRvbS53cml0ZT1mdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwIT09d2luZG93LmZhc3Rkb20/ZmFzdGRvbS53cml0ZShhKTphKCl9LGEuZG9tLnJlYWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMCE9PXdpbmRvdy5mYXN0ZG9tP2Zhc3Rkb20ucmVhZChhKTphKCl9LGEuaW50ZXJhY3RpdmVHdWlkZWxpbmU9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGwpe2wuZWFjaChmdW5jdGlvbihsKXtmdW5jdGlvbiBtKCl7dmFyIGE9ZDMubW91c2UodGhpcyksZD1hWzBdLGU9YVsxXSxpPSEwLGo9ITE7aWYoayYmKGQ9ZDMuZXZlbnQub2Zmc2V0WCxlPWQzLmV2ZW50Lm9mZnNldFksXCJzdmdcIiE9PWQzLmV2ZW50LnRhcmdldC50YWdOYW1lJiYoaT0hMSksZDMuZXZlbnQudGFyZ2V0LmNsYXNzTmFtZS5iYXNlVmFsLm1hdGNoKFwibnYtbGVnZW5kXCIpJiYoaj0hMCkpLGkmJihkLT1mLmxlZnQsZS09Zi50b3ApLDA+ZHx8MD5lfHxkPm98fGU+cHx8ZDMuZXZlbnQucmVsYXRlZFRhcmdldCYmdm9pZCAwPT09ZDMuZXZlbnQucmVsYXRlZFRhcmdldC5vd25lclNWR0VsZW1lbnR8fGope2lmKGsmJmQzLmV2ZW50LnJlbGF0ZWRUYXJnZXQmJnZvaWQgMD09PWQzLmV2ZW50LnJlbGF0ZWRUYXJnZXQub3duZXJTVkdFbGVtZW50JiYodm9pZCAwPT09ZDMuZXZlbnQucmVsYXRlZFRhcmdldC5jbGFzc05hbWV8fGQzLmV2ZW50LnJlbGF0ZWRUYXJnZXQuY2xhc3NOYW1lLm1hdGNoKGMubnZQb2ludGVyRXZlbnRzQ2xhc3MpKSlyZXR1cm47cmV0dXJuIGguZWxlbWVudE1vdXNlb3V0KHttb3VzZVg6ZCxtb3VzZVk6ZX0pLGIucmVuZGVyR3VpZGVMaW5lKG51bGwpLHZvaWQgYy5oaWRkZW4oITApfWMuaGlkZGVuKCExKTt2YXIgbD1nLmludmVydChkKTtoLmVsZW1lbnRNb3VzZW1vdmUoe21vdXNlWDpkLG1vdXNlWTplLHBvaW50WFZhbHVlOmx9KSxcImRibGNsaWNrXCI9PT1kMy5ldmVudC50eXBlJiZoLmVsZW1lbnREYmxjbGljayh7bW91c2VYOmQsbW91c2VZOmUscG9pbnRYVmFsdWU6bH0pLFwiY2xpY2tcIj09PWQzLmV2ZW50LnR5cGUmJmguZWxlbWVudENsaWNrKHttb3VzZVg6ZCxtb3VzZVk6ZSxwb2ludFhWYWx1ZTpsfSl9dmFyIG49ZDMuc2VsZWN0KHRoaXMpLG89ZHx8OTYwLHA9ZXx8NDAwLHE9bi5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtaW50ZXJhY3RpdmVMaW5lTGF5ZXJcIikuZGF0YShbbF0pLHI9cS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCIgbnYtd3JhcCBudi1pbnRlcmFjdGl2ZUxpbmVMYXllclwiKTtyLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1pbnRlcmFjdGl2ZUd1aWRlTGluZVwiKSxqJiYoai5vbihcInRvdWNobW92ZVwiLG0pLm9uKFwibW91c2Vtb3ZlXCIsbSwhMCkub24oXCJtb3VzZW91dFwiLG0sITApLm9uKFwiZGJsY2xpY2tcIixtKS5vbihcImNsaWNrXCIsbSksYi5ndWlkZUxpbmU9bnVsbCxiLnJlbmRlckd1aWRlTGluZT1mdW5jdGlvbihjKXtpJiYoYi5ndWlkZUxpbmUmJmIuZ3VpZGVMaW5lLmF0dHIoXCJ4MVwiKT09PWN8fGEuZG9tLndyaXRlKGZ1bmN0aW9uKCl7dmFyIGI9cS5zZWxlY3QoXCIubnYtaW50ZXJhY3RpdmVHdWlkZUxpbmVcIikuc2VsZWN0QWxsKFwibGluZVwiKS5kYXRhKG51bGwhPWM/W2EudXRpbHMuTmFOdG9aZXJvKGMpXTpbXSxTdHJpbmcpO2IuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtZ3VpZGVsaW5lXCIpLmF0dHIoXCJ4MVwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkuYXR0cihcIngyXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KS5hdHRyKFwieTFcIixwKS5hdHRyKFwieTJcIiwwKSxiLmV4aXQoKS5yZW1vdmUoKX0pKX0pfSl9dmFyIGM9YS5tb2RlbHMudG9vbHRpcCgpO2MuZHVyYXRpb24oMCkuaGlkZURlbGF5KDApLl9pc0ludGVyYWN0aXZlTGF5ZXIoITApLmhpZGRlbighMSk7dmFyIGQ9bnVsbCxlPW51bGwsZj17bGVmdDowLHRvcDowfSxnPWQzLnNjYWxlLmxpbmVhcigpLGg9ZDMuZGlzcGF0Y2goXCJlbGVtZW50TW91c2Vtb3ZlXCIsXCJlbGVtZW50TW91c2VvdXRcIixcImVsZW1lbnRDbGlja1wiLFwiZWxlbWVudERibGNsaWNrXCIpLGk9ITAsaj1udWxsLGs9XCJBY3RpdmVYT2JqZWN0XCJpbiB3aW5kb3c7cmV0dXJuIGIuZGlzcGF0Y2g9aCxiLnRvb2x0aXA9YyxiLm1hcmdpbj1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZi50b3A9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEudG9wP2EudG9wOmYudG9wLGYubGVmdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS5sZWZ0P2EubGVmdDpmLmxlZnQsYik6Zn0sYi53aWR0aD1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZD1hLGIpOmR9LGIuaGVpZ2h0PWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhlPWEsYik6ZX0sYi54U2NhbGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGc9YSxiKTpnfSxiLnNob3dHdWlkZUxpbmU9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGk9YSxiKTppfSxiLnN2Z0NvbnRhaW5lcj1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaj1hLGIpOmp9LGJ9LGEuaW50ZXJhY3RpdmVCaXNlY3Q9ZnVuY3Rpb24oYSxiLGMpe1widXNlIHN0cmljdFwiO2lmKCEoYSBpbnN0YW5jZW9mIEFycmF5KSlyZXR1cm4gbnVsbDt2YXIgZDtkPVwiZnVuY3Rpb25cIiE9dHlwZW9mIGM/ZnVuY3Rpb24oYSl7cmV0dXJuIGEueH06Yzt2YXIgZT1mdW5jdGlvbihhLGIpe3JldHVybiBkKGEpLWJ9LGY9ZDMuYmlzZWN0b3IoZSkubGVmdCxnPWQzLm1heChbMCxmKGEsYiktMV0pLGg9ZChhW2ddKTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgaCYmKGg9ZyksaD09PWIpcmV0dXJuIGc7dmFyIGk9ZDMubWluKFtnKzEsYS5sZW5ndGgtMV0pLGo9ZChhW2ldKTtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgaiYmKGo9aSksTWF0aC5hYnMoai1iKT49TWF0aC5hYnMoaC1iKT9nOml9LGEubmVhcmVzdFZhbHVlSW5kZXg9ZnVuY3Rpb24oYSxiLGMpe1widXNlIHN0cmljdFwiO3ZhciBkPTEvMCxlPW51bGw7cmV0dXJuIGEuZm9yRWFjaChmdW5jdGlvbihhLGYpe3ZhciBnPU1hdGguYWJzKGItYSk7bnVsbCE9YSYmZD49ZyYmYz5nJiYoZD1nLGU9Zil9KSxlfSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2EubW9kZWxzLnRvb2x0aXA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKCl7aWYoayl7dmFyIGE9ZDMuc2VsZWN0KGspO1wic3ZnXCIhPT1hLm5vZGUoKS50YWdOYW1lJiYoYT1hLnNlbGVjdChcInN2Z1wiKSk7dmFyIGI9YS5ub2RlKCk/YS5hdHRyKFwidmlld0JveFwiKTpudWxsO2lmKGIpe2I9Yi5zcGxpdChcIiBcIik7dmFyIGM9cGFyc2VJbnQoYS5zdHlsZShcIndpZHRoXCIpLDEwKS9iWzJdO3AubGVmdD1wLmxlZnQqYyxwLnRvcD1wLnRvcCpjfX19ZnVuY3Rpb24gYygpe2lmKCFuKXt2YXIgYTthPWs/azpkb2N1bWVudC5ib2R5LG49ZDMuc2VsZWN0KGEpLmFwcGVuZChcImRpdlwiKS5hdHRyKFwiY2xhc3NcIixcIm52dG9vbHRpcCBcIisoaj9qOlwieHktdG9vbHRpcFwiKSkuYXR0cihcImlkXCIsdiksbi5zdHlsZShcInRvcFwiLDApLnN0eWxlKFwibGVmdFwiLDApLG4uc3R5bGUoXCJvcGFjaXR5XCIsMCksbi5zZWxlY3RBbGwoXCJkaXYsIHRhYmxlLCB0ZCwgdHJcIikuY2xhc3NlZCh3LCEwKSxuLmNsYXNzZWQodywhMCksbz1uLm5vZGUoKX19ZnVuY3Rpb24gZCgpe2lmKHImJkIoZSkpe2IoKTt2YXIgZj1wLmxlZnQsZz1udWxsIT09aT9pOnAudG9wO3JldHVybiBhLmRvbS53cml0ZShmdW5jdGlvbigpe2MoKTt2YXIgYj1BKGUpO2ImJihvLmlubmVySFRNTD1iKSxrJiZ1P2EuZG9tLnJlYWQoZnVuY3Rpb24oKXt2YXIgYT1rLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3ZnXCIpWzBdLGI9e2xlZnQ6MCx0b3A6MH07aWYoYSl7dmFyIGM9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxkPWsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksZT1jLnRvcDtpZigwPmUpe3ZhciBpPWsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZT1NYXRoLmFicyhlKT5pLmhlaWdodD8wOmV9Yi50b3A9TWF0aC5hYnMoZS1kLnRvcCksYi5sZWZ0PU1hdGguYWJzKGMubGVmdC1kLmxlZnQpfWYrPWsub2Zmc2V0TGVmdCtiLmxlZnQtMiprLnNjcm9sbExlZnQsZys9ay5vZmZzZXRUb3ArYi50b3AtMiprLnNjcm9sbFRvcCxoJiZoPjAmJihnPU1hdGguZmxvb3IoZy9oKSpoKSxDKFtmLGddKX0pOkMoW2YsZ10pfSksZH19dmFyIGU9bnVsbCxmPVwid1wiLGc9MjUsaD0wLGk9bnVsbCxqPW51bGwsaz1udWxsLGw9ITAsbT00MDAsbj1udWxsLG89bnVsbCxwPXtsZWZ0Om51bGwsdG9wOm51bGx9LHE9e2xlZnQ6MCx0b3A6MH0scj0hMCxzPTEwMCx0PSEwLHU9ITEsdj1cIm52dG9vbHRpcC1cIitNYXRoLmZsb29yKDFlNSpNYXRoLnJhbmRvbSgpKSx3PVwibnYtcG9pbnRlci1ldmVudHMtbm9uZVwiLHg9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHk9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHo9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LEE9ZnVuY3Rpb24oYSl7aWYobnVsbD09PWEpcmV0dXJuXCJcIjt2YXIgYj1kMy5zZWxlY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpKTtpZih0KXt2YXIgYz1iLnNlbGVjdEFsbChcInRoZWFkXCIpLmRhdGEoW2FdKS5lbnRlcigpLmFwcGVuZChcInRoZWFkXCIpO2MuYXBwZW5kKFwidHJcIikuYXBwZW5kKFwidGRcIikuYXR0cihcImNvbHNwYW5cIiwzKS5hcHBlbmQoXCJzdHJvbmdcIikuY2xhc3NlZChcIngtdmFsdWVcIiwhMCkuaHRtbCh5KGEudmFsdWUpKX12YXIgZD1iLnNlbGVjdEFsbChcInRib2R5XCIpLmRhdGEoW2FdKS5lbnRlcigpLmFwcGVuZChcInRib2R5XCIpLGU9ZC5zZWxlY3RBbGwoXCJ0clwiKS5kYXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhLnNlcmllc30pLmVudGVyKCkuYXBwZW5kKFwidHJcIikuY2xhc3NlZChcImhpZ2hsaWdodFwiLGZ1bmN0aW9uKGEpe3JldHVybiBhLmhpZ2hsaWdodH0pO2UuYXBwZW5kKFwidGRcIikuY2xhc3NlZChcImxlZ2VuZC1jb2xvci1ndWlkZVwiLCEwKS5hcHBlbmQoXCJkaXZcIikuc3R5bGUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEuY29sb3J9KSxlLmFwcGVuZChcInRkXCIpLmNsYXNzZWQoXCJrZXlcIiwhMCkuaHRtbChmdW5jdGlvbihhLGIpe3JldHVybiB6KGEua2V5LGIpfSksZS5hcHBlbmQoXCJ0ZFwiKS5jbGFzc2VkKFwidmFsdWVcIiwhMCkuaHRtbChmdW5jdGlvbihhLGIpe3JldHVybiB4KGEudmFsdWUsYil9KSxlLnNlbGVjdEFsbChcInRkXCIpLmVhY2goZnVuY3Rpb24oYSl7aWYoYS5oaWdobGlnaHQpe3ZhciBiPWQzLnNjYWxlLmxpbmVhcigpLmRvbWFpbihbMCwxXSkucmFuZ2UoW1wiI2ZmZlwiLGEuY29sb3JdKSxjPS42O2QzLnNlbGVjdCh0aGlzKS5zdHlsZShcImJvcmRlci1ib3R0b20tY29sb3JcIixiKGMpKS5zdHlsZShcImJvcmRlci10b3AtY29sb3JcIixiKGMpKX19KTt2YXIgZj1iLm5vZGUoKS5vdXRlckhUTUw7cmV0dXJuIHZvaWQgMCE9PWEuZm9vdGVyJiYoZis9XCI8ZGl2IGNsYXNzPSdmb290ZXInPlwiK2EuZm9vdGVyK1wiPC9kaXY+XCIpLGZ9LEI9ZnVuY3Rpb24oYSl7aWYoYSYmYS5zZXJpZXMpe2lmKGEuc2VyaWVzIGluc3RhbmNlb2YgQXJyYXkpcmV0dXJuISFhLnNlcmllcy5sZW5ndGg7aWYoYS5zZXJpZXMgaW5zdGFuY2VvZiBPYmplY3QpcmV0dXJuIGEuc2VyaWVzPVthLnNlcmllc10sITB9cmV0dXJuITF9LEM9ZnVuY3Rpb24oYil7byYmYS5kb20ucmVhZChmdW5jdGlvbigpe3ZhciBjLGQsZT1wYXJzZUludChvLm9mZnNldEhlaWdodCwxMCksaD1wYXJzZUludChvLm9mZnNldFdpZHRoLDEwKSxpPWEudXRpbHMud2luZG93U2l6ZSgpLndpZHRoLGo9YS51dGlscy53aW5kb3dTaXplKCkuaGVpZ2h0LGs9d2luZG93LnBhZ2VZT2Zmc2V0LHA9d2luZG93LnBhZ2VYT2Zmc2V0O2o9d2luZG93LmlubmVyV2lkdGg+PWRvY3VtZW50LmJvZHkuc2Nyb2xsV2lkdGg/ajpqLTE2LGk9d2luZG93LmlubmVySGVpZ2h0Pj1kb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodD9pOmktMTY7dmFyIHIsdCx1PWZ1bmN0aW9uKGEpe3ZhciBiPWQ7ZG8gaXNOYU4oYS5vZmZzZXRUb3ApfHwoYis9YS5vZmZzZXRUb3ApLGE9YS5vZmZzZXRQYXJlbnQ7d2hpbGUoYSk7cmV0dXJuIGJ9LHY9ZnVuY3Rpb24oYSl7dmFyIGI9YztkbyBpc05hTihhLm9mZnNldExlZnQpfHwoYis9YS5vZmZzZXRMZWZ0KSxhPWEub2Zmc2V0UGFyZW50O3doaWxlKGEpO3JldHVybiBifTtzd2l0Y2goZil7Y2FzZVwiZVwiOmM9YlswXS1oLWcsZD1iWzFdLWUvMixyPXYobyksdD11KG8pLHA+ciYmKGM9YlswXStnPnA/YlswXStnOnAtcitjKSxrPnQmJihkPWstdCtkKSx0K2U+aytqJiYoZD1rK2otdCtkLWUpO2JyZWFrO2Nhc2VcIndcIjpjPWJbMF0rZyxkPWJbMV0tZS8yLHI9dihvKSx0PXUobykscitoPmkmJihjPWJbMF0taC1nKSxrPnQmJihkPWsrNSksdCtlPmsraiYmKGQ9aytqLXQrZC1lKTticmVhaztjYXNlXCJuXCI6Yz1iWzBdLWgvMi01LGQ9YlsxXStnLHI9dihvKSx0PXUobykscD5yJiYoYz1wKzUpLHIraD5pJiYoYz1jLWgvMis1KSx0K2U+aytqJiYoZD1rK2otdCtkLWUpO2JyZWFrO2Nhc2VcInNcIjpjPWJbMF0taC8yLGQ9YlsxXS1lLWcscj12KG8pLHQ9dShvKSxwPnImJihjPXArNSkscitoPmkmJihjPWMtaC8yKzUpLGs+dCYmKGQ9ayk7YnJlYWs7Y2FzZVwibm9uZVwiOmM9YlswXSxkPWJbMV0tZyxyPXYobyksdD11KG8pfWMtPXEubGVmdCxkLT1xLnRvcDt2YXIgdz1vLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGs9d2luZG93LnBhZ2VZT2Zmc2V0fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wLHA9d2luZG93LnBhZ2VYT2Zmc2V0fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCx4PVwidHJhbnNsYXRlKFwiKyh3LmxlZnQrcCkrXCJweCwgXCIrKHcudG9wK2spK1wicHgpXCIseT1cInRyYW5zbGF0ZShcIitjK1wicHgsIFwiK2QrXCJweClcIix6PWQzLmludGVycG9sYXRlU3RyaW5nKHgseSksQT1uLnN0eWxlKFwib3BhY2l0eVwiKTwuMTtsP24udHJhbnNpdGlvbigpLmRlbGF5KG0pLmR1cmF0aW9uKDApLnN0eWxlKFwib3BhY2l0eVwiLDApOm4uaW50ZXJydXB0KCkudHJhbnNpdGlvbigpLmR1cmF0aW9uKEE/MDpzKS5zdHlsZVR3ZWVuKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oKXtyZXR1cm4gen0sXCJpbXBvcnRhbnRcIikuc3R5bGUoXCItd2Via2l0LXRyYW5zZm9ybVwiLHkpLnN0eWxlKFwib3BhY2l0eVwiLDEpfSl9O3JldHVybiBkLm52UG9pbnRlckV2ZW50c0NsYXNzPXcsZC5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChkKSxkLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se2R1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YX19LGdyYXZpdHk6e2dldDpmdW5jdGlvbigpe3JldHVybiBmfSxzZXQ6ZnVuY3Rpb24oYSl7Zj1hfX0sZGlzdGFuY2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zz1hfX0sc25hcERpc3RhbmNlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEpe2g9YX19LGNsYXNzZXM6e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYSl7aj1hfX0sY2hhcnRDb250YWluZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1hfX0sZml4ZWRUb3A6e2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oYSl7aT1hfX0sZW5hYmxlZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbihhKXtyPWF9fSxoaWRlRGVsYXk6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0sY29udGVudEdlbmVyYXRvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEF9LHNldDpmdW5jdGlvbihhKXtBPWF9fSx2YWx1ZUZvcm1hdHRlcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHh9LHNldDpmdW5jdGlvbihhKXt4PWF9fSxoZWFkZXJGb3JtYXR0ZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiB5fSxzZXQ6ZnVuY3Rpb24oYSl7eT1hfX0sa2V5Rm9ybWF0dGVyOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gen0sc2V0OmZ1bmN0aW9uKGEpe3o9YX19LGhlYWRlckVuYWJsZWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oYSl7dD1hfX0sX2lzSW50ZXJhY3RpdmVMYXllcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbihhKXt1PSEhYX19LHBvc2l0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3AubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OnAubGVmdCxwLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpwLnRvcH19LG9mZnNldDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXtxLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpxLmxlZnQscS50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6cS50b3B9fSxoaWRkZW46e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bCE9YSYmKGw9ISFhLGQoKSl9fSxkYXRhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKGEpe2EucG9pbnQmJihhLnZhbHVlPWEucG9pbnQueCxhLnNlcmllcz1hLnNlcmllc3x8e30sYS5zZXJpZXMudmFsdWU9YS5wb2ludC55LGEuc2VyaWVzLmNvbG9yPWEucG9pbnQuY29sb3J8fGEuc2VyaWVzLmNvbG9yKSxlPWF9fSx0b29sdGlwRWxlbTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbigpe319LGlkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sc2V0OmZ1bmN0aW9uKCl7fX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGQpLGR9fSgpLGEudXRpbHMud2luZG93U2l6ZT1mdW5jdGlvbigpe3ZhciBhPXt3aWR0aDo2NDAsaGVpZ2h0OjQ4MH07cmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoJiZ3aW5kb3cuaW5uZXJIZWlnaHQ/KGEud2lkdGg9d2luZG93LmlubmVyV2lkdGgsYS5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LGEpOlwiQ1NTMUNvbXBhdFwiPT1kb2N1bWVudC5jb21wYXRNb2RlJiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRXaWR0aD8oYS53aWR0aD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGgsYS5oZWlnaHQ9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCxhKTpkb2N1bWVudC5ib2R5JiZkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoPyhhLndpZHRoPWRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGgsYS5oZWlnaHQ9ZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsYSk6YX0sYS51dGlscy53aW5kb3dSZXNpemU9ZnVuY3Rpb24oYil7cmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyP3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsYik6YS5sb2coXCJFUlJPUjogRmFpbGVkIHRvIGJpbmQgdG8gd2luZG93LnJlc2l6ZSB3aXRoOiBcIixiKSx7Y2FsbGJhY2s6YixjbGVhcjpmdW5jdGlvbigpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsYil9fX0sYS51dGlscy5nZXRDb2xvcj1mdW5jdGlvbihiKXtpZih2b2lkIDA9PT1iKXJldHVybiBhLnV0aWxzLmRlZmF1bHRDb2xvcigpO2lmKEFycmF5LmlzQXJyYXkoYikpe3ZhciBjPWQzLnNjYWxlLm9yZGluYWwoKS5yYW5nZShiKTtyZXR1cm4gZnVuY3Rpb24oYSxiKXt2YXIgZD12b2lkIDA9PT1iP2E6YjtyZXR1cm4gYS5jb2xvcnx8YyhkKX19cmV0dXJuIGJ9LGEudXRpbHMuZGVmYXVsdENvbG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGEudXRpbHMuZ2V0Q29sb3IoZDMuc2NhbGUuY2F0ZWdvcnkyMCgpLnJhbmdlKCkpfSxhLnV0aWxzLmN1c3RvbVRoZW1lPWZ1bmN0aW9uKGEsYixjKXtiPWJ8fGZ1bmN0aW9uKGEpe3JldHVybiBhLmtleX0sYz1jfHxkMy5zY2FsZS5jYXRlZ29yeTIwKCkucmFuZ2UoKTt2YXIgZD1jLmxlbmd0aDtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIGY9YihlKTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBhW2ZdP2FbZl0oKTp2b2lkIDAhPT1hW2ZdP2FbZl06KGR8fChkPWMubGVuZ3RoKSxkLT0xLGNbZF0pfX0sYS51dGlscy5wamF4PWZ1bmN0aW9uKGIsYyl7dmFyIGQ9ZnVuY3Rpb24oZCl7ZDMuaHRtbChkLGZ1bmN0aW9uKGQpe3ZhciBlPWQzLnNlbGVjdChjKS5ub2RlKCk7ZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChkMy5zZWxlY3QoZCkuc2VsZWN0KGMpLm5vZGUoKSxlKSxhLnV0aWxzLnBqYXgoYixjKX0pfTtkMy5zZWxlY3RBbGwoYikub24oXCJjbGlja1wiLGZ1bmN0aW9uKCl7aGlzdG9yeS5wdXNoU3RhdGUodGhpcy5ocmVmLHRoaXMudGV4dENvbnRlbnQsdGhpcy5ocmVmKSxkKHRoaXMuaHJlZiksZDMuZXZlbnQucHJldmVudERlZmF1bHQoKX0pLGQzLnNlbGVjdCh3aW5kb3cpLm9uKFwicG9wc3RhdGVcIixmdW5jdGlvbigpe2QzLmV2ZW50LnN0YXRlJiZkKGQzLmV2ZW50LnN0YXRlKX0pfSxhLnV0aWxzLmNhbGNBcHByb3hUZXh0V2lkdGg9ZnVuY3Rpb24oYSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYS5zdHlsZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS50ZXh0KXt2YXIgYj1wYXJzZUludChhLnN0eWxlKFwiZm9udC1zaXplXCIpLnJlcGxhY2UoXCJweFwiLFwiXCIpLDEwKSxjPWEudGV4dCgpLmxlbmd0aDtyZXR1cm4gYypiKi41fXJldHVybiAwfSxhLnV0aWxzLk5hTnRvWmVybz1mdW5jdGlvbihhKXtyZXR1cm5cIm51bWJlclwiIT10eXBlb2YgYXx8aXNOYU4oYSl8fG51bGw9PT1hfHwxLzA9PT1hfHxhPT09LTEvMD8wOmF9LGQzLnNlbGVjdGlvbi5wcm90b3R5cGUud2F0Y2hUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVt0aGlzXS5jb25jYXQoW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpO3JldHVybiBhLnRyYW5zaXRpb24uYXBwbHkoYSxiKX0sYS51dGlscy5yZW5kZXJXYXRjaD1mdW5jdGlvbihiLGMpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGEudXRpbHMucmVuZGVyV2F0Y2gpKXJldHVybiBuZXcgYS51dGlscy5yZW5kZXJXYXRjaChiLGMpO3ZhciBkPXZvaWQgMCE9PWM/YzoyNTAsZT1bXSxmPXRoaXM7dGhpcy5tb2RlbHM9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMCksYS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuX19yZW5kZXJlZD0hMSxmdW5jdGlvbihhKXthLmRpc3BhdGNoLm9uKFwicmVuZGVyRW5kXCIsZnVuY3Rpb24oKXthLl9fcmVuZGVyZWQ9ITAsZi5yZW5kZXJFbmQoXCJtb2RlbFwiKX0pfShhKSxlLmluZGV4T2YoYSk8MCYmZS5wdXNoKGEpfSksdGhpc30sdGhpcy5yZXNldD1mdW5jdGlvbihhKXt2b2lkIDAhPT1hJiYoZD1hKSxlPVtdfSx0aGlzLnRyYW5zaXRpb249ZnVuY3Rpb24oYSxiLGMpe2lmKGI9YXJndW1lbnRzLmxlbmd0aD4xP1tdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpOltdLGM9Yi5sZW5ndGg+MT9iLnBvcCgpOnZvaWQgMCE9PWQ/ZDoyNTAsYS5fX3JlbmRlcmVkPSExLGUuaW5kZXhPZihhKTwwJiZlLnB1c2goYSksMD09PWMpcmV0dXJuIGEuX19yZW5kZXJlZD0hMCxhLmRlbGF5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGEuZHVyYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sYTthLl9fcmVuZGVyZWQ9MD09PWEubGVuZ3RoPyEwOmEuZXZlcnkoZnVuY3Rpb24oYSl7cmV0dXJuIWEubGVuZ3RofSk/ITA6ITE7dmFyIGc9MDtyZXR1cm4gYS50cmFuc2l0aW9uKCkuZHVyYXRpb24oYykuZWFjaChmdW5jdGlvbigpeysrZ30pLmVhY2goXCJlbmRcIixmdW5jdGlvbigpezA9PT0tLWcmJihhLl9fcmVuZGVyZWQ9ITAsZi5yZW5kZXJFbmQuYXBwbHkodGhpcyxiKSl9KX0sdGhpcy5yZW5kZXJFbmQ9ZnVuY3Rpb24oKXtlLmV2ZXJ5KGZ1bmN0aW9uKGEpe3JldHVybiBhLl9fcmVuZGVyZWR9KSYmKGUuZm9yRWFjaChmdW5jdGlvbihhKXthLl9fcmVuZGVyZWQ9ITF9KSxiLnJlbmRlckVuZC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfX0sYS51dGlscy5kZWVwRXh0ZW5kPWZ1bmN0aW9uKGIpe3ZhciBjPWFyZ3VtZW50cy5sZW5ndGg+MT9bXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTpbXTtjLmZvckVhY2goZnVuY3Rpb24oYyl7Zm9yKHZhciBkIGluIGMpe3ZhciBlPWJbZF1pbnN0YW5jZW9mIEFycmF5LGY9XCJvYmplY3RcIj09dHlwZW9mIGJbZF0sZz1cIm9iamVjdFwiPT10eXBlb2YgY1tkXTtmJiYhZSYmZz9hLnV0aWxzLmRlZXBFeHRlbmQoYltkXSxjW2RdKTpiW2RdPWNbZF19fSl9LGEudXRpbHMuc3RhdGU9ZnVuY3Rpb24oKXtpZighKHRoaXMgaW5zdGFuY2VvZiBhLnV0aWxzLnN0YXRlKSlyZXR1cm4gbmV3IGEudXRpbHMuc3RhdGU7dmFyIGI9e30sYz1mdW5jdGlvbigpe30sZD1mdW5jdGlvbigpe3JldHVybnt9fSxlPW51bGwsZj1udWxsO3RoaXMuZGlzcGF0Y2g9ZDMuZGlzcGF0Y2goXCJjaGFuZ2VcIixcInNldFwiKSx0aGlzLmRpc3BhdGNoLm9uKFwic2V0XCIsZnVuY3Rpb24oYSl7YyhhLCEwKX0pLHRoaXMuZ2V0dGVyPWZ1bmN0aW9uKGEpe3JldHVybiBkPWEsdGhpc30sdGhpcy5zZXR0ZXI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYnx8KGI9ZnVuY3Rpb24oKXt9KSxjPWZ1bmN0aW9uKGMsZCl7YShjKSxkJiZiKCl9LHRoaXN9LHRoaXMuaW5pdD1mdW5jdGlvbihiKXtlPWV8fHt9LGEudXRpbHMuZGVlcEV4dGVuZChlLGIpfTt2YXIgZz1mdW5jdGlvbigpe3ZhciBhPWQoKTtpZihKU09OLnN0cmluZ2lmeShhKT09PUpTT04uc3RyaW5naWZ5KGIpKXJldHVybiExO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPXt9KSxiW2NdPWFbY10sZj0hMDtyZXR1cm4hMH07dGhpcy51cGRhdGU9ZnVuY3Rpb24oKXtlJiYoYyhlLCExKSxlPW51bGwpLGcuY2FsbCh0aGlzKSYmdGhpcy5kaXNwYXRjaC5jaGFuZ2UoYil9fSxhLnV0aWxzLm9wdGlvbnNGdW5jPWZ1bmN0aW9uKGEpe3JldHVybiBhJiZkMy5tYXAoYSkuZm9yRWFjaChmdW5jdGlvbihhLGIpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXNbYV0mJnRoaXNbYV0oYil9LmJpbmQodGhpcykpLHRoaXN9LGEudXRpbHMuY2FsY1RpY2tzWD1mdW5jdGlvbihiLGMpe3ZhciBkPTEsZT0wO2ZvcihlO2U8Yy5sZW5ndGg7ZSs9MSl7dmFyIGY9Y1tlXSYmY1tlXS52YWx1ZXM/Y1tlXS52YWx1ZXMubGVuZ3RoOjA7ZD1mPmQ/ZjpkfXJldHVybiBhLmxvZyhcIlJlcXVlc3RlZCBudW1iZXIgb2YgdGlja3M6IFwiLGIpLGEubG9nKFwiQ2FsY3VsYXRlZCBtYXggdmFsdWVzIHRvIGJlOiBcIixkKSxiPWI+ZD9iPWQtMTpiLGI9MT5iPzE6YixiPU1hdGguZmxvb3IoYiksYS5sb2coXCJDYWxjdWxhdGluZyB0aWNrIGNvdW50IGFzOiBcIixiKSxifSxhLnV0aWxzLmNhbGNUaWNrc1k9ZnVuY3Rpb24oYixjKXtyZXR1cm4gYS51dGlscy5jYWxjVGlja3NYKGIsYyl9LGEudXRpbHMuaW5pdE9wdGlvbj1mdW5jdGlvbihhLGIpe2EuX2NhbGxzJiZhLl9jYWxsc1tiXT9hW2JdPWEuX2NhbGxzW2JdOihhW2JdPWZ1bmN0aW9uKGMpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhhLl9vdmVycmlkZXNbYl09ITAsYS5fb3B0aW9uc1tiXT1jLGEpOmEuX29wdGlvbnNbYl19LGFbXCJfXCIrYl09ZnVuY3Rpb24oYyl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGEuX292ZXJyaWRlc1tiXXx8KGEuX29wdGlvbnNbYl09YyksYSk6YS5fb3B0aW9uc1tiXX0pfSxhLnV0aWxzLmluaXRPcHRpb25zPWZ1bmN0aW9uKGIpe2IuX292ZXJyaWRlcz1iLl9vdmVycmlkZXN8fHt9O3ZhciBjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGIuX29wdGlvbnN8fHt9KSxkPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGIuX2NhbGxzfHx7fSk7Yz1jLmNvbmNhdChkKTtmb3IodmFyIGUgaW4gYylhLnV0aWxzLmluaXRPcHRpb24oYixjW2VdKX0sYS51dGlscy5pbmhlcml0T3B0aW9uc0QzPWZ1bmN0aW9uKGEsYixjKXthLl9kM29wdGlvbnM9Yy5jb25jYXQoYS5fZDNvcHRpb25zfHxbXSksYy51bnNoaWZ0KGIpLGMudW5zaGlmdChhKSxkMy5yZWJpbmQuYXBwbHkodGhpcyxjKX0sYS51dGlscy5hcnJheVVuaXF1ZT1mdW5jdGlvbihhKXtyZXR1cm4gYS5zb3J0KCkuZmlsdGVyKGZ1bmN0aW9uKGIsYyl7cmV0dXJuIWN8fGIhPWFbYy0xXX0pfSxhLnV0aWxzLnN5bWJvbE1hcD1kMy5tYXAoKSxhLnV0aWxzLnN5bWJvbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoYixlKXt2YXIgZj1jLmNhbGwodGhpcyxiLGUpLGc9ZC5jYWxsKHRoaXMsYixlKTtyZXR1cm4tMSE9PWQzLnN2Zy5zeW1ib2xUeXBlcy5pbmRleE9mKGYpP2QzLnN2Zy5zeW1ib2woKS50eXBlKGYpLnNpemUoZykoKTphLnV0aWxzLnN5bWJvbE1hcC5nZXQoZikoZyl9dmFyIGMsZD02NDtyZXR1cm4gYi50eXBlPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhjPWQzLmZ1bmN0b3IoYSksYik6Y30sYi5zaXplPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhkPWQzLmZ1bmN0b3IoYSksYik6ZH0sYn0sYS51dGlscy5pbmhlcml0T3B0aW9ucz1mdW5jdGlvbihiLGMpe3ZhciBkPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGMuX29wdGlvbnN8fHt9KSxlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGMuX2NhbGxzfHx7fSksZj1jLl9pbmhlcml0ZWR8fFtdLGc9Yy5fZDNvcHRpb25zfHxbXSxoPWQuY29uY2F0KGUpLmNvbmNhdChmKS5jb25jYXQoZyk7aC51bnNoaWZ0KGMpLGgudW5zaGlmdChiKSxkMy5yZWJpbmQuYXBwbHkodGhpcyxoKSxiLl9pbmhlcml0ZWQ9YS51dGlscy5hcnJheVVuaXF1ZShkLmNvbmNhdChlKS5jb25jYXQoZikuY29uY2F0KGQpLmNvbmNhdChiLl9pbmhlcml0ZWR8fFtdKSksYi5fZDNvcHRpb25zPWEudXRpbHMuYXJyYXlVbmlxdWUoZy5jb25jYXQoYi5fZDNvcHRpb25zfHxbXSkpfSxhLnV0aWxzLmluaXRTVkc9ZnVuY3Rpb24oYSl7YS5jbGFzc2VkKHtcIm52ZDMtc3ZnXCI6ITB9KX0sYS51dGlscy5zYW5pdGl6ZUhlaWdodD1mdW5jdGlvbihhLGIpe3JldHVybiBhfHxwYXJzZUludChiLnN0eWxlKFwiaGVpZ2h0XCIpLDEwKXx8NDAwfSxhLnV0aWxzLnNhbml0aXplV2lkdGg9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYXx8cGFyc2VJbnQoYi5zdHlsZShcIndpZHRoXCIpLDEwKXx8OTYwfSxhLnV0aWxzLmF2YWlsYWJsZUhlaWdodD1mdW5jdGlvbihiLGMsZCl7cmV0dXJuIGEudXRpbHMuc2FuaXRpemVIZWlnaHQoYixjKS1kLnRvcC1kLmJvdHRvbX0sYS51dGlscy5hdmFpbGFibGVXaWR0aD1mdW5jdGlvbihiLGMsZCl7cmV0dXJuIGEudXRpbHMuc2FuaXRpemVXaWR0aChiLGMpLWQubGVmdC1kLnJpZ2h0fSxhLnV0aWxzLm5vRGF0YT1mdW5jdGlvbihiLGMpe3ZhciBkPWIub3B0aW9ucygpLGU9ZC5tYXJnaW4oKSxmPWQubm9EYXRhKCksZz1udWxsPT1mP1tcIk5vIERhdGEgQXZhaWxhYmxlLlwiXTpbZl0saD1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChkLmhlaWdodCgpLGMsZSksaT1hLnV0aWxzLmF2YWlsYWJsZVdpZHRoKGQud2lkdGgoKSxjLGUpLGo9ZS5sZWZ0K2kvMixrPWUudG9wK2gvMjtjLnNlbGVjdEFsbChcImdcIikucmVtb3ZlKCk7dmFyIGw9Yy5zZWxlY3RBbGwoXCIubnYtbm9EYXRhXCIpLmRhdGEoZyk7bC5lbnRlcigpLmFwcGVuZChcInRleHRcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LW5vRGF0YVwiKS5hdHRyKFwiZHlcIixcIi0uN2VtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIixcIm1pZGRsZVwiKSxsLmF0dHIoXCJ4XCIsaikuYXR0cihcInlcIixrKS50ZXh0KGZ1bmN0aW9uKGEpe3JldHVybiBhfSl9LGEubW9kZWxzLmF4aXM9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGcpe3JldHVybiBzLnJlc2V0KCksZy5lYWNoKGZ1bmN0aW9uKGIpe3ZhciBnPWQzLnNlbGVjdCh0aGlzKTthLnV0aWxzLmluaXRTVkcoZyk7dmFyIHA9Zy5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtYXhpc1wiKS5kYXRhKFtiXSkscT1wLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1heGlzXCIpLHQ9KHEuYXBwZW5kKFwiZ1wiKSxwLnNlbGVjdChcImdcIikpO251bGwhPT1uP2MudGlja3Mobik6KFwidG9wXCI9PWMub3JpZW50KCl8fFwiYm90dG9tXCI9PWMub3JpZW50KCkpJiZjLnRpY2tzKE1hdGguYWJzKGQucmFuZ2UoKVsxXS1kLnJhbmdlKClbMF0pLzEwMCksdC53YXRjaFRyYW5zaXRpb24ocyxcImF4aXNcIikuY2FsbChjKSxyPXJ8fGMuc2NhbGUoKTt2YXIgdT1jLnRpY2tGb3JtYXQoKTtudWxsPT11JiYodT1yLnRpY2tGb3JtYXQoKSk7dmFyIHY9dC5zZWxlY3RBbGwoXCJ0ZXh0Lm52LWF4aXNsYWJlbFwiKS5kYXRhKFtofHxudWxsXSk7di5leGl0KCkucmVtb3ZlKCk7dmFyIHcseCx5O3N3aXRjaChjLm9yaWVudCgpKXtjYXNlXCJ0b3BcIjp2LmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LWF4aXNsYWJlbFwiKSx5PWQucmFuZ2UoKS5sZW5ndGg8Mj8wOjI9PT1kLnJhbmdlKCkubGVuZ3RoP2QucmFuZ2UoKVsxXTpkLnJhbmdlKClbZC5yYW5nZSgpLmxlbmd0aC0xXSsoZC5yYW5nZSgpWzFdLWQucmFuZ2UoKVswXSksdi5hdHRyKFwidGV4dC1hbmNob3JcIixcIm1pZGRsZVwiKS5hdHRyKFwieVwiLDApLmF0dHIoXCJ4XCIseS8yKSxpJiYoeD1wLnNlbGVjdEFsbChcImcubnYtYXhpc01heE1pblwiKS5kYXRhKGQuZG9tYWluKCkpLHguZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJuW1wibnYtYXhpc01heE1pblwiLFwibnYtYXhpc01heE1pbi14XCIsMD09Yj9cIm52LWF4aXNNaW4teFwiOlwibnYtYXhpc01heC14XCJdLmpvaW4oXCIgXCIpfSkuYXBwZW5kKFwidGV4dFwiKSx4LmV4aXQoKS5yZW1vdmUoKSx4LmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihiKXtyZXR1cm5cInRyYW5zbGF0ZShcIithLnV0aWxzLk5hTnRvWmVybyhkKGIpKStcIiwwKVwifSkuc2VsZWN0KFwidGV4dFwiKS5hdHRyKFwiZHlcIixcIi0wLjVlbVwiKS5hdHRyKFwieVwiLC1jLnRpY2tQYWRkaW5nKCkpLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLFwibWlkZGxlXCIpLnRleHQoZnVuY3Rpb24oYSl7dmFyIGI9dShhKTtyZXR1cm4oXCJcIitiKS5tYXRjaChcIk5hTlwiKT9cIlwiOmJ9KSx4LndhdGNoVHJhbnNpdGlvbihzLFwibWluLW1heCB0b3BcIikuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGIsYyl7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrYS51dGlscy5OYU50b1plcm8oZC5yYW5nZSgpW2NdKStcIiwwKVwifSkpO2JyZWFrO2Nhc2VcImJvdHRvbVwiOnc9byszNjt2YXIgej0zMCxBPTAsQj10LnNlbGVjdEFsbChcImdcIikuc2VsZWN0KFwidGV4dFwiKSxDPVwiXCI7aWYoaiUzNjApe0IuZWFjaChmdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksYj1hLndpZHRoO0E9YS5oZWlnaHQsYj56JiYoej1iKX0pLEM9XCJyb3RhdGUoXCIraitcIiAwLFwiKyhBLzIrYy50aWNrUGFkZGluZygpKStcIilcIjt2YXIgRD1NYXRoLmFicyhNYXRoLnNpbihqKk1hdGguUEkvMTgwKSk7dz0oRD9EKno6eikrMzAsQi5hdHRyKFwidHJhbnNmb3JtXCIsQykuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLGolMzYwPjA/XCJzdGFydFwiOlwiZW5kXCIpfXYuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtYXhpc2xhYmVsXCIpLHk9ZC5yYW5nZSgpLmxlbmd0aDwyPzA6Mj09PWQucmFuZ2UoKS5sZW5ndGg/ZC5yYW5nZSgpWzFdOmQucmFuZ2UoKVtkLnJhbmdlKCkubGVuZ3RoLTFdKyhkLnJhbmdlKClbMV0tZC5yYW5nZSgpWzBdKSx2LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLFwibWlkZGxlXCIpLmF0dHIoXCJ5XCIsdykuYXR0cihcInhcIix5LzIpLGkmJih4PXAuc2VsZWN0QWxsKFwiZy5udi1heGlzTWF4TWluXCIpLmRhdGEoW2QuZG9tYWluKClbMF0sZC5kb21haW4oKVtkLmRvbWFpbigpLmxlbmd0aC0xXV0pLHguZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJuW1wibnYtYXhpc01heE1pblwiLFwibnYtYXhpc01heE1pbi14XCIsMD09Yj9cIm52LWF4aXNNaW4teFwiOlwibnYtYXhpc01heC14XCJdLmpvaW4oXCIgXCIpfSkuYXBwZW5kKFwidGV4dFwiKSx4LmV4aXQoKS5yZW1vdmUoKSx4LmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihiKXtyZXR1cm5cInRyYW5zbGF0ZShcIithLnV0aWxzLk5hTnRvWmVybyhkKGIpKyhtP2QucmFuZ2VCYW5kKCkvMjowKSkrXCIsMClcIn0pLnNlbGVjdChcInRleHRcIikuYXR0cihcImR5XCIsXCIuNzFlbVwiKS5hdHRyKFwieVwiLGMudGlja1BhZGRpbmcoKSkuYXR0cihcInRyYW5zZm9ybVwiLEMpLnN0eWxlKFwidGV4dC1hbmNob3JcIixqP2olMzYwPjA/XCJzdGFydFwiOlwiZW5kXCI6XCJtaWRkbGVcIikudGV4dChmdW5jdGlvbihhKXt2YXIgYj11KGEpO3JldHVybihcIlwiK2IpLm1hdGNoKFwiTmFOXCIpP1wiXCI6Yn0pLHgud2F0Y2hUcmFuc2l0aW9uKHMsXCJtaW4tbWF4IGJvdHRvbVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYil7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrYS51dGlscy5OYU50b1plcm8oZChiKSsobT9kLnJhbmdlQmFuZCgpLzI6MCkpK1wiLDApXCJ9KSksbCYmQi5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRyYW5zbGF0ZSgwLFwiKyhiJTI9PTA/XCIwXCI6XCIxMlwiKStcIilcIn0pO2JyZWFrO2Nhc2VcInJpZ2h0XCI6di5lbnRlcigpLmFwcGVuZChcInRleHRcIikuYXR0cihcImNsYXNzXCIsXCJudi1heGlzbGFiZWxcIiksdi5zdHlsZShcInRleHQtYW5jaG9yXCIsaz9cIm1pZGRsZVwiOlwiYmVnaW5cIikuYXR0cihcInRyYW5zZm9ybVwiLGs/XCJyb3RhdGUoOTApXCI6XCJcIikuYXR0cihcInlcIixrPy1NYXRoLm1heChlLnJpZ2h0LGYpKzEyOi0xMCkuYXR0cihcInhcIixrP2QzLm1heChkLnJhbmdlKCkpLzI6Yy50aWNrUGFkZGluZygpKSxpJiYoeD1wLnNlbGVjdEFsbChcImcubnYtYXhpc01heE1pblwiKS5kYXRhKGQuZG9tYWluKCkpLHguZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJuW1wibnYtYXhpc01heE1pblwiLFwibnYtYXhpc01heE1pbi15XCIsMD09Yj9cIm52LWF4aXNNaW4teVwiOlwibnYtYXhpc01heC15XCJdLmpvaW4oXCIgXCIpfSkuYXBwZW5kKFwidGV4dFwiKS5zdHlsZShcIm9wYWNpdHlcIiwwKSx4LmV4aXQoKS5yZW1vdmUoKSx4LmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihiKXtyZXR1cm5cInRyYW5zbGF0ZSgwLFwiK2EudXRpbHMuTmFOdG9aZXJvKGQoYikpK1wiKVwifSkuc2VsZWN0KFwidGV4dFwiKS5hdHRyKFwiZHlcIixcIi4zMmVtXCIpLmF0dHIoXCJ5XCIsMCkuYXR0cihcInhcIixjLnRpY2tQYWRkaW5nKCkpLnN0eWxlKFwidGV4dC1hbmNob3JcIixcInN0YXJ0XCIpLnRleHQoZnVuY3Rpb24oYSl7dmFyIGI9dShhKTtyZXR1cm4oXCJcIitiKS5tYXRjaChcIk5hTlwiKT9cIlwiOmJ9KSx4LndhdGNoVHJhbnNpdGlvbihzLFwibWluLW1heCByaWdodFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYixjKXtyZXR1cm5cInRyYW5zbGF0ZSgwLFwiK2EudXRpbHMuTmFOdG9aZXJvKGQucmFuZ2UoKVtjXSkrXCIpXCJ9KS5zZWxlY3QoXCJ0ZXh0XCIpLnN0eWxlKFwib3BhY2l0eVwiLDEpKTticmVhaztjYXNlXCJsZWZ0XCI6di5lbnRlcigpLmFwcGVuZChcInRleHRcIikuYXR0cihcImNsYXNzXCIsXCJudi1heGlzbGFiZWxcIiksdi5zdHlsZShcInRleHQtYW5jaG9yXCIsaz9cIm1pZGRsZVwiOlwiZW5kXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixrP1wicm90YXRlKC05MClcIjpcIlwiKS5hdHRyKFwieVwiLGs/LU1hdGgubWF4KGUubGVmdCxmKSsyNS0ob3x8MCk6LTEwKS5hdHRyKFwieFwiLGs/LWQzLm1heChkLnJhbmdlKCkpLzI6LWMudGlja1BhZGRpbmcoKSksaSYmKHg9cC5zZWxlY3RBbGwoXCJnLm52LWF4aXNNYXhNaW5cIikuZGF0YShkLmRvbWFpbigpKSx4LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihhLGIpe3JldHVybltcIm52LWF4aXNNYXhNaW5cIixcIm52LWF4aXNNYXhNaW4teVwiLDA9PWI/XCJudi1heGlzTWluLXlcIjpcIm52LWF4aXNNYXgteVwiXS5qb2luKFwiIFwiKX0pLmFwcGVuZChcInRleHRcIikuc3R5bGUoXCJvcGFjaXR5XCIsMCkseC5leGl0KCkucmVtb3ZlKCkseC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYil7cmV0dXJuXCJ0cmFuc2xhdGUoMCxcIithLnV0aWxzLk5hTnRvWmVybyhyKGIpKStcIilcIn0pLnNlbGVjdChcInRleHRcIikuYXR0cihcImR5XCIsXCIuMzJlbVwiKS5hdHRyKFwieVwiLDApLmF0dHIoXCJ4XCIsLWMudGlja1BhZGRpbmcoKSkuYXR0cihcInRleHQtYW5jaG9yXCIsXCJlbmRcIikudGV4dChmdW5jdGlvbihhKXt2YXIgYj11KGEpO3JldHVybihcIlwiK2IpLm1hdGNoKFwiTmFOXCIpP1wiXCI6Yn0pLHgud2F0Y2hUcmFuc2l0aW9uKHMsXCJtaW4tbWF4IHJpZ2h0XCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihiLGMpe3JldHVyblwidHJhbnNsYXRlKDAsXCIrYS51dGlscy5OYU50b1plcm8oZC5yYW5nZSgpW2NdKStcIilcIn0pLnNlbGVjdChcInRleHRcIikuc3R5bGUoXCJvcGFjaXR5XCIsMSkpfWlmKHYudGV4dChmdW5jdGlvbihhKXtyZXR1cm4gYX0pLCFpfHxcImxlZnRcIiE9PWMub3JpZW50KCkmJlwicmlnaHRcIiE9PWMub3JpZW50KCl8fCh0LnNlbGVjdEFsbChcImdcIikuZWFjaChmdW5jdGlvbihhKXtkMy5zZWxlY3QodGhpcykuc2VsZWN0KFwidGV4dFwiKS5hdHRyKFwib3BhY2l0eVwiLDEpLChkKGEpPGQucmFuZ2UoKVsxXSsxMHx8ZChhKT5kLnJhbmdlKClbMF0tMTApJiYoKGE+MWUtMTB8fC0xZS0xMD5hKSYmZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJvcGFjaXR5XCIsMCksZDMuc2VsZWN0KHRoaXMpLnNlbGVjdChcInRleHRcIikuYXR0cihcIm9wYWNpdHlcIiwwKSl9KSxkLmRvbWFpbigpWzBdPT1kLmRvbWFpbigpWzFdJiYwPT1kLmRvbWFpbigpWzBdJiZwLnNlbGVjdEFsbChcImcubnYtYXhpc01heE1pblwiKS5zdHlsZShcIm9wYWNpdHlcIixmdW5jdGlvbihhLGIpe3JldHVybiBiPzA6MX0pKSxpJiYoXCJ0b3BcIj09PWMub3JpZW50KCl8fFwiYm90dG9tXCI9PT1jLm9yaWVudCgpKSl7dmFyIEU9W107cC5zZWxlY3RBbGwoXCJnLm52LWF4aXNNYXhNaW5cIikuZWFjaChmdW5jdGlvbihhLGIpe3RyeXtFLnB1c2goYj9kKGEpLXRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgtNDpkKGEpK3RoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgrNCl9Y2F0Y2goYyl7RS5wdXNoKGI/ZChhKS00OmQoYSkrNCl9fSksdC5zZWxlY3RBbGwoXCJnXCIpLmVhY2goZnVuY3Rpb24oYSl7KGQoYSk8RVswXXx8ZChhKT5FWzFdKSYmKGE+MWUtMTB8fC0xZS0xMD5hP2QzLnNlbGVjdCh0aGlzKS5yZW1vdmUoKTpkMy5zZWxlY3QodGhpcykuc2VsZWN0KFwidGV4dFwiKS5yZW1vdmUoKSl9KX10LnNlbGVjdEFsbChcIi50aWNrXCIpLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hcGFyc2VGbG9hdChNYXRoLnJvdW5kKDFlNSphKS8xZTYpJiZ2b2lkIDAhPT1hfSkuY2xhc3NlZChcInplcm9cIiwhMCkscj1kLmNvcHkoKX0pLHMucmVuZGVyRW5kKFwiYXhpcyBpbW1lZGlhdGVcIiksYn12YXIgYz1kMy5zdmcuYXhpcygpLGQ9ZDMuc2NhbGUubGluZWFyKCksZT17dG9wOjAscmlnaHQ6MCxib3R0b206MCxsZWZ0OjB9LGY9NzUsZz02MCxoPW51bGwsaT0hMCxqPTAsaz0hMCxsPSExLG09ITEsbj1udWxsLG89MCxwPTI1MCxxPWQzLmRpc3BhdGNoKFwicmVuZGVyRW5kXCIpO2Muc2NhbGUoZCkub3JpZW50KFwiYm90dG9tXCIpLnRpY2tGb3JtYXQoZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTt2YXIgcixzPWEudXRpbHMucmVuZGVyV2F0Y2gocSxwKTtyZXR1cm4gYi5heGlzPWMsYi5kaXNwYXRjaD1xLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHtheGlzTGFiZWxEaXN0YW5jZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWF9fSxzdGFnZ2VyTGFiZWxzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKGEpe2w9YX19LHJvdGF0ZUxhYmVsczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihhKXtqPWF9fSxyb3RhdGVZTGFiZWw6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1hfX0sc2hvd01heE1pbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihhKXtpPWF9fSxheGlzTGFiZWw6e2dldDpmdW5jdGlvbigpe3JldHVybiBofSxzZXQ6ZnVuY3Rpb24oYSl7aD1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKGEpe2c9YX19LHRpY2tzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LHdpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0OmZ1bmN0aW9uKGEpe2Y9YX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbihhKXtlLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDplLnRvcCxlLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDplLnJpZ2h0LGUuYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmUuYm90dG9tLGUubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmUubGVmdH19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YSxzLnJlc2V0KHApfX0sc2NhbGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBkfSxzZXQ6ZnVuY3Rpb24oZSl7ZD1lLGMuc2NhbGUoZCksbT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBkLnJhbmdlQmFuZHMsYS51dGlscy5pbmhlcml0T3B0aW9uc0QzKGIsZCxbXCJkb21haW5cIixcInJhbmdlXCIsXCJyYW5nZUJhbmRcIixcInJhbmdlQmFuZHNcIl0pfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGEudXRpbHMuaW5oZXJpdE9wdGlvbnNEMyhiLGMsW1wib3JpZW50XCIsXCJ0aWNrVmFsdWVzXCIsXCJ0aWNrU3ViZGl2aWRlXCIsXCJ0aWNrU2l6ZVwiLFwidGlja1BhZGRpbmdcIixcInRpY2tGb3JtYXRcIl0pLGEudXRpbHMuaW5oZXJpdE9wdGlvbnNEMyhiLGQsW1wiZG9tYWluXCIsXCJyYW5nZVwiLFwicmFuZ2VCYW5kXCIsXCJyYW5nZUJhbmRzXCJdKSxifSxhLm1vZGVscy5ib3hQbG90PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihsKXtyZXR1cm4gdi5yZXNldCgpLGwuZWFjaChmdW5jdGlvbihiKXt2YXIgbD1qLWkubGVmdC1pLnJpZ2h0LHA9ay1pLnRvcC1pLmJvdHRvbTtyPWQzLnNlbGVjdCh0aGlzKSxhLnV0aWxzLmluaXRTVkcociksbS5kb21haW4oY3x8Yi5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gbyhhLGIpfSkpLnJhbmdlQmFuZHMoZXx8WzAsbF0sLjEpO3ZhciB3PVtdO2lmKCFkKXt2YXIgeD1kMy5taW4oYi5tYXAoZnVuY3Rpb24oYSl7dmFyIGI9W107cmV0dXJuIGIucHVzaChhLnZhbHVlcy5RMSksYS52YWx1ZXMuaGFzT3duUHJvcGVydHkoXCJ3aGlza2VyX2xvd1wiKSYmbnVsbCE9PWEudmFsdWVzLndoaXNrZXJfbG93JiZiLnB1c2goYS52YWx1ZXMud2hpc2tlcl9sb3cpLGEudmFsdWVzLmhhc093blByb3BlcnR5KFwib3V0bGllcnNcIikmJm51bGwhPT1hLnZhbHVlcy5vdXRsaWVycyYmKGI9Yi5jb25jYXQoYS52YWx1ZXMub3V0bGllcnMpKSxkMy5taW4oYil9KSkseT1kMy5tYXgoYi5tYXAoZnVuY3Rpb24oYSl7dmFyIGI9W107cmV0dXJuIGIucHVzaChhLnZhbHVlcy5RMyksYS52YWx1ZXMuaGFzT3duUHJvcGVydHkoXCJ3aGlza2VyX2hpZ2hcIikmJm51bGwhPT1hLnZhbHVlcy53aGlza2VyX2hpZ2gmJmIucHVzaChhLnZhbHVlcy53aGlza2VyX2hpZ2gpLGEudmFsdWVzLmhhc093blByb3BlcnR5KFwib3V0bGllcnNcIikmJm51bGwhPT1hLnZhbHVlcy5vdXRsaWVycyYmKGI9Yi5jb25jYXQoYS52YWx1ZXMub3V0bGllcnMpKSxkMy5tYXgoYil9KSk7dz1beCx5XX1uLmRvbWFpbihkfHx3KSxuLnJhbmdlKGZ8fFtwLDBdKSxnPWd8fG0saD1ofHxuLmNvcHkoKS5yYW5nZShbbigwKSxuKDApXSk7e3ZhciB6PXIuc2VsZWN0QWxsKFwiZy5udi13cmFwXCIpLmRhdGEoW2JdKTt6LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcFwiKX16LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitpLmxlZnQrXCIsXCIraS50b3ArXCIpXCIpO3ZhciBBPXouc2VsZWN0QWxsKFwiLm52LWJveHBsb3RcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm4gYX0pLEI9QS5lbnRlcigpLmFwcGVuZChcImdcIikuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDFlLTYpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsMWUtNik7QS5hdHRyKFwiY2xhc3NcIixcIm52LWJveHBsb3RcIikuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrKG0obyhhLGIpKSsuMDUqbS5yYW5nZUJhbmQoKSkrXCIsIDApXCJ9KS5jbGFzc2VkKFwiaG92ZXJcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5ob3Zlcn0pLEEud2F0Y2hUcmFuc2l0aW9uKHYsXCJudi1ib3hwbG90OiBib3hwbG90c1wiKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMSkuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwuNzUpLmRlbGF5KGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGMqdC9iLmxlbmd0aH0pLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiKyhtKG8oYSxiKSkrLjA1Km0ucmFuZ2VCYW5kKCkpK1wiLCAwKVwifSksQS5leGl0KCkucmVtb3ZlKCksQi5lYWNoKGZ1bmN0aW9uKGEsYil7dmFyIGM9ZDMuc2VsZWN0KHRoaXMpO1tcImxvd1wiLFwiaGlnaFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGQpe2EudmFsdWVzLmhhc093blByb3BlcnR5KFwid2hpc2tlcl9cIitkKSYmbnVsbCE9PWEudmFsdWVzW1wid2hpc2tlcl9cIitkXSYmKGMuYXBwZW5kKFwibGluZVwiKS5zdHlsZShcInN0cm9rZVwiLGEuY29sb3I/YS5jb2xvcjpxKGEsYikpLmF0dHIoXCJjbGFzc1wiLFwibnYtYm94cGxvdC13aGlza2VyIG52LWJveHBsb3QtXCIrZCksYy5hcHBlbmQoXCJsaW5lXCIpLnN0eWxlKFwic3Ryb2tlXCIsYS5jb2xvcj9hLmNvbG9yOnEoYSxiKSkuYXR0cihcImNsYXNzXCIsXCJudi1ib3hwbG90LXRpY2sgbnYtYm94cGxvdC1cIitkKSl9KX0pO3ZhciBDPUEuc2VsZWN0QWxsKFwiLm52LWJveHBsb3Qtb3V0bGllclwiKS5kYXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlcy5oYXNPd25Qcm9wZXJ0eShcIm91dGxpZXJzXCIpJiZudWxsIT09YS52YWx1ZXMub3V0bGllcnM/YS52YWx1ZXMub3V0bGllcnM6W119KTtDLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gcShhLGMpfSkuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHEoYSxjKX0pLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oYSxiLGMpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMCkscy5lbGVtZW50TW91c2VvdmVyKHtzZXJpZXM6e2tleTphLGNvbG9yOnEoYSxjKX0sZTpkMy5ldmVudH0pfSkub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKGEsYixjKXtkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhvdmVyXCIsITEpLHMuZWxlbWVudE1vdXNlb3V0KHtzZXJpZXM6e2tleTphLGNvbG9yOnEoYSxjKX0sZTpkMy5ldmVudH0pfSkub24oXCJtb3VzZW1vdmVcIixmdW5jdGlvbigpe3MuZWxlbWVudE1vdXNlbW92ZSh7ZTpkMy5ldmVudH0pfSksQy5hdHRyKFwiY2xhc3NcIixcIm52LWJveHBsb3Qtb3V0bGllclwiKSxDLndhdGNoVHJhbnNpdGlvbih2LFwibnYtYm94cGxvdDogbnYtYm94cGxvdC1vdXRsaWVyXCIpLmF0dHIoXCJjeFwiLC40NSptLnJhbmdlQmFuZCgpKS5hdHRyKFwiY3lcIixmdW5jdGlvbihhKXtyZXR1cm4gbihhKX0pLmF0dHIoXCJyXCIsXCIzXCIpLEMuZXhpdCgpLnJlbW92ZSgpO3ZhciBEPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT11Py45Km0ucmFuZ2VCYW5kKCk6TWF0aC5taW4oNzUsLjkqbS5yYW5nZUJhbmQoKSl9LEU9ZnVuY3Rpb24oKXtyZXR1cm4uNDUqbS5yYW5nZUJhbmQoKS1EKCkvMn0sRj1mdW5jdGlvbigpe3JldHVybi40NSptLnJhbmdlQmFuZCgpK0QoKS8yfTtbXCJsb3dcIixcImhpZ2hcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1cImxvd1wiPT09YT9cIlExXCI6XCJRM1wiO0Euc2VsZWN0KFwibGluZS5udi1ib3hwbG90LXdoaXNrZXIubnYtYm94cGxvdC1cIithKS53YXRjaFRyYW5zaXRpb24odixcIm52LWJveHBsb3Q6IGJveHBsb3RzXCIpLmF0dHIoXCJ4MVwiLC40NSptLnJhbmdlQmFuZCgpKS5hdHRyKFwieTFcIixmdW5jdGlvbihiKXtyZXR1cm4gbihiLnZhbHVlc1tcIndoaXNrZXJfXCIrYV0pfSkuYXR0cihcIngyXCIsLjQ1Km0ucmFuZ2VCYW5kKCkpLmF0dHIoXCJ5MlwiLGZ1bmN0aW9uKGEpe3JldHVybiBuKGEudmFsdWVzW2JdKX0pLEEuc2VsZWN0KFwibGluZS5udi1ib3hwbG90LXRpY2subnYtYm94cGxvdC1cIithKS53YXRjaFRyYW5zaXRpb24odixcIm52LWJveHBsb3Q6IGJveHBsb3RzXCIpLmF0dHIoXCJ4MVwiLEUpLmF0dHIoXCJ5MVwiLGZ1bmN0aW9uKGIpe3JldHVybiBuKGIudmFsdWVzW1wid2hpc2tlcl9cIithXSl9KS5hdHRyKFwieDJcIixGKS5hdHRyKFwieTJcIixmdW5jdGlvbihiKXtyZXR1cm4gbihiLnZhbHVlc1tcIndoaXNrZXJfXCIrYV0pfSl9KSxbXCJsb3dcIixcImhpZ2hcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtCLnNlbGVjdEFsbChcIi5udi1ib3hwbG90LVwiK2EpLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oYixjLGQpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMCkscy5lbGVtZW50TW91c2VvdmVyKHtzZXJpZXM6e2tleTpiLnZhbHVlc1tcIndoaXNrZXJfXCIrYV0sY29sb3I6cShiLGQpfSxlOmQzLmV2ZW50fSl9KS5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oYixjLGQpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSkscy5lbGVtZW50TW91c2VvdXQoe3Nlcmllczp7a2V5OmIudmFsdWVzW1wid2hpc2tlcl9cIithXSxjb2xvcjpxKGIsZCl9LGU6ZDMuZXZlbnR9KX0pLm9uKFwibW91c2Vtb3ZlXCIsZnVuY3Rpb24oKXtzLmVsZW1lbnRNb3VzZW1vdmUoe2U6ZDMuZXZlbnR9KX0pfSksQi5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtYm94cGxvdC1ib3hcIikub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMCkscy5lbGVtZW50TW91c2VvdmVyKHtrZXk6YS5sYWJlbCx2YWx1ZTphLmxhYmVsLHNlcmllczpbe2tleTpcIlEzXCIsdmFsdWU6YS52YWx1ZXMuUTMsY29sb3I6YS5jb2xvcnx8cShhLGIpfSx7a2V5OlwiUTJcIix2YWx1ZTphLnZhbHVlcy5RMixjb2xvcjphLmNvbG9yfHxxKGEsYil9LHtrZXk6XCJRMVwiLHZhbHVlOmEudmFsdWVzLlExLGNvbG9yOmEuY29sb3J8fHEoYSxiKX1dLGRhdGE6YSxpbmRleDpiLGU6ZDMuZXZlbnR9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSkscy5lbGVtZW50TW91c2VvdXQoe2tleTphLmxhYmVsLHZhbHVlOmEubGFiZWwsc2VyaWVzOlt7a2V5OlwiUTNcIix2YWx1ZTphLnZhbHVlcy5RMyxjb2xvcjphLmNvbG9yfHxxKGEsYil9LHtrZXk6XCJRMlwiLHZhbHVlOmEudmFsdWVzLlEyLGNvbG9yOmEuY29sb3J8fHEoYSxiKX0se2tleTpcIlExXCIsdmFsdWU6YS52YWx1ZXMuUTEsY29sb3I6YS5jb2xvcnx8cShhLGIpfV0sZGF0YTphLGluZGV4OmIsZTpkMy5ldmVudH0pfSkub24oXCJtb3VzZW1vdmVcIixmdW5jdGlvbigpe3MuZWxlbWVudE1vdXNlbW92ZSh7ZTpkMy5ldmVudH0pfSksQS5zZWxlY3QoXCJyZWN0Lm52LWJveHBsb3QtYm94XCIpLndhdGNoVHJhbnNpdGlvbih2LFwibnYtYm94cGxvdDogYm94ZXNcIikuYXR0cihcInlcIixmdW5jdGlvbihhKXtyZXR1cm4gbihhLnZhbHVlcy5RMyl9KS5hdHRyKFwid2lkdGhcIixEKS5hdHRyKFwieFwiLEUpLmF0dHIoXCJoZWlnaHRcIixmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5hYnMobihhLnZhbHVlcy5RMyktbihhLnZhbHVlcy5RMSkpfHwxfSkuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8cShhLGIpfSkuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhLGIpe3JldHVybiBhLmNvbG9yfHxxKGEsYil9KSxCLmFwcGVuZChcImxpbmVcIikuYXR0cihcImNsYXNzXCIsXCJudi1ib3hwbG90LW1lZGlhblwiKSxBLnNlbGVjdChcImxpbmUubnYtYm94cGxvdC1tZWRpYW5cIikud2F0Y2hUcmFuc2l0aW9uKHYsXCJudi1ib3hwbG90OiBib3hwbG90cyBsaW5lXCIpLmF0dHIoXCJ4MVwiLEUpLmF0dHIoXCJ5MVwiLGZ1bmN0aW9uKGEpe3JldHVybiBuKGEudmFsdWVzLlEyKX0pLmF0dHIoXCJ4MlwiLEYpLmF0dHIoXCJ5MlwiLGZ1bmN0aW9uKGEpe3JldHVybiBuKGEudmFsdWVzLlEyKX0pLGc9bS5jb3B5KCksaD1uLmNvcHkoKX0pLHYucmVuZGVyRW5kKFwibnYtYm94cGxvdCBpbW1lZGlhdGVcIiksYn12YXIgYyxkLGUsZixnLGgsaT17dG9wOjAscmlnaHQ6MCxib3R0b206MCxsZWZ0OjB9LGo9OTYwLGs9NTAwLGw9TWF0aC5mbG9vcigxZTQqTWF0aC5yYW5kb20oKSksbT1kMy5zY2FsZS5vcmRpbmFsKCksbj1kMy5zY2FsZS5saW5lYXIoKSxvPWZ1bmN0aW9uKGEpe3JldHVybiBhLnh9LHA9ZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0scT1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLHI9bnVsbCxzPWQzLmRpc3BhdGNoKFwiZWxlbWVudE1vdXNlb3ZlclwiLFwiZWxlbWVudE1vdXNlb3V0XCIsXCJlbGVtZW50TW91c2Vtb3ZlXCIsXCJyZW5kZXJFbmRcIiksdD0yNTAsdT1udWxsLHY9YS51dGlscy5yZW5kZXJXYXRjaChzLHQpO3JldHVybiBiLmRpc3BhdGNoPXMsYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gan0sc2V0OmZ1bmN0aW9uKGEpe2o9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LHNldDpmdW5jdGlvbihhKXtrPWF9fSxtYXhCb3hXaWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbihhKXt1PWF9fSx4OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKGEpe289YX19LHk6e2dldDpmdW5jdGlvbigpe3JldHVybiBwfSxzZXQ6ZnVuY3Rpb24oYSl7cD1hfX0seFNjYWxlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sc2V0OmZ1bmN0aW9uKGEpe209YX19LHlTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihhKXtuPWF9fSx4RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY30sc2V0OmZ1bmN0aW9uKGEpe2M9YX19LHlEb21haW46e2dldDpmdW5jdGlvbigpe3JldHVybiBkfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1hfX0seFJhbmdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKGEpe2U9YX19LHlSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmPWF9fSxpZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsPWF9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oYSl7aS50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6aS50b3AsaS5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6aS5yaWdodCxpLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTppLmJvdHRvbSxpLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDppLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihiKXtxPWEudXRpbHMuZ2V0Q29sb3IoYil9fSxkdXJhdGlvbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWEsdi5yZXNldCh0KX19fSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5ib3hQbG90Q2hhcnQ9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGspe3JldHVybiB0LnJlc2V0KCksdC5tb2RlbHMoZSksbCYmdC5tb2RlbHMoZiksbSYmdC5tb2RlbHMoZyksay5lYWNoKGZ1bmN0aW9uKGspe3ZhciBwPWQzLnNlbGVjdCh0aGlzKTthLnV0aWxzLmluaXRTVkcocCk7dmFyIHQ9KGl8fHBhcnNlSW50KHAuc3R5bGUoXCJ3aWR0aFwiKSl8fDk2MCktaC5sZWZ0LWgucmlnaHQsdT0oanx8cGFyc2VJbnQocC5zdHlsZShcImhlaWdodFwiKSl8fDQwMCktaC50b3AtaC5ib3R0b207aWYoYi51cGRhdGU9ZnVuY3Rpb24oKXtyLmJlZm9yZVVwZGF0ZSgpLHAudHJhbnNpdGlvbigpLmR1cmF0aW9uKHMpLmNhbGwoYil9LGIuY29udGFpbmVyPXRoaXMsIShrJiZrLmxlbmd0aCYmay5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLmhhc093blByb3BlcnR5KFwiUTFcIikmJmEudmFsdWVzLmhhc093blByb3BlcnR5KFwiUTJcIikmJmEudmFsdWVzLmhhc093blByb3BlcnR5KFwiUTNcIil9KS5sZW5ndGgpKXt2YXIgdj1wLnNlbGVjdEFsbChcIi5udi1ub0RhdGFcIikuZGF0YShbcV0pO3JldHVybiB2LmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtbm9EYXRhXCIpLmF0dHIoXCJkeVwiLFwiLS43ZW1cIikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLFwibWlkZGxlXCIpLHYuYXR0cihcInhcIixoLmxlZnQrdC8yKS5hdHRyKFwieVwiLGgudG9wK3UvMikudGV4dChmdW5jdGlvbihhKXtyZXR1cm4gYX0pLGJ9cC5zZWxlY3RBbGwoXCIubnYtbm9EYXRhXCIpLnJlbW92ZSgpLGM9ZS54U2NhbGUoKSxkPWUueVNjYWxlKCkuY2xhbXAoITApO3ZhciB3PXAuc2VsZWN0QWxsKFwiZy5udi13cmFwLm52LWJveFBsb3RXaXRoQXhlc1wiKS5kYXRhKFtrXSkseD13LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1ib3hQbG90V2l0aEF4ZXNcIikuYXBwZW5kKFwiZ1wiKSx5PXguYXBwZW5kKFwiZGVmc1wiKSx6PXcuc2VsZWN0KFwiZ1wiKTtcbnguYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXggbnYtYXhpc1wiKSx4LmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi15IG52LWF4aXNcIikuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXplcm9MaW5lXCIpLmFwcGVuZChcImxpbmVcIikseC5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtYmFyc1dyYXBcIiksei5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIraC5sZWZ0K1wiLFwiK2gudG9wK1wiKVwiKSxuJiZ6LnNlbGVjdChcIi5udi15Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK3QrXCIsMClcIiksZS53aWR0aCh0KS5oZWlnaHQodSk7dmFyIEE9ei5zZWxlY3QoXCIubnYtYmFyc1dyYXBcIikuZGF0dW0oay5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KSk7aWYoQS50cmFuc2l0aW9uKCkuY2FsbChlKSx5LmFwcGVuZChcImNsaXBQYXRoXCIpLmF0dHIoXCJpZFwiLFwibnYteC1sYWJlbC1jbGlwLVwiK2UuaWQoKSkuYXBwZW5kKFwicmVjdFwiKSx6LnNlbGVjdChcIiNudi14LWxhYmVsLWNsaXAtXCIrZS5pZCgpK1wiIHJlY3RcIikuYXR0cihcIndpZHRoXCIsYy5yYW5nZUJhbmQoKSoobz8yOjEpKS5hdHRyKFwiaGVpZ2h0XCIsMTYpLmF0dHIoXCJ4XCIsLWMucmFuZ2VCYW5kKCkvKG8/MToyKSksbCl7Zi5zY2FsZShjKS50aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1godC8xMDAsaykpLnRpY2tTaXplKC11LDApLHouc2VsZWN0KFwiLm52LXgubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIitkLnJhbmdlKClbMF0rXCIpXCIpLHouc2VsZWN0KFwiLm52LXgubnYtYXhpc1wiKS5jYWxsKGYpO3ZhciBCPXouc2VsZWN0KFwiLm52LXgubnYtYXhpc1wiKS5zZWxlY3RBbGwoXCJnXCIpO28mJkIuc2VsZWN0QWxsKFwidGV4dFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYSxiLGMpe3JldHVyblwidHJhbnNsYXRlKDAsXCIrKGMlMj09MD9cIjVcIjpcIjE3XCIpK1wiKVwifSl9bSYmKGcuc2NhbGUoZCkudGlja3MoTWF0aC5mbG9vcih1LzM2KSkudGlja1NpemUoLXQsMCksei5zZWxlY3QoXCIubnYteS5udi1heGlzXCIpLmNhbGwoZykpLHouc2VsZWN0KFwiLm52LXplcm9MaW5lIGxpbmVcIikuYXR0cihcIngxXCIsMCkuYXR0cihcIngyXCIsdCkuYXR0cihcInkxXCIsZCgwKSkuYXR0cihcInkyXCIsZCgwKSl9KSx0LnJlbmRlckVuZChcIm52LWJveHBsb3QgY2hhcnQgaW1tZWRpYXRlXCIpLGJ9dmFyIGMsZCxlPWEubW9kZWxzLmJveFBsb3QoKSxmPWEubW9kZWxzLmF4aXMoKSxnPWEubW9kZWxzLmF4aXMoKSxoPXt0b3A6MTUscmlnaHQ6MTAsYm90dG9tOjUwLGxlZnQ6NjB9LGk9bnVsbCxqPW51bGwsaz1hLnV0aWxzLmdldENvbG9yKCksbD0hMCxtPSEwLG49ITEsbz0hMSxwPWEubW9kZWxzLnRvb2x0aXAoKSxxPVwiTm8gRGF0YSBBdmFpbGFibGUuXCIscj1kMy5kaXNwYXRjaChcInRvb2x0aXBTaG93XCIsXCJ0b29sdGlwSGlkZVwiLFwiYmVmb3JlVXBkYXRlXCIsXCJyZW5kZXJFbmRcIikscz0yNTA7Zi5vcmllbnQoXCJib3R0b21cIikuc2hvd01heE1pbighMSkudGlja0Zvcm1hdChmdW5jdGlvbihhKXtyZXR1cm4gYX0pLGcub3JpZW50KG4/XCJyaWdodFwiOlwibGVmdFwiKS50aWNrRm9ybWF0KGQzLmZvcm1hdChcIiwuMWZcIikpLHAuZHVyYXRpb24oMCk7dmFyIHQ9YS51dGlscy5yZW5kZXJXYXRjaChyLHMpO3JldHVybiBlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7cC5kYXRhKGEpLmhpZGRlbighMSl9KSxlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3V0LnRvb2x0aXBcIixmdW5jdGlvbihhKXtwLmRhdGEoYSkuaGlkZGVuKCEwKX0pLGUuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2Vtb3ZlLnRvb2x0aXBcIixmdW5jdGlvbigpe3AucG9zaXRpb24oe3RvcDpkMy5ldmVudC5wYWdlWSxsZWZ0OmQzLmV2ZW50LnBhZ2VYfSkoKX0pLGIuZGlzcGF0Y2g9cixiLmJveHBsb3Q9ZSxiLnhBeGlzPWYsYi55QXhpcz1nLGIudG9vbHRpcD1wLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihhKXtpPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYSl7aj1hfX0sc3RhZ2dlckxhYmVsczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWF9fSxzaG93WEF4aXM6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0sc2hvd1lBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sc2V0OmZ1bmN0aW9uKGEpe209YX19LHRvb2x0aXBzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdG9vbHRpcHN9LHNldDpmdW5jdGlvbihhKXt0b29sdGlwcz1hfX0sdG9vbHRpcENvbnRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBwfSxzZXQ6ZnVuY3Rpb24oYSl7cD1hfX0sbm9EYXRhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcX0sc2V0OmZ1bmN0aW9uKGEpe3E9YX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpoLnRvcCxoLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpoLnJpZ2h0LGguYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmguYm90dG9tLGgubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmgubGVmdH19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YSx0LnJlc2V0KHMpLGUuZHVyYXRpb24ocyksZi5kdXJhdGlvbihzKSxnLmR1cmF0aW9uKHMpfX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYil7az1hLnV0aWxzLmdldENvbG9yKGIpLGUuY29sb3Ioayl9fSxyaWdodEFsaWduWUF4aXM6e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1hLGcub3JpZW50KGE/XCJyaWdodFwiOlwibGVmdFwiKX19fSksYS51dGlscy5pbmhlcml0T3B0aW9ucyhiLGUpLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMuYnVsbGV0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihkKXtyZXR1cm4gZC5lYWNoKGZ1bmN0aW9uKGIsZCl7dmFyIHA9bS1jLmxlZnQtYy5yaWdodCxzPW4tYy50b3AtYy5ib3R0b207bz1kMy5zZWxlY3QodGhpcyksYS51dGlscy5pbml0U1ZHKG8pO3t2YXIgdD1mLmNhbGwodGhpcyxiLGQpLnNsaWNlKCkuc29ydChkMy5kZXNjZW5kaW5nKSx1PWcuY2FsbCh0aGlzLGIsZCkuc2xpY2UoKS5zb3J0KGQzLmRlc2NlbmRpbmcpLHY9aC5jYWxsKHRoaXMsYixkKS5zbGljZSgpLnNvcnQoZDMuZGVzY2VuZGluZyksdz1pLmNhbGwodGhpcyxiLGQpLnNsaWNlKCkseD1qLmNhbGwodGhpcyxiLGQpLnNsaWNlKCkseT1rLmNhbGwodGhpcyxiLGQpLnNsaWNlKCksej1kMy5zY2FsZS5saW5lYXIoKS5kb21haW4oZDMuZXh0ZW50KGQzLm1lcmdlKFtsLHRdKSkpLnJhbmdlKGU/W3AsMF06WzAscF0pO3RoaXMuX19jaGFydF9ffHxkMy5zY2FsZS5saW5lYXIoKS5kb21haW4oWzAsMS8wXSkucmFuZ2Uoei5yYW5nZSgpKX10aGlzLl9fY2hhcnRfXz16O3ZhciBBPWQzLm1pbih0KSxCPWQzLm1heCh0KSxDPXRbMV0sRD1vLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1idWxsZXRcIikuZGF0YShbYl0pLEU9RC5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtYnVsbGV0XCIpLEY9RS5hcHBlbmQoXCJnXCIpLEc9RC5zZWxlY3QoXCJnXCIpO0YuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXJhbmdlIG52LXJhbmdlTWF4XCIpLEYuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXJhbmdlIG52LXJhbmdlQXZnXCIpLEYuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXJhbmdlIG52LXJhbmdlTWluXCIpLEYuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LW1lYXN1cmVcIiksRC5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrYy5sZWZ0K1wiLFwiK2MudG9wK1wiKVwiKTt2YXIgSD1mdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5hYnMoeihhKS16KDApKX0sST1mdW5jdGlvbihhKXtyZXR1cm4geigwPmE/YTowKX07Ry5zZWxlY3QoXCJyZWN0Lm52LXJhbmdlTWF4XCIpLmF0dHIoXCJoZWlnaHRcIixzKS5hdHRyKFwid2lkdGhcIixIKEI+MD9COkEpKS5hdHRyKFwieFwiLEkoQj4wP0I6QSkpLmRhdHVtKEI+MD9COkEpLEcuc2VsZWN0KFwicmVjdC5udi1yYW5nZUF2Z1wiKS5hdHRyKFwiaGVpZ2h0XCIscykuYXR0cihcIndpZHRoXCIsSChDKSkuYXR0cihcInhcIixJKEMpKS5kYXR1bShDKSxHLnNlbGVjdChcInJlY3QubnYtcmFuZ2VNaW5cIikuYXR0cihcImhlaWdodFwiLHMpLmF0dHIoXCJ3aWR0aFwiLEgoQikpLmF0dHIoXCJ4XCIsSShCKSkuYXR0cihcIndpZHRoXCIsSChCPjA/QTpCKSkuYXR0cihcInhcIixJKEI+MD9BOkIpKS5kYXR1bShCPjA/QTpCKSxHLnNlbGVjdChcInJlY3QubnYtbWVhc3VyZVwiKS5zdHlsZShcImZpbGxcIixxKS5hdHRyKFwiaGVpZ2h0XCIscy8zKS5hdHRyKFwieVwiLHMvMykuYXR0cihcIndpZHRoXCIsMD52P3ooMCkteih2WzBdKTp6KHZbMF0pLXooMCkpLmF0dHIoXCJ4XCIsSSh2KSkub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbigpe3IuZWxlbWVudE1vdXNlb3Zlcih7dmFsdWU6dlswXSxsYWJlbDp5WzBdfHxcIkN1cnJlbnRcIixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KS5vbihcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKCl7ci5lbGVtZW50TW91c2Vtb3ZlKHt2YWx1ZTp2WzBdLGxhYmVsOnlbMF18fFwiQ3VycmVudFwiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbigpe3IuZWxlbWVudE1vdXNlb3V0KHt2YWx1ZTp2WzBdLGxhYmVsOnlbMF18fFwiQ3VycmVudFwiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pO3ZhciBKPXMvNixLPXUubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJue3ZhbHVlOmEsbGFiZWw6eFtiXX19KTtGLnNlbGVjdEFsbChcInBhdGgubnYtbWFya2VyVHJpYW5nbGVcIikuZGF0YShLKS5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsXCJudi1tYXJrZXJUcmlhbmdsZVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYSl7cmV0dXJuXCJ0cmFuc2xhdGUoXCIreihhLnZhbHVlKStcIixcIitzLzIrXCIpXCJ9KS5hdHRyKFwiZFwiLFwiTTAsXCIrSitcIkxcIitKK1wiLFwiKy1KK1wiIFwiKy1KK1wiLFwiKy1KK1wiWlwiKS5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGEpe3IuZWxlbWVudE1vdXNlb3Zlcih7dmFsdWU6YS52YWx1ZSxsYWJlbDphLmxhYmVsfHxcIlByZXZpb3VzXCIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKSxwb3M6W3ooYS52YWx1ZSkscy8yXX0pfSkub24oXCJtb3VzZW1vdmVcIixmdW5jdGlvbihhKXtyLmVsZW1lbnRNb3VzZW1vdmUoe3ZhbHVlOmEudmFsdWUsbGFiZWw6YS5sYWJlbHx8XCJQcmV2aW91c1wiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhKXtyLmVsZW1lbnRNb3VzZW91dCh7dmFsdWU6YS52YWx1ZSxsYWJlbDphLmxhYmVsfHxcIlByZXZpb3VzXCIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pfSksRC5zZWxlY3RBbGwoXCIubnYtcmFuZ2VcIikub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihhLGIpe3ZhciBjPXdbYl18fChiPzE9PWI/XCJNZWFuXCI6XCJNaW5pbXVtXCI6XCJNYXhpbXVtXCIpO3IuZWxlbWVudE1vdXNlb3Zlcih7dmFsdWU6YSxsYWJlbDpjLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2Vtb3ZlXCIsZnVuY3Rpb24oKXtyLmVsZW1lbnRNb3VzZW1vdmUoe3ZhbHVlOnZbMF0sbGFiZWw6eVswXXx8XCJQcmV2aW91c1wiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe3ZhciBjPXdbYl18fChiPzE9PWI/XCJNZWFuXCI6XCJNaW5pbXVtXCI6XCJNYXhpbXVtXCIpO3IuZWxlbWVudE1vdXNlb3V0KHt2YWx1ZTphLGxhYmVsOmMsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pfSl9KSxifXZhciBjPXt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0sZD1cImxlZnRcIixlPSExLGY9ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmFuZ2VzfSxnPWZ1bmN0aW9uKGEpe3JldHVybiBhLm1hcmtlcnM/YS5tYXJrZXJzOlswXX0saD1mdW5jdGlvbihhKXtyZXR1cm4gYS5tZWFzdXJlc30saT1mdW5jdGlvbihhKXtyZXR1cm4gYS5yYW5nZUxhYmVscz9hLnJhbmdlTGFiZWxzOltdfSxqPWZ1bmN0aW9uKGEpe3JldHVybiBhLm1hcmtlckxhYmVscz9hLm1hcmtlckxhYmVsczpbXX0saz1mdW5jdGlvbihhKXtyZXR1cm4gYS5tZWFzdXJlTGFiZWxzP2EubWVhc3VyZUxhYmVsczpbXX0sbD1bMF0sbT0zODAsbj0zMCxvPW51bGwscD1udWxsLHE9YS51dGlscy5nZXRDb2xvcihbXCIjMWY3N2I0XCJdKSxyPWQzLmRpc3BhdGNoKFwiZWxlbWVudE1vdXNlb3ZlclwiLFwiZWxlbWVudE1vdXNlb3V0XCIsXCJlbGVtZW50TW91c2Vtb3ZlXCIpO3JldHVybiBiLmRpc3BhdGNoPXIsYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3Jhbmdlczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmPWF9fSxtYXJrZXJzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKGEpe2c9YX19LG1lYXN1cmVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEpe2g9YX19LGZvcmNlWDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsPWF9fSx3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1hfX0sdGlja0Zvcm1hdDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihhKXtwPWF9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24oYSl7Yy50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6Yy50b3AsYy5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6Yy5yaWdodCxjLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTpjLmJvdHRvbSxjLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpjLmxlZnR9fSxvcmllbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBkfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1hLGU9XCJyaWdodFwiPT1kfHxcImJvdHRvbVwiPT1kfX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiBxfSxzZXQ6ZnVuY3Rpb24oYil7cT1hLnV0aWxzLmdldENvbG9yKGIpfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLmJ1bGxldENoYXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihkKXtyZXR1cm4gZC5lYWNoKGZ1bmN0aW9uKGUsbyl7dmFyIHA9ZDMuc2VsZWN0KHRoaXMpO2EudXRpbHMuaW5pdFNWRyhwKTt2YXIgcT1hLnV0aWxzLmF2YWlsYWJsZVdpZHRoKGsscCxnKSxyPWwtZy50b3AtZy5ib3R0b207aWYoYi51cGRhdGU9ZnVuY3Rpb24oKXtiKGQpfSxiLmNvbnRhaW5lcj10aGlzLCFlfHwhaC5jYWxsKHRoaXMsZSxvKSlyZXR1cm4gYS51dGlscy5ub0RhdGEoYixwKSxiO3Auc2VsZWN0QWxsKFwiLm52LW5vRGF0YVwiKS5yZW1vdmUoKTt2YXIgcz1oLmNhbGwodGhpcyxlLG8pLnNsaWNlKCkuc29ydChkMy5kZXNjZW5kaW5nKSx0PWkuY2FsbCh0aGlzLGUsbykuc2xpY2UoKS5zb3J0KGQzLmRlc2NlbmRpbmcpLHU9ai5jYWxsKHRoaXMsZSxvKS5zbGljZSgpLnNvcnQoZDMuZGVzY2VuZGluZyksdj1wLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1idWxsZXRDaGFydFwiKS5kYXRhKFtlXSksdz12LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1idWxsZXRDaGFydFwiKSx4PXcuYXBwZW5kKFwiZ1wiKSx5PXYuc2VsZWN0KFwiZ1wiKTt4LmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1idWxsZXRXcmFwXCIpLHguYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXRpdGxlc1wiKSx2LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitnLmxlZnQrXCIsXCIrZy50b3ArXCIpXCIpO3ZhciB6PWQzLnNjYWxlLmxpbmVhcigpLmRvbWFpbihbMCxNYXRoLm1heChzWzBdLHRbMF0sdVswXSldKS5yYW5nZShmP1txLDBdOlswLHFdKSxBPXRoaXMuX19jaGFydF9ffHxkMy5zY2FsZS5saW5lYXIoKS5kb21haW4oWzAsMS8wXSkucmFuZ2Uoei5yYW5nZSgpKTt0aGlzLl9fY2hhcnRfXz16O3ZhciBCPXguc2VsZWN0KFwiLm52LXRpdGxlc1wiKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLFwiZW5kXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgtNixcIisobC1nLnRvcC1nLmJvdHRvbSkvMitcIilcIik7Qi5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtdGl0bGVcIikudGV4dChmdW5jdGlvbihhKXtyZXR1cm4gYS50aXRsZX0pLEIuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXN1YnRpdGxlXCIpLmF0dHIoXCJkeVwiLFwiMWVtXCIpLnRleHQoZnVuY3Rpb24oYSl7cmV0dXJuIGEuc3VidGl0bGV9KSxjLndpZHRoKHEpLmhlaWdodChyKTt2YXIgQz15LnNlbGVjdChcIi5udi1idWxsZXRXcmFwXCIpO2QzLnRyYW5zaXRpb24oQykuY2FsbChjKTt2YXIgRD1tfHx6LnRpY2tGb3JtYXQocS8xMDApLEU9eS5zZWxlY3RBbGwoXCJnLm52LXRpY2tcIikuZGF0YSh6LnRpY2tzKG4/bjpxLzUwKSxmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy50ZXh0Q29udGVudHx8RChhKX0pLEY9RS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi10aWNrXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhKXtyZXR1cm5cInRyYW5zbGF0ZShcIitBKGEpK1wiLDApXCJ9KS5zdHlsZShcIm9wYWNpdHlcIiwxZS02KTtGLmFwcGVuZChcImxpbmVcIikuYXR0cihcInkxXCIscikuYXR0cihcInkyXCIsNypyLzYpLEYuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwidGV4dC1hbmNob3JcIixcIm1pZGRsZVwiKS5hdHRyKFwiZHlcIixcIjFlbVwiKS5hdHRyKFwieVwiLDcqci82KS50ZXh0KEQpO3ZhciBHPWQzLnRyYW5zaXRpb24oRSkuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEpe3JldHVyblwidHJhbnNsYXRlKFwiK3ooYSkrXCIsMClcIn0pLnN0eWxlKFwib3BhY2l0eVwiLDEpO0cuc2VsZWN0KFwibGluZVwiKS5hdHRyKFwieTFcIixyKS5hdHRyKFwieTJcIiw3KnIvNiksRy5zZWxlY3QoXCJ0ZXh0XCIpLmF0dHIoXCJ5XCIsNypyLzYpLGQzLnRyYW5zaXRpb24oRS5leGl0KCkpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhKXtyZXR1cm5cInRyYW5zbGF0ZShcIit6KGEpK1wiLDApXCJ9KS5zdHlsZShcIm9wYWNpdHlcIiwxZS02KS5yZW1vdmUoKX0pLGQzLnRpbWVyLmZsdXNoKCksYn12YXIgYz1hLm1vZGVscy5idWxsZXQoKSxkPWEubW9kZWxzLnRvb2x0aXAoKSxlPVwibGVmdFwiLGY9ITEsZz17dG9wOjUscmlnaHQ6NDAsYm90dG9tOjIwLGxlZnQ6MTIwfSxoPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJhbmdlc30saT1mdW5jdGlvbihhKXtyZXR1cm4gYS5tYXJrZXJzP2EubWFya2VyczpbMF19LGo9ZnVuY3Rpb24oYSl7cmV0dXJuIGEubWVhc3VyZXN9LGs9bnVsbCxsPTU1LG09bnVsbCxuPW51bGwsbz1udWxsLHA9ZDMuZGlzcGF0Y2goXCJ0b29sdGlwU2hvd1wiLFwidG9vbHRpcEhpZGVcIik7cmV0dXJuIGQuZHVyYXRpb24oMCkuaGVhZGVyRW5hYmxlZCghMSksYy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW92ZXIudG9vbHRpcFwiLGZ1bmN0aW9uKGEpe2Euc2VyaWVzPXtrZXk6YS5sYWJlbCx2YWx1ZTphLnZhbHVlLGNvbG9yOmEuY29sb3J9LGQuZGF0YShhKS5oaWRkZW4oITEpfSksYy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC50b29sdGlwXCIsZnVuY3Rpb24oKXtkLmhpZGRlbighMCl9KSxjLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlbW92ZS50b29sdGlwXCIsZnVuY3Rpb24oKXtkLnBvc2l0aW9uKHt0b3A6ZDMuZXZlbnQucGFnZVksbGVmdDpkMy5ldmVudC5wYWdlWH0pKCl9KSxiLmJ1bGxldD1jLGIuZGlzcGF0Y2g9cCxiLnRvb2x0aXA9ZCxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7cmFuZ2VzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEpe2g9YX19LG1hcmtlcnM6e2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oYSl7aT1hfX0sbWVhc3VyZXM6e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYSl7aj1hfX0sd2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKGEpe2w9YX19LHRpY2tGb3JtYXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0sdGlja3M6e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1hfX0sbm9EYXRhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKGEpe289YX19LHRvb2x0aXBzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZC5lbmFibGVkKCl9LHNldDpmdW5jdGlvbihiKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwc1wiLFwidXNlIGNoYXJ0LnRvb2x0aXAuZW5hYmxlZCgpIGluc3RlYWRcIiksZC5lbmFibGVkKCEhYil9fSx0b29sdGlwQ29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGQuY29udGVudEdlbmVyYXRvcigpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcENvbnRlbnRcIixcInVzZSBjaGFydC50b29sdGlwLmNvbnRlbnRHZW5lcmF0b3IoKSBpbnN0ZWFkXCIpLGQuY29udGVudEdlbmVyYXRvcihiKX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldDpmdW5jdGlvbihhKXtnLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpnLnRvcCxnLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpnLnJpZ2h0LGcuYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmcuYm90dG9tLGcubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmcubGVmdH19LG9yaWVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbihhKXtlPWEsZj1cInJpZ2h0XCI9PWV8fFwiYm90dG9tXCI9PWV9fX0pLGEudXRpbHMuaW5oZXJpdE9wdGlvbnMoYixjKSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLmNhbmRsZXN0aWNrQmFyPWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYih4KXtyZXR1cm4geC5lYWNoKGZ1bmN0aW9uKGIpe2M9ZDMuc2VsZWN0KHRoaXMpO3ZhciB4PWEudXRpbHMuYXZhaWxhYmxlV2lkdGgoaSxjLGgpLHk9YS51dGlscy5hdmFpbGFibGVIZWlnaHQoaixjLGgpO2EudXRpbHMuaW5pdFNWRyhjKTt2YXIgQT14L2JbMF0udmFsdWVzLmxlbmd0aCouNDU7bC5kb21haW4oZHx8ZDMuZXh0ZW50KGJbMF0udmFsdWVzLm1hcChuKS5jb25jYXQodCkpKSxsLnJhbmdlKHY/Znx8Wy41KngvYlswXS52YWx1ZXMubGVuZ3RoLHgqKGJbMF0udmFsdWVzLmxlbmd0aC0uNSkvYlswXS52YWx1ZXMubGVuZ3RoXTpmfHxbNStBLzIseC1BLzItNV0pLG0uZG9tYWluKGV8fFtkMy5taW4oYlswXS52YWx1ZXMubWFwKHMpLmNvbmNhdCh1KSksZDMubWF4KGJbMF0udmFsdWVzLm1hcChyKS5jb25jYXQodSkpXSkucmFuZ2UoZ3x8W3ksMF0pLGwuZG9tYWluKClbMF09PT1sLmRvbWFpbigpWzFdJiZsLmRvbWFpbihsLmRvbWFpbigpWzBdP1tsLmRvbWFpbigpWzBdLS4wMSpsLmRvbWFpbigpWzBdLGwuZG9tYWluKClbMV0rLjAxKmwuZG9tYWluKClbMV1dOlstMSwxXSksbS5kb21haW4oKVswXT09PW0uZG9tYWluKClbMV0mJm0uZG9tYWluKG0uZG9tYWluKClbMF0/W20uZG9tYWluKClbMF0rLjAxKm0uZG9tYWluKClbMF0sbS5kb21haW4oKVsxXS0uMDEqbS5kb21haW4oKVsxXV06Wy0xLDFdKTt2YXIgQj1kMy5zZWxlY3QodGhpcykuc2VsZWN0QWxsKFwiZy5udi13cmFwLm52LWNhbmRsZXN0aWNrQmFyXCIpLmRhdGEoW2JbMF0udmFsdWVzXSksQz1CLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1jYW5kbGVzdGlja0JhclwiKSxEPUMuYXBwZW5kKFwiZGVmc1wiKSxFPUMuYXBwZW5kKFwiZ1wiKSxGPUIuc2VsZWN0KFwiZ1wiKTtFLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi10aWNrc1wiKSxCLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitoLmxlZnQrXCIsXCIraC50b3ArXCIpXCIpLGMub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEsYil7ei5jaGFydENsaWNrKHtkYXRhOmEsaW5kZXg6Yixwb3M6ZDMuZXZlbnQsaWQ6a30pfSksRC5hcHBlbmQoXCJjbGlwUGF0aFwiKS5hdHRyKFwiaWRcIixcIm52LWNoYXJ0LWNsaXAtcGF0aC1cIitrKS5hcHBlbmQoXCJyZWN0XCIpLEIuc2VsZWN0KFwiI252LWNoYXJ0LWNsaXAtcGF0aC1cIitrK1wiIHJlY3RcIikuYXR0cihcIndpZHRoXCIseCkuYXR0cihcImhlaWdodFwiLHkpLEYuYXR0cihcImNsaXAtcGF0aFwiLHc/XCJ1cmwoI252LWNoYXJ0LWNsaXAtcGF0aC1cIitrK1wiKVwiOlwiXCIpO3ZhciBHPUIuc2VsZWN0KFwiLm52LXRpY2tzXCIpLnNlbGVjdEFsbChcIi5udi10aWNrXCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtHLmV4aXQoKS5yZW1vdmUoKTt7dmFyIEg9Ry5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oYSxiLGMpe3JldHVybihwKGEsYik+cShhLGIpP1wibnYtdGljayBuZWdhdGl2ZVwiOlwibnYtdGljayBwb3NpdGl2ZVwiKStcIiBudi10aWNrLVwiK2MrXCItXCIrYn0pO0guYXBwZW5kKFwibGluZVwiKS5hdHRyKFwiY2xhc3NcIixcIm52LWNhbmRsZXN0aWNrLWxpbmVzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiK2wobihhLGIpKStcIiwwKVwifSkuYXR0cihcIngxXCIsMCkuYXR0cihcInkxXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gbShyKGEsYikpfSkuYXR0cihcIngyXCIsMCkuYXR0cihcInkyXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gbShzKGEsYikpfSksSC5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtY2FuZGxlc3RpY2stcmVjdHMgbnYtYmFyc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRyYW5zbGF0ZShcIisobChuKGEsYikpLUEvMikrXCIsXCIrKG0obyhhLGIpKS0ocChhLGIpPnEoYSxiKT9tKHEoYSxiKSktbShwKGEsYikpOjApKStcIilcIn0pLmF0dHIoXCJ4XCIsMCkuYXR0cihcInlcIiwwKS5hdHRyKFwid2lkdGhcIixBKS5hdHRyKFwiaGVpZ2h0XCIsZnVuY3Rpb24oYSxiKXt2YXIgYz1wKGEsYiksZD1xKGEsYik7cmV0dXJuIGM+ZD9tKGQpLW0oYyk6bShjKS1tKGQpfSl9Yy5zZWxlY3RBbGwoXCIubnYtY2FuZGxlc3RpY2stbGluZXNcIikudHJhbnNpdGlvbigpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiK2wobihhLGIpKStcIiwwKVwifSkuYXR0cihcIngxXCIsMCkuYXR0cihcInkxXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gbShyKGEsYikpfSkuYXR0cihcIngyXCIsMCkuYXR0cihcInkyXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gbShzKGEsYikpfSksYy5zZWxlY3RBbGwoXCIubnYtY2FuZGxlc3RpY2stcmVjdHNcIikudHJhbnNpdGlvbigpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiKyhsKG4oYSxiKSktQS8yKStcIixcIisobShvKGEsYikpLShwKGEsYik+cShhLGIpP20ocShhLGIpKS1tKHAoYSxiKSk6MCkpK1wiKVwifSkuYXR0cihcInhcIiwwKS5hdHRyKFwieVwiLDApLmF0dHIoXCJ3aWR0aFwiLEEpLmF0dHIoXCJoZWlnaHRcIixmdW5jdGlvbihhLGIpe3ZhciBjPXAoYSxiKSxkPXEoYSxiKTtyZXR1cm4gYz5kP20oZCktbShjKTptKGMpLW0oZCl9KX0pLGJ9dmFyIGMsZCxlLGYsZyxoPXt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0saT1udWxsLGo9bnVsbCxrPU1hdGguZmxvb3IoMWU0Kk1hdGgucmFuZG9tKCkpLGw9ZDMuc2NhbGUubGluZWFyKCksbT1kMy5zY2FsZS5saW5lYXIoKSxuPWZ1bmN0aW9uKGEpe3JldHVybiBhLnh9LG89ZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0scD1mdW5jdGlvbihhKXtyZXR1cm4gYS5vcGVufSxxPWZ1bmN0aW9uKGEpe3JldHVybiBhLmNsb3NlfSxyPWZ1bmN0aW9uKGEpe3JldHVybiBhLmhpZ2h9LHM9ZnVuY3Rpb24oYSl7cmV0dXJuIGEubG93fSx0PVtdLHU9W10sdj0hMSx3PSEwLHg9YS51dGlscy5kZWZhdWx0Q29sb3IoKSx5PSExLHo9ZDMuZGlzcGF0Y2goXCJ0b29sdGlwU2hvd1wiLFwidG9vbHRpcEhpZGVcIixcInN0YXRlQ2hhbmdlXCIsXCJjaGFuZ2VTdGF0ZVwiLFwicmVuZGVyRW5kXCIsXCJjaGFydENsaWNrXCIsXCJlbGVtZW50Q2xpY2tcIixcImVsZW1lbnREYmxDbGlja1wiLFwiZWxlbWVudE1vdXNlb3ZlclwiLFwiZWxlbWVudE1vdXNlb3V0XCIsXCJlbGVtZW50TW91c2Vtb3ZlXCIpO3JldHVybiBiLmhpZ2hsaWdodFBvaW50PWZ1bmN0aW9uKGEsZCl7Yi5jbGVhckhpZ2hsaWdodHMoKSxjLnNlbGVjdChcIi5udi1jYW5kbGVzdGlja0JhciAubnYtdGljay0wLVwiK2EpLmNsYXNzZWQoXCJob3ZlclwiLGQpfSxiLmNsZWFySGlnaGxpZ2h0cz1mdW5jdGlvbigpe2Muc2VsZWN0KFwiLm52LWNhbmRsZXN0aWNrQmFyIC5udi10aWNrLmhvdmVyXCIpLmNsYXNzZWQoXCJob3ZlclwiLCExKX0sYi5kaXNwYXRjaD16LGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihhKXtpPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYSl7aj1hfX0seFNjYWxlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKGEpe2w9YX19LHlTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSx4RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGEpe2Q9YX19LHlEb21haW46e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7ZT1hfX0seFJhbmdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0OmZ1bmN0aW9uKGEpe2Y9YX19LHlSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldDpmdW5jdGlvbihhKXtnPWF9fSxmb3JjZVg6e2dldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oYSl7dD1hfX0sZm9yY2VZOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc2V0OmZ1bmN0aW9uKGEpe3U9YX19LHBhZERhdGE6e2dldDpmdW5jdGlvbigpe3JldHVybiB2fSxzZXQ6ZnVuY3Rpb24oYSl7dj1hfX0sY2xpcEVkZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiB3fSxzZXQ6ZnVuY3Rpb24oYSl7dz1hfX0saWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1hfX0saW50ZXJhY3RpdmU6e2dldDpmdW5jdGlvbigpe3JldHVybiB5fSxzZXQ6ZnVuY3Rpb24oYSl7eT1hfX0seDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihhKXtuPWF9fSx5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKGEpe289YX19LG9wZW46e2dldDpmdW5jdGlvbigpe3JldHVybiBwKCl9LHNldDpmdW5jdGlvbihhKXtwPWF9fSxjbG9zZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHEoKX0sc2V0OmZ1bmN0aW9uKGEpe3E9YX19LGhpZ2g6e2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oYSl7cj1hfX0sbG93OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoLnRvcD12b2lkIDAhPWEudG9wP2EudG9wOmgudG9wLGgucmlnaHQ9dm9pZCAwIT1hLnJpZ2h0P2EucmlnaHQ6aC5yaWdodCxoLmJvdHRvbT12b2lkIDAhPWEuYm90dG9tP2EuYm90dG9tOmguYm90dG9tLGgubGVmdD12b2lkIDAhPWEubGVmdD9hLmxlZnQ6aC5sZWZ0fX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiB4fSxzZXQ6ZnVuY3Rpb24oYil7eD1hLnV0aWxzLmdldENvbG9yKGIpfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLmN1bXVsYXRpdmVMaW5lQ2hhcnQ9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGwpe3JldHVybiBILnJlc2V0KCksSC5tb2RlbHMoZiksciYmSC5tb2RlbHMoZykscyYmSC5tb2RlbHMoaCksbC5lYWNoKGZ1bmN0aW9uKGwpe2Z1bmN0aW9uIEEoKXtkMy5zZWxlY3QoYi5jb250YWluZXIpLnN0eWxlKFwiY3Vyc29yXCIsXCJldy1yZXNpemVcIil9ZnVuY3Rpb24gRSgpe0cueD1kMy5ldmVudC54LEcuaT1NYXRoLnJvdW5kKEYuaW52ZXJ0KEcueCkpLEsoKX1mdW5jdGlvbiBIKCl7ZDMuc2VsZWN0KGIuY29udGFpbmVyKS5zdHlsZShcImN1cnNvclwiLFwiYXV0b1wiKSx5LmluZGV4PUcuaSxDLnN0YXRlQ2hhbmdlKHkpfWZ1bmN0aW9uIEsoKXtiYi5kYXRhKFtHXSk7dmFyIGE9Yi5kdXJhdGlvbigpO2IuZHVyYXRpb24oMCksYi51cGRhdGUoKSxiLmR1cmF0aW9uKGEpfXZhciBMPWQzLnNlbGVjdCh0aGlzKTthLnV0aWxzLmluaXRTVkcoTCksTC5jbGFzc2VkKFwibnYtY2hhcnQtXCIreCwhMCk7dmFyIE09dGhpcyxOPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgobyxMLG0pLE89YS51dGlscy5hdmFpbGFibGVIZWlnaHQocCxMLG0pO2lmKGIudXBkYXRlPWZ1bmN0aW9uKCl7MD09PUQ/TC5jYWxsKGIpOkwudHJhbnNpdGlvbigpLmR1cmF0aW9uKEQpLmNhbGwoYil9LGIuY29udGFpbmVyPXRoaXMseS5zZXR0ZXIoSihsKSxiLnVwZGF0ZSkuZ2V0dGVyKEkobCkpLnVwZGF0ZSgpLHkuZGlzYWJsZWQ9bC5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuISFhLmRpc2FibGVkfSksIXope3ZhciBQO3o9e307Zm9yKFAgaW4geSl6W1BdPXlbUF1pbnN0YW5jZW9mIEFycmF5P3lbUF0uc2xpY2UoMCk6eVtQXX12YXIgUT1kMy5iZWhhdmlvci5kcmFnKCkub24oXCJkcmFnc3RhcnRcIixBKS5vbihcImRyYWdcIixFKS5vbihcImRyYWdlbmRcIixIKTtpZighKGwmJmwubGVuZ3RoJiZsLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXMubGVuZ3RofSkubGVuZ3RoKSlyZXR1cm4gYS51dGlscy5ub0RhdGEoYixMKSxiO2lmKEwuc2VsZWN0QWxsKFwiLm52LW5vRGF0YVwiKS5yZW1vdmUoKSxkPWYueFNjYWxlKCksZT1mLnlTY2FsZSgpLHcpZi55RG9tYWluKG51bGwpO2Vsc2V7dmFyIFI9bC5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KS5tYXAoZnVuY3Rpb24oYSl7dmFyIGI9ZDMuZXh0ZW50KGEudmFsdWVzLGYueSgpKTtyZXR1cm4gYlswXTwtLjk1JiYoYlswXT0tLjk1KSxbKGJbMF0tYlsxXSkvKDErYlsxXSksKGJbMV0tYlswXSkvKDErYlswXSldfSksUz1bZDMubWluKFIsZnVuY3Rpb24oYSl7cmV0dXJuIGFbMF19KSxkMy5tYXgoUixmdW5jdGlvbihhKXtyZXR1cm4gYVsxXX0pXTtmLnlEb21haW4oUyl9Ri5kb21haW4oWzAsbFswXS52YWx1ZXMubGVuZ3RoLTFdKS5yYW5nZShbMCxOXSkuY2xhbXAoITApO3ZhciBsPWMoRy5pLGwpLFQ9dj9cIm5vbmVcIjpcImFsbFwiLFU9TC5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtY3VtdWxhdGl2ZUxpbmVcIikuZGF0YShbbF0pLFY9VS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtY3VtdWxhdGl2ZUxpbmVcIikuYXBwZW5kKFwiZ1wiKSxXPVUuc2VsZWN0KFwiZ1wiKTtpZihWLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1pbnRlcmFjdGl2ZVwiKSxWLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi14IG52LWF4aXNcIikuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLFwibm9uZVwiKSxWLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi15IG52LWF4aXNcIiksVi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtYmFja2dyb3VuZFwiKSxWLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1saW5lc1dyYXBcIikuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLFQpLFYuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWF2Z0xpbmVzV3JhcFwiKS5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsXCJub25lXCIpLFYuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZFdyYXBcIiksVi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtY29udHJvbHNXcmFwXCIpLHEmJihpLndpZHRoKE4pLFcuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuZGF0dW0obCkuY2FsbChpKSxtLnRvcCE9aS5oZWlnaHQoKSYmKG0udG9wPWkuaGVpZ2h0KCksTz1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChwLEwsbSkpLFcuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrLW0udG9wK1wiKVwiKSksdSl7dmFyIFg9W3trZXk6XCJSZS1zY2FsZSB5LWF4aXNcIixkaXNhYmxlZDohd31dO2oud2lkdGgoMTQwKS5jb2xvcihbXCIjNDQ0XCIsXCIjNDQ0XCIsXCIjNDQ0XCJdKS5yaWdodEFsaWduKCExKS5tYXJnaW4oe3RvcDo1LHJpZ2h0OjAsYm90dG9tOjUsbGVmdDoyMH0pLFcuc2VsZWN0KFwiLm52LWNvbnRyb2xzV3JhcFwiKS5kYXR1bShYKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIistbS50b3ArXCIpXCIpLmNhbGwoail9VS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrbS5sZWZ0K1wiLFwiK20udG9wK1wiKVwiKSx0JiZXLnNlbGVjdChcIi5udi15Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK04rXCIsMClcIik7dmFyIFk9bC5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEudGVtcERpc2FibGVkfSk7VS5zZWxlY3QoXCIudGVtcERpc2FibGVkXCIpLnJlbW92ZSgpLFkubGVuZ3RoJiZVLmFwcGVuZChcInRleHRcIikuYXR0cihcImNsYXNzXCIsXCJ0ZW1wRGlzYWJsZWRcIikuYXR0cihcInhcIixOLzIpLmF0dHIoXCJ5XCIsXCItLjcxZW1cIikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLFwiZW5kXCIpLnRleHQoWS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEua2V5fSkuam9pbihcIiwgXCIpK1wiIHZhbHVlcyBjYW5ub3QgYmUgY2FsY3VsYXRlZCBmb3IgdGhpcyB0aW1lIHBlcmlvZC5cIiksdiYmKGsud2lkdGgoTikuaGVpZ2h0KE8pLm1hcmdpbih7bGVmdDptLmxlZnQsdG9wOm0udG9wfSkuc3ZnQ29udGFpbmVyKEwpLnhTY2FsZShkKSxVLnNlbGVjdChcIi5udi1pbnRlcmFjdGl2ZVwiKS5jYWxsKGspKSxWLnNlbGVjdChcIi5udi1iYWNrZ3JvdW5kXCIpLmFwcGVuZChcInJlY3RcIiksVy5zZWxlY3QoXCIubnYtYmFja2dyb3VuZCByZWN0XCIpLmF0dHIoXCJ3aWR0aFwiLE4pLmF0dHIoXCJoZWlnaHRcIixPKSxmLnkoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzcGxheS55fSkud2lkdGgoTikuaGVpZ2h0KE8pLmNvbG9yKGwubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuY29sb3J8fG4oYSxiKX0pLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiFsW2JdLmRpc2FibGVkJiYhbFtiXS50ZW1wRGlzYWJsZWR9KSk7dmFyIFo9Vy5zZWxlY3QoXCIubnYtbGluZXNXcmFwXCIpLmRhdHVtKGwuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkJiYhYS50ZW1wRGlzYWJsZWR9KSk7Wi5jYWxsKGYpLGwuZm9yRWFjaChmdW5jdGlvbihhLGIpe2Euc2VyaWVzSW5kZXg9Yn0pO3ZhciAkPWwuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkJiYhIUIoYSl9KSxfPVcuc2VsZWN0KFwiLm52LWF2Z0xpbmVzV3JhcFwiKS5zZWxlY3RBbGwoXCJsaW5lXCIpLmRhdGEoJCxmdW5jdGlvbihhKXtyZXR1cm4gYS5rZXl9KSxhYj1mdW5jdGlvbihhKXt2YXIgYj1lKEIoYSkpO3JldHVybiAwPmI/MDpiPk8/TzpifTtfLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKS5zdHlsZShcInN0cm9rZS13aWR0aFwiLDIpLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLFwiMTAsMTBcIikuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhKXtyZXR1cm4gZi5jb2xvcigpKGEsYS5zZXJpZXNJbmRleCl9KS5hdHRyKFwieDFcIiwwKS5hdHRyKFwieDJcIixOKS5hdHRyKFwieTFcIixhYikuYXR0cihcInkyXCIsYWIpLF8uc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLGZ1bmN0aW9uKGEpe3ZhciBiPWUoQihhKSk7cmV0dXJuIDA+Ynx8Yj5PPzA6MX0pLmF0dHIoXCJ4MVwiLDApLmF0dHIoXCJ4MlwiLE4pLmF0dHIoXCJ5MVwiLGFiKS5hdHRyKFwieTJcIixhYiksXy5leGl0KCkucmVtb3ZlKCk7dmFyIGJiPVouc2VsZWN0QWxsKFwiLm52LWluZGV4TGluZVwiKS5kYXRhKFtHXSk7YmIuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtaW5kZXhMaW5lXCIpLmF0dHIoXCJ3aWR0aFwiLDMpLmF0dHIoXCJ4XCIsLTIpLmF0dHIoXCJmaWxsXCIsXCJyZWRcIikuYXR0cihcImZpbGwtb3BhY2l0eVwiLC41KS5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsXCJhbGxcIikuY2FsbChRKSxiYi5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYSl7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrRihhLmkpK1wiLDApXCJ9KS5hdHRyKFwiaGVpZ2h0XCIsTyksciYmKGcuc2NhbGUoZCkuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWChOLzcwLGwpKS50aWNrU2l6ZSgtTywwKSxXLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrZS5yYW5nZSgpWzBdK1wiKVwiKSxXLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuY2FsbChnKSkscyYmKGguc2NhbGUoZSkuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWShPLzM2LGwpKS50aWNrU2l6ZSgtTiwwKSxXLnNlbGVjdChcIi5udi15Lm52LWF4aXNcIikuY2FsbChoKSksVy5zZWxlY3QoXCIubnYtYmFja2dyb3VuZCByZWN0XCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe0cueD1kMy5tb3VzZSh0aGlzKVswXSxHLmk9TWF0aC5yb3VuZChGLmludmVydChHLngpKSx5LmluZGV4PUcuaSxDLnN0YXRlQ2hhbmdlKHkpLEsoKX0pLGYuZGlzcGF0Y2gub24oXCJlbGVtZW50Q2xpY2tcIixmdW5jdGlvbihhKXtHLmk9YS5wb2ludEluZGV4LEcueD1GKEcuaSkseS5pbmRleD1HLmksQy5zdGF0ZUNoYW5nZSh5KSxLKCl9KSxqLmRpc3BhdGNoLm9uKFwibGVnZW5kQ2xpY2tcIixmdW5jdGlvbihhKXthLmRpc2FibGVkPSFhLmRpc2FibGVkLHc9IWEuZGlzYWJsZWQseS5yZXNjYWxlWT13LEMuc3RhdGVDaGFuZ2UoeSksYi51cGRhdGUoKX0pLGkuZGlzcGF0Y2gub24oXCJzdGF0ZUNoYW5nZVwiLGZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKXlbY109YVtjXTtDLnN0YXRlQ2hhbmdlKHkpLGIudXBkYXRlKCl9KSxrLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlbW92ZVwiLGZ1bmN0aW9uKGMpe2YuY2xlYXJIaWdobGlnaHRzKCk7dmFyIGQsZSxpLGo9W107aWYobC5maWx0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5zZXJpZXNJbmRleD1iLCFhLmRpc2FibGVkfSkuZm9yRWFjaChmdW5jdGlvbihnLGgpe2U9YS5pbnRlcmFjdGl2ZUJpc2VjdChnLnZhbHVlcyxjLnBvaW50WFZhbHVlLGIueCgpKSxmLmhpZ2hsaWdodFBvaW50KGgsZSwhMCk7dmFyIGs9Zy52YWx1ZXNbZV07XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGsmJihcInVuZGVmaW5lZFwiPT10eXBlb2YgZCYmKGQ9ayksXCJ1bmRlZmluZWRcIj09dHlwZW9mIGkmJihpPWIueFNjYWxlKCkoYi54KCkoayxlKSkpLGoucHVzaCh7a2V5Omcua2V5LHZhbHVlOmIueSgpKGssZSksY29sb3I6bihnLGcuc2VyaWVzSW5kZXgpfSkpfSksai5sZW5ndGg+Mil7dmFyIG89Yi55U2NhbGUoKS5pbnZlcnQoYy5tb3VzZVkpLHA9TWF0aC5hYnMoYi55U2NhbGUoKS5kb21haW4oKVswXS1iLnlTY2FsZSgpLmRvbWFpbigpWzFdKSxxPS4wMypwLHI9YS5uZWFyZXN0VmFsdWVJbmRleChqLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZX0pLG8scSk7bnVsbCE9PXImJihqW3JdLmhpZ2hsaWdodD0hMCl9dmFyIHM9Zy50aWNrRm9ybWF0KCkoYi54KCkoZCxlKSxlKTtrLnRvb2x0aXAucG9zaXRpb24oe2xlZnQ6aSttLmxlZnQsdG9wOmMubW91c2VZK20udG9wfSkuY2hhcnRDb250YWluZXIoTS5wYXJlbnROb2RlKS52YWx1ZUZvcm1hdHRlcihmdW5jdGlvbihhKXtyZXR1cm4gaC50aWNrRm9ybWF0KCkoYSl9KS5kYXRhKHt2YWx1ZTpzLHNlcmllczpqfSkoKSxrLnJlbmRlckd1aWRlTGluZShpKX0pLGsuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXRcIixmdW5jdGlvbigpe2YuY2xlYXJIaWdobGlnaHRzKCl9KSxDLm9uKFwiY2hhbmdlU3RhdGVcIixmdW5jdGlvbihhKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5kaXNhYmxlZCYmKGwuZm9yRWFjaChmdW5jdGlvbihiLGMpe2IuZGlzYWJsZWQ9YS5kaXNhYmxlZFtjXX0pLHkuZGlzYWJsZWQ9YS5kaXNhYmxlZCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuaW5kZXgmJihHLmk9YS5pbmRleCxHLng9RihHLmkpLHkuaW5kZXg9YS5pbmRleCxiYi5kYXRhKFtHXSkpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnJlc2NhbGVZJiYodz1hLnJlc2NhbGVZKSxiLnVwZGF0ZSgpfSl9KSxILnJlbmRlckVuZChcImN1bXVsYXRpdmVMaW5lQ2hhcnQgaW1tZWRpYXRlXCIpLGJ9ZnVuY3Rpb24gYyhhLGIpe3JldHVybiBLfHwoSz1mLnkoKSksYi5tYXAoZnVuY3Rpb24oYil7aWYoIWIudmFsdWVzKXJldHVybiBiO3ZhciBjPWIudmFsdWVzW2FdO2lmKG51bGw9PWMpcmV0dXJuIGI7dmFyIGQ9SyhjLGEpO3JldHVybi0uOTU+ZCYmIUU/KGIudGVtcERpc2FibGVkPSEwLGIpOihiLnRlbXBEaXNhYmxlZD0hMSxiLnZhbHVlcz1iLnZhbHVlcy5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5kaXNwbGF5PXt5OihLKGEsYiktZCkvKDErZCl9LGF9KSxiKX0pfXZhciBkLGUsZj1hLm1vZGVscy5saW5lKCksZz1hLm1vZGVscy5heGlzKCksaD1hLm1vZGVscy5heGlzKCksaT1hLm1vZGVscy5sZWdlbmQoKSxqPWEubW9kZWxzLmxlZ2VuZCgpLGs9YS5pbnRlcmFjdGl2ZUd1aWRlbGluZSgpLGw9YS5tb2RlbHMudG9vbHRpcCgpLG09e3RvcDozMCxyaWdodDozMCxib3R0b206NTAsbGVmdDo2MH0sbj1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLG89bnVsbCxwPW51bGwscT0hMCxyPSEwLHM9ITAsdD0hMSx1PSEwLHY9ITEsdz0hMCx4PWYuaWQoKSx5PWEudXRpbHMuc3RhdGUoKSx6PW51bGwsQT1udWxsLEI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXZlcmFnZX0sQz1kMy5kaXNwYXRjaChcInN0YXRlQ2hhbmdlXCIsXCJjaGFuZ2VTdGF0ZVwiLFwicmVuZGVyRW5kXCIpLEQ9MjUwLEU9ITE7eS5pbmRleD0wLHkucmVzY2FsZVk9dyxnLm9yaWVudChcImJvdHRvbVwiKS50aWNrUGFkZGluZyg3KSxoLm9yaWVudCh0P1wicmlnaHRcIjpcImxlZnRcIiksbC52YWx1ZUZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBoLnRpY2tGb3JtYXQoKShhLGIpfSkuaGVhZGVyRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGcudGlja0Zvcm1hdCgpKGEsYil9KSxqLnVwZGF0ZVN0YXRlKCExKTt2YXIgRj1kMy5zY2FsZS5saW5lYXIoKSxHPXtpOjAseDowfSxIPWEudXRpbHMucmVuZGVyV2F0Y2goQyxEKSxJPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybnthY3RpdmU6YS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KSxpbmRleDpHLmkscmVzY2FsZVk6d319fSxKPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDAhPT1iLmluZGV4JiYoRy5pPWIuaW5kZXgpLHZvaWQgMCE9PWIucmVzY2FsZVkmJih3PWIucmVzY2FsZVkpLHZvaWQgMCE9PWIuYWN0aXZlJiZhLmZvckVhY2goZnVuY3Rpb24oYSxjKXthLmRpc2FibGVkPSFiLmFjdGl2ZVtjXX0pfX07Zi5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW92ZXIudG9vbHRpcFwiLGZ1bmN0aW9uKGEpe3ZhciBjPXt4OmIueCgpKGEucG9pbnQpLHk6Yi55KCkoYS5wb2ludCksY29sb3I6YS5wb2ludC5jb2xvcn07YS5wb2ludD1jLGwuZGF0YShhKS5wb3NpdGlvbihhLnBvcykuaGlkZGVuKCExKX0pLGYuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKCl7bC5oaWRkZW4oITApfSk7dmFyIEs9bnVsbDtyZXR1cm4gYi5kaXNwYXRjaD1DLGIubGluZXM9ZixiLmxlZ2VuZD1pLGIuY29udHJvbHM9aixiLnhBeGlzPWcsYi55QXhpcz1oLGIuaW50ZXJhY3RpdmVMYXllcj1rLGIuc3RhdGU9eSxiLnRvb2x0aXA9bCxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LHJlc2NhbGVZOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gd30sc2V0OmZ1bmN0aW9uKGEpe3c9YX19LHNob3dDb250cm9sczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbihhKXt1PWF9fSxzaG93TGVnZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcX0sc2V0OmZ1bmN0aW9uKGEpe3E9YX19LGF2ZXJhZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBCfSxzZXQ6ZnVuY3Rpb24oYSl7Qj1hfX0sZGVmYXVsdFN0YXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gen0sc2V0OmZ1bmN0aW9uKGEpe3o9YX19LG5vRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEF9LHNldDpmdW5jdGlvbihhKXtBPWF9fSxzaG93WEF4aXM6e2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oYSl7cj1hfX0sc2hvd1lBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YX19LG5vRXJyb3JDaGVjazp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEV9LHNldDpmdW5jdGlvbihhKXtFPWF9fSx0b29sdGlwczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGwuZW5hYmxlZCgpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcHNcIixcInVzZSBjaGFydC50b29sdGlwLmVuYWJsZWQoKSBpbnN0ZWFkXCIpLGwuZW5hYmxlZCghIWIpfX0sdG9vbHRpcENvbnRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBsLmNvbnRlbnRHZW5lcmF0b3IoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBDb250ZW50XCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5jb250ZW50R2VuZXJhdG9yKCkgaW5zdGVhZFwiKSxsLmNvbnRlbnRHZW5lcmF0b3IoYil9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bS50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6bS50b3AsbS5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6bS5yaWdodCxtLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTptLmJvdHRvbSxtLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDptLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihiKXtuPWEudXRpbHMuZ2V0Q29sb3IoYiksaS5jb2xvcihuKX19LHVzZUludGVyYWN0aXZlR3VpZGVsaW5lOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sc2V0OmZ1bmN0aW9uKGEpe3Y9YSxhPT09ITAmJihiLmludGVyYWN0aXZlKCExKSxiLnVzZVZvcm9ub2koITEpKX19LHJpZ2h0QWxpZ25ZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWEsaC5vcmllbnQoYT9cInJpZ2h0XCI6XCJsZWZ0XCIpfX0sZHVyYXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiBEfSxzZXQ6ZnVuY3Rpb24oYSl7RD1hLGYuZHVyYXRpb24oRCksZy5kdXJhdGlvbihEKSxoLmR1cmF0aW9uKEQpLEgucmVzZXQoRCl9fX0pLGEudXRpbHMuaW5oZXJpdE9wdGlvbnMoYixmKSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLmRpc2NyZXRlQmFyPWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihtKXtyZXR1cm4geS5yZXNldCgpLG0uZWFjaChmdW5jdGlvbihiKXt2YXIgbT1rLWoubGVmdC1qLnJpZ2h0LHg9bC1qLnRvcC1qLmJvdHRvbTtjPWQzLnNlbGVjdCh0aGlzKSxhLnV0aWxzLmluaXRTVkcoYyksYi5mb3JFYWNoKGZ1bmN0aW9uKGEsYil7YS52YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihhKXthLnNlcmllcz1ifSl9KTt2YXIgej1kJiZlP1tdOmIubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlcy5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm57eDpwKGEsYikseTpxKGEsYikseTA6YS55MH19KX0pO24uZG9tYWluKGR8fGQzLm1lcmdlKHopLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS54fSkpLnJhbmdlQmFuZHMoZnx8WzAsbV0sLjEpLG8uZG9tYWluKGV8fGQzLmV4dGVudChkMy5tZXJnZSh6KS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0pLmNvbmNhdChyKSkpLG8ucmFuZ2UodD9nfHxbeC0oby5kb21haW4oKVswXTwwPzEyOjApLG8uZG9tYWluKClbMV0+MD8xMjowXTpnfHxbeCwwXSksaD1ofHxuLGk9aXx8by5jb3B5KCkucmFuZ2UoW28oMCksbygwKV0pO3t2YXIgQT1jLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1kaXNjcmV0ZWJhclwiKS5kYXRhKFtiXSksQj1BLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1kaXNjcmV0ZWJhclwiKSxDPUIuYXBwZW5kKFwiZ1wiKTtBLnNlbGVjdChcImdcIil9Qy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtZ3JvdXBzXCIpLEEuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2oubGVmdCtcIixcIitqLnRvcCtcIilcIik7dmFyIEQ9QS5zZWxlY3QoXCIubnYtZ3JvdXBzXCIpLnNlbGVjdEFsbChcIi5udi1ncm91cFwiKS5kYXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhfSxmdW5jdGlvbihhKXtyZXR1cm4gYS5rZXl9KTtELmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMWUtNikuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwxZS02KSxELmV4aXQoKS53YXRjaFRyYW5zaXRpb24oeSxcImRpc2NyZXRlQmFyOiBleGl0IGdyb3Vwc1wiKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMWUtNikuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwxZS02KS5yZW1vdmUoKSxELmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJudi1ncm91cCBudi1zZXJpZXMtXCIrYn0pLmNsYXNzZWQoXCJob3ZlclwiLGZ1bmN0aW9uKGEpe3JldHVybiBhLmhvdmVyfSksRC53YXRjaFRyYW5zaXRpb24oeSxcImRpc2NyZXRlQmFyOiBncm91cHNcIikuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDEpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsLjc1KTt2YXIgRT1ELnNlbGVjdEFsbChcImcubnYtYmFyXCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzfSk7RS5leGl0KCkucmVtb3ZlKCk7dmFyIEY9RS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrKG4ocChhLGIpKSsuMDUqbi5yYW5nZUJhbmQoKSkrXCIsIFwiK28oMCkrXCIpXCJ9KS5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGEsYil7ZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJob3ZlclwiLCEwKSx2LmVsZW1lbnRNb3VzZW92ZXIoe2RhdGE6YSxpbmRleDpiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSksdi5lbGVtZW50TW91c2VvdXQoe2RhdGE6YSxpbmRleDpiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2Vtb3ZlXCIsZnVuY3Rpb24oYSxiKXt2LmVsZW1lbnRNb3VzZW1vdmUoe2RhdGE6YSxpbmRleDpiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhLGIpe3YuZWxlbWVudENsaWNrKHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSksZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCl9KS5vbihcImRibGNsaWNrXCIsZnVuY3Rpb24oYSxiKXt2LmVsZW1lbnREYmxDbGljayh7ZGF0YTphLGluZGV4OmIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pLGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpfSk7Ri5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJoZWlnaHRcIiwwKS5hdHRyKFwid2lkdGhcIiwuOSpuLnJhbmdlQmFuZCgpL2IubGVuZ3RoKSx0PyhGLmFwcGVuZChcInRleHRcIikuYXR0cihcInRleHQtYW5jaG9yXCIsXCJtaWRkbGVcIiksRS5zZWxlY3QoXCJ0ZXh0XCIpLnRleHQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gdShxKGEsYikpfSkud2F0Y2hUcmFuc2l0aW9uKHksXCJkaXNjcmV0ZUJhcjogYmFycyB0ZXh0XCIpLmF0dHIoXCJ4XCIsLjkqbi5yYW5nZUJhbmQoKS8yKS5hdHRyKFwieVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHEoYSxiKTwwP28ocShhLGIpKS1vKDApKzEyOi00fSkpOkUuc2VsZWN0QWxsKFwidGV4dFwiKS5yZW1vdmUoKSxFLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHEoYSxiKTwwP1wibnYtYmFyIG5lZ2F0aXZlXCI6XCJudi1iYXIgcG9zaXRpdmVcIn0pLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuY29sb3J8fHMoYSxiKX0pLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8cyhhLGIpfSkuc2VsZWN0KFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIix3KS53YXRjaFRyYW5zaXRpb24oeSxcImRpc2NyZXRlQmFyOiBiYXJzIHJlY3RcIikuYXR0cihcIndpZHRoXCIsLjkqbi5yYW5nZUJhbmQoKS9iLmxlbmd0aCksRS53YXRjaFRyYW5zaXRpb24oeSxcImRpc2NyZXRlQmFyOiBiYXJzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3ZhciBjPW4ocChhLGIpKSsuMDUqbi5yYW5nZUJhbmQoKSxkPXEoYSxiKTwwP28oMCk6bygwKS1vKHEoYSxiKSk8MT9vKDApLTE6byhxKGEsYikpO3JldHVyblwidHJhbnNsYXRlKFwiK2MrXCIsIFwiK2QrXCIpXCJ9KS5zZWxlY3QoXCJyZWN0XCIpLmF0dHIoXCJoZWlnaHRcIixmdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLm1heChNYXRoLmFicyhvKHEoYSxiKSktbyhlJiZlWzBdfHwwKSl8fDEpfSksaD1uLmNvcHkoKSxpPW8uY29weSgpfSkseS5yZW5kZXJFbmQoXCJkaXNjcmV0ZUJhciBpbW1lZGlhdGVcIiksYn12YXIgYyxkLGUsZixnLGgsaSxqPXt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0saz05NjAsbD01MDAsbT1NYXRoLmZsb29yKDFlNCpNYXRoLnJhbmRvbSgpKSxuPWQzLnNjYWxlLm9yZGluYWwoKSxvPWQzLnNjYWxlLmxpbmVhcigpLHA9ZnVuY3Rpb24oYSl7cmV0dXJuIGEueH0scT1mdW5jdGlvbihhKXtyZXR1cm4gYS55fSxyPVswXSxzPWEudXRpbHMuZGVmYXVsdENvbG9yKCksdD0hMSx1PWQzLmZvcm1hdChcIiwuMmZcIiksdj1kMy5kaXNwYXRjaChcImNoYXJ0Q2xpY2tcIixcImVsZW1lbnRDbGlja1wiLFwiZWxlbWVudERibENsaWNrXCIsXCJlbGVtZW50TW91c2VvdmVyXCIsXCJlbGVtZW50TW91c2VvdXRcIixcImVsZW1lbnRNb3VzZW1vdmVcIixcInJlbmRlckVuZFwiKSx3PVwiZGlzY3JldGVCYXJcIix4PTI1MCx5PWEudXRpbHMucmVuZGVyV2F0Y2godix4KTtyZXR1cm4gYi5kaXNwYXRjaD12LGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LHNldDpmdW5jdGlvbihhKXtrPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0sZm9yY2VZOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKGEpe3I9YX19LHNob3dWYWx1ZXM6e2dldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oYSl7dD1hfX0seDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihhKXtwPWF9fSx5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcX0sc2V0OmZ1bmN0aW9uKGEpe3E9YX19LHhTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihhKXtuPWF9fSx5U2NhbGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0seERvbWFpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldDpmdW5jdGlvbihhKXtkPWF9fSx5RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKGEpe2U9YX19LHhSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmPWF9fSx5UmFuZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zz1hfX0sdmFsdWVGb3JtYXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT1hfX0saWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0scmVjdENsYXNzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gd30sc2V0OmZ1bmN0aW9uKGEpe3c9YX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihhKXtqLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpqLnRvcCxqLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpqLnJpZ2h0LGouYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmouYm90dG9tLGoubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmoubGVmdH19LGNvbG9yOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGIpe3M9YS51dGlscy5nZXRDb2xvcihiKX19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geH0sc2V0OmZ1bmN0aW9uKGEpe3g9YSx5LnJlc2V0KHgpfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLmRpc2NyZXRlQmFyQ2hhcnQ9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGgpe3JldHVybiB0LnJlc2V0KCksdC5tb2RlbHMoZSksbSYmdC5tb2RlbHMoZiksbiYmdC5tb2RlbHMoZyksaC5lYWNoKGZ1bmN0aW9uKGgpe3ZhciBsPWQzLnNlbGVjdCh0aGlzKTthLnV0aWxzLmluaXRTVkcobCk7dmFyIHE9YS51dGlscy5hdmFpbGFibGVXaWR0aChqLGwsaSksdD1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChrLGwsaSk7aWYoYi51cGRhdGU9ZnVuY3Rpb24oKXtyLmJlZm9yZVVwZGF0ZSgpLGwudHJhbnNpdGlvbigpLmR1cmF0aW9uKHMpLmNhbGwoYil9LGIuY29udGFpbmVyPXRoaXMsIShoJiZoLmxlbmd0aCYmaC5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLmxlbmd0aH0pLmxlbmd0aCkpcmV0dXJuIGEudXRpbHMubm9EYXRhKGIsbCksYjtsLnNlbGVjdEFsbChcIi5udi1ub0RhdGFcIikucmVtb3ZlKCksYz1lLnhTY2FsZSgpLGQ9ZS55U2NhbGUoKS5jbGFtcCghMCk7dmFyIHU9bC5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtZGlzY3JldGVCYXJXaXRoQXhlc1wiKS5kYXRhKFtoXSksdj11LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1kaXNjcmV0ZUJhcldpdGhBeGVzXCIpLmFwcGVuZChcImdcIiksdz12LmFwcGVuZChcImRlZnNcIikseD11LnNlbGVjdChcImdcIik7di5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYteCBudi1heGlzXCIpLHYuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXkgbnYtYXhpc1wiKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtemVyb0xpbmVcIikuYXBwZW5kKFwibGluZVwiKSx2LmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1iYXJzV3JhcFwiKSx4LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitpLmxlZnQrXCIsXCIraS50b3ArXCIpXCIpLG8mJnguc2VsZWN0KFwiLm52LXkubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrcStcIiwwKVwiKSxlLndpZHRoKHEpLmhlaWdodCh0KTt2YXIgeT14LnNlbGVjdChcIi5udi1iYXJzV3JhcFwiKS5kYXR1bShoLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZH0pKTtpZih5LnRyYW5zaXRpb24oKS5jYWxsKGUpLHcuYXBwZW5kKFwiY2xpcFBhdGhcIikuYXR0cihcImlkXCIsXCJudi14LWxhYmVsLWNsaXAtXCIrZS5pZCgpKS5hcHBlbmQoXCJyZWN0XCIpLHguc2VsZWN0KFwiI252LXgtbGFiZWwtY2xpcC1cIitlLmlkKCkrXCIgcmVjdFwiKS5hdHRyKFwid2lkdGhcIixjLnJhbmdlQmFuZCgpKihwPzI6MSkpLmF0dHIoXCJoZWlnaHRcIiwxNikuYXR0cihcInhcIiwtYy5yYW5nZUJhbmQoKS8ocD8xOjIpKSxtKXtmLnNjYWxlKGMpLl90aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1gocS8xMDAsaCkpLnRpY2tTaXplKC10LDApLHguc2VsZWN0KFwiLm52LXgubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIisoZC5yYW5nZSgpWzBdKyhlLnNob3dWYWx1ZXMoKSYmZC5kb21haW4oKVswXTwwPzE2OjApKStcIilcIikseC5zZWxlY3QoXCIubnYteC5udi1heGlzXCIpLmNhbGwoZik7XG52YXIgej14LnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuc2VsZWN0QWxsKFwiZ1wiKTtwJiZ6LnNlbGVjdEFsbChcInRleHRcIikuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm5cInRyYW5zbGF0ZSgwLFwiKyhjJTI9PTA/XCI1XCI6XCIxN1wiKStcIilcIn0pfW4mJihnLnNjYWxlKGQpLl90aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1kodC8zNixoKSkudGlja1NpemUoLXEsMCkseC5zZWxlY3QoXCIubnYteS5udi1heGlzXCIpLmNhbGwoZykpLHguc2VsZWN0KFwiLm52LXplcm9MaW5lIGxpbmVcIikuYXR0cihcIngxXCIsMCkuYXR0cihcIngyXCIscSkuYXR0cihcInkxXCIsZCgwKSkuYXR0cihcInkyXCIsZCgwKSl9KSx0LnJlbmRlckVuZChcImRpc2NyZXRlQmFyIGNoYXJ0IGltbWVkaWF0ZVwiKSxifXZhciBjLGQsZT1hLm1vZGVscy5kaXNjcmV0ZUJhcigpLGY9YS5tb2RlbHMuYXhpcygpLGc9YS5tb2RlbHMuYXhpcygpLGg9YS5tb2RlbHMudG9vbHRpcCgpLGk9e3RvcDoxNSxyaWdodDoxMCxib3R0b206NTAsbGVmdDo2MH0saj1udWxsLGs9bnVsbCxsPWEudXRpbHMuZ2V0Q29sb3IoKSxtPSEwLG49ITAsbz0hMSxwPSExLHE9bnVsbCxyPWQzLmRpc3BhdGNoKFwiYmVmb3JlVXBkYXRlXCIsXCJyZW5kZXJFbmRcIikscz0yNTA7Zi5vcmllbnQoXCJib3R0b21cIikuc2hvd01heE1pbighMSkudGlja0Zvcm1hdChmdW5jdGlvbihhKXtyZXR1cm4gYX0pLGcub3JpZW50KG8/XCJyaWdodFwiOlwibGVmdFwiKS50aWNrRm9ybWF0KGQzLmZvcm1hdChcIiwuMWZcIikpLGguZHVyYXRpb24oMCkuaGVhZGVyRW5hYmxlZCghMSkudmFsdWVGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gZy50aWNrRm9ybWF0KCkoYSxiKX0pLmtleUZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBmLnRpY2tGb3JtYXQoKShhLGIpfSk7dmFyIHQ9YS51dGlscy5yZW5kZXJXYXRjaChyLHMpO3JldHVybiBlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7YS5zZXJpZXM9e2tleTpiLngoKShhLmRhdGEpLHZhbHVlOmIueSgpKGEuZGF0YSksY29sb3I6YS5jb2xvcn0saC5kYXRhKGEpLmhpZGRlbighMSl9KSxlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3V0LnRvb2x0aXBcIixmdW5jdGlvbigpe2guaGlkZGVuKCEwKX0pLGUuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2Vtb3ZlLnRvb2x0aXBcIixmdW5jdGlvbigpe2gucG9zaXRpb24oe3RvcDpkMy5ldmVudC5wYWdlWSxsZWZ0OmQzLmV2ZW50LnBhZ2VYfSkoKX0pLGIuZGlzcGF0Y2g9cixiLmRpc2NyZXRlYmFyPWUsYi54QXhpcz1mLGIueUF4aXM9ZyxiLnRvb2x0aXA9aCxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYSl7aj1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YX19LHN0YWdnZXJMYWJlbHM6e2dldDpmdW5jdGlvbigpe3JldHVybiBwfSxzZXQ6ZnVuY3Rpb24oYSl7cD1hfX0sc2hvd1hBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sc2V0OmZ1bmN0aW9uKGEpe209YX19LHNob3dZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihhKXtuPWF9fSxub0RhdGE6e2dldDpmdW5jdGlvbigpe3JldHVybiBxfSxzZXQ6ZnVuY3Rpb24oYSl7cT1hfX0sdG9vbHRpcHM6e2dldDpmdW5jdGlvbigpe3JldHVybiBoLmVuYWJsZWQoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBzXCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5lbmFibGVkKCkgaW5zdGVhZFwiKSxoLmVuYWJsZWQoISFiKX19LHRvb2x0aXBDb250ZW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5jb250ZW50R2VuZXJhdG9yKCl9LHNldDpmdW5jdGlvbihiKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwQ29udGVudFwiLFwidXNlIGNoYXJ0LnRvb2x0aXAuY29udGVudEdlbmVyYXRvcigpIGluc3RlYWRcIiksaC5jb250ZW50R2VuZXJhdG9yKGIpfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGEpe2kudG9wPXZvaWQgMCE9PWEudG9wP2EudG9wOmkudG9wLGkucmlnaHQ9dm9pZCAwIT09YS5yaWdodD9hLnJpZ2h0OmkucmlnaHQsaS5ib3R0b209dm9pZCAwIT09YS5ib3R0b20/YS5ib3R0b206aS5ib3R0b20saS5sZWZ0PXZvaWQgMCE9PWEubGVmdD9hLmxlZnQ6aS5sZWZ0fX0sZHVyYXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oYSl7cz1hLHQucmVzZXQocyksZS5kdXJhdGlvbihzKSxmLmR1cmF0aW9uKHMpLGcuZHVyYXRpb24ocyl9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihiKXtsPWEudXRpbHMuZ2V0Q29sb3IoYiksZS5jb2xvcihsKX19LHJpZ2h0QWxpZ25ZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWEsZy5vcmllbnQoYT9cInJpZ2h0XCI6XCJsZWZ0XCIpfX19KSxhLnV0aWxzLmluaGVyaXRPcHRpb25zKGIsZSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5kaXN0cmlidXRpb249ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGspe3JldHVybiBtLnJlc2V0KCksay5lYWNoKGZ1bmN0aW9uKGIpe3ZhciBrPShlLShcInhcIj09PWc/ZC5sZWZ0K2QucmlnaHQ6ZC50b3ArZC5ib3R0b20pLFwieFwiPT1nP1wieVwiOlwieFwiKSxsPWQzLnNlbGVjdCh0aGlzKTthLnV0aWxzLmluaXRTVkcobCksYz1jfHxqO3ZhciBuPWwuc2VsZWN0QWxsKFwiZy5udi1kaXN0cmlidXRpb25cIikuZGF0YShbYl0pLG89bi5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LWRpc3RyaWJ1dGlvblwiKSxwPShvLmFwcGVuZChcImdcIiksbi5zZWxlY3QoXCJnXCIpKTtuLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitkLmxlZnQrXCIsXCIrZC50b3ArXCIpXCIpO3ZhciBxPXAuc2VsZWN0QWxsKFwiZy5udi1kaXN0XCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuIGF9LGZ1bmN0aW9uKGEpe3JldHVybiBhLmtleX0pO3EuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLHEuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm5cIm52LWRpc3QgbnYtc2VyaWVzLVwiK2J9KS5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGkoYSxiKX0pO3ZhciByPXEuc2VsZWN0QWxsKFwibGluZS5udi1kaXN0XCIrZykuZGF0YShmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXN9KTtyLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKS5hdHRyKGcrXCIxXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYyhoKGEsYikpfSkuYXR0cihnK1wiMlwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGMoaChhLGIpKX0pLG0udHJhbnNpdGlvbihxLmV4aXQoKS5zZWxlY3RBbGwoXCJsaW5lLm52LWRpc3RcIitnKSxcImRpc3QgZXhpdFwiKS5hdHRyKGcrXCIxXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gaihoKGEsYikpfSkuYXR0cihnK1wiMlwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGooaChhLGIpKX0pLnN0eWxlKFwic3Ryb2tlLW9wYWNpdHlcIiwwKS5yZW1vdmUoKSxyLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJudi1kaXN0XCIrZytcIiBudi1kaXN0XCIrZytcIi1cIitifSkuYXR0cihrK1wiMVwiLDApLmF0dHIoaytcIjJcIixmKSxtLnRyYW5zaXRpb24ocixcImRpc3RcIikuYXR0cihnK1wiMVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGooaChhLGIpKX0pLmF0dHIoZytcIjJcIixmdW5jdGlvbihhLGIpe3JldHVybiBqKGgoYSxiKSl9KSxjPWouY29weSgpfSksbS5yZW5kZXJFbmQoXCJkaXN0cmlidXRpb24gaW1tZWRpYXRlXCIpLGJ9dmFyIGMsZD17dG9wOjAscmlnaHQ6MCxib3R0b206MCxsZWZ0OjB9LGU9NDAwLGY9OCxnPVwieFwiLGg9ZnVuY3Rpb24oYSl7cmV0dXJuIGFbZ119LGk9YS51dGlscy5kZWZhdWx0Q29sb3IoKSxqPWQzLnNjYWxlLmxpbmVhcigpLGs9MjUwLGw9ZDMuZGlzcGF0Y2goXCJyZW5kZXJFbmRcIiksbT1hLnV0aWxzLnJlbmRlcldhdGNoKGwsayk7cmV0dXJuIGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5kaXNwYXRjaD1sLGIubWFyZ2luPWZ1bmN0aW9uKGEpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhkLnRvcD1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS50b3A/YS50b3A6ZC50b3AsZC5yaWdodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS5yaWdodD9hLnJpZ2h0OmQucmlnaHQsZC5ib3R0b209XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuYm90dG9tP2EuYm90dG9tOmQuYm90dG9tLGQubGVmdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS5sZWZ0P2EubGVmdDpkLmxlZnQsYik6ZH0sYi53aWR0aD1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT1hLGIpOmV9LGIuYXhpcz1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZz1hLGIpOmd9LGIuc2l6ZT1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZj1hLGIpOmZ9LGIuZ2V0RGF0YT1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaD1kMy5mdW5jdG9yKGEpLGIpOmh9LGIuc2NhbGU9ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGo9YSxiKTpqfSxiLmNvbG9yPWZ1bmN0aW9uKGMpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhpPWEudXRpbHMuZ2V0Q29sb3IoYyksYik6aX0sYi5kdXJhdGlvbj1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaz1hLG0ucmVzZXQoayksYik6a30sYn0sYS5tb2RlbHMuZnVyaW91c0xlZ2VuZD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIocCl7ZnVuY3Rpb24gcShhLGIpe3JldHVyblwiZnVyaW91c1wiIT1vP1wiIzAwMFwiOm0/YS5kaXNlbmdhZ2VkP2coYSxiKTpcIiNmZmZcIjptP3ZvaWQgMDphLmRpc2FibGVkP2coYSxiKTpcIiNmZmZcIn1mdW5jdGlvbiByKGEsYil7cmV0dXJuIG0mJlwiZnVyaW91c1wiPT1vP2EuZGlzZW5nYWdlZD9cIiNmZmZcIjpnKGEsYik6YS5kaXNhYmxlZD9cIiNmZmZcIjpnKGEsYil9cmV0dXJuIHAuZWFjaChmdW5jdGlvbihiKXt2YXIgcD1kLWMubGVmdC1jLnJpZ2h0LHM9ZDMuc2VsZWN0KHRoaXMpO2EudXRpbHMuaW5pdFNWRyhzKTt2YXIgdD1zLnNlbGVjdEFsbChcImcubnYtbGVnZW5kXCIpLmRhdGEoW2JdKSx1PSh0LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtbGVnZW5kXCIpLmFwcGVuZChcImdcIiksdC5zZWxlY3QoXCJnXCIpKTt0LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitjLmxlZnQrXCIsXCIrYy50b3ArXCIpXCIpO3ZhciB2LHc9dS5zZWxlY3RBbGwoXCIubnYtc2VyaWVzXCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuXCJmdXJpb3VzXCIhPW8/YTphLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gbT8hMDohYS5kaXNlbmdhZ2VkfSl9KSx4PXcuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtc2VyaWVzXCIpO2lmKFwiY2xhc3NpY1wiPT1vKXguYXBwZW5kKFwiY2lyY2xlXCIpLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsMikuYXR0cihcImNsYXNzXCIsXCJudi1sZWdlbmQtc3ltYm9sXCIpLmF0dHIoXCJyXCIsNSksdj13LnNlbGVjdChcImNpcmNsZVwiKTtlbHNlIGlmKFwiZnVyaW91c1wiPT1vKXt4LmFwcGVuZChcInJlY3RcIikuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwyKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZC1zeW1ib2xcIikuYXR0cihcInJ4XCIsMykuYXR0cihcInJ5XCIsMyksdj13LnNlbGVjdChcInJlY3RcIikseC5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtY2hlY2stYm94XCIpLnByb3BlcnR5KFwiaW5uZXJIVE1MXCIsJzxwYXRoIGQ9XCJNMC41LDUgTDIyLjUsNSBMMjIuNSwyNi41IEwwLjUsMjYuNSBMMC41LDUgWlwiIGNsYXNzPVwibnYtYm94XCI+PC9wYXRoPjxwYXRoIGQ9XCJNNS41LDEyLjg2MTg0NjcgTDExLjkxODUwODksMTkuMjgwMzU1NiBMMzEsMC4xOTg4NjQ1MTFcIiBjbGFzcz1cIm52LWNoZWNrXCI+PC9wYXRoPicpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgtMTAsLTgpc2NhbGUoMC41KVwiKTt2YXIgeT13LnNlbGVjdChcIi5udi1jaGVjay1ib3hcIik7eS5lYWNoKGZ1bmN0aW9uKGEsYil7ZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0cm9rZVwiLHEoYSxiKSl9KX14LmFwcGVuZChcInRleHRcIikuYXR0cihcInRleHQtYW5jaG9yXCIsXCJzdGFydFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZC10ZXh0XCIpLmF0dHIoXCJkeVwiLFwiLjMyZW1cIikuYXR0cihcImR4XCIsXCI4XCIpO3ZhciB6PXcuc2VsZWN0KFwidGV4dC5udi1sZWdlbmQtdGV4dFwiKTt3Lm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oYSxiKXtuLmxlZ2VuZE1vdXNlb3ZlcihhLGIpfSkub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKGEsYil7bi5sZWdlbmRNb3VzZW91dChhLGIpfSkub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEsYil7bi5sZWdlbmRDbGljayhhLGIpO3ZhciBjPXcuZGF0YSgpO2lmKGspe2lmKFwiY2xhc3NpY1wiPT1vKWw/KGMuZm9yRWFjaChmdW5jdGlvbihhKXthLmRpc2FibGVkPSEwfSksYS5kaXNhYmxlZD0hMSk6KGEuZGlzYWJsZWQ9IWEuZGlzYWJsZWQsYy5ldmVyeShmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZH0pJiZjLmZvckVhY2goZnVuY3Rpb24oYSl7YS5kaXNhYmxlZD0hMX0pKTtlbHNlIGlmKFwiZnVyaW91c1wiPT1vKWlmKG0pYS5kaXNlbmdhZ2VkPSFhLmRpc2VuZ2FnZWQsYS51c2VyRGlzYWJsZWQ9dm9pZCAwPT1hLnVzZXJEaXNhYmxlZD8hIWEuZGlzYWJsZWQ6YS51c2VyRGlzYWJsZWQsYS5kaXNhYmxlZD1hLmRpc2VuZ2FnZWR8fGEudXNlckRpc2FibGVkO2Vsc2UgaWYoIW0pe2EuZGlzYWJsZWQ9IWEuZGlzYWJsZWQsYS51c2VyRGlzYWJsZWQ9YS5kaXNhYmxlZDt2YXIgZD1jLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNlbmdhZ2VkfSk7ZC5ldmVyeShmdW5jdGlvbihhKXtyZXR1cm4gYS51c2VyRGlzYWJsZWR9KSYmYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZGlzYWJsZWQ9YS51c2VyRGlzYWJsZWQ9ITF9KX1uLnN0YXRlQ2hhbmdlKHtkaXNhYmxlZDpjLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hIWEuZGlzYWJsZWR9KSxkaXNlbmdhZ2VkOmMubWFwKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5kaXNlbmdhZ2VkfSl9KX19KS5vbihcImRibGNsaWNrXCIsZnVuY3Rpb24oYSxiKXtpZigoXCJmdXJpb3VzXCIhPW98fCFtKSYmKG4ubGVnZW5kRGJsY2xpY2soYSxiKSxrKSl7dmFyIGM9dy5kYXRhKCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZGlzYWJsZWQ9ITAsXCJmdXJpb3VzXCI9PW8mJihhLnVzZXJEaXNhYmxlZD1hLmRpc2FibGVkKX0pLGEuZGlzYWJsZWQ9ITEsXCJmdXJpb3VzXCI9PW8mJihhLnVzZXJEaXNhYmxlZD1hLmRpc2FibGVkKSxuLnN0YXRlQ2hhbmdlKHtkaXNhYmxlZDpjLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hIWEuZGlzYWJsZWR9KX0pfX0pLHcuY2xhc3NlZChcIm52LWRpc2FibGVkXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEudXNlckRpc2FibGVkfSksdy5leGl0KCkucmVtb3ZlKCksei5hdHRyKFwiZmlsbFwiLHEpLnRleHQoZik7dmFyIEE7c3dpdGNoKG8pe2Nhc2VcImZ1cmlvdXNcIjpBPTIzO2JyZWFrO2Nhc2VcImNsYXNzaWNcIjpBPTIwfWlmKGgpe3ZhciBCPVtdO3cuZWFjaChmdW5jdGlvbigpe3ZhciBiLGM9ZDMuc2VsZWN0KHRoaXMpLnNlbGVjdChcInRleHRcIik7dHJ5e2lmKGI9Yy5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCksMD49Yil0aHJvdyBFcnJvcigpfWNhdGNoKGQpe2I9YS51dGlscy5jYWxjQXBwcm94VGV4dFdpZHRoKGMpfUIucHVzaChiK2kpfSk7Zm9yKHZhciBDPTAsRD0wLEU9W107cD5EJiZDPEIubGVuZ3RoOylFW0NdPUJbQ10sRCs9QltDKytdO2ZvcigwPT09QyYmKEM9MSk7RD5wJiZDPjE7KXtFPVtdLEMtLTtmb3IodmFyIEY9MDtGPEIubGVuZ3RoO0YrKylCW0ZdPihFW0YlQ118fDApJiYoRVtGJUNdPUJbRl0pO0Q9RS5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYStifSl9Zm9yKHZhciBHPVtdLEg9MCxJPTA7Qz5IO0grKylHW0hdPUksSSs9RVtIXTt3LmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiK0dbYiVDXStcIixcIisoNStNYXRoLmZsb29yKGIvQykqQSkrXCIpXCJ9KSxqP3UuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiKyhkLWMucmlnaHQtRCkrXCIsXCIrYy50b3ArXCIpXCIpOnUuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrYy50b3ArXCIpXCIpLGU9Yy50b3ArYy5ib3R0b20rTWF0aC5jZWlsKEIubGVuZ3RoL0MpKkF9ZWxzZXt2YXIgSixLPTUsTD01LE09MDt3LmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbigpe3ZhciBhPWQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoXCJ0ZXh0XCIpLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKStpO3JldHVybiBKPUwsZDxjLmxlZnQrYy5yaWdodCtKK2EmJihMPUo9NSxLKz1BKSxMKz1hLEw+TSYmKE09TCksXCJ0cmFuc2xhdGUoXCIrSitcIixcIitLK1wiKVwifSksdS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrKGQtYy5yaWdodC1NKStcIixcIitjLnRvcCtcIilcIiksZT1jLnRvcCtjLmJvdHRvbStLKzE1fVwiZnVyaW91c1wiPT1vJiZ2LmF0dHIoXCJ3aWR0aFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHpbMF1bYl0uZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkrMjd9KS5hdHRyKFwiaGVpZ2h0XCIsMTgpLmF0dHIoXCJ5XCIsLTkpLmF0dHIoXCJ4XCIsLTE1KSx2LnN0eWxlKFwiZmlsbFwiLHIpLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8ZyhhLGIpfSl9KSxifXZhciBjPXt0b3A6NSxyaWdodDowLGJvdHRvbTo1LGxlZnQ6MH0sZD00MDAsZT0yMCxmPWZ1bmN0aW9uKGEpe3JldHVybiBhLmtleX0sZz1hLnV0aWxzLmdldENvbG9yKCksaD0hMCxpPTI4LGo9ITAsaz0hMCxsPSExLG09ITEsbj1kMy5kaXNwYXRjaChcImxlZ2VuZENsaWNrXCIsXCJsZWdlbmREYmxjbGlja1wiLFwibGVnZW5kTW91c2VvdmVyXCIsXCJsZWdlbmRNb3VzZW91dFwiLFwic3RhdGVDaGFuZ2VcIiksbz1cImNsYXNzaWNcIjtyZXR1cm4gYi5kaXNwYXRjaD1uLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldDpmdW5jdGlvbihhKXtkPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7ZT1hfX0sa2V5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0OmZ1bmN0aW9uKGEpe2Y9YX19LGFsaWduOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEpe2g9YX19LHJpZ2h0QWxpZ246e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYSl7aj1hfX0scGFkZGluZzp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihhKXtpPWF9fSx1cGRhdGVTdGF0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LHNldDpmdW5jdGlvbihhKXtrPWF9fSxyYWRpb0J1dHRvbk1vZGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0sZXhwYW5kZWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0sdmVyczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWF9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24oYSl7Yy50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6Yy50b3AsYy5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6Yy5yaWdodCxjLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTpjLmJvdHRvbSxjLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpjLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldDpmdW5jdGlvbihiKXtnPWEudXRpbHMuZ2V0Q29sb3IoYil9fX0pLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMuaGlzdG9yaWNhbEJhcj1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoeCl7cmV0dXJuIHguZWFjaChmdW5jdGlvbihiKXt3LnJlc2V0KCksaz1kMy5zZWxlY3QodGhpcyk7dmFyIHg9YS51dGlscy5hdmFpbGFibGVXaWR0aChoLGssZykseT1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChpLGssZyk7YS51dGlscy5pbml0U1ZHKGspLGwuZG9tYWluKGN8fGQzLmV4dGVudChiWzBdLnZhbHVlcy5tYXAobikuY29uY2F0KHApKSksbC5yYW5nZShyP2V8fFsuNSp4L2JbMF0udmFsdWVzLmxlbmd0aCx4KihiWzBdLnZhbHVlcy5sZW5ndGgtLjUpL2JbMF0udmFsdWVzLmxlbmd0aF06ZXx8WzAseF0pLG0uZG9tYWluKGR8fGQzLmV4dGVudChiWzBdLnZhbHVlcy5tYXAobykuY29uY2F0KHEpKSkucmFuZ2UoZnx8W3ksMF0pLGwuZG9tYWluKClbMF09PT1sLmRvbWFpbigpWzFdJiZsLmRvbWFpbihsLmRvbWFpbigpWzBdP1tsLmRvbWFpbigpWzBdLS4wMSpsLmRvbWFpbigpWzBdLGwuZG9tYWluKClbMV0rLjAxKmwuZG9tYWluKClbMV1dOlstMSwxXSksbS5kb21haW4oKVswXT09PW0uZG9tYWluKClbMV0mJm0uZG9tYWluKG0uZG9tYWluKClbMF0/W20uZG9tYWluKClbMF0rLjAxKm0uZG9tYWluKClbMF0sbS5kb21haW4oKVsxXS0uMDEqbS5kb21haW4oKVsxXV06Wy0xLDFdKTt2YXIgej1rLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1oaXN0b3JpY2FsQmFyLVwiK2opLmRhdGEoW2JbMF0udmFsdWVzXSksQT16LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1oaXN0b3JpY2FsQmFyLVwiK2opLEI9QS5hcHBlbmQoXCJkZWZzXCIpLEM9QS5hcHBlbmQoXCJnXCIpLEQ9ei5zZWxlY3QoXCJnXCIpO0MuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWJhcnNcIiksei5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrZy5sZWZ0K1wiLFwiK2cudG9wK1wiKVwiKSxrLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhLGIpe3UuY2hhcnRDbGljayh7ZGF0YTphLGluZGV4OmIscG9zOmQzLmV2ZW50LGlkOmp9KX0pLEIuYXBwZW5kKFwiY2xpcFBhdGhcIikuYXR0cihcImlkXCIsXCJudi1jaGFydC1jbGlwLXBhdGgtXCIraikuYXBwZW5kKFwicmVjdFwiKSx6LnNlbGVjdChcIiNudi1jaGFydC1jbGlwLXBhdGgtXCIraitcIiByZWN0XCIpLmF0dHIoXCJ3aWR0aFwiLHgpLmF0dHIoXCJoZWlnaHRcIix5KSxELmF0dHIoXCJjbGlwLXBhdGhcIixzP1widXJsKCNudi1jaGFydC1jbGlwLXBhdGgtXCIraitcIilcIjpcIlwiKTt2YXIgRT16LnNlbGVjdChcIi5udi1iYXJzXCIpLnNlbGVjdEFsbChcIi5udi1iYXJcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm4gYX0sZnVuY3Rpb24oYSxiKXtyZXR1cm4gbihhLGIpfSk7RS5leGl0KCkucmVtb3ZlKCksRS5lbnRlcigpLmFwcGVuZChcInJlY3RcIikuYXR0cihcInhcIiwwKS5hdHRyKFwieVwiLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEudXRpbHMuTmFOdG9aZXJvKG0oTWF0aC5tYXgoMCxvKGIsYykpKSl9KS5hdHRyKFwiaGVpZ2h0XCIsZnVuY3Rpb24oYixjKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8oTWF0aC5hYnMobShvKGIsYykpLW0oMCkpKX0pLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGMpe3JldHVyblwidHJhbnNsYXRlKFwiKyhsKG4oYSxjKSkteC9iWzBdLnZhbHVlcy5sZW5ndGgqLjQ1KStcIiwwKVwifSkub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihhLGIpe3YmJihkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhvdmVyXCIsITApLHUuZWxlbWVudE1vdXNlb3Zlcih7ZGF0YTphLGluZGV4OmIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pKX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe3YmJihkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhvdmVyXCIsITEpLHUuZWxlbWVudE1vdXNlb3V0KHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSkpfSkub24oXCJtb3VzZW1vdmVcIixmdW5jdGlvbihhLGIpe3YmJnUuZWxlbWVudE1vdXNlbW92ZSh7ZGF0YTphLGluZGV4OmIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pfSkub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEsYil7diYmKHUuZWxlbWVudENsaWNrKHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSksZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkpfSkub24oXCJkYmxjbGlja1wiLGZ1bmN0aW9uKGEsYil7diYmKHUuZWxlbWVudERibENsaWNrKHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSksZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkpfSksRS5hdHRyKFwiZmlsbFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHQoYSxiKX0pLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4obyhhLGIpPDA/XCJudi1iYXIgbmVnYXRpdmVcIjpcIm52LWJhciBwb3NpdGl2ZVwiKStcIiBudi1iYXItXCIrYytcIi1cIitifSkud2F0Y2hUcmFuc2l0aW9uKHcsXCJiYXJzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGMpe3JldHVyblwidHJhbnNsYXRlKFwiKyhsKG4oYSxjKSkteC9iWzBdLnZhbHVlcy5sZW5ndGgqLjQ1KStcIiwwKVwifSkuYXR0cihcIndpZHRoXCIseC9iWzBdLnZhbHVlcy5sZW5ndGgqLjkpLEUud2F0Y2hUcmFuc2l0aW9uKHcsXCJiYXJzXCIpLmF0dHIoXCJ5XCIsZnVuY3Rpb24oYixjKXt2YXIgZD1vKGIsYyk8MD9tKDApOm0oMCktbShvKGIsYykpPDE/bSgwKS0xOm0obyhiLGMpKTtyZXR1cm4gYS51dGlscy5OYU50b1plcm8oZCl9KS5hdHRyKFwiaGVpZ2h0XCIsZnVuY3Rpb24oYixjKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8oTWF0aC5tYXgoTWF0aC5hYnMobShvKGIsYykpLW0oMCkpLDEpKX0pfSksdy5yZW5kZXJFbmQoXCJoaXN0b3JpY2FsQmFyIGltbWVkaWF0ZVwiKSxifXZhciBjLGQsZSxmLGc9e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSxoPW51bGwsaT1udWxsLGo9TWF0aC5mbG9vcigxZTQqTWF0aC5yYW5kb20oKSksaz1udWxsLGw9ZDMuc2NhbGUubGluZWFyKCksbT1kMy5zY2FsZS5saW5lYXIoKSxuPWZ1bmN0aW9uKGEpe3JldHVybiBhLnh9LG89ZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0scD1bXSxxPVswXSxyPSExLHM9ITAsdD1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLHU9ZDMuZGlzcGF0Y2goXCJjaGFydENsaWNrXCIsXCJlbGVtZW50Q2xpY2tcIixcImVsZW1lbnREYmxDbGlja1wiLFwiZWxlbWVudE1vdXNlb3ZlclwiLFwiZWxlbWVudE1vdXNlb3V0XCIsXCJlbGVtZW50TW91c2Vtb3ZlXCIsXCJyZW5kZXJFbmRcIiksdj0hMCx3PWEudXRpbHMucmVuZGVyV2F0Y2godSwwKTtyZXR1cm4gYi5oaWdobGlnaHRQb2ludD1mdW5jdGlvbihhLGIpe2suc2VsZWN0KFwiLm52LWJhcnMgLm52LWJhci0wLVwiK2EpLmNsYXNzZWQoXCJob3ZlclwiLGIpfSxiLmNsZWFySGlnaGxpZ2h0cz1mdW5jdGlvbigpe2suc2VsZWN0KFwiLm52LWJhcnMgLm52LWJhci5ob3ZlclwiKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSl9LGIuZGlzcGF0Y2g9dSxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBofSxzZXQ6ZnVuY3Rpb24oYSl7aD1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGEpe2k9YX19LGZvcmNlWDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihhKXtwPWF9fSxmb3JjZVk6e2dldDpmdW5jdGlvbigpe3JldHVybiBxfSxzZXQ6ZnVuY3Rpb24oYSl7cT1hfX0scGFkRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbihhKXtyPWF9fSx4OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LHk6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0seFNjYWxlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKGEpe2w9YX19LHlTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSx4RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY30sc2V0OmZ1bmN0aW9uKGEpe2M9YX19LHlEb21haW46e2dldDpmdW5jdGlvbigpe3JldHVybiBkfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1hfX0seFJhbmdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKGEpe2U9YX19LHlSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmPWF9fSxjbGlwRWRnZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbihhKXtzPWF9fSxpZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihhKXtqPWF9fSxpbnRlcmFjdGl2ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZ9LHNldDpmdW5jdGlvbihhKXt2PWF9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zy50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6Zy50b3AsZy5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6Zy5yaWdodCxnLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTpnLmJvdHRvbSxnLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpnLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihiKXt0PWEudXRpbHMuZ2V0Q29sb3IoYil9fX0pLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMuaGlzdG9yaWNhbEJhckNoYXJ0PWZ1bmN0aW9uKGIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGMoYil7cmV0dXJuIGIuZWFjaChmdW5jdGlvbihrKXt6LnJlc2V0KCksei5tb2RlbHMoZikscSYmei5tb2RlbHMoZyksciYmei5tb2RlbHMoaCk7dmFyIHc9ZDMuc2VsZWN0KHRoaXMpLEE9dGhpczthLnV0aWxzLmluaXRTVkcodyk7dmFyIEI9YS51dGlscy5hdmFpbGFibGVXaWR0aChuLHcsbCksQz1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChvLHcsbCk7aWYoYy51cGRhdGU9ZnVuY3Rpb24oKXt3LnRyYW5zaXRpb24oKS5kdXJhdGlvbih5KS5jYWxsKGMpfSxjLmNvbnRhaW5lcj10aGlzLHUuZGlzYWJsZWQ9ay5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuISFhLmRpc2FibGVkfSksIXYpe3ZhciBEO3Y9e307Zm9yKEQgaW4gdSl2W0RdPXVbRF1pbnN0YW5jZW9mIEFycmF5P3VbRF0uc2xpY2UoMCk6dVtEXX1pZighKGsmJmsubGVuZ3RoJiZrLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXMubGVuZ3RofSkubGVuZ3RoKSlyZXR1cm4gYS51dGlscy5ub0RhdGEoYyx3KSxjO3cuc2VsZWN0QWxsKFwiLm52LW5vRGF0YVwiKS5yZW1vdmUoKSxkPWYueFNjYWxlKCksZT1mLnlTY2FsZSgpO3ZhciBFPXcuc2VsZWN0QWxsKFwiZy5udi13cmFwLm52LWhpc3RvcmljYWxCYXJDaGFydFwiKS5kYXRhKFtrXSksRj1FLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1oaXN0b3JpY2FsQmFyQ2hhcnRcIikuYXBwZW5kKFwiZ1wiKSxHPUUuc2VsZWN0KFwiZ1wiKTtGLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi14IG52LWF4aXNcIiksRi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYteSBudi1heGlzXCIpLEYuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWJhcnNXcmFwXCIpLEYuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZFdyYXBcIiksRi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtaW50ZXJhY3RpdmVcIikscCYmKGkud2lkdGgoQiksRy5zZWxlY3QoXCIubnYtbGVnZW5kV3JhcFwiKS5kYXR1bShrKS5jYWxsKGkpLGwudG9wIT1pLmhlaWdodCgpJiYobC50b3A9aS5oZWlnaHQoKSxDPWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KG8sdyxsKSksRS5zZWxlY3QoXCIubnYtbGVnZW5kV3JhcFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIistbC50b3ArXCIpXCIpKSxFLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitsLmxlZnQrXCIsXCIrbC50b3ArXCIpXCIpLHMmJkcuc2VsZWN0KFwiLm52LXkubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrQitcIiwwKVwiKSx0JiYoai53aWR0aChCKS5oZWlnaHQoQykubWFyZ2luKHtsZWZ0OmwubGVmdCx0b3A6bC50b3B9KS5zdmdDb250YWluZXIodykueFNjYWxlKGQpLEUuc2VsZWN0KFwiLm52LWludGVyYWN0aXZlXCIpLmNhbGwoaikpLGYud2lkdGgoQikuaGVpZ2h0KEMpLmNvbG9yKGsubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuY29sb3J8fG0oYSxiKX0pLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiFrW2JdLmRpc2FibGVkfSkpO3ZhciBIPUcuc2VsZWN0KFwiLm52LWJhcnNXcmFwXCIpLmRhdHVtKGsuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkpO0gudHJhbnNpdGlvbigpLmNhbGwoZikscSYmKGcuc2NhbGUoZCkuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWChCLzEwMCxrKSkudGlja1NpemUoLUMsMCksRy5zZWxlY3QoXCIubnYteC5udi1heGlzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiK2UucmFuZ2UoKVswXStcIilcIiksRy5zZWxlY3QoXCIubnYteC5udi1heGlzXCIpLnRyYW5zaXRpb24oKS5jYWxsKGcpKSxyJiYoaC5zY2FsZShlKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NZKEMvMzYsaykpLnRpY2tTaXplKC1CLDApLEcuc2VsZWN0KFwiLm52LXkubnYtYXhpc1wiKS50cmFuc2l0aW9uKCkuY2FsbChoKSksai5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW1vdmVcIixmdW5jdGlvbihiKXtmLmNsZWFySGlnaGxpZ2h0cygpO3ZhciBkLGUsaSxuPVtdO2suZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuc2VyaWVzSW5kZXg9YiwhYS5kaXNhYmxlZH0pLmZvckVhY2goZnVuY3Rpb24oZyl7ZT1hLmludGVyYWN0aXZlQmlzZWN0KGcudmFsdWVzLGIucG9pbnRYVmFsdWUsYy54KCkpLGYuaGlnaGxpZ2h0UG9pbnQoZSwhMCk7dmFyIGg9Zy52YWx1ZXNbZV07dm9pZCAwIT09aCYmKHZvaWQgMD09PWQmJihkPWgpLHZvaWQgMD09PWkmJihpPWMueFNjYWxlKCkoYy54KCkoaCxlKSkpLG4ucHVzaCh7a2V5Omcua2V5LHZhbHVlOmMueSgpKGgsZSksY29sb3I6bShnLGcuc2VyaWVzSW5kZXgpLGRhdGE6Zy52YWx1ZXNbZV19KSl9KTt2YXIgbz1nLnRpY2tGb3JtYXQoKShjLngoKShkLGUpKTtqLnRvb2x0aXAucG9zaXRpb24oe2xlZnQ6aStsLmxlZnQsdG9wOmIubW91c2VZK2wudG9wfSkuY2hhcnRDb250YWluZXIoQS5wYXJlbnROb2RlKS52YWx1ZUZvcm1hdHRlcihmdW5jdGlvbihhKXtyZXR1cm4gaC50aWNrRm9ybWF0KCkoYSl9KS5kYXRhKHt2YWx1ZTpvLGluZGV4OmUsc2VyaWVzOm59KSgpLGoucmVuZGVyR3VpZGVMaW5lKGkpfSksai5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dFwiLGZ1bmN0aW9uKCl7eC50b29sdGlwSGlkZSgpLGYuY2xlYXJIaWdobGlnaHRzKCl9KSxpLmRpc3BhdGNoLm9uKFwibGVnZW5kQ2xpY2tcIixmdW5jdGlvbihhKXthLmRpc2FibGVkPSFhLmRpc2FibGVkLGsuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkubGVuZ3RofHxrLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD0hMSxFLnNlbGVjdEFsbChcIi5udi1zZXJpZXNcIikuY2xhc3NlZChcImRpc2FibGVkXCIsITEpLGF9KSx1LmRpc2FibGVkPWsubWFwKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5kaXNhYmxlZH0pLHguc3RhdGVDaGFuZ2UodSksYi50cmFuc2l0aW9uKCkuY2FsbChjKX0pLGkuZGlzcGF0Y2gub24oXCJsZWdlbmREYmxjbGlja1wiLGZ1bmN0aW9uKGEpe2suZm9yRWFjaChmdW5jdGlvbihhKXthLmRpc2FibGVkPSEwfSksYS5kaXNhYmxlZD0hMSx1LmRpc2FibGVkPWsubWFwKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5kaXNhYmxlZH0pLHguc3RhdGVDaGFuZ2UodSksYy51cGRhdGUoKX0pLHgub24oXCJjaGFuZ2VTdGF0ZVwiLGZ1bmN0aW9uKGEpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBhLmRpc2FibGVkJiYoay5mb3JFYWNoKGZ1bmN0aW9uKGIsYyl7Yi5kaXNhYmxlZD1hLmRpc2FibGVkW2NdfSksdS5kaXNhYmxlZD1hLmRpc2FibGVkKSxjLnVwZGF0ZSgpfSl9KSx6LnJlbmRlckVuZChcImhpc3RvcmljYWxCYXJDaGFydCBpbW1lZGlhdGVcIiksY312YXIgZCxlLGY9Ynx8YS5tb2RlbHMuaGlzdG9yaWNhbEJhcigpLGc9YS5tb2RlbHMuYXhpcygpLGg9YS5tb2RlbHMuYXhpcygpLGk9YS5tb2RlbHMubGVnZW5kKCksaj1hLmludGVyYWN0aXZlR3VpZGVsaW5lKCksaz1hLm1vZGVscy50b29sdGlwKCksbD17dG9wOjMwLHJpZ2h0OjkwLGJvdHRvbTo1MCxsZWZ0OjkwfSxtPWEudXRpbHMuZGVmYXVsdENvbG9yKCksbj1udWxsLG89bnVsbCxwPSExLHE9ITAscj0hMCxzPSExLHQ9ITEsdT17fSx2PW51bGwsdz1udWxsLHg9ZDMuZGlzcGF0Y2goXCJ0b29sdGlwSGlkZVwiLFwic3RhdGVDaGFuZ2VcIixcImNoYW5nZVN0YXRlXCIsXCJyZW5kZXJFbmRcIikseT0yNTA7Zy5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoNyksaC5vcmllbnQocz9cInJpZ2h0XCI6XCJsZWZ0XCIpLGsuZHVyYXRpb24oMCkuaGVhZGVyRW5hYmxlZCghMSkudmFsdWVGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gaC50aWNrRm9ybWF0KCkoYSxiKX0pLmhlYWRlckZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBnLnRpY2tGb3JtYXQoKShhLGIpfSk7dmFyIHo9YS51dGlscy5yZW5kZXJXYXRjaCh4LDApO3JldHVybiBmLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7YS5zZXJpZXM9e2tleTpjLngoKShhLmRhdGEpLHZhbHVlOmMueSgpKGEuZGF0YSksY29sb3I6YS5jb2xvcn0say5kYXRhKGEpLmhpZGRlbighMSl9KSxmLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3V0LnRvb2x0aXBcIixmdW5jdGlvbigpe2suaGlkZGVuKCEwKX0pLGYuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2Vtb3ZlLnRvb2x0aXBcIixmdW5jdGlvbigpe2sucG9zaXRpb24oe3RvcDpkMy5ldmVudC5wYWdlWSxsZWZ0OmQzLmV2ZW50LnBhZ2VYfSkoKX0pLGMuZGlzcGF0Y2g9eCxjLmJhcnM9ZixjLmxlZ2VuZD1pLGMueEF4aXM9ZyxjLnlBeGlzPWgsYy5pbnRlcmFjdGl2ZUxheWVyPWosYy50b29sdGlwPWssYy5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChjKSxjLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWF9fSxzaG93TGVnZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LHNob3dYQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXtxPWF9fSxzaG93WUF4aXM6e2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oYSl7cj1hfX0sZGVmYXVsdFN0YXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sc2V0OmZ1bmN0aW9uKGEpe3Y9YX19LG5vRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHd9LHNldDpmdW5jdGlvbihhKXt3PWF9fSx0b29sdGlwczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGsuZW5hYmxlZCgpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcHNcIixcInVzZSBjaGFydC50b29sdGlwLmVuYWJsZWQoKSBpbnN0ZWFkXCIpLGsuZW5hYmxlZCghIWIpfX0sdG9vbHRpcENvbnRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBrLmNvbnRlbnRHZW5lcmF0b3IoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBDb250ZW50XCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5jb250ZW50R2VuZXJhdG9yKCkgaW5zdGVhZFwiKSxrLmNvbnRlbnRHZW5lcmF0b3IoYil9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bC50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6bC50b3AsbC5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6bC5yaWdodCxsLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTpsLmJvdHRvbSxsLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpsLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihiKXttPWEudXRpbHMuZ2V0Q29sb3IoYiksaS5jb2xvcihtKSxmLmNvbG9yKG0pfX0sZHVyYXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiB5fSxzZXQ6ZnVuY3Rpb24oYSl7eT1hLHoucmVzZXQoeSksaC5kdXJhdGlvbih5KSxnLmR1cmF0aW9uKHkpfX0scmlnaHRBbGlnbllBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YSxoLm9yaWVudChhP1wicmlnaHRcIjpcImxlZnRcIil9fSx1c2VJbnRlcmFjdGl2ZUd1aWRlbGluZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWEsYT09PSEwJiZjLmludGVyYWN0aXZlKCExKX19fSksYS51dGlscy5pbmhlcml0T3B0aW9ucyhjLGYpLGEudXRpbHMuaW5pdE9wdGlvbnMoYyksY30sYS5tb2RlbHMub2hsY0JhckNoYXJ0PWZ1bmN0aW9uKCl7dmFyIGI9YS5tb2RlbHMuaGlzdG9yaWNhbEJhckNoYXJ0KGEubW9kZWxzLm9obGNCYXIoKSk7cmV0dXJuIGIudXNlSW50ZXJhY3RpdmVHdWlkZWxpbmUoITApLGIuaW50ZXJhY3RpdmVMYXllci50b29sdGlwLmNvbnRlbnRHZW5lcmF0b3IoZnVuY3Rpb24oYSl7dmFyIGM9YS5zZXJpZXNbMF0uZGF0YSxkPWMub3BlbjxjLmNsb3NlP1wiMmNhMDJjXCI6XCJkNjI3MjhcIjtyZXR1cm4nPGgzIHN0eWxlPVwiY29sb3I6ICMnK2QrJ1wiPicrYS52YWx1ZStcIjwvaDM+PHRhYmxlPjx0cj48dGQ+b3Blbjo8L3RkPjx0ZD5cIitiLnlBeGlzLnRpY2tGb3JtYXQoKShjLm9wZW4pK1wiPC90ZD48L3RyPjx0cj48dGQ+Y2xvc2U6PC90ZD48dGQ+XCIrYi55QXhpcy50aWNrRm9ybWF0KCkoYy5jbG9zZSkrXCI8L3RkPjwvdHI+PHRyPjx0ZD5oaWdoPC90ZD48dGQ+XCIrYi55QXhpcy50aWNrRm9ybWF0KCkoYy5oaWdoKStcIjwvdGQ+PC90cj48dHI+PHRkPmxvdzo8L3RkPjx0ZD5cIitiLnlBeGlzLnRpY2tGb3JtYXQoKShjLmxvdykrXCI8L3RkPjwvdHI+PC90YWJsZT5cIn0pLGJ9LGEubW9kZWxzLmNhbmRsZXN0aWNrQmFyQ2hhcnQ9ZnVuY3Rpb24oKXt2YXIgYj1hLm1vZGVscy5oaXN0b3JpY2FsQmFyQ2hhcnQoYS5tb2RlbHMuY2FuZGxlc3RpY2tCYXIoKSk7cmV0dXJuIGIudXNlSW50ZXJhY3RpdmVHdWlkZWxpbmUoITApLGIuaW50ZXJhY3RpdmVMYXllci50b29sdGlwLmNvbnRlbnRHZW5lcmF0b3IoZnVuY3Rpb24oYSl7dmFyIGM9YS5zZXJpZXNbMF0uZGF0YSxkPWMub3BlbjxjLmNsb3NlP1wiMmNhMDJjXCI6XCJkNjI3MjhcIjtyZXR1cm4nPGgzIHN0eWxlPVwiY29sb3I6ICMnK2QrJ1wiPicrYS52YWx1ZStcIjwvaDM+PHRhYmxlPjx0cj48dGQ+b3Blbjo8L3RkPjx0ZD5cIitiLnlBeGlzLnRpY2tGb3JtYXQoKShjLm9wZW4pK1wiPC90ZD48L3RyPjx0cj48dGQ+Y2xvc2U6PC90ZD48dGQ+XCIrYi55QXhpcy50aWNrRm9ybWF0KCkoYy5jbG9zZSkrXCI8L3RkPjwvdHI+PHRyPjx0ZD5oaWdoPC90ZD48dGQ+XCIrYi55QXhpcy50aWNrRm9ybWF0KCkoYy5oaWdoKStcIjwvdGQ+PC90cj48dHI+PHRkPmxvdzo8L3RkPjx0ZD5cIitiLnlBeGlzLnRpY2tGb3JtYXQoKShjLmxvdykrXCI8L3RkPjwvdHI+PC90YWJsZT5cIn0pLGJ9LGEubW9kZWxzLmxlZ2VuZD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIocCl7ZnVuY3Rpb24gcShhLGIpe3JldHVyblwiZnVyaW91c1wiIT1vP1wiIzAwMFwiOm0/YS5kaXNlbmdhZ2VkP1wiIzAwMFwiOlwiI2ZmZlwiOm0/dm9pZCAwOihhLmNvbG9yfHwoYS5jb2xvcj1nKGEsYikpLGEuZGlzYWJsZWQ/YS5jb2xvcjpcIiNmZmZcIil9ZnVuY3Rpb24gcihhLGIpe3JldHVybiBtJiZcImZ1cmlvdXNcIj09byYmYS5kaXNlbmdhZ2VkP1wiI2VlZVwiOmEuY29sb3J8fGcoYSxiKX1mdW5jdGlvbiBzKGEpe3JldHVybiBtJiZcImZ1cmlvdXNcIj09bz8xOmEuZGlzYWJsZWQ/MDoxfXJldHVybiBwLmVhY2goZnVuY3Rpb24oYil7dmFyIGc9ZC1jLmxlZnQtYy5yaWdodCxwPWQzLnNlbGVjdCh0aGlzKTthLnV0aWxzLmluaXRTVkcocCk7dmFyIHQ9cC5zZWxlY3RBbGwoXCJnLm52LWxlZ2VuZFwiKS5kYXRhKFtiXSksdT10LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtbGVnZW5kXCIpLmFwcGVuZChcImdcIiksdj10LnNlbGVjdChcImdcIik7dC5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrYy5sZWZ0K1wiLFwiK2MudG9wK1wiKVwiKTt2YXIgdyx4LHk9di5zZWxlY3RBbGwoXCIubnYtc2VyaWVzXCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuXCJmdXJpb3VzXCIhPW8/YTphLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gbT8hMDohYS5kaXNlbmdhZ2VkfSl9KSx6PXkuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtc2VyaWVzXCIpO3N3aXRjaChvKXtjYXNlXCJmdXJpb3VzXCI6eD0yMzticmVhaztjYXNlXCJjbGFzc2ljXCI6eD0yMH1pZihcImNsYXNzaWNcIj09byl6LmFwcGVuZChcImNpcmNsZVwiKS5zdHlsZShcInN0cm9rZS13aWR0aFwiLDIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGVnZW5kLXN5bWJvbFwiKS5hdHRyKFwiclwiLDUpLHc9eS5zZWxlY3QoXCJjaXJjbGVcIik7ZWxzZSBpZihcImZ1cmlvdXNcIj09byl7ei5hcHBlbmQoXCJyZWN0XCIpLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsMikuYXR0cihcImNsYXNzXCIsXCJudi1sZWdlbmQtc3ltYm9sXCIpLmF0dHIoXCJyeFwiLDMpLmF0dHIoXCJyeVwiLDMpLHc9eS5zZWxlY3QoXCIubnYtbGVnZW5kLXN5bWJvbFwiKSx6LmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1jaGVjay1ib3hcIikucHJvcGVydHkoXCJpbm5lckhUTUxcIiwnPHBhdGggZD1cIk0wLjUsNSBMMjIuNSw1IEwyMi41LDI2LjUgTDAuNSwyNi41IEwwLjUsNSBaXCIgY2xhc3M9XCJudi1ib3hcIj48L3BhdGg+PHBhdGggZD1cIk01LjUsMTIuODYxODQ2NyBMMTEuOTE4NTA4OSwxOS4yODAzNTU2IEwzMSwwLjE5ODg2NDUxMVwiIGNsYXNzPVwibnYtY2hlY2tcIj48L3BhdGg+JykuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKC0xMCwtOClzY2FsZSgwLjUpXCIpO3ZhciBBPXkuc2VsZWN0KFwiLm52LWNoZWNrLWJveFwiKTtBLmVhY2goZnVuY3Rpb24oYSxiKXtkMy5zZWxlY3QodGhpcykuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3Ryb2tlXCIscShhLGIpKX0pfXouYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwidGV4dC1hbmNob3JcIixcInN0YXJ0XCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGVnZW5kLXRleHRcIikuYXR0cihcImR5XCIsXCIuMzJlbVwiKS5hdHRyKFwiZHhcIixcIjhcIik7dmFyIEI9eS5zZWxlY3QoXCJ0ZXh0Lm52LWxlZ2VuZC10ZXh0XCIpO3kub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihhLGIpe24ubGVnZW5kTW91c2VvdmVyKGEsYil9KS5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oYSxiKXtuLmxlZ2VuZE1vdXNlb3V0KGEsYil9KS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSxiKXtuLmxlZ2VuZENsaWNrKGEsYik7dmFyIGM9eS5kYXRhKCk7aWYoayl7aWYoXCJjbGFzc2ljXCI9PW8pbD8oYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZGlzYWJsZWQ9ITB9KSxhLmRpc2FibGVkPSExKTooYS5kaXNhYmxlZD0hYS5kaXNhYmxlZCxjLmV2ZXJ5KGZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkfSkmJmMuZm9yRWFjaChmdW5jdGlvbihhKXthLmRpc2FibGVkPSExfSkpO2Vsc2UgaWYoXCJmdXJpb3VzXCI9PW8paWYobSlhLmRpc2VuZ2FnZWQ9IWEuZGlzZW5nYWdlZCxhLnVzZXJEaXNhYmxlZD12b2lkIDA9PWEudXNlckRpc2FibGVkPyEhYS5kaXNhYmxlZDphLnVzZXJEaXNhYmxlZCxhLmRpc2FibGVkPWEuZGlzZW5nYWdlZHx8YS51c2VyRGlzYWJsZWQ7ZWxzZSBpZighbSl7YS5kaXNhYmxlZD0hYS5kaXNhYmxlZCxhLnVzZXJEaXNhYmxlZD1hLmRpc2FibGVkO3ZhciBkPWMuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2VuZ2FnZWR9KTtkLmV2ZXJ5KGZ1bmN0aW9uKGEpe3JldHVybiBhLnVzZXJEaXNhYmxlZH0pJiZjLmZvckVhY2goZnVuY3Rpb24oYSl7YS5kaXNhYmxlZD1hLnVzZXJEaXNhYmxlZD0hMX0pfW4uc3RhdGVDaGFuZ2Uoe2Rpc2FibGVkOmMubWFwKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5kaXNhYmxlZH0pLGRpc2VuZ2FnZWQ6Yy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuISFhLmRpc2VuZ2FnZWR9KX0pfX0pLm9uKFwiZGJsY2xpY2tcIixmdW5jdGlvbihhLGIpe2lmKChcImZ1cmlvdXNcIiE9b3x8IW0pJiYobi5sZWdlbmREYmxjbGljayhhLGIpLGspKXt2YXIgYz15LmRhdGEoKTtjLmZvckVhY2goZnVuY3Rpb24oYSl7YS5kaXNhYmxlZD0hMCxcImZ1cmlvdXNcIj09byYmKGEudXNlckRpc2FibGVkPWEuZGlzYWJsZWQpfSksYS5kaXNhYmxlZD0hMSxcImZ1cmlvdXNcIj09byYmKGEudXNlckRpc2FibGVkPWEuZGlzYWJsZWQpLG4uc3RhdGVDaGFuZ2Uoe2Rpc2FibGVkOmMubWFwKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5kaXNhYmxlZH0pfSl9fSkseS5jbGFzc2VkKFwibnYtZGlzYWJsZWRcIixmdW5jdGlvbihhKXtyZXR1cm4gYS51c2VyRGlzYWJsZWR9KSx5LmV4aXQoKS5yZW1vdmUoKSxCLmF0dHIoXCJmaWxsXCIscSkudGV4dChmKTt2YXIgQz0wO2lmKGgpe3ZhciBEPVtdO3kuZWFjaChmdW5jdGlvbigpe3ZhciBiLGM9ZDMuc2VsZWN0KHRoaXMpLnNlbGVjdChcInRleHRcIik7dHJ5e2lmKGI9Yy5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCksMD49Yil0aHJvdyBFcnJvcigpfWNhdGNoKGQpe2I9YS51dGlscy5jYWxjQXBwcm94VGV4dFdpZHRoKGMpfUQucHVzaChiK2kpfSk7dmFyIEU9MCxGPVtdO2ZvcihDPTA7Zz5DJiZFPEQubGVuZ3RoOylGW0VdPURbRV0sQys9RFtFKytdO2ZvcigwPT09RSYmKEU9MSk7Qz5nJiZFPjE7KXtGPVtdLEUtLTtmb3IodmFyIEc9MDtHPEQubGVuZ3RoO0crKylEW0ddPihGW0clRV18fDApJiYoRltHJUVdPURbR10pO0M9Ri5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYStifSl9Zm9yKHZhciBIPVtdLEk9MCxKPTA7RT5JO0krKylIW0ldPUosSis9RltJXTt5LmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiK0hbYiVFXStcIixcIisoNStNYXRoLmZsb29yKGIvRSkqeCkrXCIpXCJ9KSxqP3YuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiKyhkLWMucmlnaHQtQykrXCIsXCIrYy50b3ArXCIpXCIpOnYuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrYy50b3ArXCIpXCIpLGU9Yy50b3ArYy5ib3R0b20rTWF0aC5jZWlsKEQubGVuZ3RoL0UpKnh9ZWxzZXt2YXIgSyxMPTUsTT01LE49MDt5LmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbigpe3ZhciBhPWQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoXCJ0ZXh0XCIpLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKStpO3JldHVybiBLPU0sZDxjLmxlZnQrYy5yaWdodCtLK2EmJihNPUs9NSxMKz14KSxNKz1hLE0+TiYmKE49TSksSytOPkMmJihDPUsrTiksXCJ0cmFuc2xhdGUoXCIrSytcIixcIitMK1wiKVwifSksdi5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrKGQtYy5yaWdodC1OKStcIixcIitjLnRvcCtcIilcIiksZT1jLnRvcCtjLmJvdHRvbStMKzE1fWlmKFwiZnVyaW91c1wiPT1vKXt3LmF0dHIoXCJ3aWR0aFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIEJbMF1bYl0uZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkrMjd9KS5hdHRyKFwiaGVpZ2h0XCIsMTgpLmF0dHIoXCJ5XCIsLTkpLmF0dHIoXCJ4XCIsLTE1KSx1Lmluc2VydChcInJlY3RcIixcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZC1iZ1wiKS5hdHRyKFwiZmlsbFwiLFwiI2VlZVwiKS5hdHRyKFwib3BhY2l0eVwiLDApO3ZhciBPPXYuc2VsZWN0KFwiLm52LWxlZ2VuZC1iZ1wiKTtPLnRyYW5zaXRpb24oKS5kdXJhdGlvbigzMDApLmF0dHIoXCJ4XCIsLXgpLmF0dHIoXCJ3aWR0aFwiLEMreC0xMikuYXR0cihcImhlaWdodFwiLGUrMTApLmF0dHIoXCJ5XCIsLWMudG9wLTEwKS5hdHRyKFwib3BhY2l0eVwiLG0/MTowKX13LnN0eWxlKFwiZmlsbFwiLHIpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIscykuc3R5bGUoXCJzdHJva2VcIixyKX0pLGJ9dmFyIGM9e3RvcDo1LHJpZ2h0OjAsYm90dG9tOjUsbGVmdDowfSxkPTQwMCxlPTIwLGY9ZnVuY3Rpb24oYSl7cmV0dXJuIGEua2V5fSxnPWEudXRpbHMuZ2V0Q29sb3IoKSxoPSEwLGk9MzIsaj0hMCxrPSEwLGw9ITEsbT0hMSxuPWQzLmRpc3BhdGNoKFwibGVnZW5kQ2xpY2tcIixcImxlZ2VuZERibGNsaWNrXCIsXCJsZWdlbmRNb3VzZW92ZXJcIixcImxlZ2VuZE1vdXNlb3V0XCIsXCJzdGF0ZUNoYW5nZVwiKSxvPVwiY2xhc3NpY1wiO3JldHVybiBiLmRpc3BhdGNoPW4sYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGEpe2Q9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbihhKXtlPWF9fSxrZXk6e2dldDpmdW5jdGlvbigpe3JldHVybiBmfSxzZXQ6ZnVuY3Rpb24oYSl7Zj1hfX0sYWxpZ246e2dldDpmdW5jdGlvbigpe3JldHVybiBofSxzZXQ6ZnVuY3Rpb24oYSl7aD1hfX0scmlnaHRBbGlnbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihhKXtqPWF9fSxwYWRkaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGEpe2k9YX19LHVwZGF0ZVN0YXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YX19LHJhZGlvQnV0dG9uTW9kZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsPWF9fSxleHBhbmRlZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSx2ZXJzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKGEpe289YX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGN9LHNldDpmdW5jdGlvbihhKXtjLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpjLnRvcCxjLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpjLnJpZ2h0LGMuYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmMuYm90dG9tLGMubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmMubGVmdH19LGNvbG9yOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKGIpe2c9YS51dGlscy5nZXRDb2xvcihiKX19fSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5saW5lPWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihyKXtyZXR1cm4gdi5yZXNldCgpLHYubW9kZWxzKGUpLHIuZWFjaChmdW5jdGlvbihiKXtpPWQzLnNlbGVjdCh0aGlzKTt2YXIgcj1hLnV0aWxzLmF2YWlsYWJsZVdpZHRoKGcsaSxmKSxzPWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KGgsaSxmKTthLnV0aWxzLmluaXRTVkcoaSksYz1lLnhTY2FsZSgpLGQ9ZS55U2NhbGUoKSx0PXR8fGMsdT11fHxkO3ZhciB3PWkuc2VsZWN0QWxsKFwiZy5udi13cmFwLm52LWxpbmVcIikuZGF0YShbYl0pLHg9dy5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtbGluZVwiKSx5PXguYXBwZW5kKFwiZGVmc1wiKSx6PXguYXBwZW5kKFwiZ1wiKSxBPXcuc2VsZWN0KFwiZ1wiKTt6LmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1ncm91cHNcIiksei5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtc2NhdHRlcldyYXBcIiksdy5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrZi5sZWZ0K1wiLFwiK2YudG9wK1wiKVwiKSxlLndpZHRoKHIpLmhlaWdodChzKTt2YXIgQj13LnNlbGVjdChcIi5udi1zY2F0dGVyV3JhcFwiKTtCLmNhbGwoZSkseS5hcHBlbmQoXCJjbGlwUGF0aFwiKS5hdHRyKFwiaWRcIixcIm52LWVkZ2UtY2xpcC1cIitlLmlkKCkpLmFwcGVuZChcInJlY3RcIiksdy5zZWxlY3QoXCIjbnYtZWRnZS1jbGlwLVwiK2UuaWQoKStcIiByZWN0XCIpLmF0dHIoXCJ3aWR0aFwiLHIpLmF0dHIoXCJoZWlnaHRcIixzPjA/czowKSxBLmF0dHIoXCJjbGlwLXBhdGhcIixwP1widXJsKCNudi1lZGdlLWNsaXAtXCIrZS5pZCgpK1wiKVwiOlwiXCIpLEIuYXR0cihcImNsaXAtcGF0aFwiLHA/XCJ1cmwoI252LWVkZ2UtY2xpcC1cIitlLmlkKCkrXCIpXCI6XCJcIik7dmFyIEM9dy5zZWxlY3QoXCIubnYtZ3JvdXBzXCIpLnNlbGVjdEFsbChcIi5udi1ncm91cFwiKS5kYXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhfSxmdW5jdGlvbihhKXtyZXR1cm4gYS5rZXl9KTtDLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMWUtNikuc3R5bGUoXCJzdHJva2Utd2lkdGhcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHJva2VXaWR0aHx8an0pLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsMWUtNiksQy5leGl0KCkucmVtb3ZlKCksQy5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihhLGIpe3JldHVybihhLmNsYXNzZWR8fFwiXCIpK1wiIG52LWdyb3VwIG52LXNlcmllcy1cIitifSkuY2xhc3NlZChcImhvdmVyXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEuaG92ZXJ9KS5zdHlsZShcImZpbGxcIixmdW5jdGlvbihhLGIpe3JldHVybiBrKGEsYil9KS5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGsoYSxiKX0pLEMud2F0Y2hUcmFuc2l0aW9uKHYsXCJsaW5lOiBncm91cHNcIikuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDEpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEuZmlsbE9wYWNpdHl8fC41fSk7dmFyIEQ9Qy5zZWxlY3RBbGwoXCJwYXRoLm52LWFyZWFcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm4gbyhhKT9bYV06W119KTtELmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LWFyZWFcIikuYXR0cihcImRcIixmdW5jdGlvbihiKXtyZXR1cm4gZDMuc3ZnLmFyZWEoKS5pbnRlcnBvbGF0ZShxKS5kZWZpbmVkKG4pLngoZnVuY3Rpb24oYixjKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8odChsKGIsYykpKX0pLnkwKGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEudXRpbHMuTmFOdG9aZXJvKHUobShiLGMpKSl9KS55MShmdW5jdGlvbigpe3JldHVybiB1KGQuZG9tYWluKClbMF08PTA/ZC5kb21haW4oKVsxXT49MD8wOmQuZG9tYWluKClbMV06ZC5kb21haW4oKVswXSl9KS5hcHBseSh0aGlzLFtiLnZhbHVlc10pfSksQy5leGl0KCkuc2VsZWN0QWxsKFwicGF0aC5udi1hcmVhXCIpLnJlbW92ZSgpLEQud2F0Y2hUcmFuc2l0aW9uKHYsXCJsaW5lOiBhcmVhUGF0aHNcIikuYXR0cihcImRcIixmdW5jdGlvbihiKXtyZXR1cm4gZDMuc3ZnLmFyZWEoKS5pbnRlcnBvbGF0ZShxKS5kZWZpbmVkKG4pLngoZnVuY3Rpb24oYixkKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8oYyhsKGIsZCkpKX0pLnkwKGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEudXRpbHMuTmFOdG9aZXJvKGQobShiLGMpKSl9KS55MShmdW5jdGlvbigpe3JldHVybiBkKGQuZG9tYWluKClbMF08PTA/ZC5kb21haW4oKVsxXT49MD8wOmQuZG9tYWluKClbMV06ZC5kb21haW4oKVswXSl9KS5hcHBseSh0aGlzLFtiLnZhbHVlc10pfSk7dmFyIEU9Qy5zZWxlY3RBbGwoXCJwYXRoLm52LWxpbmVcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm5bYS52YWx1ZXNdfSk7RS5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsXCJudi1saW5lXCIpLmF0dHIoXCJkXCIsZDMuc3ZnLmxpbmUoKS5pbnRlcnBvbGF0ZShxKS5kZWZpbmVkKG4pLngoZnVuY3Rpb24oYixjKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8odChsKGIsYykpKX0pLnkoZnVuY3Rpb24oYixjKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8odShtKGIsYykpKX0pKSxFLndhdGNoVHJhbnNpdGlvbih2LFwibGluZTogbGluZVBhdGhzXCIpLmF0dHIoXCJkXCIsZDMuc3ZnLmxpbmUoKS5pbnRlcnBvbGF0ZShxKS5kZWZpbmVkKG4pLngoZnVuY3Rpb24oYixkKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8oYyhsKGIsZCkpKX0pLnkoZnVuY3Rpb24oYixjKXtyZXR1cm4gYS51dGlscy5OYU50b1plcm8oZChtKGIsYykpKX0pKSx0PWMuY29weSgpLHU9ZC5jb3B5KCl9KSx2LnJlbmRlckVuZChcImxpbmUgaW1tZWRpYXRlXCIpLGJ9dmFyIGMsZCxlPWEubW9kZWxzLnNjYXR0ZXIoKSxmPXt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0sZz05NjAsaD01MDAsaT1udWxsLGo9MS41LGs9YS51dGlscy5kZWZhdWx0Q29sb3IoKSxsPWZ1bmN0aW9uKGEpe3JldHVybiBhLnh9LG09ZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0sbj1mdW5jdGlvbihhLGIpe3JldHVybiFpc05hTihtKGEsYikpJiZudWxsIT09bShhLGIpfSxvPWZ1bmN0aW9uKGEpe3JldHVybiBhLmFyZWF9LHA9ITEscT1cImxpbmVhclwiLHI9MjUwLHM9ZDMuZGlzcGF0Y2goXCJlbGVtZW50Q2xpY2tcIixcImVsZW1lbnRNb3VzZW92ZXJcIixcImVsZW1lbnRNb3VzZW91dFwiLFwicmVuZGVyRW5kXCIpO2UucG9pbnRTaXplKDE2KS5wb2ludERvbWFpbihbMTYsMjU2XSk7dmFyIHQsdSx2PWEudXRpbHMucmVuZGVyV2F0Y2gocyxyKTtyZXR1cm4gYi5kaXNwYXRjaD1zLGIuc2NhdHRlcj1lLGUuZGlzcGF0Y2gub24oXCJlbGVtZW50Q2xpY2tcIixmdW5jdGlvbigpe3MuZWxlbWVudENsaWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLGUuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdmVyXCIsZnVuY3Rpb24oKXtzLmVsZW1lbnRNb3VzZW92ZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSksZS5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dFwiLGZ1bmN0aW9uKCl7cy5lbGVtZW50TW91c2VvdXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSksYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKGEpe2c9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoPWF9fSxkZWZpbmVkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LGludGVycG9sYXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcX0sc2V0OmZ1bmN0aW9uKGEpe3E9YX19LGNsaXBFZGdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpmLnRvcCxmLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpmLnJpZ2h0LGYuYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmYuYm90dG9tLGYubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmYubGVmdH19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKGEpe3I9YSx2LnJlc2V0KHIpLGUuZHVyYXRpb24ocil9fSxpc0FyZWE6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1kMy5mdW5jdG9yKGEpfX0seDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsPWEsZS54KGEpfX0seTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWEsZS55KGEpfX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYil7az1hLnV0aWxzLmdldENvbG9yKGIpLGUuY29sb3Ioayl9fX0pLGEudXRpbHMuaW5oZXJpdE9wdGlvbnMoYixlKSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLmxpbmVDaGFydD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoail7cmV0dXJuIHkucmVzZXQoKSx5Lm1vZGVscyhlKSxwJiZ5Lm1vZGVscyhmKSxxJiZ5Lm1vZGVscyhnKSxqLmVhY2goZnVuY3Rpb24oail7dmFyIHY9ZDMuc2VsZWN0KHRoaXMpLHk9dGhpczthLnV0aWxzLmluaXRTVkcodik7dmFyIEI9YS51dGlscy5hdmFpbGFibGVXaWR0aChtLHYsayksQz1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChuLHYsayk7aWYoYi51cGRhdGU9ZnVuY3Rpb24oKXswPT09eD92LmNhbGwoYik6di50cmFuc2l0aW9uKCkuZHVyYXRpb24oeCkuY2FsbChiKX0sYi5jb250YWluZXI9dGhpcyx0LnNldHRlcihBKGopLGIudXBkYXRlKS5nZXR0ZXIoeihqKSkudXBkYXRlKCksdC5kaXNhYmxlZD1qLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hIWEuZGlzYWJsZWR9KSwhdSl7dmFyIEQ7dT17fTtmb3IoRCBpbiB0KXVbRF09dFtEXWluc3RhbmNlb2YgQXJyYXk/dFtEXS5zbGljZSgwKTp0W0RdXG59aWYoIShqJiZqLmxlbmd0aCYmai5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLmxlbmd0aH0pLmxlbmd0aCkpcmV0dXJuIGEudXRpbHMubm9EYXRhKGIsdiksYjt2LnNlbGVjdEFsbChcIi5udi1ub0RhdGFcIikucmVtb3ZlKCksYz1lLnhTY2FsZSgpLGQ9ZS55U2NhbGUoKTt2YXIgRT12LnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1saW5lQ2hhcnRcIikuZGF0YShbal0pLEY9RS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtbGluZUNoYXJ0XCIpLmFwcGVuZChcImdcIiksRz1FLnNlbGVjdChcImdcIik7Ri5hcHBlbmQoXCJyZWN0XCIpLnN0eWxlKFwib3BhY2l0eVwiLDApLEYuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXggbnYtYXhpc1wiKSxGLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi15IG52LWF4aXNcIiksRi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGluZXNXcmFwXCIpLEYuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZFdyYXBcIiksRi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtaW50ZXJhY3RpdmVcIiksRy5zZWxlY3QoXCJyZWN0XCIpLmF0dHIoXCJ3aWR0aFwiLEIpLmF0dHIoXCJoZWlnaHRcIixDPjA/QzowKSxvJiYoaC53aWR0aChCKSxHLnNlbGVjdChcIi5udi1sZWdlbmRXcmFwXCIpLmRhdHVtKGopLmNhbGwoaCksay50b3AhPWguaGVpZ2h0KCkmJihrLnRvcD1oLmhlaWdodCgpLEM9YS51dGlscy5hdmFpbGFibGVIZWlnaHQobix2LGspKSxFLnNlbGVjdChcIi5udi1sZWdlbmRXcmFwXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiKy1rLnRvcCtcIilcIikpLEUuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2subGVmdCtcIixcIitrLnRvcCtcIilcIiksciYmRy5zZWxlY3QoXCIubnYteS5udi1heGlzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitCK1wiLDApXCIpLHMmJihpLndpZHRoKEIpLmhlaWdodChDKS5tYXJnaW4oe2xlZnQ6ay5sZWZ0LHRvcDprLnRvcH0pLnN2Z0NvbnRhaW5lcih2KS54U2NhbGUoYyksRS5zZWxlY3QoXCIubnYtaW50ZXJhY3RpdmVcIikuY2FsbChpKSksZS53aWR0aChCKS5oZWlnaHQoQykuY29sb3Ioai5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8bChhLGIpfSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIWpbYl0uZGlzYWJsZWR9KSk7dmFyIEg9Ry5zZWxlY3QoXCIubnYtbGluZXNXcmFwXCIpLmRhdHVtKGouZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkpO0guY2FsbChlKSxwJiYoZi5zY2FsZShjKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NYKEIvMTAwLGopKS50aWNrU2l6ZSgtQywwKSxHLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrZC5yYW5nZSgpWzBdK1wiKVwiKSxHLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuY2FsbChmKSkscSYmKGcuc2NhbGUoZCkuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWShDLzM2LGopKS50aWNrU2l6ZSgtQiwwKSxHLnNlbGVjdChcIi5udi15Lm52LWF4aXNcIikuY2FsbChnKSksaC5kaXNwYXRjaC5vbihcInN0YXRlQ2hhbmdlXCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBjIGluIGEpdFtjXT1hW2NdO3cuc3RhdGVDaGFuZ2UodCksYi51cGRhdGUoKX0pLGkuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2Vtb3ZlXCIsZnVuY3Rpb24oYyl7ZS5jbGVhckhpZ2hsaWdodHMoKTt2YXIgZCxoLG0sbj1bXTtpZihqLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBhLnNlcmllc0luZGV4PWIsIWEuZGlzYWJsZWR9KS5mb3JFYWNoKGZ1bmN0aW9uKGYsZyl7aD1hLmludGVyYWN0aXZlQmlzZWN0KGYudmFsdWVzLGMucG9pbnRYVmFsdWUsYi54KCkpO3ZhciBpPWYudmFsdWVzW2hdLGo9Yi55KCkoaSxoKTtudWxsIT1qJiZlLmhpZ2hsaWdodFBvaW50KGcsaCwhMCksdm9pZCAwIT09aSYmKHZvaWQgMD09PWQmJihkPWkpLHZvaWQgMD09PW0mJihtPWIueFNjYWxlKCkoYi54KCkoaSxoKSkpLG4ucHVzaCh7a2V5OmYua2V5LHZhbHVlOmosY29sb3I6bChmLGYuc2VyaWVzSW5kZXgpfSkpfSksbi5sZW5ndGg+Mil7dmFyIG89Yi55U2NhbGUoKS5pbnZlcnQoYy5tb3VzZVkpLHA9TWF0aC5hYnMoYi55U2NhbGUoKS5kb21haW4oKVswXS1iLnlTY2FsZSgpLmRvbWFpbigpWzFdKSxxPS4wMypwLHI9YS5uZWFyZXN0VmFsdWVJbmRleChuLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZX0pLG8scSk7bnVsbCE9PXImJihuW3JdLmhpZ2hsaWdodD0hMCl9dmFyIHM9Zi50aWNrRm9ybWF0KCkoYi54KCkoZCxoKSk7aS50b29sdGlwLnBvc2l0aW9uKHtsZWZ0OmMubW91c2VYK2subGVmdCx0b3A6Yy5tb3VzZVkray50b3B9KS5jaGFydENvbnRhaW5lcih5LnBhcmVudE5vZGUpLnZhbHVlRm9ybWF0dGVyKGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP1wiTi9BXCI6Zy50aWNrRm9ybWF0KCkoYSl9KS5kYXRhKHt2YWx1ZTpzLGluZGV4Omgsc2VyaWVzOm59KSgpLGkucmVuZGVyR3VpZGVMaW5lKG0pfSksaS5kaXNwYXRjaC5vbihcImVsZW1lbnRDbGlja1wiLGZ1bmN0aW9uKGMpe3ZhciBkLGY9W107ai5maWx0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5zZXJpZXNJbmRleD1iLCFhLmRpc2FibGVkfSkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgZz1hLmludGVyYWN0aXZlQmlzZWN0KGUudmFsdWVzLGMucG9pbnRYVmFsdWUsYi54KCkpLGg9ZS52YWx1ZXNbZ107aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGgpe1widW5kZWZpbmVkXCI9PXR5cGVvZiBkJiYoZD1iLnhTY2FsZSgpKGIueCgpKGgsZykpKTt2YXIgaT1iLnlTY2FsZSgpKGIueSgpKGgsZykpO2YucHVzaCh7cG9pbnQ6aCxwb2ludEluZGV4OmcscG9zOltkLGldLHNlcmllc0luZGV4OmUuc2VyaWVzSW5kZXgsc2VyaWVzOmV9KX19KSxlLmRpc3BhdGNoLmVsZW1lbnRDbGljayhmKX0pLGkuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXRcIixmdW5jdGlvbigpe2UuY2xlYXJIaWdobGlnaHRzKCl9KSx3Lm9uKFwiY2hhbmdlU3RhdGVcIixmdW5jdGlvbihhKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5kaXNhYmxlZCYmai5sZW5ndGg9PT1hLmRpc2FibGVkLmxlbmd0aCYmKGouZm9yRWFjaChmdW5jdGlvbihiLGMpe2IuZGlzYWJsZWQ9YS5kaXNhYmxlZFtjXX0pLHQuZGlzYWJsZWQ9YS5kaXNhYmxlZCksYi51cGRhdGUoKX0pfSkseS5yZW5kZXJFbmQoXCJsaW5lQ2hhcnQgaW1tZWRpYXRlXCIpLGJ9dmFyIGMsZCxlPWEubW9kZWxzLmxpbmUoKSxmPWEubW9kZWxzLmF4aXMoKSxnPWEubW9kZWxzLmF4aXMoKSxoPWEubW9kZWxzLmxlZ2VuZCgpLGk9YS5pbnRlcmFjdGl2ZUd1aWRlbGluZSgpLGo9YS5tb2RlbHMudG9vbHRpcCgpLGs9e3RvcDozMCxyaWdodDoyMCxib3R0b206NTAsbGVmdDo2MH0sbD1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLG09bnVsbCxuPW51bGwsbz0hMCxwPSEwLHE9ITAscj0hMSxzPSExLHQ9YS51dGlscy5zdGF0ZSgpLHU9bnVsbCx2PW51bGwsdz1kMy5kaXNwYXRjaChcInRvb2x0aXBTaG93XCIsXCJ0b29sdGlwSGlkZVwiLFwic3RhdGVDaGFuZ2VcIixcImNoYW5nZVN0YXRlXCIsXCJyZW5kZXJFbmRcIikseD0yNTA7Zi5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoNyksZy5vcmllbnQocj9cInJpZ2h0XCI6XCJsZWZ0XCIpLGoudmFsdWVGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gZy50aWNrRm9ybWF0KCkoYSxiKX0pLmhlYWRlckZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBmLnRpY2tGb3JtYXQoKShhLGIpfSk7dmFyIHk9YS51dGlscy5yZW5kZXJXYXRjaCh3LHgpLHo9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue2FjdGl2ZTphLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZH0pfX19LEE9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMCE9PWIuYWN0aXZlJiZhLmZvckVhY2goZnVuY3Rpb24oYSxjKXthLmRpc2FibGVkPSFiLmFjdGl2ZVtjXX0pfX07cmV0dXJuIGUuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdmVyLnRvb2x0aXBcIixmdW5jdGlvbihhKXtqLmRhdGEoYSkucG9zaXRpb24oYS5wb3MpLmhpZGRlbighMSl9KSxlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3V0LnRvb2x0aXBcIixmdW5jdGlvbigpe2ouaGlkZGVuKCEwKX0pLGIuZGlzcGF0Y2g9dyxiLmxpbmVzPWUsYi5sZWdlbmQ9aCxiLnhBeGlzPWYsYi55QXhpcz1nLGIuaW50ZXJhY3RpdmVMYXllcj1pLGIudG9vbHRpcD1qLGIuZGlzcGF0Y2g9dyxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LHNob3dMZWdlbmQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0sc2hvd1hBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LHNob3dZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXtxPWF9fSxkZWZhdWx0U3RhdGU6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT1hfX0sbm9EYXRhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sc2V0OmZ1bmN0aW9uKGEpe3Y9YX19LHRvb2x0aXBzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gai5lbmFibGVkKCl9LHNldDpmdW5jdGlvbihiKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwc1wiLFwidXNlIGNoYXJ0LnRvb2x0aXAuZW5hYmxlZCgpIGluc3RlYWRcIiksai5lbmFibGVkKCEhYil9fSx0b29sdGlwQ29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGouY29udGVudEdlbmVyYXRvcigpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcENvbnRlbnRcIixcInVzZSBjaGFydC50b29sdGlwLmNvbnRlbnRHZW5lcmF0b3IoKSBpbnN0ZWFkXCIpLGouY29udGVudEdlbmVyYXRvcihiKX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LHNldDpmdW5jdGlvbihhKXtrLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDprLnRvcCxrLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDprLnJpZ2h0LGsuYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmsuYm90dG9tLGsubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmsubGVmdH19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geH0sc2V0OmZ1bmN0aW9uKGEpe3g9YSx5LnJlc2V0KHgpLGUuZHVyYXRpb24oeCksZi5kdXJhdGlvbih4KSxnLmR1cmF0aW9uKHgpfX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYil7bD1hLnV0aWxzLmdldENvbG9yKGIpLGguY29sb3IobCksZS5jb2xvcihsKX19LHJpZ2h0QWxpZ25ZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbihhKXtyPWEsZy5vcmllbnQocj9cInJpZ2h0XCI6XCJsZWZ0XCIpfX0sdXNlSW50ZXJhY3RpdmVHdWlkZWxpbmU6e2dldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oYSl7cz1hLHMmJihlLmludGVyYWN0aXZlKCExKSxlLnVzZVZvcm9ub2koITEpKX19fSksYS51dGlscy5pbmhlcml0T3B0aW9ucyhiLGUpLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMubGluZVBsdXNCYXJDaGFydD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIodil7cmV0dXJuIHYuZWFjaChmdW5jdGlvbih2KXtmdW5jdGlvbiBKKGEpe3ZhciBiPSsoXCJlXCI9PWEpLGM9Yj8xOi0xLGQ9WC8zO3JldHVyblwiTVwiKy41KmMrXCIsXCIrZCtcIkE2LDYgMCAwIFwiK2IrXCIgXCIrNi41KmMrXCIsXCIrKGQrNikrXCJWXCIrKDIqZC02KStcIkE2LDYgMCAwIFwiK2IrXCIgXCIrLjUqYytcIixcIisyKmQrXCJaTVwiKzIuNSpjK1wiLFwiKyhkKzgpK1wiVlwiKygyKmQtOCkrXCJNXCIrNC41KmMrXCIsXCIrKGQrOCkrXCJWXCIrKDIqZC04KX1mdW5jdGlvbiBTKCl7dS5lbXB0eSgpfHx1LmV4dGVudChJKSxrYi5kYXRhKFt1LmVtcHR5KCk/ZS5kb21haW4oKTpJXSkuZWFjaChmdW5jdGlvbihhKXt2YXIgYj1lKGFbMF0pLWUucmFuZ2UoKVswXSxjPWUucmFuZ2UoKVsxXS1lKGFbMV0pO2QzLnNlbGVjdCh0aGlzKS5zZWxlY3QoXCIubGVmdFwiKS5hdHRyKFwid2lkdGhcIiwwPmI/MDpiKSxkMy5zZWxlY3QodGhpcykuc2VsZWN0KFwiLnJpZ2h0XCIpLmF0dHIoXCJ4XCIsZShhWzFdKSkuYXR0cihcIndpZHRoXCIsMD5jPzA6Yyl9KX1mdW5jdGlvbiBUKCl7ST11LmVtcHR5KCk/bnVsbDp1LmV4dGVudCgpLGM9dS5lbXB0eSgpP2UuZG9tYWluKCk6dS5leHRlbnQoKSxLLmJydXNoKHtleHRlbnQ6YyxicnVzaDp1fSksUygpLGwud2lkdGgoVikuaGVpZ2h0KFcpLmNvbG9yKHYubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuY29sb3J8fEMoYSxiKX0pLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiF2W2JdLmRpc2FibGVkJiZ2W2JdLmJhcn0pKSxqLndpZHRoKFYpLmhlaWdodChXKS5jb2xvcih2Lm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBhLmNvbG9yfHxDKGEsYil9KS5maWx0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4hdltiXS5kaXNhYmxlZCYmIXZbYl0uYmFyfSkpO3ZhciBiPWRiLnNlbGVjdChcIi5udi1mb2N1cyAubnYtYmFyc1dyYXBcIikuZGF0dW0oWi5sZW5ndGg/Wi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJue2tleTphLmtleSx2YWx1ZXM6YS52YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGwueCgpKGEsYik+PWNbMF0mJmwueCgpKGEsYik8PWNbMV19KX19KTpbe3ZhbHVlczpbXX1dKSxoPWRiLnNlbGVjdChcIi5udi1mb2N1cyAubnYtbGluZXNXcmFwXCIpLmRhdHVtKCRbMF0uZGlzYWJsZWQ/W3t2YWx1ZXM6W119XTokLm1hcChmdW5jdGlvbihhKXtyZXR1cm57YXJlYTphLmFyZWEsZmlsbE9wYWNpdHk6YS5maWxsT3BhY2l0eSxrZXk6YS5rZXksdmFsdWVzOmEudmFsdWVzLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBqLngoKShhLGIpPj1jWzBdJiZqLngoKShhLGIpPD1jWzFdfSl9fSkpO2Q9Wi5sZW5ndGg/bC54U2NhbGUoKTpqLnhTY2FsZSgpLG4uc2NhbGUoZCkuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWChWLzEwMCx2KSkudGlja1NpemUoLVcsMCksbi5kb21haW4oW01hdGguY2VpbChjWzBdKSxNYXRoLmZsb29yKGNbMV0pXSksZGIuc2VsZWN0KFwiLm52LXgubnYtYXhpc1wiKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oTCkuY2FsbChuKSxiLnRyYW5zaXRpb24oKS5kdXJhdGlvbihMKS5jYWxsKGwpLGgudHJhbnNpdGlvbigpLmR1cmF0aW9uKEwpLmNhbGwoaiksZGIuc2VsZWN0KFwiLm52LWZvY3VzIC5udi14Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrZi5yYW5nZSgpWzBdK1wiKVwiKSxwLnNjYWxlKGYpLl90aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1koVy8zNix2KSkudGlja1NpemUoLVYsMCkscS5zY2FsZShnKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NZKFcvMzYsdikpLnRpY2tTaXplKFoubGVuZ3RoPzA6LVYsMCksZGIuc2VsZWN0KFwiLm52LWZvY3VzIC5udi15MS5udi1heGlzXCIpLnN0eWxlKFwib3BhY2l0eVwiLFoubGVuZ3RoPzE6MCksZGIuc2VsZWN0KFwiLm52LWZvY3VzIC5udi15Mi5udi1heGlzXCIpLnN0eWxlKFwib3BhY2l0eVwiLCQubGVuZ3RoJiYhJFswXS5kaXNhYmxlZD8xOjApLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitkLnJhbmdlKClbMV0rXCIsMClcIiksZGIuc2VsZWN0KFwiLm52LWZvY3VzIC5udi15MS5udi1heGlzXCIpLnRyYW5zaXRpb24oKS5kdXJhdGlvbihMKS5jYWxsKHApLGRiLnNlbGVjdChcIi5udi1mb2N1cyAubnYteTIubnYtYXhpc1wiKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oTCkuY2FsbChxKX12YXIgVT1kMy5zZWxlY3QodGhpcyk7YS51dGlscy5pbml0U1ZHKFUpO3ZhciBWPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgoeSxVLHcpLFc9YS51dGlscy5hdmFpbGFibGVIZWlnaHQoeixVLHcpLShFP0g6MCksWD1ILXgudG9wLXguYm90dG9tO2lmKGIudXBkYXRlPWZ1bmN0aW9uKCl7VS50cmFuc2l0aW9uKCkuZHVyYXRpb24oTCkuY2FsbChiKX0sYi5jb250YWluZXI9dGhpcyxNLnNldHRlcihSKHYpLGIudXBkYXRlKS5nZXR0ZXIoUSh2KSkudXBkYXRlKCksTS5kaXNhYmxlZD12Lm1hcChmdW5jdGlvbihhKXtyZXR1cm4hIWEuZGlzYWJsZWR9KSwhTil7dmFyIFk7Tj17fTtmb3IoWSBpbiBNKU5bWV09TVtZXWluc3RhbmNlb2YgQXJyYXk/TVtZXS5zbGljZSgwKTpNW1ldfWlmKCEodiYmdi5sZW5ndGgmJnYuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlcy5sZW5ndGh9KS5sZW5ndGgpKXJldHVybiBhLnV0aWxzLm5vRGF0YShiLFUpLGI7VS5zZWxlY3RBbGwoXCIubnYtbm9EYXRhXCIpLnJlbW92ZSgpO3ZhciBaPXYuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkJiZhLmJhcn0pLCQ9di5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuYmFyfSk7ZD1sLnhTY2FsZSgpLGU9by5zY2FsZSgpLGY9bC55U2NhbGUoKSxnPWoueVNjYWxlKCksaD1tLnlTY2FsZSgpLGk9ay55U2NhbGUoKTt2YXIgXz12LmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZCYmYS5iYXJ9KS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLm1hcChmdW5jdGlvbihhLGIpe3JldHVybnt4OkEoYSxiKSx5OkIoYSxiKX19KX0pLGFiPXYuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkJiYhYS5iYXJ9KS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLm1hcChmdW5jdGlvbihhLGIpe3JldHVybnt4OkEoYSxiKSx5OkIoYSxiKX19KX0pO2QucmFuZ2UoWzAsVl0pLGUuZG9tYWluKGQzLmV4dGVudChkMy5tZXJnZShfLmNvbmNhdChhYikpLGZ1bmN0aW9uKGEpe3JldHVybiBhLnh9KSkucmFuZ2UoWzAsVl0pO3ZhciBiYj1VLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1saW5lUGx1c0JhclwiKS5kYXRhKFt2XSksY2I9YmIuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnZkMyBudi13cmFwIG52LWxpbmVQbHVzQmFyXCIpLmFwcGVuZChcImdcIiksZGI9YmIuc2VsZWN0KFwiZ1wiKTtjYi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGVnZW5kV3JhcFwiKTt2YXIgZWI9Y2IuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWZvY3VzXCIpO2ViLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi14IG52LWF4aXNcIiksZWIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXkxIG52LWF4aXNcIiksZWIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXkyIG52LWF4aXNcIiksZWIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWJhcnNXcmFwXCIpLGViLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1saW5lc1dyYXBcIik7dmFyIGZiPWNiLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1jb250ZXh0XCIpO2lmKGZiLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi14IG52LWF4aXNcIiksZmIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXkxIG52LWF4aXNcIiksZmIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXkyIG52LWF4aXNcIiksZmIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWJhcnNXcmFwXCIpLGZiLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1saW5lc1dyYXBcIiksZmIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWJydXNoQmFja2dyb3VuZFwiKSxmYi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYteCBudi1icnVzaFwiKSxEKXt2YXIgZ2I9dC5hbGlnbigpP1YvMjpWLGhiPXQuYWxpZ24oKT9nYjowO3Qud2lkdGgoZ2IpLGRiLnNlbGVjdChcIi5udi1sZWdlbmRXcmFwXCIpLmRhdHVtKHYubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLm9yaWdpbmFsS2V5PXZvaWQgMD09PWEub3JpZ2luYWxLZXk/YS5rZXk6YS5vcmlnaW5hbEtleSxhLmtleT1hLm9yaWdpbmFsS2V5KyhhLmJhcj9POlApLGF9KSkuY2FsbCh0KSx3LnRvcCE9dC5oZWlnaHQoKSYmKHcudG9wPXQuaGVpZ2h0KCksVz1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodCh6LFUsdyktSCksZGIuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2hiK1wiLFwiKy13LnRvcCtcIilcIil9YmIuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK3cubGVmdCtcIixcIit3LnRvcCtcIilcIiksZGIuc2VsZWN0KFwiLm52LWNvbnRleHRcIikuc3R5bGUoXCJkaXNwbGF5XCIsRT9cImluaXRpYWxcIjpcIm5vbmVcIiksbS53aWR0aChWKS5oZWlnaHQoWCkuY29sb3Iodi5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8QyhhLGIpfSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIXZbYl0uZGlzYWJsZWQmJnZbYl0uYmFyfSkpLGsud2lkdGgoVikuaGVpZ2h0KFgpLmNvbG9yKHYubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuY29sb3J8fEMoYSxiKX0pLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiF2W2JdLmRpc2FibGVkJiYhdltiXS5iYXJ9KSk7dmFyIGliPWRiLnNlbGVjdChcIi5udi1jb250ZXh0IC5udi1iYXJzV3JhcFwiKS5kYXR1bShaLmxlbmd0aD9aOlt7dmFsdWVzOltdfV0pLGpiPWRiLnNlbGVjdChcIi5udi1jb250ZXh0IC5udi1saW5lc1dyYXBcIikuZGF0dW0oJFswXS5kaXNhYmxlZD9be3ZhbHVlczpbXX1dOiQpO2RiLnNlbGVjdChcIi5udi1jb250ZXh0XCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiKyhXK3cuYm90dG9tK3gudG9wKStcIilcIiksaWIudHJhbnNpdGlvbigpLmNhbGwobSksamIudHJhbnNpdGlvbigpLmNhbGwoayksRyYmKG8uX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWChWLzEwMCx2KSkudGlja1NpemUoLVgsMCksZGIuc2VsZWN0KFwiLm52LWNvbnRleHQgLm52LXgubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIitoLnJhbmdlKClbMF0rXCIpXCIpLGRiLnNlbGVjdChcIi5udi1jb250ZXh0IC5udi14Lm52LWF4aXNcIikudHJhbnNpdGlvbigpLmNhbGwobykpLEYmJihyLnNjYWxlKGgpLl90aWNrcyhYLzM2KS50aWNrU2l6ZSgtViwwKSxzLnNjYWxlKGkpLl90aWNrcyhYLzM2KS50aWNrU2l6ZShaLmxlbmd0aD8wOi1WLDApLGRiLnNlbGVjdChcIi5udi1jb250ZXh0IC5udi15My5udi1heGlzXCIpLnN0eWxlKFwib3BhY2l0eVwiLFoubGVuZ3RoPzE6MCkuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrZS5yYW5nZSgpWzBdK1wiKVwiKSxkYi5zZWxlY3QoXCIubnYtY29udGV4dCAubnYteTIubnYtYXhpc1wiKS5zdHlsZShcIm9wYWNpdHlcIiwkLmxlbmd0aD8xOjApLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitlLnJhbmdlKClbMV0rXCIsMClcIiksZGIuc2VsZWN0KFwiLm52LWNvbnRleHQgLm52LXkxLm52LWF4aXNcIikudHJhbnNpdGlvbigpLmNhbGwociksZGIuc2VsZWN0KFwiLm52LWNvbnRleHQgLm52LXkyLm52LWF4aXNcIikudHJhbnNpdGlvbigpLmNhbGwocykpLHUueChlKS5vbihcImJydXNoXCIsVCksSSYmdS5leHRlbnQoSSk7dmFyIGtiPWRiLnNlbGVjdChcIi5udi1icnVzaEJhY2tncm91bmRcIikuc2VsZWN0QWxsKFwiZ1wiKS5kYXRhKFtJfHx1LmV4dGVudCgpXSksbGI9a2IuZW50ZXIoKS5hcHBlbmQoXCJnXCIpO2xiLmFwcGVuZChcInJlY3RcIikuYXR0cihcImNsYXNzXCIsXCJsZWZ0XCIpLmF0dHIoXCJ4XCIsMCkuYXR0cihcInlcIiwwKS5hdHRyKFwiaGVpZ2h0XCIsWCksbGIuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIixcInJpZ2h0XCIpLmF0dHIoXCJ4XCIsMCkuYXR0cihcInlcIiwwKS5hdHRyKFwiaGVpZ2h0XCIsWCk7dmFyIG1iPWRiLnNlbGVjdChcIi5udi14Lm52LWJydXNoXCIpLmNhbGwodSk7bWIuc2VsZWN0QWxsKFwicmVjdFwiKS5hdHRyKFwiaGVpZ2h0XCIsWCksbWIuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsSiksdC5kaXNwYXRjaC5vbihcInN0YXRlQ2hhbmdlXCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBjIGluIGEpTVtjXT1hW2NdO0suc3RhdGVDaGFuZ2UoTSksYi51cGRhdGUoKX0pLEsub24oXCJjaGFuZ2VTdGF0ZVwiLGZ1bmN0aW9uKGEpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBhLmRpc2FibGVkJiYodi5mb3JFYWNoKGZ1bmN0aW9uKGIsYyl7Yi5kaXNhYmxlZD1hLmRpc2FibGVkW2NdfSksTS5kaXNhYmxlZD1hLmRpc2FibGVkKSxiLnVwZGF0ZSgpfSksVCgpfSksYn12YXIgYyxkLGUsZixnLGgsaSxqPWEubW9kZWxzLmxpbmUoKSxrPWEubW9kZWxzLmxpbmUoKSxsPWEubW9kZWxzLmhpc3RvcmljYWxCYXIoKSxtPWEubW9kZWxzLmhpc3RvcmljYWxCYXIoKSxuPWEubW9kZWxzLmF4aXMoKSxvPWEubW9kZWxzLmF4aXMoKSxwPWEubW9kZWxzLmF4aXMoKSxxPWEubW9kZWxzLmF4aXMoKSxyPWEubW9kZWxzLmF4aXMoKSxzPWEubW9kZWxzLmF4aXMoKSx0PWEubW9kZWxzLmxlZ2VuZCgpLHU9ZDMuc3ZnLmJydXNoKCksdj1hLm1vZGVscy50b29sdGlwKCksdz17dG9wOjMwLHJpZ2h0OjMwLGJvdHRvbTozMCxsZWZ0OjYwfSx4PXt0b3A6MCxyaWdodDozMCxib3R0b206MjAsbGVmdDo2MH0seT1udWxsLHo9bnVsbCxBPWZ1bmN0aW9uKGEpe3JldHVybiBhLnh9LEI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0sQz1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLEQ9ITAsRT0hMCxGPSExLEc9ITAsSD01MCxJPW51bGwsSj1udWxsLEs9ZDMuZGlzcGF0Y2goXCJicnVzaFwiLFwic3RhdGVDaGFuZ2VcIixcImNoYW5nZVN0YXRlXCIpLEw9MCxNPWEudXRpbHMuc3RhdGUoKSxOPW51bGwsTz1cIiAobGVmdCBheGlzKVwiLFA9XCIgKHJpZ2h0IGF4aXMpXCI7ai5jbGlwRWRnZSghMCksay5pbnRlcmFjdGl2ZSghMSksbi5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoNSkscC5vcmllbnQoXCJsZWZ0XCIpLHEub3JpZW50KFwicmlnaHRcIiksby5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoNSksci5vcmllbnQoXCJsZWZ0XCIpLHMub3JpZW50KFwicmlnaHRcIiksdi5oZWFkZXJFbmFibGVkKCEwKS5oZWFkZXJGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gbi50aWNrRm9ybWF0KCkoYSxiKX0pO3ZhciBRPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybnthY3RpdmU6YS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KX19fSxSPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDAhPT1iLmFjdGl2ZSYmYS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7YS5kaXNhYmxlZD0hYi5hY3RpdmVbY119KX19O3JldHVybiBqLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7di5kdXJhdGlvbigxMDApLnZhbHVlRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIHEudGlja0Zvcm1hdCgpKGEsYil9KS5kYXRhKGEpLnBvc2l0aW9uKGEucG9zKS5oaWRkZW4oITEpfSksai5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC50b29sdGlwXCIsZnVuY3Rpb24oKXt2LmhpZGRlbighMCl9KSxsLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7YS52YWx1ZT1iLngoKShhLmRhdGEpLGEuc2VyaWVzPXt2YWx1ZTpiLnkoKShhLmRhdGEpLGNvbG9yOmEuY29sb3J9LHYuZHVyYXRpb24oMCkudmFsdWVGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gcC50aWNrRm9ybWF0KCkoYSxiKX0pLmRhdGEoYSkuaGlkZGVuKCExKX0pLGwuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKCl7di5oaWRkZW4oITApfSksbC5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW1vdmUudG9vbHRpcFwiLGZ1bmN0aW9uKCl7di5wb3NpdGlvbih7dG9wOmQzLmV2ZW50LnBhZ2VZLGxlZnQ6ZDMuZXZlbnQucGFnZVh9KSgpfSksYi5kaXNwYXRjaD1LLGIubGVnZW5kPXQsYi5saW5lcz1qLGIubGluZXMyPWssYi5iYXJzPWwsYi5iYXJzMj1tLGIueEF4aXM9bixiLngyQXhpcz1vLGIueTFBeGlzPXAsYi55MkF4aXM9cSxiLnkzQXhpcz1yLGIueTRBeGlzPXMsYi50b29sdGlwPXYsYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geX0sc2V0OmZ1bmN0aW9uKGEpe3k9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHp9LHNldDpmdW5jdGlvbihhKXt6PWF9fSxzaG93TGVnZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRH0sc2V0OmZ1bmN0aW9uKGEpe0Q9YX19LGJydXNoRXh0ZW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSX0sc2V0OmZ1bmN0aW9uKGEpe0k9YX19LG5vRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEp9LHNldDpmdW5jdGlvbihhKXtKPWF9fSxmb2N1c0VuYWJsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEV9LHNldDpmdW5jdGlvbihhKXtFPWF9fSxmb2N1c0hlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEh9LHNldDpmdW5jdGlvbihhKXtIPWF9fSxmb2N1c1Nob3dBeGlzWDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEd9LHNldDpmdW5jdGlvbihhKXtHPWF9fSxmb2N1c1Nob3dBeGlzWTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZ9LHNldDpmdW5jdGlvbihhKXtGPWF9fSxsZWdlbmRMZWZ0QXhpc0hpbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBPfSxzZXQ6ZnVuY3Rpb24oYSl7Tz1hfX0sbGVnZW5kUmlnaHRBeGlzSGludDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFB9LHNldDpmdW5jdGlvbihhKXtQPWF9fSx0b29sdGlwczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYuZW5hYmxlZCgpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcHNcIixcInVzZSBjaGFydC50b29sdGlwLmVuYWJsZWQoKSBpbnN0ZWFkXCIpLHYuZW5hYmxlZCghIWIpfX0sdG9vbHRpcENvbnRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB2LmNvbnRlbnRHZW5lcmF0b3IoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBDb250ZW50XCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5jb250ZW50R2VuZXJhdG9yKCkgaW5zdGVhZFwiKSx2LmNvbnRlbnRHZW5lcmF0b3IoYil9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiB3fSxzZXQ6ZnVuY3Rpb24oYSl7dy50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6dy50b3Asdy5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6dy5yaWdodCx3LmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTp3LmJvdHRvbSx3LmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDp3LmxlZnR9fSxkdXJhdGlvbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEx9LHNldDpmdW5jdGlvbihhKXtMPWF9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEN9LHNldDpmdW5jdGlvbihiKXtDPWEudXRpbHMuZ2V0Q29sb3IoYiksdC5jb2xvcihDKX19LHg6e2dldDpmdW5jdGlvbigpe3JldHVybiBBfSxzZXQ6ZnVuY3Rpb24oYSl7QT1hLGoueChhKSxrLngoYSksbC54KGEpLG0ueChhKX19LHk6e2dldDpmdW5jdGlvbigpe3JldHVybiBCfSxzZXQ6ZnVuY3Rpb24oYSl7Qj1hLGoueShhKSxrLnkoYSksbC55KGEpLG0ueShhKX19fSksYS51dGlscy5pbmhlcml0T3B0aW9ucyhiLGopLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMubGluZVdpdGhGb2N1c0NoYXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihvKXtyZXR1cm4gby5lYWNoKGZ1bmN0aW9uKG8pe2Z1bmN0aW9uIHooYSl7dmFyIGI9KyhcImVcIj09YSksYz1iPzE6LTEsZD1NLzM7cmV0dXJuXCJNXCIrLjUqYytcIixcIitkK1wiQTYsNiAwIDAgXCIrYitcIiBcIis2LjUqYytcIixcIisoZCs2KStcIlZcIisoMipkLTYpK1wiQTYsNiAwIDAgXCIrYitcIiBcIisuNSpjK1wiLFwiKzIqZCtcIlpNXCIrMi41KmMrXCIsXCIrKGQrOCkrXCJWXCIrKDIqZC04KStcIk1cIis0LjUqYytcIixcIisoZCs4KStcIlZcIisoMipkLTgpfWZ1bmN0aW9uIEcoKXtuLmVtcHR5KCl8fG4uZXh0ZW50KHkpLFUuZGF0YShbbi5lbXB0eSgpP2UuZG9tYWluKCk6eV0pLmVhY2goZnVuY3Rpb24oYSl7dmFyIGI9ZShhWzBdKS1jLnJhbmdlKClbMF0sZD1LLWUoYVsxXSk7ZDMuc2VsZWN0KHRoaXMpLnNlbGVjdChcIi5sZWZ0XCIpLmF0dHIoXCJ3aWR0aFwiLDA+Yj8wOmIpLGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoXCIucmlnaHRcIikuYXR0cihcInhcIixlKGFbMV0pKS5hdHRyKFwid2lkdGhcIiwwPmQ/MDpkKX0pfWZ1bmN0aW9uIEgoKXt5PW4uZW1wdHkoKT9udWxsOm4uZXh0ZW50KCk7dmFyIGE9bi5lbXB0eSgpP2UuZG9tYWluKCk6bi5leHRlbnQoKTtpZighKE1hdGguYWJzKGFbMF0tYVsxXSk8PTEpKXtBLmJydXNoKHtleHRlbnQ6YSxicnVzaDpufSksRygpO3ZhciBiPVEuc2VsZWN0KFwiLm52LWZvY3VzIC5udi1saW5lc1dyYXBcIikuZGF0dW0oby5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KS5tYXAoZnVuY3Rpb24oYil7cmV0dXJue2tleTpiLmtleSxhcmVhOmIuYXJlYSx2YWx1ZXM6Yi52YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGcueCgpKGIsYyk+PWFbMF0mJmcueCgpKGIsYyk8PWFbMV19KX19KSk7Yi50cmFuc2l0aW9uKCkuZHVyYXRpb24oQikuY2FsbChnKSxRLnNlbGVjdChcIi5udi1mb2N1cyAubnYteC5udi1heGlzXCIpLnRyYW5zaXRpb24oKS5kdXJhdGlvbihCKS5jYWxsKGkpLFEuc2VsZWN0KFwiLm52LWZvY3VzIC5udi15Lm52LWF4aXNcIikudHJhbnNpdGlvbigpLmR1cmF0aW9uKEIpLmNhbGwoail9fXZhciBJPWQzLnNlbGVjdCh0aGlzKSxKPXRoaXM7YS51dGlscy5pbml0U1ZHKEkpO3ZhciBLPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgodCxJLHEpLEw9YS51dGlscy5hdmFpbGFibGVIZWlnaHQodSxJLHEpLXYsTT12LXIudG9wLXIuYm90dG9tO2lmKGIudXBkYXRlPWZ1bmN0aW9uKCl7SS50cmFuc2l0aW9uKCkuZHVyYXRpb24oQikuY2FsbChiKX0sYi5jb250YWluZXI9dGhpcyxDLnNldHRlcihGKG8pLGIudXBkYXRlKS5nZXR0ZXIoRShvKSkudXBkYXRlKCksQy5kaXNhYmxlZD1vLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hIWEuZGlzYWJsZWR9KSwhRCl7dmFyIE47RD17fTtmb3IoTiBpbiBDKURbTl09Q1tOXWluc3RhbmNlb2YgQXJyYXk/Q1tOXS5zbGljZSgwKTpDW05dfWlmKCEobyYmby5sZW5ndGgmJm8uZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlcy5sZW5ndGh9KS5sZW5ndGgpKXJldHVybiBhLnV0aWxzLm5vRGF0YShiLEkpLGI7SS5zZWxlY3RBbGwoXCIubnYtbm9EYXRhXCIpLnJlbW92ZSgpLGM9Zy54U2NhbGUoKSxkPWcueVNjYWxlKCksZT1oLnhTY2FsZSgpLGY9aC55U2NhbGUoKTt2YXIgTz1JLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1saW5lV2l0aEZvY3VzQ2hhcnRcIikuZGF0YShbb10pLFA9Ty5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtbGluZVdpdGhGb2N1c0NoYXJ0XCIpLmFwcGVuZChcImdcIiksUT1PLnNlbGVjdChcImdcIik7UC5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGVnZW5kV3JhcFwiKTt2YXIgUj1QLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1mb2N1c1wiKTtSLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi14IG52LWF4aXNcIiksUi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYteSBudi1heGlzXCIpLFIuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxpbmVzV3JhcFwiKSxSLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1pbnRlcmFjdGl2ZVwiKTt2YXIgUz1QLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1jb250ZXh0XCIpO1MuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXggbnYtYXhpc1wiKSxTLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi15IG52LWF4aXNcIiksUy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGluZXNXcmFwXCIpLFMuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWJydXNoQmFja2dyb3VuZFwiKSxTLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi14IG52LWJydXNoXCIpLHgmJihtLndpZHRoKEspLFEuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuZGF0dW0obykuY2FsbChtKSxxLnRvcCE9bS5oZWlnaHQoKSYmKHEudG9wPW0uaGVpZ2h0KCksTD1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodCh1LEkscSktdiksUS5zZWxlY3QoXCIubnYtbGVnZW5kV3JhcFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIistcS50b3ArXCIpXCIpKSxPLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitxLmxlZnQrXCIsXCIrcS50b3ArXCIpXCIpLHcmJihwLndpZHRoKEspLmhlaWdodChMKS5tYXJnaW4oe2xlZnQ6cS5sZWZ0LHRvcDpxLnRvcH0pLnN2Z0NvbnRhaW5lcihJKS54U2NhbGUoYyksTy5zZWxlY3QoXCIubnYtaW50ZXJhY3RpdmVcIikuY2FsbChwKSksZy53aWR0aChLKS5oZWlnaHQoTCkuY29sb3Ioby5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8cyhhLGIpfSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIW9bYl0uZGlzYWJsZWR9KSksaC5kZWZpbmVkKGcuZGVmaW5lZCgpKS53aWR0aChLKS5oZWlnaHQoTSkuY29sb3Ioby5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8cyhhLGIpfSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIW9bYl0uZGlzYWJsZWR9KSksUS5zZWxlY3QoXCIubnYtY29udGV4dFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIisoTCtxLmJvdHRvbStyLnRvcCkrXCIpXCIpO3ZhciBUPVEuc2VsZWN0KFwiLm52LWNvbnRleHQgLm52LWxpbmVzV3JhcFwiKS5kYXR1bShvLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZH0pKTtkMy50cmFuc2l0aW9uKFQpLmNhbGwoaCksaS5zY2FsZShjKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NYKEsvMTAwLG8pKS50aWNrU2l6ZSgtTCwwKSxqLnNjYWxlKGQpLl90aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1koTC8zNixvKSkudGlja1NpemUoLUssMCksUS5zZWxlY3QoXCIubnYtZm9jdXMgLm52LXgubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIitMK1wiKVwiKSxuLngoZSkub24oXCJicnVzaFwiLGZ1bmN0aW9uKCl7SCgpfSkseSYmbi5leHRlbnQoeSk7dmFyIFU9US5zZWxlY3QoXCIubnYtYnJ1c2hCYWNrZ3JvdW5kXCIpLnNlbGVjdEFsbChcImdcIikuZGF0YShbeXx8bi5leHRlbnQoKV0pLFY9VS5lbnRlcigpLmFwcGVuZChcImdcIik7Vi5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLFwibGVmdFwiKS5hdHRyKFwieFwiLDApLmF0dHIoXCJ5XCIsMCkuYXR0cihcImhlaWdodFwiLE0pLFYuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIixcInJpZ2h0XCIpLmF0dHIoXCJ4XCIsMCkuYXR0cihcInlcIiwwKS5hdHRyKFwiaGVpZ2h0XCIsTSk7dmFyIFc9US5zZWxlY3QoXCIubnYteC5udi1icnVzaFwiKS5jYWxsKG4pO1cuc2VsZWN0QWxsKFwicmVjdFwiKS5hdHRyKFwiaGVpZ2h0XCIsTSksVy5zZWxlY3RBbGwoXCIucmVzaXplXCIpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIix6KSxIKCksay5zY2FsZShlKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NYKEsvMTAwLG8pKS50aWNrU2l6ZSgtTSwwKSxRLnNlbGVjdChcIi5udi1jb250ZXh0IC5udi14Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrZi5yYW5nZSgpWzBdK1wiKVwiKSxkMy50cmFuc2l0aW9uKFEuc2VsZWN0KFwiLm52LWNvbnRleHQgLm52LXgubnYtYXhpc1wiKSkuY2FsbChrKSxsLnNjYWxlKGYpLl90aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1koTS8zNixvKSkudGlja1NpemUoLUssMCksZDMudHJhbnNpdGlvbihRLnNlbGVjdChcIi5udi1jb250ZXh0IC5udi15Lm52LWF4aXNcIikpLmNhbGwobCksUS5zZWxlY3QoXCIubnYtY29udGV4dCAubnYteC5udi1heGlzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiK2YucmFuZ2UoKVswXStcIilcIiksbS5kaXNwYXRjaC5vbihcInN0YXRlQ2hhbmdlXCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBjIGluIGEpQ1tjXT1hW2NdO0Euc3RhdGVDaGFuZ2UoQyksYi51cGRhdGUoKX0pLHAuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2Vtb3ZlXCIsZnVuY3Rpb24oYyl7Zy5jbGVhckhpZ2hsaWdodHMoKTt2YXIgZCxmLGgsaz1bXTtpZihvLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBhLnNlcmllc0luZGV4PWIsIWEuZGlzYWJsZWR9KS5mb3JFYWNoKGZ1bmN0aW9uKGksail7dmFyIGw9bi5lbXB0eSgpP2UuZG9tYWluKCk6bi5leHRlbnQoKSxtPWkudmFsdWVzLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBnLngoKShhLGIpPj1sWzBdJiZnLngoKShhLGIpPD1sWzFdfSk7Zj1hLmludGVyYWN0aXZlQmlzZWN0KG0sYy5wb2ludFhWYWx1ZSxnLngoKSk7dmFyIG89bVtmXSxwPWIueSgpKG8sZik7bnVsbCE9cCYmZy5oaWdobGlnaHRQb2ludChqLGYsITApLHZvaWQgMCE9PW8mJih2b2lkIDA9PT1kJiYoZD1vKSx2b2lkIDA9PT1oJiYoaD1iLnhTY2FsZSgpKGIueCgpKG8sZikpKSxrLnB1c2goe2tleTppLmtleSx2YWx1ZTpiLnkoKShvLGYpLGNvbG9yOnMoaSxpLnNlcmllc0luZGV4KX0pKX0pLGsubGVuZ3RoPjIpe3ZhciBsPWIueVNjYWxlKCkuaW52ZXJ0KGMubW91c2VZKSxtPU1hdGguYWJzKGIueVNjYWxlKCkuZG9tYWluKClbMF0tYi55U2NhbGUoKS5kb21haW4oKVsxXSkscj0uMDMqbSx0PWEubmVhcmVzdFZhbHVlSW5kZXgoay5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWV9KSxsLHIpO251bGwhPT10JiYoa1t0XS5oaWdobGlnaHQ9ITApfXZhciB1PWkudGlja0Zvcm1hdCgpKGIueCgpKGQsZikpO3AudG9vbHRpcC5wb3NpdGlvbih7bGVmdDpjLm1vdXNlWCtxLmxlZnQsdG9wOmMubW91c2VZK3EudG9wfSkuY2hhcnRDb250YWluZXIoSi5wYXJlbnROb2RlKS52YWx1ZUZvcm1hdHRlcihmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIk4vQVwiOmoudGlja0Zvcm1hdCgpKGEpfSkuZGF0YSh7dmFsdWU6dSxpbmRleDpmLHNlcmllczprfSkoKSxwLnJlbmRlckd1aWRlTGluZShoKX0pLHAuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXRcIixmdW5jdGlvbigpe2cuY2xlYXJIaWdobGlnaHRzKCl9KSxBLm9uKFwiY2hhbmdlU3RhdGVcIixmdW5jdGlvbihhKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5kaXNhYmxlZCYmby5mb3JFYWNoKGZ1bmN0aW9uKGIsYyl7Yi5kaXNhYmxlZD1hLmRpc2FibGVkW2NdfSksYi51cGRhdGUoKX0pfSksYn12YXIgYyxkLGUsZixnPWEubW9kZWxzLmxpbmUoKSxoPWEubW9kZWxzLmxpbmUoKSxpPWEubW9kZWxzLmF4aXMoKSxqPWEubW9kZWxzLmF4aXMoKSxrPWEubW9kZWxzLmF4aXMoKSxsPWEubW9kZWxzLmF4aXMoKSxtPWEubW9kZWxzLmxlZ2VuZCgpLG49ZDMuc3ZnLmJydXNoKCksbz1hLm1vZGVscy50b29sdGlwKCkscD1hLmludGVyYWN0aXZlR3VpZGVsaW5lKCkscT17dG9wOjMwLHJpZ2h0OjMwLGJvdHRvbTozMCxsZWZ0OjYwfSxyPXt0b3A6MCxyaWdodDozMCxib3R0b206MjAsbGVmdDo2MH0scz1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLHQ9bnVsbCx1PW51bGwsdj01MCx3PSExLHg9ITAseT1udWxsLHo9bnVsbCxBPWQzLmRpc3BhdGNoKFwiYnJ1c2hcIixcInN0YXRlQ2hhbmdlXCIsXCJjaGFuZ2VTdGF0ZVwiKSxCPTI1MCxDPWEudXRpbHMuc3RhdGUoKSxEPW51bGw7Zy5jbGlwRWRnZSghMCkuZHVyYXRpb24oMCksaC5pbnRlcmFjdGl2ZSghMSksaS5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoNSksai5vcmllbnQoXCJsZWZ0XCIpLGsub3JpZW50KFwiYm90dG9tXCIpLnRpY2tQYWRkaW5nKDUpLGwub3JpZW50KFwibGVmdFwiKSxvLnZhbHVlRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGoudGlja0Zvcm1hdCgpKGEsYil9KS5oZWFkZXJGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gaS50aWNrRm9ybWF0KCkoYSxiKX0pO3ZhciBFPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybnthY3RpdmU6YS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KX19fSxGPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDAhPT1iLmFjdGl2ZSYmYS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7YS5kaXNhYmxlZD0hYi5hY3RpdmVbY119KX19O3JldHVybiBnLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7by5kYXRhKGEpLnBvc2l0aW9uKGEucG9zKS5oaWRkZW4oITEpfSksZy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC50b29sdGlwXCIsZnVuY3Rpb24oKXtvLmhpZGRlbighMCl9KSxiLmRpc3BhdGNoPUEsYi5sZWdlbmQ9bSxiLmxpbmVzPWcsYi5saW5lczI9aCxiLnhBeGlzPWksYi55QXhpcz1qLGIueDJBeGlzPWssYi55MkF4aXM9bCxiLmludGVyYWN0aXZlTGF5ZXI9cCxiLnRvb2x0aXA9byxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oYSl7dD1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc2V0OmZ1bmN0aW9uKGEpe3U9YX19LGZvY3VzSGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sc2V0OmZ1bmN0aW9uKGEpe3Y9YX19LHNob3dMZWdlbmQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB4fSxzZXQ6ZnVuY3Rpb24oYSl7eD1hfX0sYnJ1c2hFeHRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB5fSxzZXQ6ZnVuY3Rpb24oYSl7eT1hfX0sZGVmYXVsdFN0YXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRH0sc2V0OmZ1bmN0aW9uKGEpe0Q9YX19LG5vRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHp9LHNldDpmdW5jdGlvbihhKXt6PWF9fSx0b29sdGlwczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uZW5hYmxlZCgpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcHNcIixcInVzZSBjaGFydC50b29sdGlwLmVuYWJsZWQoKSBpbnN0ZWFkXCIpLG8uZW5hYmxlZCghIWIpfX0sdG9vbHRpcENvbnRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBvLmNvbnRlbnRHZW5lcmF0b3IoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBDb250ZW50XCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5jb250ZW50R2VuZXJhdG9yKCkgaW5zdGVhZFwiKSxvLmNvbnRlbnRHZW5lcmF0b3IoYil9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBxfSxzZXQ6ZnVuY3Rpb24oYSl7cS50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6cS50b3AscS5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6cS5yaWdodCxxLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTpxLmJvdHRvbSxxLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpxLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbihiKXtzPWEudXRpbHMuZ2V0Q29sb3IoYiksbS5jb2xvcihzKX19LGludGVycG9sYXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZy5pbnRlcnBvbGF0ZSgpfSxzZXQ6ZnVuY3Rpb24oYSl7Zy5pbnRlcnBvbGF0ZShhKSxoLmludGVycG9sYXRlKGEpfX0seFRpY2tGb3JtYXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBpLnRpY2tGb3JtYXQoKX0sc2V0OmZ1bmN0aW9uKGEpe2kudGlja0Zvcm1hdChhKSxrLnRpY2tGb3JtYXQoYSl9fSx5VGlja0Zvcm1hdDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGoudGlja0Zvcm1hdCgpfSxzZXQ6ZnVuY3Rpb24oYSl7ai50aWNrRm9ybWF0KGEpLGwudGlja0Zvcm1hdChhKX19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQn0sc2V0OmZ1bmN0aW9uKGEpe0I9YSxqLmR1cmF0aW9uKEIpLGwuZHVyYXRpb24oQiksaS5kdXJhdGlvbihCKSxrLmR1cmF0aW9uKEIpfX0seDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGcueCgpfSxzZXQ6ZnVuY3Rpb24oYSl7Zy54KGEpLGgueChhKX19LHk6e2dldDpmdW5jdGlvbigpe3JldHVybiBnLnkoKX0sc2V0OmZ1bmN0aW9uKGEpe2cueShhKSxoLnkoYSl9fSx1c2VJbnRlcmFjdGl2ZUd1aWRlbGluZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHd9LHNldDpmdW5jdGlvbihhKXt3PWEsdyYmKGcuaW50ZXJhY3RpdmUoITEpLGcudXNlVm9yb25vaSghMSkpfX19KSxhLnV0aWxzLmluaGVyaXRPcHRpb25zKGIsZyksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5tdWx0aUJhcj1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoRSl7cmV0dXJuIEMucmVzZXQoKSxFLmVhY2goZnVuY3Rpb24oYil7dmFyIEU9ay1qLmxlZnQtai5yaWdodCxGPWwtai50b3Atai5ib3R0b207cD1kMy5zZWxlY3QodGhpcyksYS51dGlscy5pbml0U1ZHKHApO3ZhciBHPTA7aWYoeCYmYi5sZW5ndGgmJih4PVt7dmFsdWVzOmJbMF0udmFsdWVzLm1hcChmdW5jdGlvbihhKXtyZXR1cm57eDphLngseTowLHNlcmllczphLnNlcmllcyxzaXplOi4wMX19KX1dKSx1KXt2YXIgSD1kMy5sYXlvdXQuc3RhY2soKS5vZmZzZXQodikudmFsdWVzKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlc30pLnkocikoIWIubGVuZ3RoJiZ4P3g6Yik7SC5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7YS5ub25TdGFja2FibGU/KGJbY10ubm9uU3RhY2thYmxlU2VyaWVzPUcrKyxIW2NdPWJbY10pOmM+MCYmSFtjLTFdLm5vblN0YWNrYWJsZSYmSFtjXS52YWx1ZXMubWFwKGZ1bmN0aW9uKGEsYil7YS55MC09SFtjLTFdLnZhbHVlc1tiXS55LGEueTE9YS55MCthLnl9KX0pLGI9SH1iLmZvckVhY2goZnVuY3Rpb24oYSxiKXthLnZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGMpe2Muc2VyaWVzPWIsYy5rZXk9YS5rZXl9KX0pLHUmJmJbMF0udmFsdWVzLm1hcChmdW5jdGlvbihhLGMpe3ZhciBkPTAsZT0wO2IubWFwKGZ1bmN0aW9uKGEsZil7aWYoIWJbZl0ubm9uU3RhY2thYmxlKXt2YXIgZz1hLnZhbHVlc1tjXTtnLnNpemU9TWF0aC5hYnMoZy55KSxnLnk8MD8oZy55MT1lLGUtPWcuc2l6ZSk6KGcueTE9Zy5zaXplK2QsZCs9Zy5zaXplKX19KX0pO3ZhciBJPWQmJmU/W106Yi5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS52YWx1ZXMubWFwKGZ1bmN0aW9uKGEsYyl7cmV0dXJue3g6cShhLGMpLHk6cihhLGMpLHkwOmEueTAseTE6YS55MSxpZHg6Yn19KX0pO20uZG9tYWluKGR8fGQzLm1lcmdlKEkpLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS54fSkpLnJhbmdlQmFuZHMoZnx8WzAsRV0sQSksbi5kb21haW4oZXx8ZDMuZXh0ZW50KGQzLm1lcmdlKEkpLm1hcChmdW5jdGlvbihhKXt2YXIgYz1hLnk7cmV0dXJuIHUmJiFiW2EuaWR4XS5ub25TdGFja2FibGUmJihjPWEueT4wP2EueTE6YS55MSthLnkpLGN9KS5jb25jYXQocykpKS5yYW5nZShnfHxbRiwwXSksbS5kb21haW4oKVswXT09PW0uZG9tYWluKClbMV0mJm0uZG9tYWluKG0uZG9tYWluKClbMF0/W20uZG9tYWluKClbMF0tLjAxKm0uZG9tYWluKClbMF0sbS5kb21haW4oKVsxXSsuMDEqbS5kb21haW4oKVsxXV06Wy0xLDFdKSxuLmRvbWFpbigpWzBdPT09bi5kb21haW4oKVsxXSYmbi5kb21haW4obi5kb21haW4oKVswXT9bbi5kb21haW4oKVswXSsuMDEqbi5kb21haW4oKVswXSxuLmRvbWFpbigpWzFdLS4wMSpuLmRvbWFpbigpWzFdXTpbLTEsMV0pLGg9aHx8bSxpPWl8fG47dmFyIEo9cC5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtbXVsdGliYXJcIikuZGF0YShbYl0pLEs9Si5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtbXVsdGliYXJcIiksTD1LLmFwcGVuZChcImRlZnNcIiksTT1LLmFwcGVuZChcImdcIiksTj1KLnNlbGVjdChcImdcIik7TS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtZ3JvdXBzXCIpLEouYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2oubGVmdCtcIixcIitqLnRvcCtcIilcIiksTC5hcHBlbmQoXCJjbGlwUGF0aFwiKS5hdHRyKFwiaWRcIixcIm52LWVkZ2UtY2xpcC1cIitvKS5hcHBlbmQoXCJyZWN0XCIpLEouc2VsZWN0KFwiI252LWVkZ2UtY2xpcC1cIitvK1wiIHJlY3RcIikuYXR0cihcIndpZHRoXCIsRSkuYXR0cihcImhlaWdodFwiLEYpLE4uYXR0cihcImNsaXAtcGF0aFwiLHQ/XCJ1cmwoI252LWVkZ2UtY2xpcC1cIitvK1wiKVwiOlwiXCIpO3ZhciBPPUouc2VsZWN0KFwiLm52LWdyb3Vwc1wiKS5zZWxlY3RBbGwoXCIubnYtZ3JvdXBcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm4gYX0sZnVuY3Rpb24oYSxiKXtyZXR1cm4gYn0pO08uZW50ZXIoKS5hcHBlbmQoXCJnXCIpLnN0eWxlKFwic3Ryb2tlLW9wYWNpdHlcIiwxZS02KS5zdHlsZShcImZpbGwtb3BhY2l0eVwiLDFlLTYpO3ZhciBQPUMudHJhbnNpdGlvbihPLmV4aXQoKS5zZWxlY3RBbGwoXCJyZWN0Lm52LWJhclwiKSxcIm11bHRpYmFyRXhpdFwiLE1hdGgubWluKDEwMCx6KSkuYXR0cihcInlcIixmdW5jdGlvbihhKXt2YXIgYz1pKDApfHwwO3JldHVybiB1JiZiW2Euc2VyaWVzXSYmIWJbYS5zZXJpZXNdLm5vblN0YWNrYWJsZSYmKGM9aShhLnkwKSksY30pLmF0dHIoXCJoZWlnaHRcIiwwKS5yZW1vdmUoKTtQLmRlbGF5JiZQLmRlbGF5KGZ1bmN0aW9uKGEsYil7dmFyIGM9Yiooei8oRCsxKSktYjtyZXR1cm4gY30pLE8uYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm5cIm52LWdyb3VwIG52LXNlcmllcy1cIitifSkuY2xhc3NlZChcImhvdmVyXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEuaG92ZXJ9KS5zdHlsZShcImZpbGxcIixmdW5jdGlvbihhLGIpe3JldHVybiB3KGEsYil9KS5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHcoYSxiKX0pLE8uc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDEpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsLjc1KTt2YXIgUT1PLnNlbGVjdEFsbChcInJlY3QubnYtYmFyXCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuIHgmJiFiLmxlbmd0aD94LnZhbHVlczphLnZhbHVlc30pO1EuZXhpdCgpLnJlbW92ZSgpO1EuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHIoYSxiKTwwP1wibnYtYmFyIG5lZ2F0aXZlXCI6XCJudi1iYXIgcG9zaXRpdmVcIn0pLmF0dHIoXCJ4XCIsZnVuY3Rpb24oYSxjLGQpe3JldHVybiB1JiYhYltkXS5ub25TdGFja2FibGU/MDpkKm0ucmFuZ2VCYW5kKCkvYi5sZW5ndGh9KS5hdHRyKFwieVwiLGZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gaSh1JiYhYltkXS5ub25TdGFja2FibGU/YS55MDowKXx8MH0pLmF0dHIoXCJoZWlnaHRcIiwwKS5hdHRyKFwid2lkdGhcIixmdW5jdGlvbihhLGMsZCl7cmV0dXJuIG0ucmFuZ2VCYW5kKCkvKHUmJiFiW2RdLm5vblN0YWNrYWJsZT8xOmIubGVuZ3RoKX0pLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiK20ocShhLGIpKStcIiwwKVwifSk7US5zdHlsZShcImZpbGxcIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHcoYSxjLGIpfSkuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHcoYSxjLGIpfSkub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMCksQi5lbGVtZW50TW91c2VvdmVyKHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KS5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oYSxiKXtkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhvdmVyXCIsITEpLEIuZWxlbWVudE1vdXNlb3V0KHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KS5vbihcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKGEsYil7Qi5lbGVtZW50TW91c2Vtb3ZlKHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSxiKXtCLmVsZW1lbnRDbGljayh7ZGF0YTphLGluZGV4OmIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pLGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpfSkub24oXCJkYmxjbGlja1wiLGZ1bmN0aW9uKGEsYil7Qi5lbGVtZW50RGJsQ2xpY2soe2RhdGE6YSxpbmRleDpiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KSxkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKX0pLFEuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gcihhLGIpPDA/XCJudi1iYXIgbmVnYXRpdmVcIjpcIm52LWJhciBwb3NpdGl2ZVwifSkuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrbShxKGEsYikpK1wiLDApXCJ9KSx5JiYoY3x8KGM9Yi5tYXAoZnVuY3Rpb24oKXtyZXR1cm4hMH0pKSxRLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gZDMucmdiKHkoYSxiKSkuZGFya2VyKGMubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGJ9KS5maWx0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4hY1tiXX0pW2RdKS50b1N0cmluZygpfSkuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGQzLnJnYih5KGEsYikpLmRhcmtlcihjLm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBifSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIWNbYl19KVtkXSkudG9TdHJpbmcoKX0pKTt2YXIgUj1RLndhdGNoVHJhbnNpdGlvbihDLFwibXVsdGliYXJcIixNYXRoLm1pbigyNTAseikpLmRlbGF5KGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGMqei9iWzBdLnZhbHVlcy5sZW5ndGh9KTt1P1IuYXR0cihcInlcIixmdW5jdGlvbihhLGMsZCl7dmFyIGU9MDtyZXR1cm4gZT1iW2RdLm5vblN0YWNrYWJsZT9yKGEsYyk8MD9uKDApOm4oMCktbihyKGEsYykpPC0xP24oMCktMTpuKHIoYSxjKSl8fDA6bihhLnkxKX0pLmF0dHIoXCJoZWlnaHRcIixmdW5jdGlvbihhLGMsZCl7cmV0dXJuIGJbZF0ubm9uU3RhY2thYmxlP01hdGgubWF4KE1hdGguYWJzKG4ocihhLGMpKS1uKDApKSwxKXx8MDpNYXRoLm1heChNYXRoLmFicyhuKGEueSthLnkwKS1uKGEueTApKSwxKX0pLmF0dHIoXCJ4XCIsZnVuY3Rpb24oYSxjLGQpe3ZhciBlPTA7cmV0dXJuIGJbZF0ubm9uU3RhY2thYmxlJiYoZT1hLnNlcmllcyptLnJhbmdlQmFuZCgpL2IubGVuZ3RoLGIubGVuZ3RoIT09RyYmKGU9YltkXS5ub25TdGFja2FibGVTZXJpZXMqbS5yYW5nZUJhbmQoKS8oMipHKSkpLGV9KS5hdHRyKFwid2lkdGhcIixmdW5jdGlvbihhLGMsZCl7aWYoYltkXS5ub25TdGFja2FibGUpe3ZhciBlPW0ucmFuZ2VCYW5kKCkvRztyZXR1cm4gYi5sZW5ndGghPT1HJiYoZT1tLnJhbmdlQmFuZCgpLygyKkcpKSxlfXJldHVybiBtLnJhbmdlQmFuZCgpfSk6Ui5hdHRyKFwieFwiLGZ1bmN0aW9uKGEpe3JldHVybiBhLnNlcmllcyptLnJhbmdlQmFuZCgpL2IubGVuZ3RofSkuYXR0cihcIndpZHRoXCIsbS5yYW5nZUJhbmQoKS9iLmxlbmd0aCkuYXR0cihcInlcIixmdW5jdGlvbihhLGIpe3JldHVybiByKGEsYik8MD9uKDApOm4oMCktbihyKGEsYikpPDE/bigwKS0xOm4ocihhLGIpKXx8MH0pLmF0dHIoXCJoZWlnaHRcIixmdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLm1heChNYXRoLmFicyhuKHIoYSxiKSktbigwKSksMSl8fDB9KSxoPW0uY29weSgpLGk9bi5jb3B5KCksYlswXSYmYlswXS52YWx1ZXMmJihEPWJbMF0udmFsdWVzLmxlbmd0aCl9KSxDLnJlbmRlckVuZChcIm11bHRpYmFyIGltbWVkaWF0ZVwiKSxifXZhciBjLGQsZSxmLGcsaCxpLGo9e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSxrPTk2MCxsPTUwMCxtPWQzLnNjYWxlLm9yZGluYWwoKSxuPWQzLnNjYWxlLmxpbmVhcigpLG89TWF0aC5mbG9vcigxZTQqTWF0aC5yYW5kb20oKSkscD1udWxsLHE9ZnVuY3Rpb24oYSl7cmV0dXJuIGEueH0scj1mdW5jdGlvbihhKXtyZXR1cm4gYS55fSxzPVswXSx0PSEwLHU9ITEsdj1cInplcm9cIix3PWEudXRpbHMuZGVmYXVsdENvbG9yKCkseD0hMSx5PW51bGwsej01MDAsQT0uMSxCPWQzLmRpc3BhdGNoKFwiY2hhcnRDbGlja1wiLFwiZWxlbWVudENsaWNrXCIsXCJlbGVtZW50RGJsQ2xpY2tcIixcImVsZW1lbnRNb3VzZW92ZXJcIixcImVsZW1lbnRNb3VzZW91dFwiLFwiZWxlbWVudE1vdXNlbW92ZVwiLFwicmVuZGVyRW5kXCIpLEM9YS51dGlscy5yZW5kZXJXYXRjaChCLHopLEQ9MDtyZXR1cm4gYi5kaXNwYXRjaD1CLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LHNldDpmdW5jdGlvbihhKXtrPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0seDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXtxPWF9fSx5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKGEpe3I9YX19LHhTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSx5U2NhbGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1hfX0seERvbWFpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldDpmdW5jdGlvbihhKXtkPWF9fSx5RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKGEpe2U9YX19LHhSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmPWF9fSx5UmFuZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zz1hfX0sZm9yY2VZOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YX19LHN0YWNrZWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT1hfX0sc3RhY2tPZmZzZXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiB2fSxzZXQ6ZnVuY3Rpb24oYSl7dj1hfX0sY2xpcEVkZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oYSl7dD1hfX0sZGlzYWJsZWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24oYSl7Yz1hfX0saWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0saGlkZWFibGU6e2dldDpmdW5jdGlvbigpe3JldHVybiB4fSxzZXQ6ZnVuY3Rpb24oYSl7eD1hfX0sZ3JvdXBTcGFjaW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQX0sc2V0OmZ1bmN0aW9uKGEpe0E9YX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihhKXtqLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpqLnRvcCxqLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpqLnJpZ2h0LGouYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmouYm90dG9tLGoubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmoubGVmdH19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gen0sc2V0OmZ1bmN0aW9uKGEpe3o9YSxDLnJlc2V0KHopfX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiB3fSxzZXQ6ZnVuY3Rpb24oYil7dz1hLnV0aWxzLmdldENvbG9yKGIpfX0sYmFyQ29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiB5fSxzZXQ6ZnVuY3Rpb24oYil7eT1iP2EudXRpbHMuZ2V0Q29sb3IoYik6bnVsbH19fSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5tdWx0aUJhckNoYXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihqKXtyZXR1cm4gRC5yZXNldCgpLEQubW9kZWxzKGUpLHImJkQubW9kZWxzKGYpLHMmJkQubW9kZWxzKGcpLGouZWFjaChmdW5jdGlvbihqKXt2YXIgej1kMy5zZWxlY3QodGhpcyk7YS51dGlscy5pbml0U1ZHKHopO3ZhciBEPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgobCx6LGspLEg9YS51dGlscy5hdmFpbGFibGVIZWlnaHQobSx6LGspO2lmKGIudXBkYXRlPWZ1bmN0aW9uKCl7MD09PUM/ei5jYWxsKGIpOnoudHJhbnNpdGlvbigpLmR1cmF0aW9uKEMpLmNhbGwoYil9LGIuY29udGFpbmVyPXRoaXMseC5zZXR0ZXIoRyhqKSxiLnVwZGF0ZSkuZ2V0dGVyKEYoaikpLnVwZGF0ZSgpLHguZGlzYWJsZWQ9ai5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuISFhLmRpc2FibGVkfSksIXkpe3ZhciBJO3k9e307Zm9yKEkgaW4geCl5W0ldPXhbSV1pbnN0YW5jZW9mIEFycmF5P3hbSV0uc2xpY2UoMCk6eFtJXX1pZighKGomJmoubGVuZ3RoJiZqLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXMubGVuZ3RofSkubGVuZ3RoKSlyZXR1cm4gYS51dGlscy5ub0RhdGEoYix6KSxiO3ouc2VsZWN0QWxsKFwiLm52LW5vRGF0YVwiKS5yZW1vdmUoKSxjPWUueFNjYWxlKCksZD1lLnlTY2FsZSgpO1xudmFyIEo9ei5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtbXVsdGlCYXJXaXRoTGVnZW5kXCIpLmRhdGEoW2pdKSxLPUouZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnZkMyBudi13cmFwIG52LW11bHRpQmFyV2l0aExlZ2VuZFwiKS5hcHBlbmQoXCJnXCIpLEw9Si5zZWxlY3QoXCJnXCIpO2lmKEsuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXggbnYtYXhpc1wiKSxLLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi15IG52LWF4aXNcIiksSy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtYmFyc1dyYXBcIiksSy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGVnZW5kV3JhcFwiKSxLLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1jb250cm9sc1dyYXBcIikscSYmKGgud2lkdGgoRC1CKCkpLEwuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuZGF0dW0oaikuY2FsbChoKSxrLnRvcCE9aC5oZWlnaHQoKSYmKGsudG9wPWguaGVpZ2h0KCksSD1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChtLHosaykpLEwuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK0IoKStcIixcIistay50b3ArXCIpXCIpKSxvKXt2YXIgTT1be2tleTpwLmdyb3VwZWR8fFwiR3JvdXBlZFwiLGRpc2FibGVkOmUuc3RhY2tlZCgpfSx7a2V5OnAuc3RhY2tlZHx8XCJTdGFja2VkXCIsZGlzYWJsZWQ6IWUuc3RhY2tlZCgpfV07aS53aWR0aChCKCkpLmNvbG9yKFtcIiM0NDRcIixcIiM0NDRcIixcIiM0NDRcIl0pLEwuc2VsZWN0KFwiLm52LWNvbnRyb2xzV3JhcFwiKS5kYXR1bShNKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIistay50b3ArXCIpXCIpLmNhbGwoaSl9Si5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIray5sZWZ0K1wiLFwiK2sudG9wK1wiKVwiKSx0JiZMLnNlbGVjdChcIi5udi15Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK0QrXCIsMClcIiksZS5kaXNhYmxlZChqLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZH0pKS53aWR0aChEKS5oZWlnaHQoSCkuY29sb3Ioai5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8bihhLGIpfSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIWpbYl0uZGlzYWJsZWR9KSk7dmFyIE49TC5zZWxlY3QoXCIubnYtYmFyc1dyYXBcIikuZGF0dW0oai5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KSk7aWYoTi5jYWxsKGUpLHIpe2Yuc2NhbGUoYykuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWChELzEwMCxqKSkudGlja1NpemUoLUgsMCksTC5zZWxlY3QoXCIubnYteC5udi1heGlzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiK2QucmFuZ2UoKVswXStcIilcIiksTC5zZWxlY3QoXCIubnYteC5udi1heGlzXCIpLmNhbGwoZik7dmFyIE89TC5zZWxlY3QoXCIubnYteC5udi1heGlzID4gZ1wiKS5zZWxlY3RBbGwoXCJnXCIpO2lmKE8uc2VsZWN0QWxsKFwibGluZSwgdGV4dFwiKS5zdHlsZShcIm9wYWNpdHlcIiwxKSx2KXt2YXIgUD1mdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiK2ErXCIsXCIrYitcIilcIn0sUT01LFI9MTc7Ty5zZWxlY3RBbGwoXCJ0ZXh0XCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFAoMCxjJTI9PTA/UTpSKX0pO3ZhciBTPWQzLnNlbGVjdEFsbChcIi5udi14Lm52LWF4aXMgLm52LXdyYXAgZyBnIHRleHRcIilbMF0ubGVuZ3RoO0wuc2VsZWN0QWxsKFwiLm52LXgubnYtYXhpcyAubnYtYXhpc01heE1pbiB0ZXh0XCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVybiBQKDAsMD09PWJ8fFMlMiE9PTA/UjpRKX0pfXUmJk8uZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGIlTWF0aC5jZWlsKGpbMF0udmFsdWVzLmxlbmd0aC8oRC8xMDApKSE9PTB9KS5zZWxlY3RBbGwoXCJ0ZXh0LCBsaW5lXCIpLnN0eWxlKFwib3BhY2l0eVwiLDApLHcmJk8uc2VsZWN0QWxsKFwiLnRpY2sgdGV4dFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJyb3RhdGUoXCIrdytcIiAwLDApXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIix3PjA/XCJzdGFydFwiOlwiZW5kXCIpLEwuc2VsZWN0KFwiLm52LXgubnYtYXhpc1wiKS5zZWxlY3RBbGwoXCJnLm52LWF4aXNNYXhNaW4gdGV4dFwiKS5zdHlsZShcIm9wYWNpdHlcIiwxKX1zJiYoZy5zY2FsZShkKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NZKEgvMzYsaikpLnRpY2tTaXplKC1ELDApLEwuc2VsZWN0KFwiLm52LXkubnYtYXhpc1wiKS5jYWxsKGcpKSxoLmRpc3BhdGNoLm9uKFwic3RhdGVDaGFuZ2VcIixmdW5jdGlvbihhKXtmb3IodmFyIGMgaW4gYSl4W2NdPWFbY107QS5zdGF0ZUNoYW5nZSh4KSxiLnVwZGF0ZSgpfSksaS5kaXNwYXRjaC5vbihcImxlZ2VuZENsaWNrXCIsZnVuY3Rpb24oYSl7aWYoYS5kaXNhYmxlZCl7c3dpdGNoKE09TS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9ITAsYX0pLGEuZGlzYWJsZWQ9ITEsYS5rZXkpe2Nhc2VcIkdyb3VwZWRcIjpjYXNlIHAuZ3JvdXBlZDplLnN0YWNrZWQoITEpO2JyZWFrO2Nhc2VcIlN0YWNrZWRcIjpjYXNlIHAuc3RhY2tlZDplLnN0YWNrZWQoITApfXguc3RhY2tlZD1lLnN0YWNrZWQoKSxBLnN0YXRlQ2hhbmdlKHgpLGIudXBkYXRlKCl9fSksQS5vbihcImNoYW5nZVN0YXRlXCIsZnVuY3Rpb24oYSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZGlzYWJsZWQmJihqLmZvckVhY2goZnVuY3Rpb24oYixjKXtiLmRpc2FibGVkPWEuZGlzYWJsZWRbY119KSx4LmRpc2FibGVkPWEuZGlzYWJsZWQpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnN0YWNrZWQmJihlLnN0YWNrZWQoYS5zdGFja2VkKSx4LnN0YWNrZWQ9YS5zdGFja2VkLEU9YS5zdGFja2VkKSxiLnVwZGF0ZSgpfSl9KSxELnJlbmRlckVuZChcIm11bHRpYmFyY2hhcnQgaW1tZWRpYXRlXCIpLGJ9dmFyIGMsZCxlPWEubW9kZWxzLm11bHRpQmFyKCksZj1hLm1vZGVscy5heGlzKCksZz1hLm1vZGVscy5heGlzKCksaD1hLm1vZGVscy5sZWdlbmQoKSxpPWEubW9kZWxzLmxlZ2VuZCgpLGo9YS5tb2RlbHMudG9vbHRpcCgpLGs9e3RvcDozMCxyaWdodDoyMCxib3R0b206NTAsbGVmdDo2MH0sbD1udWxsLG09bnVsbCxuPWEudXRpbHMuZGVmYXVsdENvbG9yKCksbz0hMCxwPXt9LHE9ITAscj0hMCxzPSEwLHQ9ITEsdT0hMCx2PSExLHc9MCx4PWEudXRpbHMuc3RhdGUoKSx5PW51bGwsej1udWxsLEE9ZDMuZGlzcGF0Y2goXCJzdGF0ZUNoYW5nZVwiLFwiY2hhbmdlU3RhdGVcIixcInJlbmRlckVuZFwiKSxCPWZ1bmN0aW9uKCl7cmV0dXJuIG8/MTgwOjB9LEM9MjUwO3guc3RhY2tlZD0hMSxlLnN0YWNrZWQoITEpLGYub3JpZW50KFwiYm90dG9tXCIpLnRpY2tQYWRkaW5nKDcpLnNob3dNYXhNaW4oITEpLnRpY2tGb3JtYXQoZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSxnLm9yaWVudCh0P1wicmlnaHRcIjpcImxlZnRcIikudGlja0Zvcm1hdChkMy5mb3JtYXQoXCIsLjFmXCIpKSxqLmR1cmF0aW9uKDApLnZhbHVlRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGcudGlja0Zvcm1hdCgpKGEsYil9KS5oZWFkZXJGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gZi50aWNrRm9ybWF0KCkoYSxiKX0pLGkudXBkYXRlU3RhdGUoITEpO3ZhciBEPWEudXRpbHMucmVuZGVyV2F0Y2goQSksRT0hMSxGPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybnthY3RpdmU6YS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KSxzdGFja2VkOkV9fX0sRz1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwIT09Yi5zdGFja2VkJiYoRT1iLnN0YWNrZWQpLHZvaWQgMCE9PWIuYWN0aXZlJiZhLmZvckVhY2goZnVuY3Rpb24oYSxjKXthLmRpc2FibGVkPSFiLmFjdGl2ZVtjXX0pfX07cmV0dXJuIGUuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdmVyLnRvb2x0aXBcIixmdW5jdGlvbihhKXthLnZhbHVlPWIueCgpKGEuZGF0YSksYS5zZXJpZXM9e2tleTphLmRhdGEua2V5LHZhbHVlOmIueSgpKGEuZGF0YSksY29sb3I6YS5jb2xvcn0sai5kYXRhKGEpLmhpZGRlbighMSl9KSxlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3V0LnRvb2x0aXBcIixmdW5jdGlvbigpe2ouaGlkZGVuKCEwKX0pLGUuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2Vtb3ZlLnRvb2x0aXBcIixmdW5jdGlvbigpe2oucG9zaXRpb24oe3RvcDpkMy5ldmVudC5wYWdlWSxsZWZ0OmQzLmV2ZW50LnBhZ2VYfSkoKX0pLGIuZGlzcGF0Y2g9QSxiLm11bHRpYmFyPWUsYi5sZWdlbmQ9aCxiLmNvbnRyb2xzPWksYi54QXhpcz1mLGIueUF4aXM9ZyxiLnN0YXRlPXgsYi50b29sdGlwPWosYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKGEpe2w9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSxzaG93TGVnZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcX0sc2V0OmZ1bmN0aW9uKGEpe3E9YX19LHNob3dDb250cm9sczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWF9fSxjb250cm9sTGFiZWxzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LHNob3dYQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbihhKXtyPWF9fSxzaG93WUF4aXM6e2dldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oYSl7cz1hfX0sZGVmYXVsdFN0YXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geX0sc2V0OmZ1bmN0aW9uKGEpe3k9YX19LG5vRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHp9LHNldDpmdW5jdGlvbihhKXt6PWF9fSxyZWR1Y2VYVGlja3M6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT1hfX0scm90YXRlTGFiZWxzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gd30sc2V0OmZ1bmN0aW9uKGEpe3c9YX19LHN0YWdnZXJMYWJlbHM6e2dldDpmdW5jdGlvbigpe3JldHVybiB2fSxzZXQ6ZnVuY3Rpb24oYSl7dj1hfX0sdG9vbHRpcHM6e2dldDpmdW5jdGlvbigpe3JldHVybiBqLmVuYWJsZWQoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBzXCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5lbmFibGVkKCkgaW5zdGVhZFwiKSxqLmVuYWJsZWQoISFiKX19LHRvb2x0aXBDb250ZW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gai5jb250ZW50R2VuZXJhdG9yKCl9LHNldDpmdW5jdGlvbihiKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwQ29udGVudFwiLFwidXNlIGNoYXJ0LnRvb2x0aXAuY29udGVudEdlbmVyYXRvcigpIGluc3RlYWRcIiksai5jb250ZW50R2VuZXJhdG9yKGIpfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2sudG9wPXZvaWQgMCE9PWEudG9wP2EudG9wOmsudG9wLGsucmlnaHQ9dm9pZCAwIT09YS5yaWdodD9hLnJpZ2h0OmsucmlnaHQsay5ib3R0b209dm9pZCAwIT09YS5ib3R0b20/YS5ib3R0b206ay5ib3R0b20say5sZWZ0PXZvaWQgMCE9PWEubGVmdD9hLmxlZnQ6ay5sZWZ0fX0sZHVyYXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiBDfSxzZXQ6ZnVuY3Rpb24oYSl7Qz1hLGUuZHVyYXRpb24oQyksZi5kdXJhdGlvbihDKSxnLmR1cmF0aW9uKEMpLEQucmVzZXQoQyl9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihiKXtuPWEudXRpbHMuZ2V0Q29sb3IoYiksaC5jb2xvcihuKX19LHJpZ2h0QWxpZ25ZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWEsZy5vcmllbnQodD9cInJpZ2h0XCI6XCJsZWZ0XCIpfX0sYmFyQ29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiBlLmJhckNvbG9yfSxzZXQ6ZnVuY3Rpb24oYSl7ZS5iYXJDb2xvcihhKSxoLmNvbG9yKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGQzLnJnYihcIiNjY2NcIikuZGFya2VyKDEuNSpiKS50b1N0cmluZygpfSl9fX0pLGEudXRpbHMuaW5oZXJpdE9wdGlvbnMoYixlKSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLm11bHRpQmFySG9yaXpvbnRhbD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIobSl7cmV0dXJuIEUucmVzZXQoKSxtLmVhY2goZnVuY3Rpb24oYil7dmFyIG09ay1qLmxlZnQtai5yaWdodCxDPWwtai50b3Atai5ib3R0b207bj1kMy5zZWxlY3QodGhpcyksYS51dGlscy5pbml0U1ZHKG4pLHcmJihiPWQzLmxheW91dC5zdGFjaygpLm9mZnNldChcInplcm9cIikudmFsdWVzKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlc30pLnkocikoYikpLGIuZm9yRWFjaChmdW5jdGlvbihhLGIpe2EudmFsdWVzLmZvckVhY2goZnVuY3Rpb24oYyl7Yy5zZXJpZXM9YixjLmtleT1hLmtleX0pfSksdyYmYlswXS52YWx1ZXMubWFwKGZ1bmN0aW9uKGEsYyl7dmFyIGQ9MCxlPTA7Yi5tYXAoZnVuY3Rpb24oYSl7dmFyIGI9YS52YWx1ZXNbY107Yi5zaXplPU1hdGguYWJzKGIueSksYi55PDA/KGIueTE9ZS1iLnNpemUsZS09Yi5zaXplKTooYi55MT1kLGQrPWIuc2l6ZSl9KX0pO3ZhciBGPWQmJmU/W106Yi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLm1hcChmdW5jdGlvbihhLGIpe3JldHVybnt4OnEoYSxiKSx5OnIoYSxiKSx5MDphLnkwLHkxOmEueTF9fSl9KTtvLmRvbWFpbihkfHxkMy5tZXJnZShGKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEueH0pKS5yYW5nZUJhbmRzKGZ8fFswLENdLEEpLHAuZG9tYWluKGV8fGQzLmV4dGVudChkMy5tZXJnZShGKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIHc/YS55PjA/YS55MSthLnk6YS55MTphLnl9KS5jb25jYXQodCkpKSxwLnJhbmdlKHgmJiF3P2d8fFtwLmRvbWFpbigpWzBdPDA/ejowLG0tKHAuZG9tYWluKClbMV0+MD96OjApXTpnfHxbMCxtXSksaD1ofHxvLGk9aXx8ZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKHAuZG9tYWluKCkpLnJhbmdlKFtwKDApLHAoMCldKTt7dmFyIEc9ZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1tdWx0aWJhckhvcml6b250YWxcIikuZGF0YShbYl0pLEg9Ry5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtbXVsdGliYXJIb3Jpem9udGFsXCIpLEk9KEguYXBwZW5kKFwiZGVmc1wiKSxILmFwcGVuZChcImdcIikpO0cuc2VsZWN0KFwiZ1wiKX1JLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1ncm91cHNcIiksRy5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrai5sZWZ0K1wiLFwiK2oudG9wK1wiKVwiKTt2YXIgSj1HLnNlbGVjdChcIi5udi1ncm91cHNcIikuc2VsZWN0QWxsKFwiLm52LWdyb3VwXCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuIGF9LGZ1bmN0aW9uKGEsYil7cmV0dXJuIGJ9KTtKLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMWUtNikuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwxZS02KSxKLmV4aXQoKS53YXRjaFRyYW5zaXRpb24oRSxcIm11bHRpYmFyaG9yaXpvbnRhbDogZXhpdCBncm91cHNcIikuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDFlLTYpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsMWUtNikucmVtb3ZlKCksSi5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihhLGIpe3JldHVyblwibnYtZ3JvdXAgbnYtc2VyaWVzLVwiK2J9KS5jbGFzc2VkKFwiaG92ZXJcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5ob3Zlcn0pLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHUoYSxiKX0pLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gdShhLGIpfSksSi53YXRjaFRyYW5zaXRpb24oRSxcIm11bHRpYmFyaG9yaXpvbnRhbDogZ3JvdXBzXCIpLnN0eWxlKFwic3Ryb2tlLW9wYWNpdHlcIiwxKS5zdHlsZShcImZpbGwtb3BhY2l0eVwiLC43NSk7dmFyIEs9Si5zZWxlY3RBbGwoXCJnLm52LWJhclwiKS5kYXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlc30pO0suZXhpdCgpLnJlbW92ZSgpO3ZhciBMPUsuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGMsZCl7cmV0dXJuXCJ0cmFuc2xhdGUoXCIraSh3P2EueTA6MCkrXCIsXCIrKHc/MDpkKm8ucmFuZ2VCYW5kKCkvYi5sZW5ndGgrbyhxKGEsYykpKStcIilcIn0pO0wuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwid2lkdGhcIiwwKS5hdHRyKFwiaGVpZ2h0XCIsby5yYW5nZUJhbmQoKS8odz8xOmIubGVuZ3RoKSksSy5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGEsYil7ZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJob3ZlclwiLCEwKSxELmVsZW1lbnRNb3VzZW92ZXIoe2RhdGE6YSxpbmRleDpiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSksRC5lbGVtZW50TW91c2VvdXQoe2RhdGE6YSxpbmRleDpiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe0QuZWxlbWVudE1vdXNlb3V0KHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KS5vbihcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKGEsYil7RC5lbGVtZW50TW91c2Vtb3ZlKHtkYXRhOmEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSxiKXtELmVsZW1lbnRDbGljayh7ZGF0YTphLGluZGV4OmIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pLGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpfSkub24oXCJkYmxjbGlja1wiLGZ1bmN0aW9uKGEsYil7RC5lbGVtZW50RGJsQ2xpY2soe2RhdGE6YSxpbmRleDpiLGNvbG9yOmQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIil9KSxkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKX0pLHMoYlswXSwwKSYmKEwuYXBwZW5kKFwicG9seWxpbmVcIiksSy5zZWxlY3QoXCJwb2x5bGluZVwiKS5hdHRyKFwiZmlsbFwiLFwibm9uZVwiKS5hdHRyKFwicG9pbnRzXCIsZnVuY3Rpb24oYSxjKXt2YXIgZD1zKGEsYyksZT0uOCpvLnJhbmdlQmFuZCgpLygyKih3PzE6Yi5sZW5ndGgpKTtkPWQubGVuZ3RoP2Q6Wy1NYXRoLmFicyhkKSxNYXRoLmFicyhkKV0sZD1kLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gcChhKS1wKDApfSk7dmFyIGY9W1tkWzBdLC1lXSxbZFswXSxlXSxbZFswXSwwXSxbZFsxXSwwXSxbZFsxXSwtZV0sW2RbMV0sZV1dO3JldHVybiBmLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5qb2luKFwiLFwiKX0pLmpvaW4oXCIgXCIpfSkuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEsYyl7dmFyIGQ9by5yYW5nZUJhbmQoKS8oMioodz8xOmIubGVuZ3RoKSk7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrKHIoYSxjKTwwPzA6cChyKGEsYykpLXAoMCkpK1wiLCBcIitkK1wiKVwifSkpLEwuYXBwZW5kKFwidGV4dFwiKSx4JiYhdz8oSy5zZWxlY3QoXCJ0ZXh0XCIpLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHIoYSxiKTwwP1wiZW5kXCI6XCJzdGFydFwifSkuYXR0cihcInlcIixvLnJhbmdlQmFuZCgpLygyKmIubGVuZ3RoKSkuYXR0cihcImR5XCIsXCIuMzJlbVwiKS50ZXh0KGZ1bmN0aW9uKGEsYil7dmFyIGM9QihyKGEsYikpLGQ9cyhhLGIpO3JldHVybiB2b2lkIDA9PT1kP2M6ZC5sZW5ndGg/YytcIitcIitCKE1hdGguYWJzKGRbMV0pKStcIi1cIitCKE1hdGguYWJzKGRbMF0pKTpjK1wiwrFcIitCKE1hdGguYWJzKGQpKX0pLEsud2F0Y2hUcmFuc2l0aW9uKEUsXCJtdWx0aWJhcmhvcml6b250YWw6IGJhcnNcIikuc2VsZWN0KFwidGV4dFwiKS5hdHRyKFwieFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHIoYSxiKTwwPy00OnAocihhLGIpKS1wKDApKzR9KSk6Sy5zZWxlY3RBbGwoXCJ0ZXh0XCIpLnRleHQoXCJcIikseSYmIXc/KEwuYXBwZW5kKFwidGV4dFwiKS5jbGFzc2VkKFwibnYtYmFyLWxhYmVsXCIsITApLEsuc2VsZWN0KFwidGV4dC5udi1iYXItbGFiZWxcIikuYXR0cihcInRleHQtYW5jaG9yXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gcihhLGIpPDA/XCJzdGFydFwiOlwiZW5kXCJ9KS5hdHRyKFwieVwiLG8ucmFuZ2VCYW5kKCkvKDIqYi5sZW5ndGgpKS5hdHRyKFwiZHlcIixcIi4zMmVtXCIpLnRleHQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gcShhLGIpfSksSy53YXRjaFRyYW5zaXRpb24oRSxcIm11bHRpYmFyaG9yaXpvbnRhbDogYmFyc1wiKS5zZWxlY3QoXCJ0ZXh0Lm52LWJhci1sYWJlbFwiKS5hdHRyKFwieFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHIoYSxiKTwwP3AoMCktcChyKGEsYikpKzQ6LTR9KSk6Sy5zZWxlY3RBbGwoXCJ0ZXh0Lm52LWJhci1sYWJlbFwiKS50ZXh0KFwiXCIpLEsuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gcihhLGIpPDA/XCJudi1iYXIgbmVnYXRpdmVcIjpcIm52LWJhciBwb3NpdGl2ZVwifSksdiYmKGN8fChjPWIubWFwKGZ1bmN0aW9uKCl7cmV0dXJuITB9KSksSy5zdHlsZShcImZpbGxcIixmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGQzLnJnYih2KGEsYikpLmRhcmtlcihjLm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBifSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIWNbYl19KVtkXSkudG9TdHJpbmcoKX0pLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oYSxiLGQpe3JldHVybiBkMy5yZ2IodihhLGIpKS5kYXJrZXIoYy5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYn0pLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiFjW2JdfSlbZF0pLnRvU3RyaW5nKCl9KSksdz9LLndhdGNoVHJhbnNpdGlvbihFLFwibXVsdGliYXJob3Jpem9udGFsOiBiYXJzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe3JldHVyblwidHJhbnNsYXRlKFwiK3AoYS55MSkrXCIsXCIrbyhxKGEsYikpK1wiKVwifSkuc2VsZWN0KFwicmVjdFwiKS5hdHRyKFwid2lkdGhcIixmdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLmFicyhwKHIoYSxiKSthLnkwKS1wKGEueTApKX0pLmF0dHIoXCJoZWlnaHRcIixvLnJhbmdlQmFuZCgpKTpLLndhdGNoVHJhbnNpdGlvbihFLFwibXVsdGliYXJob3Jpem9udGFsOiBiYXJzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGMpe3JldHVyblwidHJhbnNsYXRlKFwiK3AocihhLGMpPDA/cihhLGMpOjApK1wiLFwiKyhhLnNlcmllcypvLnJhbmdlQmFuZCgpL2IubGVuZ3RoK28ocShhLGMpKSkrXCIpXCJ9KS5zZWxlY3QoXCJyZWN0XCIpLmF0dHIoXCJoZWlnaHRcIixvLnJhbmdlQmFuZCgpL2IubGVuZ3RoKS5hdHRyKFwid2lkdGhcIixmdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLm1heChNYXRoLmFicyhwKHIoYSxiKSktcCgwKSksMSl9KSxoPW8uY29weSgpLGk9cC5jb3B5KCl9KSxFLnJlbmRlckVuZChcIm11bHRpYmFySG9yaXpvbnRhbCBpbW1lZGlhdGVcIiksYn12YXIgYyxkLGUsZixnLGgsaSxqPXt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0saz05NjAsbD01MDAsbT1NYXRoLmZsb29yKDFlNCpNYXRoLnJhbmRvbSgpKSxuPW51bGwsbz1kMy5zY2FsZS5vcmRpbmFsKCkscD1kMy5zY2FsZS5saW5lYXIoKSxxPWZ1bmN0aW9uKGEpe3JldHVybiBhLnh9LHI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0scz1mdW5jdGlvbihhKXtyZXR1cm4gYS55RXJyfSx0PVswXSx1PWEudXRpbHMuZGVmYXVsdENvbG9yKCksdj1udWxsLHc9ITEseD0hMSx5PSExLHo9NjAsQT0uMSxCPWQzLmZvcm1hdChcIiwuMmZcIiksQz0yNTAsRD1kMy5kaXNwYXRjaChcImNoYXJ0Q2xpY2tcIixcImVsZW1lbnRDbGlja1wiLFwiZWxlbWVudERibENsaWNrXCIsXCJlbGVtZW50TW91c2VvdmVyXCIsXCJlbGVtZW50TW91c2VvdXRcIixcImVsZW1lbnRNb3VzZW1vdmVcIixcInJlbmRlckVuZFwiKSxFPWEudXRpbHMucmVuZGVyV2F0Y2goRCxDKTtyZXR1cm4gYi5kaXNwYXRjaD1ELGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGt9LHNldDpmdW5jdGlvbihhKXtrPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0seDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXtxPWF9fSx5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKGEpe3I9YX19LHlFcnI6e2dldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oYSl7cz1hfX0seFNjYWxlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKGEpe289YX19LHlTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihhKXtwPWF9fSx4RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGEpe2Q9YX19LHlEb21haW46e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7ZT1hfX0seFJhbmdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0OmZ1bmN0aW9uKGEpe2Y9YX19LHlSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldDpmdW5jdGlvbihhKXtnPWF9fSxmb3JjZVk6e2dldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oYSl7dD1hfX0sc3RhY2tlZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHd9LHNldDpmdW5jdGlvbihhKXt3PWF9fSxzaG93VmFsdWVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geH0sc2V0OmZ1bmN0aW9uKGEpe3g9YX19LGRpc2FibGVkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY30sc2V0OmZ1bmN0aW9uKGEpe2M9YX19LGlkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sc2V0OmZ1bmN0aW9uKGEpe209YX19LHZhbHVlRm9ybWF0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQn0sc2V0OmZ1bmN0aW9uKGEpe0I9YX19LHZhbHVlUGFkZGluZzp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHp9LHNldDpmdW5jdGlvbihhKXt6PWF9fSxncm91cFNwYWNpbmc6e2dldDpmdW5jdGlvbigpe3JldHVybiBBfSxzZXQ6ZnVuY3Rpb24oYSl7QT1hfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gan0sc2V0OmZ1bmN0aW9uKGEpe2oudG9wPXZvaWQgMCE9PWEudG9wP2EudG9wOmoudG9wLGoucmlnaHQ9dm9pZCAwIT09YS5yaWdodD9hLnJpZ2h0OmoucmlnaHQsai5ib3R0b209dm9pZCAwIT09YS5ib3R0b20/YS5ib3R0b206ai5ib3R0b20sai5sZWZ0PXZvaWQgMCE9PWEubGVmdD9hLmxlZnQ6ai5sZWZ0fX0sZHVyYXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiBDfSxzZXQ6ZnVuY3Rpb24oYSl7Qz1hLEUucmVzZXQoQyl9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbihiKXt1PWEudXRpbHMuZ2V0Q29sb3IoYil9fSxiYXJDb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZ9LHNldDpmdW5jdGlvbihiKXt2PWI/YS51dGlscy5nZXRDb2xvcihiKTpudWxsfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLm11bHRpQmFySG9yaXpvbnRhbENoYXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihqKXtyZXR1cm4gQy5yZXNldCgpLEMubW9kZWxzKGUpLHImJkMubW9kZWxzKGYpLHMmJkMubW9kZWxzKGcpLGouZWFjaChmdW5jdGlvbihqKXt2YXIgdz1kMy5zZWxlY3QodGhpcyk7YS51dGlscy5pbml0U1ZHKHcpO3ZhciBDPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgobCx3LGspLEQ9YS51dGlscy5hdmFpbGFibGVIZWlnaHQobSx3LGspO2lmKGIudXBkYXRlPWZ1bmN0aW9uKCl7dy50cmFuc2l0aW9uKCkuZHVyYXRpb24oeikuY2FsbChiKX0sYi5jb250YWluZXI9dGhpcyx0PWUuc3RhY2tlZCgpLHUuc2V0dGVyKEIoaiksYi51cGRhdGUpLmdldHRlcihBKGopKS51cGRhdGUoKSx1LmRpc2FibGVkPWoubWFwKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5kaXNhYmxlZH0pLCF2KXt2YXIgRTt2PXt9O2ZvcihFIGluIHUpdltFXT11W0VdaW5zdGFuY2VvZiBBcnJheT91W0VdLnNsaWNlKDApOnVbRV19aWYoIShqJiZqLmxlbmd0aCYmai5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLmxlbmd0aH0pLmxlbmd0aCkpcmV0dXJuIGEudXRpbHMubm9EYXRhKGIsdyksYjt3LnNlbGVjdEFsbChcIi5udi1ub0RhdGFcIikucmVtb3ZlKCksYz1lLnhTY2FsZSgpLGQ9ZS55U2NhbGUoKTt2YXIgRj13LnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1tdWx0aUJhckhvcml6b250YWxDaGFydFwiKS5kYXRhKFtqXSksRz1GLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1tdWx0aUJhckhvcml6b250YWxDaGFydFwiKS5hcHBlbmQoXCJnXCIpLEg9Ri5zZWxlY3QoXCJnXCIpO2lmKEcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXggbnYtYXhpc1wiKSxHLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi15IG52LWF4aXNcIikuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXplcm9MaW5lXCIpLmFwcGVuZChcImxpbmVcIiksRy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtYmFyc1dyYXBcIiksRy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtbGVnZW5kV3JhcFwiKSxHLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1jb250cm9sc1dyYXBcIikscSYmKGgud2lkdGgoQy15KCkpLEguc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuZGF0dW0oaikuY2FsbChoKSxrLnRvcCE9aC5oZWlnaHQoKSYmKGsudG9wPWguaGVpZ2h0KCksRD1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChtLHcsaykpLEguc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK3koKStcIixcIistay50b3ArXCIpXCIpKSxvKXt2YXIgST1be2tleTpwLmdyb3VwZWR8fFwiR3JvdXBlZFwiLGRpc2FibGVkOmUuc3RhY2tlZCgpfSx7a2V5OnAuc3RhY2tlZHx8XCJTdGFja2VkXCIsZGlzYWJsZWQ6IWUuc3RhY2tlZCgpfV07aS53aWR0aCh5KCkpLmNvbG9yKFtcIiM0NDRcIixcIiM0NDRcIixcIiM0NDRcIl0pLEguc2VsZWN0KFwiLm52LWNvbnRyb2xzV3JhcFwiKS5kYXR1bShJKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIistay50b3ArXCIpXCIpLmNhbGwoaSl9Ri5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIray5sZWZ0K1wiLFwiK2sudG9wK1wiKVwiKSxlLmRpc2FibGVkKGoubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkfSkpLndpZHRoKEMpLmhlaWdodChEKS5jb2xvcihqLm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBhLmNvbG9yfHxuKGEsYil9KS5maWx0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4haltiXS5kaXNhYmxlZH0pKTt2YXIgSj1ILnNlbGVjdChcIi5udi1iYXJzV3JhcFwiKS5kYXR1bShqLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZH0pKTtpZihKLnRyYW5zaXRpb24oKS5jYWxsKGUpLHIpe2Yuc2NhbGUoYykuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWShELzI0LGopKS50aWNrU2l6ZSgtQywwKSxILnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuY2FsbChmKTt2YXIgSz1ILnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuc2VsZWN0QWxsKFwiZ1wiKTtLLnNlbGVjdEFsbChcImxpbmUsIHRleHRcIil9cyYmKGcuc2NhbGUoZCkuX3RpY2tzKGEudXRpbHMuY2FsY1RpY2tzWChDLzEwMCxqKSkudGlja1NpemUoLUQsMCksSC5zZWxlY3QoXCIubnYteS5udi1heGlzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiK0QrXCIpXCIpLEguc2VsZWN0KFwiLm52LXkubnYtYXhpc1wiKS5jYWxsKGcpKSxILnNlbGVjdChcIi5udi16ZXJvTGluZSBsaW5lXCIpLmF0dHIoXCJ4MVwiLGQoMCkpLmF0dHIoXCJ4MlwiLGQoMCkpLmF0dHIoXCJ5MVwiLDApLmF0dHIoXCJ5MlwiLC1EKSxoLmRpc3BhdGNoLm9uKFwic3RhdGVDaGFuZ2VcIixmdW5jdGlvbihhKXtmb3IodmFyIGMgaW4gYSl1W2NdPWFbY107eC5zdGF0ZUNoYW5nZSh1KSxiLnVwZGF0ZSgpfSksaS5kaXNwYXRjaC5vbihcImxlZ2VuZENsaWNrXCIsZnVuY3Rpb24oYSl7aWYoYS5kaXNhYmxlZCl7c3dpdGNoKEk9SS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9ITAsYX0pLGEuZGlzYWJsZWQ9ITEsYS5rZXkpe2Nhc2VcIkdyb3VwZWRcIjplLnN0YWNrZWQoITEpO2JyZWFrO2Nhc2VcIlN0YWNrZWRcIjplLnN0YWNrZWQoITApfXUuc3RhY2tlZD1lLnN0YWNrZWQoKSx4LnN0YXRlQ2hhbmdlKHUpLHQ9ZS5zdGFja2VkKCksYi51cGRhdGUoKX19KSx4Lm9uKFwiY2hhbmdlU3RhdGVcIixmdW5jdGlvbihhKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5kaXNhYmxlZCYmKGouZm9yRWFjaChmdW5jdGlvbihiLGMpe2IuZGlzYWJsZWQ9YS5kaXNhYmxlZFtjXX0pLHUuZGlzYWJsZWQ9YS5kaXNhYmxlZCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuc3RhY2tlZCYmKGUuc3RhY2tlZChhLnN0YWNrZWQpLHUuc3RhY2tlZD1hLnN0YWNrZWQsdD1hLnN0YWNrZWQpLGIudXBkYXRlKCl9KX0pLEMucmVuZGVyRW5kKFwibXVsdGliYXIgaG9yaXpvbnRhbCBjaGFydCBpbW1lZGlhdGVcIiksYn12YXIgYyxkLGU9YS5tb2RlbHMubXVsdGlCYXJIb3Jpem9udGFsKCksZj1hLm1vZGVscy5heGlzKCksZz1hLm1vZGVscy5heGlzKCksaD1hLm1vZGVscy5sZWdlbmQoKS5oZWlnaHQoMzApLGk9YS5tb2RlbHMubGVnZW5kKCkuaGVpZ2h0KDMwKSxqPWEubW9kZWxzLnRvb2x0aXAoKSxrPXt0b3A6MzAscmlnaHQ6MjAsYm90dG9tOjUwLGxlZnQ6NjB9LGw9bnVsbCxtPW51bGwsbj1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLG89ITAscD17fSxxPSEwLHI9ITAscz0hMCx0PSExLHU9YS51dGlscy5zdGF0ZSgpLHY9bnVsbCx3PW51bGwseD1kMy5kaXNwYXRjaChcInN0YXRlQ2hhbmdlXCIsXCJjaGFuZ2VTdGF0ZVwiLFwicmVuZGVyRW5kXCIpLHk9ZnVuY3Rpb24oKXtyZXR1cm4gbz8xODA6MH0sej0yNTA7dS5zdGFja2VkPSExLGUuc3RhY2tlZCh0KSxmLm9yaWVudChcImxlZnRcIikudGlja1BhZGRpbmcoNSkuc2hvd01heE1pbighMSkudGlja0Zvcm1hdChmdW5jdGlvbihhKXtyZXR1cm4gYX0pLGcub3JpZW50KFwiYm90dG9tXCIpLnRpY2tGb3JtYXQoZDMuZm9ybWF0KFwiLC4xZlwiKSksai5kdXJhdGlvbigwKS52YWx1ZUZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBnLnRpY2tGb3JtYXQoKShhLGIpfSkuaGVhZGVyRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGYudGlja0Zvcm1hdCgpKGEsYil9KSxpLnVwZGF0ZVN0YXRlKCExKTt2YXIgQT1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm57YWN0aXZlOmEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSksc3RhY2tlZDp0fX19LEI9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMCE9PWIuc3RhY2tlZCYmKHQ9Yi5zdGFja2VkKSx2b2lkIDAhPT1iLmFjdGl2ZSYmYS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7YS5kaXNhYmxlZD0hYi5hY3RpdmVbY119KX19LEM9YS51dGlscy5yZW5kZXJXYXRjaCh4LHopO3JldHVybiBlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7YS52YWx1ZT1iLngoKShhLmRhdGEpLGEuc2VyaWVzPXtrZXk6YS5kYXRhLmtleSx2YWx1ZTpiLnkoKShhLmRhdGEpLGNvbG9yOmEuY29sb3J9LGouZGF0YShhKS5oaWRkZW4oITEpfSksZS5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC50b29sdGlwXCIsZnVuY3Rpb24oKXtqLmhpZGRlbighMCl9KSxlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlbW92ZS50b29sdGlwXCIsZnVuY3Rpb24oKXtqLnBvc2l0aW9uKHt0b3A6ZDMuZXZlbnQucGFnZVksbGVmdDpkMy5ldmVudC5wYWdlWH0pKCl9KSxiLmRpc3BhdGNoPXgsYi5tdWx0aWJhcj1lLGIubGVnZW5kPWgsYi5jb250cm9scz1pLGIueEF4aXM9ZixiLnlBeGlzPWcsYi5zdGF0ZT11LGIudG9vbHRpcD1qLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0sc2hvd0xlZ2VuZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXtxPWF9fSxzaG93Q29udHJvbHM6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0sY29udHJvbExhYmVsczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihhKXtwPWF9fSxzaG93WEF4aXM6e2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oYSl7cj1hfX0sc2hvd1lBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YX19LGRlZmF1bHRTdGF0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZ9LHNldDpmdW5jdGlvbihhKXt2PWF9fSxub0RhdGE6e2dldDpmdW5jdGlvbigpe3JldHVybiB3fSxzZXQ6ZnVuY3Rpb24oYSl7dz1hfX0sdG9vbHRpcHM6e2dldDpmdW5jdGlvbigpe3JldHVybiBqLmVuYWJsZWQoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBzXCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5lbmFibGVkKCkgaW5zdGVhZFwiKSxqLmVuYWJsZWQoISFiKX19LHRvb2x0aXBDb250ZW50OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gai5jb250ZW50R2VuZXJhdG9yKCl9LHNldDpmdW5jdGlvbihiKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwQ29udGVudFwiLFwidXNlIGNoYXJ0LnRvb2x0aXAuY29udGVudEdlbmVyYXRvcigpIGluc3RlYWRcIiksai5jb250ZW50R2VuZXJhdG9yKGIpfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2sudG9wPXZvaWQgMCE9PWEudG9wP2EudG9wOmsudG9wLGsucmlnaHQ9dm9pZCAwIT09YS5yaWdodD9hLnJpZ2h0OmsucmlnaHQsay5ib3R0b209dm9pZCAwIT09YS5ib3R0b20/YS5ib3R0b206ay5ib3R0b20say5sZWZ0PXZvaWQgMCE9PWEubGVmdD9hLmxlZnQ6ay5sZWZ0fX0sZHVyYXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiB6fSxzZXQ6ZnVuY3Rpb24oYSl7ej1hLEMucmVzZXQoeiksZS5kdXJhdGlvbih6KSxmLmR1cmF0aW9uKHopLGcuZHVyYXRpb24oeil9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihiKXtuPWEudXRpbHMuZ2V0Q29sb3IoYiksaC5jb2xvcihuKX19LGJhckNvbG9yOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5iYXJDb2xvcn0sc2V0OmZ1bmN0aW9uKGEpe2UuYmFyQ29sb3IoYSksaC5jb2xvcihmdW5jdGlvbihhLGIpe3JldHVybiBkMy5yZ2IoXCIjY2NjXCIpLmRhcmtlcigxLjUqYikudG9TdHJpbmcoKX0pfX19KSxhLnV0aWxzLmluaGVyaXRPcHRpb25zKGIsZSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5tdWx0aUNoYXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihqKXtyZXR1cm4gai5lYWNoKGZ1bmN0aW9uKGope2Z1bmN0aW9uIGsoYSl7dmFyIGI9Mj09PWpbYS5zZXJpZXNJbmRleF0ueUF4aXM/ejp5O2EudmFsdWU9YS5wb2ludC54LGEuc2VyaWVzPXt2YWx1ZTphLnBvaW50LnksY29sb3I6YS5wb2ludC5jb2xvcn0sQi5kdXJhdGlvbigxMDApLnZhbHVlRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGIudGlja0Zvcm1hdCgpKGEsYyl9KS5kYXRhKGEpLnBvc2l0aW9uKGEucG9zKS5oaWRkZW4oITEpfWZ1bmN0aW9uIGwoYSl7dmFyIGI9Mj09PWpbYS5zZXJpZXNJbmRleF0ueUF4aXM/ejp5O2EucG9pbnQueD12LngoKShhLnBvaW50KSxhLnBvaW50Lnk9di55KCkoYS5wb2ludCksQi5kdXJhdGlvbigxMDApLnZhbHVlRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGIudGlja0Zvcm1hdCgpKGEsYyl9KS5kYXRhKGEpLnBvc2l0aW9uKGEucG9zKS5oaWRkZW4oITEpfWZ1bmN0aW9uIG4oYSl7dmFyIGI9Mj09PWpbYS5kYXRhLnNlcmllc10ueUF4aXM/ejp5O2EudmFsdWU9dC54KCkoYS5kYXRhKSxhLnNlcmllcz17dmFsdWU6dC55KCkoYS5kYXRhKSxjb2xvcjphLmNvbG9yfSxCLmR1cmF0aW9uKDApLnZhbHVlRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGIudGlja0Zvcm1hdCgpKGEsYyl9KS5kYXRhKGEpLmhpZGRlbighMSl9dmFyIEM9ZDMuc2VsZWN0KHRoaXMpO2EudXRpbHMuaW5pdFNWRyhDKSxiLnVwZGF0ZT1mdW5jdGlvbigpe0MudHJhbnNpdGlvbigpLmNhbGwoYil9LGIuY29udGFpbmVyPXRoaXM7dmFyIEQ9YS51dGlscy5hdmFpbGFibGVXaWR0aChnLEMsZSksRT1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChoLEMsZSksRj1qLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm5cImxpbmVcIj09YS50eXBlJiYxPT1hLnlBeGlzfSksRz1qLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm5cImxpbmVcIj09YS50eXBlJiYyPT1hLnlBeGlzfSksSD1qLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm5cImJhclwiPT1hLnR5cGUmJjE9PWEueUF4aXN9KSxJPWouZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVyblwiYmFyXCI9PWEudHlwZSYmMj09YS55QXhpc30pLEo9ai5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuXCJhcmVhXCI9PWEudHlwZSYmMT09YS55QXhpc30pLEs9ai5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuXCJhcmVhXCI9PWEudHlwZSYmMj09YS55QXhpc30pO2lmKCEoaiYmai5sZW5ndGgmJmouZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlcy5sZW5ndGh9KS5sZW5ndGgpKXJldHVybiBhLnV0aWxzLm5vRGF0YShiLEMpLGI7Qy5zZWxlY3RBbGwoXCIubnYtbm9EYXRhXCIpLnJlbW92ZSgpO3ZhciBMPWouZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkJiYxPT1hLnlBeGlzfSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlcy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJue3g6YS54LHk6YS55fX0pfSksTT1qLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZCYmMj09YS55QXhpc30pLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXMubWFwKGZ1bmN0aW9uKGEpe3JldHVybnt4OmEueCx5OmEueX19KX0pO28uZG9tYWluKGQzLmV4dGVudChkMy5tZXJnZShMLmNvbmNhdChNKSksZnVuY3Rpb24oYSl7cmV0dXJuIGEueH0pKS5yYW5nZShbMCxEXSk7dmFyIE49Qy5zZWxlY3RBbGwoXCJnLndyYXAubXVsdGlDaGFydFwiKS5kYXRhKFtqXSksTz1OLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIndyYXAgbnZkMyBtdWx0aUNoYXJ0XCIpLmFwcGVuZChcImdcIik7Ty5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYteCBudi1heGlzXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXkxIG52LWF4aXNcIiksTy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYteTIgbnYtYXhpc1wiKSxPLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJsaW5lczFXcmFwXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcImxpbmVzMldyYXBcIiksTy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwiYmFyczFXcmFwXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcImJhcnMyV3JhcFwiKSxPLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJzdGFjazFXcmFwXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcInN0YWNrMldyYXBcIiksTy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibGVnZW5kV3JhcFwiKTt2YXIgUD1OLnNlbGVjdChcImdcIiksUT1qLm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBqW2JdLmNvbG9yfHxmKGEsYil9KTtpZihpKXt2YXIgUj1BLmFsaWduKCk/RC8yOkQsUz1BLmFsaWduKCk/UjowO0Eud2lkdGgoUiksQS5jb2xvcihRKSxQLnNlbGVjdChcIi5sZWdlbmRXcmFwXCIpLmRhdHVtKGoubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLm9yaWdpbmFsS2V5PXZvaWQgMD09PWEub3JpZ2luYWxLZXk/YS5rZXk6YS5vcmlnaW5hbEtleSxhLmtleT1hLm9yaWdpbmFsS2V5KygxPT1hLnlBeGlzP1wiXCI6XCIgKHJpZ2h0IGF4aXMpXCIpLGF9KSkuY2FsbChBKSxlLnRvcCE9QS5oZWlnaHQoKSYmKGUudG9wPUEuaGVpZ2h0KCksRT1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChoLEMsZSkpLFAuc2VsZWN0KFwiLmxlZ2VuZFdyYXBcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK1MrXCIsXCIrLWUudG9wK1wiKVwiKX1yLndpZHRoKEQpLmhlaWdodChFKS5pbnRlcnBvbGF0ZShtKS5jb2xvcihRLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiFqW2JdLmRpc2FibGVkJiYxPT1qW2JdLnlBeGlzJiZcImxpbmVcIj09altiXS50eXBlfSkpLHMud2lkdGgoRCkuaGVpZ2h0KEUpLmludGVycG9sYXRlKG0pLmNvbG9yKFEuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIWpbYl0uZGlzYWJsZWQmJjI9PWpbYl0ueUF4aXMmJlwibGluZVwiPT1qW2JdLnR5cGV9KSksdC53aWR0aChEKS5oZWlnaHQoRSkuY29sb3IoUS5maWx0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4haltiXS5kaXNhYmxlZCYmMT09altiXS55QXhpcyYmXCJiYXJcIj09altiXS50eXBlfSkpLHUud2lkdGgoRCkuaGVpZ2h0KEUpLmNvbG9yKFEuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIWpbYl0uZGlzYWJsZWQmJjI9PWpbYl0ueUF4aXMmJlwiYmFyXCI9PWpbYl0udHlwZX0pKSx2LndpZHRoKEQpLmhlaWdodChFKS5jb2xvcihRLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiFqW2JdLmRpc2FibGVkJiYxPT1qW2JdLnlBeGlzJiZcImFyZWFcIj09altiXS50eXBlfSkpLHcud2lkdGgoRCkuaGVpZ2h0KEUpLmNvbG9yKFEuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIWpbYl0uZGlzYWJsZWQmJjI9PWpbYl0ueUF4aXMmJlwiYXJlYVwiPT1qW2JdLnR5cGV9KSksUC5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrZS5sZWZ0K1wiLFwiK2UudG9wK1wiKVwiKTt2YXIgVD1QLnNlbGVjdChcIi5saW5lczFXcmFwXCIpLmRhdHVtKEYuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkpLFU9UC5zZWxlY3QoXCIuYmFyczFXcmFwXCIpLmRhdHVtKEguZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkpLFY9UC5zZWxlY3QoXCIuc3RhY2sxV3JhcFwiKS5kYXR1bShKLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZH0pKSxXPVAuc2VsZWN0KFwiLmxpbmVzMldyYXBcIikuZGF0dW0oRy5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KSksWD1QLnNlbGVjdChcIi5iYXJzMldyYXBcIikuZGF0dW0oSS5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KSksWT1QLnNlbGVjdChcIi5zdGFjazJXcmFwXCIpLmRhdHVtKEsuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkpLFo9Si5sZW5ndGg/Si5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzfSkucmVkdWNlKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEubWFwKGZ1bmN0aW9uKGEsYyl7cmV0dXJue3g6YS54LHk6YS55K2JbY10ueX19KX0pLmNvbmNhdChbe3g6MCx5OjB9XSk6W10sJD1LLmxlbmd0aD9LLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXN9KS5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5tYXAoZnVuY3Rpb24oYSxjKXtyZXR1cm57eDphLngseTphLnkrYltjXS55fX0pfSkuY29uY2F0KFt7eDowLHk6MH1dKTpbXTtwLmRvbWFpbihjfHxkMy5leHRlbnQoZDMubWVyZ2UoTCkuY29uY2F0KFopLGZ1bmN0aW9uKGEpe3JldHVybiBhLnl9KSkucmFuZ2UoWzAsRV0pLHEuZG9tYWluKGR8fGQzLmV4dGVudChkMy5tZXJnZShNKS5jb25jYXQoJCksZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0pKS5yYW5nZShbMCxFXSksci55RG9tYWluKHAuZG9tYWluKCkpLHQueURvbWFpbihwLmRvbWFpbigpKSx2LnlEb21haW4ocC5kb21haW4oKSkscy55RG9tYWluKHEuZG9tYWluKCkpLHUueURvbWFpbihxLmRvbWFpbigpKSx3LnlEb21haW4ocS5kb21haW4oKSksSi5sZW5ndGgmJmQzLnRyYW5zaXRpb24oVikuY2FsbCh2KSxLLmxlbmd0aCYmZDMudHJhbnNpdGlvbihZKS5jYWxsKHcpLEgubGVuZ3RoJiZkMy50cmFuc2l0aW9uKFUpLmNhbGwodCksSS5sZW5ndGgmJmQzLnRyYW5zaXRpb24oWCkuY2FsbCh1KSxGLmxlbmd0aCYmZDMudHJhbnNpdGlvbihUKS5jYWxsKHIpLEcubGVuZ3RoJiZkMy50cmFuc2l0aW9uKFcpLmNhbGwocykseC5fdGlja3MoYS51dGlscy5jYWxjVGlja3NYKEQvMTAwLGopKS50aWNrU2l6ZSgtRSwwKSxQLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrRStcIilcIiksZDMudHJhbnNpdGlvbihQLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikpLmNhbGwoeCkseS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NZKEUvMzYsaikpLnRpY2tTaXplKC1ELDApLGQzLnRyYW5zaXRpb24oUC5zZWxlY3QoXCIubnYteTEubnYtYXhpc1wiKSkuY2FsbCh5KSx6Ll90aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1koRS8zNixqKSkudGlja1NpemUoLUQsMCksZDMudHJhbnNpdGlvbihQLnNlbGVjdChcIi5udi15Mi5udi1heGlzXCIpKS5jYWxsKHopLFAuc2VsZWN0KFwiLm52LXkxLm52LWF4aXNcIikuY2xhc3NlZChcIm52LWRpc2FibGVkXCIsTC5sZW5ndGg/ITE6ITApLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitvLnJhbmdlKClbMF0rXCIsMClcIiksUC5zZWxlY3QoXCIubnYteTIubnYtYXhpc1wiKS5jbGFzc2VkKFwibnYtZGlzYWJsZWRcIixNLmxlbmd0aD8hMTohMCkuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK28ucmFuZ2UoKVsxXStcIiwwKVwiKSxBLmRpc3BhdGNoLm9uKFwic3RhdGVDaGFuZ2VcIixmdW5jdGlvbigpe2IudXBkYXRlKCl9KSxyLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsaykscy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW92ZXIudG9vbHRpcFwiLGspLHIuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKCl7Qi5oaWRkZW4oITApfSkscy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC50b29sdGlwXCIsZnVuY3Rpb24oKXtCLmhpZGRlbighMCl9KSx2LmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsbCksdy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW92ZXIudG9vbHRpcFwiLGwpLHYuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKCl7Qi5oaWRkZW4oITApfSksdy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC50b29sdGlwXCIsZnVuY3Rpb24oKXtCLmhpZGRlbighMCl9KSx0LmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsbiksdS5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW92ZXIudG9vbHRpcFwiLG4pLHQuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKCl7Qi5oaWRkZW4oITApfSksdS5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC50b29sdGlwXCIsZnVuY3Rpb24oKXtCLmhpZGRlbighMCl9KSx0LmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlbW92ZS50b29sdGlwXCIsZnVuY3Rpb24oKXtCLnBvc2l0aW9uKHt0b3A6ZDMuZXZlbnQucGFnZVksbGVmdDpkMy5ldmVudC5wYWdlWH0pKCl9KSx1LmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlbW92ZS50b29sdGlwXCIsZnVuY3Rpb24oKXtCLnBvc2l0aW9uKHt0b3A6ZDMuZXZlbnQucGFnZVksbGVmdDpkMy5ldmVudC5wYWdlWH0pKCl9KX0pLGJ9dmFyIGMsZCxlPXt0b3A6MzAscmlnaHQ6MjAsYm90dG9tOjUwLGxlZnQ6NjB9LGY9YS51dGlscy5kZWZhdWx0Q29sb3IoKSxnPW51bGwsaD1udWxsLGk9ITAsaj1udWxsLGs9ZnVuY3Rpb24oYSl7cmV0dXJuIGEueH0sbD1mdW5jdGlvbihhKXtyZXR1cm4gYS55fSxtPVwibW9ub3RvbmVcIixuPSEwLG89ZDMuc2NhbGUubGluZWFyKCkscD1kMy5zY2FsZS5saW5lYXIoKSxxPWQzLnNjYWxlLmxpbmVhcigpLHI9YS5tb2RlbHMubGluZSgpLnlTY2FsZShwKSxzPWEubW9kZWxzLmxpbmUoKS55U2NhbGUocSksdD1hLm1vZGVscy5tdWx0aUJhcigpLnN0YWNrZWQoITEpLnlTY2FsZShwKSx1PWEubW9kZWxzLm11bHRpQmFyKCkuc3RhY2tlZCghMSkueVNjYWxlKHEpLHY9YS5tb2RlbHMuc3RhY2tlZEFyZWEoKS55U2NhbGUocCksdz1hLm1vZGVscy5zdGFja2VkQXJlYSgpLnlTY2FsZShxKSx4PWEubW9kZWxzLmF4aXMoKS5zY2FsZShvKS5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoNSkseT1hLm1vZGVscy5heGlzKCkuc2NhbGUocCkub3JpZW50KFwibGVmdFwiKSx6PWEubW9kZWxzLmF4aXMoKS5zY2FsZShxKS5vcmllbnQoXCJyaWdodFwiKSxBPWEubW9kZWxzLmxlZ2VuZCgpLmhlaWdodCgzMCksQj1hLm1vZGVscy50b29sdGlwKCksQz1kMy5kaXNwYXRjaCgpO3JldHVybiBiLmRpc3BhdGNoPUMsYi5saW5lczE9cixiLmxpbmVzMj1zLGIuYmFyczE9dCxiLmJhcnMyPXUsYi5zdGFjazE9dixiLnN0YWNrMj13LGIueEF4aXM9eCxiLnlBeGlzMT15LGIueUF4aXMyPXosYi50b29sdGlwPUIsYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKGEpe2c9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoPWF9fSxzaG93TGVnZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGEpe2k9YX19LHlEb21haW4xOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY30sc2V0OmZ1bmN0aW9uKGEpe2M9YX19LHlEb21haW4yOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGEpe2Q9YX19LG5vRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihhKXtqPWF9fSxpbnRlcnBvbGF0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSx0b29sdGlwczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEIuZW5hYmxlZCgpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcHNcIixcInVzZSBjaGFydC50b29sdGlwLmVuYWJsZWQoKSBpbnN0ZWFkXCIpLEIuZW5hYmxlZCghIWIpfX0sdG9vbHRpcENvbnRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBCLmNvbnRlbnRHZW5lcmF0b3IoKX0sc2V0OmZ1bmN0aW9uKGIpe2EuZGVwcmVjYXRlZChcInRvb2x0aXBDb250ZW50XCIsXCJ1c2UgY2hhcnQudG9vbHRpcC5jb250ZW50R2VuZXJhdG9yKCkgaW5zdGVhZFwiKSxCLmNvbnRlbnRHZW5lcmF0b3IoYil9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7ZS50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6ZS50b3AsZS5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6ZS5yaWdodCxlLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTplLmJvdHRvbSxlLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDplLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihiKXtmPWEudXRpbHMuZ2V0Q29sb3IoYil9fSx4OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YSxyLngoYSkscy54KGEpLHQueChhKSx1LngoYSksdi54KGEpLHcueChhKX19LHk6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hLHIueShhKSxzLnkoYSksdi55KGEpLHcueShhKSx0LnkoYSksdS55KGEpfX0sdXNlVm9yb25vaTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihhKXtuPWEsci51c2VWb3Jvbm9pKGEpLHMudXNlVm9yb25vaShhKSx2LnVzZVZvcm9ub2koYSksdy51c2VWb3Jvbm9pKGEpfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLm9obGNCYXI9ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKHkpe3JldHVybiB5LmVhY2goZnVuY3Rpb24oYil7az1kMy5zZWxlY3QodGhpcyk7dmFyIHk9YS51dGlscy5hdmFpbGFibGVXaWR0aChoLGssZyksQT1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChpLGssZyk7YS51dGlscy5pbml0U1ZHKGspO3ZhciBCPXkvYlswXS52YWx1ZXMubGVuZ3RoKi45O2wuZG9tYWluKGN8fGQzLmV4dGVudChiWzBdLnZhbHVlcy5tYXAobikuY29uY2F0KHQpKSksbC5yYW5nZSh2P2V8fFsuNSp5L2JbMF0udmFsdWVzLmxlbmd0aCx5KihiWzBdLnZhbHVlcy5sZW5ndGgtLjUpL2JbMF0udmFsdWVzLmxlbmd0aF06ZXx8WzUrQi8yLHktQi8yLTVdKSxtLmRvbWFpbihkfHxbZDMubWluKGJbMF0udmFsdWVzLm1hcChzKS5jb25jYXQodSkpLGQzLm1heChiWzBdLnZhbHVlcy5tYXAocikuY29uY2F0KHUpKV0pLnJhbmdlKGZ8fFtBLDBdKSxsLmRvbWFpbigpWzBdPT09bC5kb21haW4oKVsxXSYmbC5kb21haW4obC5kb21haW4oKVswXT9bbC5kb21haW4oKVswXS0uMDEqbC5kb21haW4oKVswXSxsLmRvbWFpbigpWzFdKy4wMSpsLmRvbWFpbigpWzFdXTpbLTEsMV0pLG0uZG9tYWluKClbMF09PT1tLmRvbWFpbigpWzFdJiZtLmRvbWFpbihtLmRvbWFpbigpWzBdP1ttLmRvbWFpbigpWzBdKy4wMSptLmRvbWFpbigpWzBdLG0uZG9tYWluKClbMV0tLjAxKm0uZG9tYWluKClbMV1dOlstMSwxXSk7dmFyIEM9ZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1vaGxjQmFyXCIpLmRhdGEoW2JbMF0udmFsdWVzXSksRD1DLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1vaGxjQmFyXCIpLEU9RC5hcHBlbmQoXCJkZWZzXCIpLEY9RC5hcHBlbmQoXCJnXCIpLEc9Qy5zZWxlY3QoXCJnXCIpO0YuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXRpY2tzXCIpLEMuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2cubGVmdCtcIixcIitnLnRvcCtcIilcIiksay5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSxiKXt6LmNoYXJ0Q2xpY2soe2RhdGE6YSxpbmRleDpiLHBvczpkMy5ldmVudCxpZDpqfSl9KSxFLmFwcGVuZChcImNsaXBQYXRoXCIpLmF0dHIoXCJpZFwiLFwibnYtY2hhcnQtY2xpcC1wYXRoLVwiK2opLmFwcGVuZChcInJlY3RcIiksQy5zZWxlY3QoXCIjbnYtY2hhcnQtY2xpcC1wYXRoLVwiK2orXCIgcmVjdFwiKS5hdHRyKFwid2lkdGhcIix5KS5hdHRyKFwiaGVpZ2h0XCIsQSksRy5hdHRyKFwiY2xpcC1wYXRoXCIsdz9cInVybCgjbnYtY2hhcnQtY2xpcC1wYXRoLVwiK2orXCIpXCI6XCJcIik7dmFyIEg9Qy5zZWxlY3QoXCIubnYtdGlja3NcIikuc2VsZWN0QWxsKFwiLm52LXRpY2tcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm4gYX0pO0guZXhpdCgpLnJlbW92ZSgpLEguZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4ocChhLGIpPnEoYSxiKT9cIm52LXRpY2sgbmVnYXRpdmVcIjpcIm52LXRpY2sgcG9zaXRpdmVcIikrXCIgbnYtdGljay1cIitjK1wiLVwiK2J9KS5hdHRyKFwiZFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJtMCwwbDAsXCIrKG0ocChhLGIpKS1tKHIoYSxiKSkpK1wibFwiKy1CLzIrXCIsMGxcIitCLzIrXCIsMGwwLFwiKyhtKHMoYSxiKSktbShwKGEsYikpKStcImwwLFwiKyhtKHEoYSxiKSktbShzKGEsYikpKStcImxcIitCLzIrXCIsMGxcIistQi8yK1wiLDB6XCJ9KS5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRyYW5zbGF0ZShcIitsKG4oYSxiKSkrXCIsXCIrbShyKGEsYikpK1wiKVwifSkuYXR0cihcImZpbGxcIixmdW5jdGlvbigpe3JldHVybiB4WzBdfSkuYXR0cihcInN0cm9rZVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHhbMF19KS5hdHRyKFwieFwiLDApLmF0dHIoXCJ5XCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gbShNYXRoLm1heCgwLG8oYSxiKSkpfSkuYXR0cihcImhlaWdodFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIE1hdGguYWJzKG0obyhhLGIpKS1tKDApKX0pLEguYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oYSxiLGMpe3JldHVybihwKGEsYik+cShhLGIpP1wibnYtdGljayBuZWdhdGl2ZVwiOlwibnYtdGljayBwb3NpdGl2ZVwiKStcIiBudi10aWNrLVwiK2MrXCItXCIrYn0pLGQzLnRyYW5zaXRpb24oSCkuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0cmFuc2xhdGUoXCIrbChuKGEsYikpK1wiLFwiK20ocihhLGIpKStcIilcIn0pLmF0dHIoXCJkXCIsZnVuY3Rpb24oYSxjKXt2YXIgZD15L2JbMF0udmFsdWVzLmxlbmd0aCouOTtyZXR1cm5cIm0wLDBsMCxcIisobShwKGEsYykpLW0ocihhLGMpKSkrXCJsXCIrLWQvMitcIiwwbFwiK2QvMitcIiwwbDAsXCIrKG0ocyhhLGMpKS1tKHAoYSxjKSkpK1wibDAsXCIrKG0ocShhLGMpKS1tKHMoYSxjKSkpK1wibFwiK2QvMitcIiwwbFwiKy1kLzIrXCIsMHpcIn0pfSksYn12YXIgYyxkLGUsZixnPXt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0saD1udWxsLGk9bnVsbCxqPU1hdGguZmxvb3IoMWU0Kk1hdGgucmFuZG9tKCkpLGs9bnVsbCxsPWQzLnNjYWxlLmxpbmVhcigpLG09ZDMuc2NhbGUubGluZWFyKCksbj1mdW5jdGlvbihhKXtyZXR1cm4gYS54fSxvPWZ1bmN0aW9uKGEpe3JldHVybiBhLnl9LHA9ZnVuY3Rpb24oYSl7cmV0dXJuIGEub3Blbn0scT1mdW5jdGlvbihhKXtyZXR1cm4gYS5jbG9zZX0scj1mdW5jdGlvbihhKXtyZXR1cm4gYS5oaWdofSxzPWZ1bmN0aW9uKGEpe3JldHVybiBhLmxvd30sdD1bXSx1PVtdLHY9ITEsdz0hMCx4PWEudXRpbHMuZGVmYXVsdENvbG9yKCkseT0hMSx6PWQzLmRpc3BhdGNoKFwidG9vbHRpcFNob3dcIixcInRvb2x0aXBIaWRlXCIsXCJzdGF0ZUNoYW5nZVwiLFwiY2hhbmdlU3RhdGVcIixcInJlbmRlckVuZFwiLFwiY2hhcnRDbGlja1wiLFwiZWxlbWVudENsaWNrXCIsXCJlbGVtZW50RGJsQ2xpY2tcIixcImVsZW1lbnRNb3VzZW92ZXJcIixcImVsZW1lbnRNb3VzZW91dFwiLFwiZWxlbWVudE1vdXNlbW92ZVwiKTtyZXR1cm4gYi5oaWdobGlnaHRQb2ludD1mdW5jdGlvbihhLGMpe2IuY2xlYXJIaWdobGlnaHRzKCksay5zZWxlY3QoXCIubnYtb2hsY0JhciAubnYtdGljay0wLVwiK2EpLmNsYXNzZWQoXCJob3ZlclwiLGMpfSxiLmNsZWFySGlnaGxpZ2h0cz1mdW5jdGlvbigpe2suc2VsZWN0KFwiLm52LW9obGNCYXIgLm52LXRpY2suaG92ZXJcIikuY2xhc3NlZChcImhvdmVyXCIsITEpfSxiLmRpc3BhdGNoPXosYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEpe2g9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihhKXtpPWF9fSx4U2NhbGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0seVNjYWxlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sc2V0OmZ1bmN0aW9uKGEpe209YX19LHhEb21haW46e2dldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24oYSl7Yz1hfX0seURvbWFpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldDpmdW5jdGlvbihhKXtkPWF9fSx4UmFuZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7ZT1hfX0seVJhbmdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0OmZ1bmN0aW9uKGEpe2Y9YX19LGZvcmNlWDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWF9fSxmb3JjZVk6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT1hfX0scGFkRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZ9LHNldDpmdW5jdGlvbihhKXt2PWF9fSxjbGlwRWRnZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHd9LHNldDpmdW5jdGlvbihhKXt3PWF9fSxpZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihhKXtqPWF9fSxpbnRlcmFjdGl2ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHl9LHNldDpmdW5jdGlvbihhKXt5PWF9fSx4OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LHk6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0sb3Blbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAoKX0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LGNsb3NlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcSgpfSxzZXQ6ZnVuY3Rpb24oYSl7cT1hfX0saGlnaDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbihhKXtyPWF9fSxsb3c6e2dldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oYSl7cz1hfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKGEpe2cudG9wPXZvaWQgMCE9YS50b3A/YS50b3A6Zy50b3AsZy5yaWdodD12b2lkIDAhPWEucmlnaHQ/YS5yaWdodDpnLnJpZ2h0LGcuYm90dG9tPXZvaWQgMCE9YS5ib3R0b20/YS5ib3R0b206Zy5ib3R0b20sZy5sZWZ0PXZvaWQgMCE9YS5sZWZ0P2EubGVmdDpnLmxlZnRcbn19LGNvbG9yOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geH0sc2V0OmZ1bmN0aW9uKGIpe3g9YS51dGlscy5nZXRDb2xvcihiKX19fSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5wYXJhbGxlbENvb3JkaW5hdGVzPWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihwKXtyZXR1cm4gcC5lYWNoKGZ1bmN0aW9uKGIpe2Z1bmN0aW9uIHAoYSl7cmV0dXJuIEYoaC5tYXAoZnVuY3Rpb24oYil7aWYoaXNOYU4oYVtiXSl8fGlzTmFOKHBhcnNlRmxvYXQoYVtiXSkpKXt2YXIgYz1nW2JdLmRvbWFpbigpLGQ9Z1tiXS5yYW5nZSgpLGU9Y1swXS0oY1sxXS1jWzBdKS85O2lmKEouaW5kZXhPZihiKTwwKXt2YXIgaD1kMy5zY2FsZS5saW5lYXIoKS5kb21haW4oW2UsY1sxXV0pLnJhbmdlKFt4LTEyLGRbMV1dKTtnW2JdLmJydXNoLnkoaCksSi5wdXNoKGIpfXJldHVybltmKGIpLGdbYl0oZSldfXJldHVybiBKLmxlbmd0aD4wPyhELnN0eWxlKFwiZGlzcGxheVwiLFwiaW5saW5lXCIpLEUuc3R5bGUoXCJkaXNwbGF5XCIsXCJpbmxpbmVcIikpOihELnN0eWxlKFwiZGlzcGxheVwiLFwibm9uZVwiKSxFLnN0eWxlKFwiZGlzcGxheVwiLFwibm9uZVwiKSksW2YoYiksZ1tiXShhW2JdKV19KSl9ZnVuY3Rpb24gcSgpe3ZhciBhPWguZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFnW2FdLmJydXNoLmVtcHR5KCl9KSxiPWEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBnW2FdLmJydXNoLmV4dGVudCgpfSk7az1bXSxhLmZvckVhY2goZnVuY3Rpb24oYSxjKXtrW2NdPXtkaW1lbnNpb246YSxleHRlbnQ6YltjXX19KSxsPVtdLE0uc3R5bGUoXCJkaXNwbGF5XCIsZnVuY3Rpb24oYyl7dmFyIGQ9YS5ldmVyeShmdW5jdGlvbihhLGQpe3JldHVybiBpc05hTihjW2FdKSYmYltkXVswXT09Z1thXS5icnVzaC55KCkuZG9tYWluKClbMF0/ITA6YltkXVswXTw9Y1thXSYmY1thXTw9YltkXVsxXX0pO3JldHVybiBkJiZsLnB1c2goYyksZD9udWxsOlwibm9uZVwifSksby5icnVzaCh7ZmlsdGVyczprLGFjdGl2ZTpsfSl9ZnVuY3Rpb24gcihhKXttW2FdPXRoaXMucGFyZW50Tm9kZS5fX29yaWdpbl9fPWYoYSksTC5hdHRyKFwidmlzaWJpbGl0eVwiLFwiaGlkZGVuXCIpfWZ1bmN0aW9uIHMoYSl7bVthXT1NYXRoLm1pbih3LE1hdGgubWF4KDAsdGhpcy5wYXJlbnROb2RlLl9fb3JpZ2luX18rPWQzLmV2ZW50LngpKSxNLmF0dHIoXCJkXCIscCksaC5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIHUoYSktdShiKX0pLGYuZG9tYWluKGgpLE4uYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEpe3JldHVyblwidHJhbnNsYXRlKFwiK3UoYSkrXCIpXCJ9KX1mdW5jdGlvbiB0KGEpe2RlbGV0ZSB0aGlzLnBhcmVudE5vZGUuX19vcmlnaW5fXyxkZWxldGUgbVthXSxkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrZihhKStcIilcIiksTS5hdHRyKFwiZFwiLHApLEwuYXR0cihcImRcIixwKS5hdHRyKFwidmlzaWJpbGl0eVwiLG51bGwpfWZ1bmN0aW9uIHUoYSl7dmFyIGI9bVthXTtyZXR1cm4gbnVsbD09Yj9mKGEpOmJ9dmFyIHY9ZDMuc2VsZWN0KHRoaXMpLHc9YS51dGlscy5hdmFpbGFibGVXaWR0aChkLHYsYykseD1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChlLHYsYyk7YS51dGlscy5pbml0U1ZHKHYpLGw9YixmLnJhbmdlUG9pbnRzKFswLHddLDEpLmRvbWFpbihoKTt2YXIgeT17fTtoLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGM9ZDMuZXh0ZW50KGIsZnVuY3Rpb24oYil7cmV0dXJuK2JbYV19KTtyZXR1cm4geVthXT0hMSx2b2lkIDA9PT1jWzBdJiYoeVthXT0hMCxjWzBdPTAsY1sxXT0wKSxjWzBdPT09Y1sxXSYmKGNbMF09Y1swXS0xLGNbMV09Y1sxXSsxKSxnW2FdPWQzLnNjYWxlLmxpbmVhcigpLmRvbWFpbihjKS5yYW5nZShbLjkqKHgtMTIpLDBdKSxnW2FdLmJydXNoPWQzLnN2Zy5icnVzaCgpLnkoZ1thXSkub24oXCJicnVzaFwiLHEpLFwibmFtZVwiIT1hfSk7dmFyIHo9di5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtcGFyYWxsZWxDb29yZGluYXRlc1wiKS5kYXRhKFtiXSksQT16LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1wYXJhbGxlbENvb3JkaW5hdGVzXCIpLEI9QS5hcHBlbmQoXCJnXCIpLEM9ei5zZWxlY3QoXCJnXCIpO0IuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXBhcmFsbGVsQ29vcmRpbmF0ZXMgYmFja2dyb3VuZFwiKSxCLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1wYXJhbGxlbENvb3JkaW5hdGVzIGZvcmVncm91bmRcIiksQi5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtcGFyYWxsZWxDb29yZGluYXRlcyBtaXNzaW5nVmFsdWVzbGluZVwiKSx6LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitjLmxlZnQrXCIsXCIrYy50b3ArXCIpXCIpO3ZhciBELEUsRj1kMy5zdmcubGluZSgpLmludGVycG9sYXRlKFwiY2FyZGluYWxcIikudGVuc2lvbihuKSxHPWQzLnN2Zy5heGlzKCkub3JpZW50KFwibGVmdFwiKSxIPWQzLmJlaGF2aW9yLmRyYWcoKS5vbihcImRyYWdzdGFydFwiLHIpLm9uKFwiZHJhZ1wiLHMpLm9uKFwiZHJhZ2VuZFwiLHQpLEk9Zi5yYW5nZSgpWzFdLWYucmFuZ2UoKVswXSxKPVtdLEs9WzArSS8yLHgtMTIsdy1JLzIseC0xMl07RD16LnNlbGVjdChcIi5taXNzaW5nVmFsdWVzbGluZVwiKS5zZWxlY3RBbGwoXCJsaW5lXCIpLmRhdGEoW0tdKSxELmVudGVyKCkuYXBwZW5kKFwibGluZVwiKSxELmV4aXQoKS5yZW1vdmUoKSxELmF0dHIoXCJ4MVwiLGZ1bmN0aW9uKGEpe3JldHVybiBhWzBdfSkuYXR0cihcInkxXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV19KS5hdHRyKFwieDJcIixmdW5jdGlvbihhKXtyZXR1cm4gYVsyXX0pLmF0dHIoXCJ5MlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhWzNdfSksRT16LnNlbGVjdChcIi5taXNzaW5nVmFsdWVzbGluZVwiKS5zZWxlY3RBbGwoXCJ0ZXh0XCIpLmRhdGEoW1widW5kZWZpbmVkIHZhbHVlc1wiXSksRS5hcHBlbmQoXCJ0ZXh0XCIpLmRhdGEoW1widW5kZWZpbmVkIHZhbHVlc1wiXSksRS5lbnRlcigpLmFwcGVuZChcInRleHRcIiksRS5leGl0KCkucmVtb3ZlKCksRS5hdHRyKFwieVwiLHgpLmF0dHIoXCJ4XCIsdy05Mi1JLzIpLnRleHQoZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTt2YXIgTD16LnNlbGVjdChcIi5iYWNrZ3JvdW5kXCIpLnNlbGVjdEFsbChcInBhdGhcIikuZGF0YShiKTtMLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKSxMLmV4aXQoKS5yZW1vdmUoKSxMLmF0dHIoXCJkXCIscCk7dmFyIE09ei5zZWxlY3QoXCIuZm9yZWdyb3VuZFwiKS5zZWxlY3RBbGwoXCJwYXRoXCIpLmRhdGEoYik7TS5lbnRlcigpLmFwcGVuZChcInBhdGhcIiksTS5leGl0KCkucmVtb3ZlKCksTS5hdHRyKFwiZFwiLHApLmF0dHIoXCJzdHJva2VcIixqKSxNLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oYSxiKXtkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhvdmVyXCIsITApLG8uZWxlbWVudE1vdXNlb3Zlcih7bGFiZWw6YS5uYW1lLGRhdGE6YS5kYXRhLGluZGV4OmIscG9zOltkMy5tb3VzZSh0aGlzLnBhcmVudE5vZGUpWzBdLGQzLm1vdXNlKHRoaXMucGFyZW50Tm9kZSlbMV1dfSl9KSxNLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSksby5lbGVtZW50TW91c2VvdXQoe2xhYmVsOmEubmFtZSxkYXRhOmEuZGF0YSxpbmRleDpifSl9KTt2YXIgTj1DLnNlbGVjdEFsbChcIi5kaW1lbnNpb25cIikuZGF0YShoKSxPPU4uZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtcGFyYWxsZWxDb29yZGluYXRlcyBkaW1lbnNpb25cIik7Ty5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtcGFyYWxsZWxDb29yZGluYXRlcyBudi1heGlzXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXBhcmFsbGVsQ29vcmRpbmF0ZXMtYnJ1c2hcIiksTy5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtcGFyYWxsZWxDb29yZGluYXRlcyBudi1sYWJlbFwiKSxOLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhKXtyZXR1cm5cInRyYW5zbGF0ZShcIitmKGEpK1wiLDApXCJ9KSxOLmV4aXQoKS5yZW1vdmUoKSxOLnNlbGVjdChcIi5udi1sYWJlbFwiKS5zdHlsZShcImN1cnNvclwiLFwibW92ZVwiKS5hdHRyKFwiZHlcIixcIi0xZW1cIikuYXR0cihcInRleHQtYW5jaG9yXCIsXCJtaWRkbGVcIikudGV4dChTdHJpbmcpLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oYSl7by5lbGVtZW50TW91c2VvdmVyKHtkaW06YSxwb3M6W2QzLm1vdXNlKHRoaXMucGFyZW50Tm9kZS5wYXJlbnROb2RlKVswXSxkMy5tb3VzZSh0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZSlbMV1dfSl9KS5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oYSl7by5lbGVtZW50TW91c2VvdXQoe2RpbTphfSl9KS5jYWxsKEgpLE4uc2VsZWN0KFwiLm52LWF4aXNcIikuZWFjaChmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jYWxsKEcuc2NhbGUoZ1thXSkudGlja0Zvcm1hdChkMy5mb3JtYXQoaVtiXSkpKX0pLE4uc2VsZWN0KFwiLm52LXBhcmFsbGVsQ29vcmRpbmF0ZXMtYnJ1c2hcIikuZWFjaChmdW5jdGlvbihhKXtkMy5zZWxlY3QodGhpcykuY2FsbChnW2FdLmJydXNoKX0pLnNlbGVjdEFsbChcInJlY3RcIikuYXR0cihcInhcIiwtOCkuYXR0cihcIndpZHRoXCIsMTYpfSksYn12YXIgYz17dG9wOjMwLHJpZ2h0OjAsYm90dG9tOjEwLGxlZnQ6MH0sZD1udWxsLGU9bnVsbCxmPWQzLnNjYWxlLm9yZGluYWwoKSxnPXt9LGg9W10saT1bXSxqPWEudXRpbHMuZGVmYXVsdENvbG9yKCksaz1bXSxsPVtdLG09W10sbj0xLG89ZDMuZGlzcGF0Y2goXCJicnVzaFwiLFwiZWxlbWVudE1vdXNlb3ZlclwiLFwiZWxlbWVudE1vdXNlb3V0XCIpO3JldHVybiBiLmRpc3BhdGNoPW8sYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGEpe2Q9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbihhKXtlPWF9fSxkaW1lbnNpb25OYW1lczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoPWF9fSxkaW1lbnNpb25Gb3JtYXRzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGEpe2k9YX19LGxpbmVUZW5zaW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LGRpbWVuc2lvbnM6e2dldDpmdW5jdGlvbigpe3JldHVybiBofSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwiZGltZW5zaW9uc1wiLFwidXNlIGRpbWVuc2lvbk5hbWVzIGluc3RlYWRcIiksaD1ifX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY30sc2V0OmZ1bmN0aW9uKGEpe2MudG9wPXZvaWQgMCE9PWEudG9wP2EudG9wOmMudG9wLGMucmlnaHQ9dm9pZCAwIT09YS5yaWdodD9hLnJpZ2h0OmMucmlnaHQsYy5ib3R0b209dm9pZCAwIT09YS5ib3R0b20/YS5ib3R0b206Yy5ib3R0b20sYy5sZWZ0PXZvaWQgMCE9PWEubGVmdD9hLmxlZnQ6Yy5sZWZ0fX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYil7aj1hLnV0aWxzLmdldENvbG9yKGIpfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLnBpZT1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoRSl7cmV0dXJuIEQucmVzZXQoKSxFLmVhY2goZnVuY3Rpb24oYil7ZnVuY3Rpb24gRShhLGIpe2EuZW5kQW5nbGU9aXNOYU4oYS5lbmRBbmdsZSk/MDphLmVuZEFuZ2xlLGEuc3RhcnRBbmdsZT1pc05hTihhLnN0YXJ0QW5nbGUpPzA6YS5zdGFydEFuZ2xlLHB8fChhLmlubmVyUmFkaXVzPTApO3ZhciBjPWQzLmludGVycG9sYXRlKHRoaXMuX2N1cnJlbnQsYSk7cmV0dXJuIHRoaXMuX2N1cnJlbnQ9YygwKSxmdW5jdGlvbihhKXtyZXR1cm4gQltiXShjKGEpKX19dmFyIEY9ZC1jLmxlZnQtYy5yaWdodCxHPWUtYy50b3AtYy5ib3R0b20sSD1NYXRoLm1pbihGLEcpLzIsST1bXSxKPVtdO2lmKGk9ZDMuc2VsZWN0KHRoaXMpLDA9PT16Lmxlbmd0aClmb3IodmFyIEs9SC1ILzUsTD15KkgsTT0wO008YlswXS5sZW5ndGg7TSsrKUkucHVzaChLKSxKLnB1c2goTCk7ZWxzZSBJPXoubWFwKGZ1bmN0aW9uKGEpe3JldHVybihhLm91dGVyLWEub3V0ZXIvNSkqSH0pLEo9ei5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuKGEuaW5uZXItYS5pbm5lci81KSpIfSkseT1kMy5taW4oei5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXItYS5pbm5lci81fSkpO2EudXRpbHMuaW5pdFNWRyhpKTt2YXIgTj1pLnNlbGVjdEFsbChcIi5udi13cmFwLm52LXBpZVwiKS5kYXRhKGIpLE89Ti5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtcGllIG52LWNoYXJ0LVwiK2gpLFA9Ty5hcHBlbmQoXCJnXCIpLFE9Ti5zZWxlY3QoXCJnXCIpLFI9UC5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtcGllXCIpO1AuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXBpZUxhYmVsc1wiKSxOLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitjLmxlZnQrXCIsXCIrYy50b3ArXCIpXCIpLFEuc2VsZWN0KFwiLm52LXBpZVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrRi8yK1wiLFwiK0cvMitcIilcIiksUS5zZWxlY3QoXCIubnYtcGllTGFiZWxzXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitGLzIrXCIsXCIrRy8yK1wiKVwiKSxpLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhLGIpe0EuY2hhcnRDbGljayh7ZGF0YTphLGluZGV4OmIscG9zOmQzLmV2ZW50LGlkOmh9KX0pLEI9W10sQz1bXTtmb3IodmFyIE09MDtNPGJbMF0ubGVuZ3RoO00rKyl7dmFyIFM9ZDMuc3ZnLmFyYygpLm91dGVyUmFkaXVzKElbTV0pLFQ9ZDMuc3ZnLmFyYygpLm91dGVyUmFkaXVzKElbTV0rNSk7dSE9PSExJiYoUy5zdGFydEFuZ2xlKHUpLFQuc3RhcnRBbmdsZSh1KSksdyE9PSExJiYoUy5lbmRBbmdsZSh3KSxULmVuZEFuZ2xlKHcpKSxwJiYoUy5pbm5lclJhZGl1cyhKW01dKSxULmlubmVyUmFkaXVzKEpbTV0pKSxTLmNvcm5lclJhZGl1cyYmeCYmKFMuY29ybmVyUmFkaXVzKHgpLFQuY29ybmVyUmFkaXVzKHgpKSxCLnB1c2goUyksQy5wdXNoKFQpfXZhciBVPWQzLmxheW91dC5waWUoKS5zb3J0KG51bGwpLnZhbHVlKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPzA6ZyhhKX0pO1UucGFkQW5nbGUmJnYmJlUucGFkQW5nbGUodikscCYmcSYmKFIuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXBpZS10aXRsZVwiKSxOLnNlbGVjdChcIi5udi1waWUtdGl0bGVcIikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLFwibWlkZGxlXCIpLnRleHQoZnVuY3Rpb24oKXtyZXR1cm4gcX0pLnN0eWxlKFwiZm9udC1zaXplXCIsTWF0aC5taW4oRixHKSp5KjIvKHEubGVuZ3RoKzIpK1wicHhcIikuYXR0cihcImR5XCIsXCIwLjM1ZW1cIikuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKCl7cmV0dXJuXCJ0cmFuc2xhdGUoMCwgXCIrcytcIilcIn0pKTt2YXIgVj1OLnNlbGVjdChcIi5udi1waWVcIikuc2VsZWN0QWxsKFwiLm52LXNsaWNlXCIpLmRhdGEoVSksVz1OLnNlbGVjdChcIi5udi1waWVMYWJlbHNcIikuc2VsZWN0QWxsKFwiLm52LWxhYmVsXCIpLmRhdGEoVSk7Vi5leGl0KCkucmVtb3ZlKCksVy5leGl0KCkucmVtb3ZlKCk7dmFyIFg9Vi5lbnRlcigpLmFwcGVuZChcImdcIik7WC5hdHRyKFwiY2xhc3NcIixcIm52LXNsaWNlXCIpLFgub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMCksciYmZDMuc2VsZWN0KHRoaXMpLnNlbGVjdChcInBhdGhcIikudHJhbnNpdGlvbigpLmR1cmF0aW9uKDcwKS5hdHRyKFwiZFwiLENbYl0pLEEuZWxlbWVudE1vdXNlb3Zlcih7ZGF0YTphLmRhdGEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KSxYLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGIpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSksciYmZDMuc2VsZWN0KHRoaXMpLnNlbGVjdChcInBhdGhcIikudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwKS5hdHRyKFwiZFwiLEJbYl0pLEEuZWxlbWVudE1vdXNlb3V0KHtkYXRhOmEuZGF0YSxpbmRleDpifSl9KSxYLm9uKFwibW91c2Vtb3ZlXCIsZnVuY3Rpb24oYSxiKXtBLmVsZW1lbnRNb3VzZW1vdmUoe2RhdGE6YS5kYXRhLGluZGV4OmJ9KX0pLFgub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEsYil7QS5lbGVtZW50Q2xpY2soe2RhdGE6YS5kYXRhLGluZGV4OmIsY29sb3I6ZDMuc2VsZWN0KHRoaXMpLnN0eWxlKFwiZmlsbFwiKX0pfSksWC5vbihcImRibGNsaWNrXCIsZnVuY3Rpb24oYSxiKXtBLmVsZW1lbnREYmxDbGljayh7ZGF0YTphLmRhdGEsaW5kZXg6Yixjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KSxWLmF0dHIoXCJmaWxsXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gaihhLmRhdGEsYil9KSxWLmF0dHIoXCJzdHJva2VcIixmdW5jdGlvbihhLGIpe3JldHVybiBqKGEuZGF0YSxiKX0pO1guYXBwZW5kKFwicGF0aFwiKS5lYWNoKGZ1bmN0aW9uKGEpe3RoaXMuX2N1cnJlbnQ9YX0pO2lmKFYuc2VsZWN0KFwicGF0aFwiKS50cmFuc2l0aW9uKCkuYXR0cihcImRcIixmdW5jdGlvbihhLGIpe3JldHVybiBCW2JdKGEpfSkuYXR0clR3ZWVuKFwiZFwiLEUpLGwpe2Zvcih2YXIgWT1bXSxNPTA7TTxiWzBdLmxlbmd0aDtNKyspWS5wdXNoKEJbTV0pLG0/cCYmKFlbTV09ZDMuc3ZnLmFyYygpLm91dGVyUmFkaXVzKEJbTV0ub3V0ZXJSYWRpdXMoKSksdSE9PSExJiZZW01dLnN0YXJ0QW5nbGUodSksdyE9PSExJiZZW01dLmVuZEFuZ2xlKHcpKTpwfHxZW01dLmlubmVyUmFkaXVzKDApO1cuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoXCJudi1sYWJlbFwiLCEwKS5lYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWQzLnNlbGVjdCh0aGlzKTtiLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhLGIpe2lmKHQpe2Eub3V0ZXJSYWRpdXM9SVtiXSsxMCxhLmlubmVyUmFkaXVzPUlbYl0rMTU7dmFyIGM9KGEuc3RhcnRBbmdsZSthLmVuZEFuZ2xlKS8yKigxODAvTWF0aC5QSSk7cmV0dXJuKGEuc3RhcnRBbmdsZSthLmVuZEFuZ2xlKS8yPE1hdGguUEk/Yy09OTA6Yys9OTAsXCJ0cmFuc2xhdGUoXCIrWVtiXS5jZW50cm9pZChhKStcIikgcm90YXRlKFwiK2MrXCIpXCJ9cmV0dXJuIGEub3V0ZXJSYWRpdXM9SCsxMCxhLmlubmVyUmFkaXVzPUgrMTUsXCJ0cmFuc2xhdGUoXCIrWVtiXS5jZW50cm9pZChhKStcIilcIn0pLGIuYXBwZW5kKFwicmVjdFwiKS5zdHlsZShcInN0cm9rZVwiLFwiI2ZmZlwiKS5zdHlsZShcImZpbGxcIixcIiNmZmZcIikuYXR0cihcInJ4XCIsMykuYXR0cihcInJ5XCIsMyksYi5hcHBlbmQoXCJ0ZXh0XCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIix0PyhhLnN0YXJ0QW5nbGUrYS5lbmRBbmdsZSkvMjxNYXRoLlBJP1wic3RhcnRcIjpcImVuZFwiOlwibWlkZGxlXCIpLnN0eWxlKFwiZmlsbFwiLFwiIzAwMFwiKX0pO3ZhciBaPXt9LCQ9MTQsXz0xNDAsYWI9ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguZmxvb3IoYVswXS9fKSpfK1wiLFwiK01hdGguZmxvb3IoYVsxXS8kKSokfTtXLndhdGNoVHJhbnNpdGlvbihELFwicGllIGxhYmVsc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oYSxiKXtpZih0KXthLm91dGVyUmFkaXVzPUlbYl0rMTAsYS5pbm5lclJhZGl1cz1JW2JdKzE1O3ZhciBjPShhLnN0YXJ0QW5nbGUrYS5lbmRBbmdsZSkvMiooMTgwL01hdGguUEkpO3JldHVybihhLnN0YXJ0QW5nbGUrYS5lbmRBbmdsZSkvMjxNYXRoLlBJP2MtPTkwOmMrPTkwLFwidHJhbnNsYXRlKFwiK1lbYl0uY2VudHJvaWQoYSkrXCIpIHJvdGF0ZShcIitjK1wiKVwifWEub3V0ZXJSYWRpdXM9SCsxMCxhLmlubmVyUmFkaXVzPUgrMTU7dmFyIGQ9WVtiXS5jZW50cm9pZChhKTtpZihhLnZhbHVlKXt2YXIgZT1hYihkKTtaW2VdJiYoZFsxXS09JCksWlthYihkKV09ITB9cmV0dXJuXCJ0cmFuc2xhdGUoXCIrZCtcIilcIn0pLFcuc2VsZWN0KFwiLm52LWxhYmVsIHRleHRcIikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLGZ1bmN0aW9uKGEpe3JldHVybiB0PyhhLnN0YXJ0QW5nbGUrYS5lbmRBbmdsZSkvMjxNYXRoLlBJP1wic3RhcnRcIjpcImVuZFwiOlwibWlkZGxlXCJ9KS50ZXh0KGZ1bmN0aW9uKGEsYil7dmFyIGM9KGEuZW5kQW5nbGUtYS5zdGFydEFuZ2xlKS8oMipNYXRoLlBJKSxkPVwiXCI7aWYoIWEudmFsdWV8fG8+YylyZXR1cm5cIlwiO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pZD1uKGEsYix7a2V5OmYoYS5kYXRhKSx2YWx1ZTpnKGEuZGF0YSkscGVyY2VudDprKGMpfSk7ZWxzZSBzd2l0Y2gobil7Y2FzZVwia2V5XCI6ZD1mKGEuZGF0YSk7YnJlYWs7Y2FzZVwidmFsdWVcIjpkPWsoZyhhLmRhdGEpKTticmVhaztjYXNlXCJwZXJjZW50XCI6ZD1kMy5mb3JtYXQoXCIlXCIpKGMpfXJldHVybiBkfSl9fSksRC5yZW5kZXJFbmQoXCJwaWUgaW1tZWRpYXRlXCIpLGJ9dmFyIGM9e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSxkPTUwMCxlPTUwMCxmPWZ1bmN0aW9uKGEpe3JldHVybiBhLnh9LGc9ZnVuY3Rpb24oYSl7cmV0dXJuIGEueX0saD1NYXRoLmZsb29yKDFlNCpNYXRoLnJhbmRvbSgpKSxpPW51bGwsaj1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLGs9ZDMuZm9ybWF0KFwiLC4yZlwiKSxsPSEwLG09ITEsbj1cImtleVwiLG89LjAyLHA9ITEscT0hMSxyPSEwLHM9MCx0PSExLHU9ITEsdj0hMSx3PSExLHg9MCx5PS41LHo9W10sQT1kMy5kaXNwYXRjaChcImNoYXJ0Q2xpY2tcIixcImVsZW1lbnRDbGlja1wiLFwiZWxlbWVudERibENsaWNrXCIsXCJlbGVtZW50TW91c2VvdmVyXCIsXCJlbGVtZW50TW91c2VvdXRcIixcImVsZW1lbnRNb3VzZW1vdmVcIixcInJlbmRlckVuZFwiKSxCPVtdLEM9W10sRD1hLnV0aWxzLnJlbmRlcldhdGNoKEEpO3JldHVybiBiLmRpc3BhdGNoPUEsYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se2FyY3NSYWRpdXM6e2dldDpmdW5jdGlvbigpe3JldHVybiB6fSxzZXQ6ZnVuY3Rpb24oYSl7ej1hfX0sd2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBkfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKGEpe2U9YX19LHNob3dMYWJlbHM6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0sdGl0bGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBxfSxzZXQ6ZnVuY3Rpb24oYSl7cT1hfX0sdGl0bGVPZmZzZXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXQ6ZnVuY3Rpb24oYSl7cz1hfX0sbGFiZWxUaHJlc2hvbGQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYSl7bz1hfX0sdmFsdWVGb3JtYXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1hfX0seDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmPWF9fSxpZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoPWF9fSxlbmRBbmdsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHd9LHNldDpmdW5jdGlvbihhKXt3PWF9fSxzdGFydEFuZ2xlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc2V0OmZ1bmN0aW9uKGEpe3U9YX19LHBhZEFuZ2xlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sc2V0OmZ1bmN0aW9uKGEpe3Y9YX19LGNvcm5lclJhZGl1czp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHh9LHNldDpmdW5jdGlvbihhKXt4PWF9fSxkb251dFJhdGlvOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geX0sc2V0OmZ1bmN0aW9uKGEpe3k9YX19LGxhYmVsc091dHNpZGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0sbGFiZWxTdW5iZWFtTGF5b3V0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdH0sc2V0OmZ1bmN0aW9uKGEpe3Q9YX19LGRvbnV0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LGdyb3dPbkhvdmVyOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKGEpe3I9YX19LHBpZUxhYmVsc091dHNpZGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYil7bT1iLGEuZGVwcmVjYXRlZChcInBpZUxhYmVsc091dHNpZGVcIixcInVzZSBsYWJlbHNPdXRzaWRlIGluc3RlYWRcIil9fSxkb251dExhYmVsc091dHNpZGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYil7bT1iLGEuZGVwcmVjYXRlZChcImRvbnV0TGFiZWxzT3V0c2lkZVwiLFwidXNlIGxhYmVsc091dHNpZGUgaW5zdGVhZFwiKX19LGxhYmVsRm9ybWF0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGIpe2s9YixhLmRlcHJlY2F0ZWQoXCJsYWJlbEZvcm1hdFwiLFwidXNlIHZhbHVlRm9ybWF0IGluc3RlYWRcIil9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24oYSl7Yy50b3A9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEudG9wP2EudG9wOmMudG9wLGMucmlnaHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucmlnaHQ/YS5yaWdodDpjLnJpZ2h0LGMuYm90dG9tPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmJvdHRvbT9hLmJvdHRvbTpjLmJvdHRvbSxjLmxlZnQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEubGVmdD9hLmxlZnQ6Yy5sZWZ0fX0seTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldDpmdW5jdGlvbihhKXtnPWQzLmZ1bmN0b3IoYSl9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGp9LHNldDpmdW5jdGlvbihiKXtqPWEudXRpbHMuZ2V0Q29sb3IoYil9fSxsYWJlbFR5cGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1hfHxcImtleVwifX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLnBpZUNoYXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihlKXtyZXR1cm4gcS5yZXNldCgpLHEubW9kZWxzKGMpLGUuZWFjaChmdW5jdGlvbihlKXt2YXIgaz1kMy5zZWxlY3QodGhpcyk7YS51dGlscy5pbml0U1ZHKGspO3ZhciBuPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgoZyxrLGYpLG89YS51dGlscy5hdmFpbGFibGVIZWlnaHQoaCxrLGYpO2lmKGIudXBkYXRlPWZ1bmN0aW9uKCl7ay50cmFuc2l0aW9uKCkuY2FsbChiKX0sYi5jb250YWluZXI9dGhpcyxsLnNldHRlcihzKGUpLGIudXBkYXRlKS5nZXR0ZXIocihlKSkudXBkYXRlKCksbC5kaXNhYmxlZD1lLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hIWEuZGlzYWJsZWR9KSwhbSl7dmFyIHE7bT17fTtmb3IocSBpbiBsKW1bcV09bFtxXWluc3RhbmNlb2YgQXJyYXk/bFtxXS5zbGljZSgwKTpsW3FdfWlmKCFlfHwhZS5sZW5ndGgpcmV0dXJuIGEudXRpbHMubm9EYXRhKGIsayksYjtrLnNlbGVjdEFsbChcIi5udi1ub0RhdGFcIikucmVtb3ZlKCk7dmFyIHQ9ay5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtcGllQ2hhcnRcIikuZGF0YShbZV0pLHU9dC5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtcGllQ2hhcnRcIikuYXBwZW5kKFwiZ1wiKSx2PXQuc2VsZWN0KFwiZ1wiKTtpZih1LmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1waWVXcmFwXCIpLHUuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZFdyYXBcIiksaSlpZihcInRvcFwiPT09ailkLndpZHRoKG4pLmtleShjLngoKSksdC5zZWxlY3QoXCIubnYtbGVnZW5kV3JhcFwiKS5kYXR1bShlKS5jYWxsKGQpLGYudG9wIT1kLmhlaWdodCgpJiYoZi50b3A9ZC5oZWlnaHQoKSxvPWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KGgsayxmKSksdC5zZWxlY3QoXCIubnYtbGVnZW5kV3JhcFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIistZi50b3ArXCIpXCIpO2Vsc2UgaWYoXCJyaWdodFwiPT09ail7dmFyIHc9YS5tb2RlbHMubGVnZW5kKCkud2lkdGgoKTt3Pm4vMiYmKHc9bi8yKSxkLmhlaWdodChvKS5rZXkoYy54KCkpLGQud2lkdGgodyksbi09ZC53aWR0aCgpLHQuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuZGF0dW0oZSkuY2FsbChkKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrbitcIiwwKVwiKX10LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitmLmxlZnQrXCIsXCIrZi50b3ArXCIpXCIpLGMud2lkdGgobikuaGVpZ2h0KG8pO3ZhciB4PXYuc2VsZWN0KFwiLm52LXBpZVdyYXBcIikuZGF0dW0oW2VdKTtkMy50cmFuc2l0aW9uKHgpLmNhbGwoYyksZC5kaXNwYXRjaC5vbihcInN0YXRlQ2hhbmdlXCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBjIGluIGEpbFtjXT1hW2NdO3Auc3RhdGVDaGFuZ2UobCksYi51cGRhdGUoKX0pLHAub24oXCJjaGFuZ2VTdGF0ZVwiLGZ1bmN0aW9uKGEpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBhLmRpc2FibGVkJiYoZS5mb3JFYWNoKGZ1bmN0aW9uKGIsYyl7Yi5kaXNhYmxlZD1hLmRpc2FibGVkW2NdfSksbC5kaXNhYmxlZD1hLmRpc2FibGVkKSxiLnVwZGF0ZSgpfSl9KSxxLnJlbmRlckVuZChcInBpZUNoYXJ0IGltbWVkaWF0ZVwiKSxifXZhciBjPWEubW9kZWxzLnBpZSgpLGQ9YS5tb2RlbHMubGVnZW5kKCksZT1hLm1vZGVscy50b29sdGlwKCksZj17dG9wOjMwLHJpZ2h0OjIwLGJvdHRvbToyMCxsZWZ0OjIwfSxnPW51bGwsaD1udWxsLGk9ITAsaj1cInRvcFwiLGs9YS51dGlscy5kZWZhdWx0Q29sb3IoKSxsPWEudXRpbHMuc3RhdGUoKSxtPW51bGwsbj1udWxsLG89MjUwLHA9ZDMuZGlzcGF0Y2goXCJ0b29sdGlwU2hvd1wiLFwidG9vbHRpcEhpZGVcIixcInN0YXRlQ2hhbmdlXCIsXCJjaGFuZ2VTdGF0ZVwiLFwicmVuZGVyRW5kXCIpO2UuaGVhZGVyRW5hYmxlZCghMSkuZHVyYXRpb24oMCkudmFsdWVGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYy52YWx1ZUZvcm1hdCgpKGEsYil9KTt2YXIgcT1hLnV0aWxzLnJlbmRlcldhdGNoKHApLHI9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJue2FjdGl2ZTphLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hYS5kaXNhYmxlZH0pfX19LHM9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMCE9PWIuYWN0aXZlJiZhLmZvckVhY2goZnVuY3Rpb24oYSxjKXthLmRpc2FibGVkPSFiLmFjdGl2ZVtjXX0pfX07cmV0dXJuIGMuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdmVyLnRvb2x0aXBcIixmdW5jdGlvbihhKXthLnNlcmllcz17a2V5OmIueCgpKGEuZGF0YSksdmFsdWU6Yi55KCkoYS5kYXRhKSxjb2xvcjphLmNvbG9yfSxlLmRhdGEoYSkuaGlkZGVuKCExKX0pLGMuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKCl7ZS5oaWRkZW4oITApfSksYy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW1vdmUudG9vbHRpcFwiLGZ1bmN0aW9uKCl7ZS5wb3NpdGlvbih7dG9wOmQzLmV2ZW50LnBhZ2VZLGxlZnQ6ZDMuZXZlbnQucGFnZVh9KSgpfSksYi5sZWdlbmQ9ZCxiLmRpc3BhdGNoPXAsYi5waWU9YyxiLnRvb2x0aXA9ZSxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7bm9EYXRhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LHNob3dMZWdlbmQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oYSl7aT1hfX0sbGVnZW5kUG9zaXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiBqfSxzZXQ6ZnVuY3Rpb24oYSl7aj1hfX0sZGVmYXVsdFN0YXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sc2V0OmZ1bmN0aW9uKGEpe209YX19LHRvb2x0aXBzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5lbmFibGVkKCl9LHNldDpmdW5jdGlvbihiKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwc1wiLFwidXNlIGNoYXJ0LnRvb2x0aXAuZW5hYmxlZCgpIGluc3RlYWRcIiksZS5lbmFibGVkKCEhYil9fSx0b29sdGlwQ29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY29udGVudEdlbmVyYXRvcigpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcENvbnRlbnRcIixcInVzZSBjaGFydC50b29sdGlwLmNvbnRlbnRHZW5lcmF0b3IoKSBpbnN0ZWFkXCIpLGUuY29udGVudEdlbmVyYXRvcihiKX19LGNvbG9yOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YSxkLmNvbG9yKGspLGMuY29sb3Ioayl9fSxkdXJhdGlvbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWEscS5yZXNldChvKX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpmLnRvcCxmLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpmLnJpZ2h0LGYuYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmYuYm90dG9tLGYubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmYubGVmdH19fSksYS51dGlscy5pbmhlcml0T3B0aW9ucyhiLGMpLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMuc2NhdHRlcj1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoTil7cmV0dXJuIFAucmVzZXQoKSxOLmVhY2goZnVuY3Rpb24oYil7ZnVuY3Rpb24gTigpe2lmKE89ITEsIXcpcmV0dXJuITE7aWYoTT09PSEwKXt2YXIgYT1kMy5tZXJnZShiLm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBhLnZhbHVlcy5tYXAoZnVuY3Rpb24oYSxjKXt2YXIgZD1wKGEsYyksZT1xKGEsYyk7cmV0dXJuW20oZCkrMWUtNCpNYXRoLnJhbmRvbSgpLG4oZSkrMWUtNCpNYXRoLnJhbmRvbSgpLGIsYyxhXX0pLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiB4KGFbNF0sYil9KX0pKTtpZigwPT1hLmxlbmd0aClyZXR1cm4hMTthLmxlbmd0aDwzJiYoYS5wdXNoKFttLnJhbmdlKClbMF0tMjAsbi5yYW5nZSgpWzBdLTIwLG51bGwsbnVsbF0pLGEucHVzaChbbS5yYW5nZSgpWzFdKzIwLG4ucmFuZ2UoKVsxXSsyMCxudWxsLG51bGxdKSxhLnB1c2goW20ucmFuZ2UoKVswXS0yMCxuLnJhbmdlKClbMF0rMjAsbnVsbCxudWxsXSksYS5wdXNoKFttLnJhbmdlKClbMV0rMjAsbi5yYW5nZSgpWzFdLTIwLG51bGwsbnVsbF0pKTt2YXIgYz1kMy5nZW9tLnBvbHlnb24oW1stMTAsLTEwXSxbLTEwLGkrMTBdLFtoKzEwLGkrMTBdLFtoKzEwLC0xMF1dKSxkPWQzLmdlb20udm9yb25vaShhKS5tYXAoZnVuY3Rpb24oYixkKXtyZXR1cm57ZGF0YTpjLmNsaXAoYiksc2VyaWVzOmFbZF1bMl0scG9pbnQ6YVtkXVszXX19KTtVLnNlbGVjdChcIi5udi1wb2ludC1wYXRoc1wiKS5zZWxlY3RBbGwoXCJwYXRoXCIpLnJlbW92ZSgpO3ZhciBlPVUuc2VsZWN0KFwiLm52LXBvaW50LXBhdGhzXCIpLnNlbGVjdEFsbChcInBhdGhcIikuZGF0YShkKSxmPWUuZW50ZXIoKS5hcHBlbmQoXCJzdmc6cGF0aFwiKS5hdHRyKFwiZFwiLGZ1bmN0aW9uKGEpe3JldHVybiBhJiZhLmRhdGEmJjAhPT1hLmRhdGEubGVuZ3RoP1wiTVwiK2EuZGF0YS5qb2luKFwiLFwiKStcIlpcIjpcIk0gMCAwXCJ9KS5hdHRyKFwiaWRcIixmdW5jdGlvbihhLGIpe3JldHVyblwibnYtcGF0aC1cIitifSkuYXR0cihcImNsaXAtcGF0aFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ1cmwoI252LWNsaXAtXCIrYitcIilcIn0pO0MmJmYuc3R5bGUoXCJmaWxsXCIsZDMucmdiKDIzMCwyMzAsMjMwKSkuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwuNCkuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDEpLnN0eWxlKFwic3Ryb2tlXCIsZDMucmdiKDIwMCwyMDAsMjAwKSksQiYmKFUuc2VsZWN0KFwiLm52LXBvaW50LWNsaXBzXCIpLnNlbGVjdEFsbChcImNsaXBQYXRoXCIpLnJlbW92ZSgpLFUuc2VsZWN0KFwiLm52LXBvaW50LWNsaXBzXCIpLnNlbGVjdEFsbChcImNsaXBQYXRoXCIpLmRhdGEoYSkuZW50ZXIoKS5hcHBlbmQoXCJzdmc6Y2xpcFBhdGhcIikuYXR0cihcImlkXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm5cIm52LWNsaXAtXCIrYn0pLmFwcGVuZChcInN2ZzpjaXJjbGVcIikuYXR0cihcImN4XCIsZnVuY3Rpb24oYSl7cmV0dXJuIGFbMF19KS5hdHRyKFwiY3lcIixmdW5jdGlvbihhKXtyZXR1cm4gYVsxXX0pLmF0dHIoXCJyXCIsRCkpO3ZhciBrPWZ1bmN0aW9uKGEsYyl7aWYoTylyZXR1cm4gMDt2YXIgZD1iW2Euc2VyaWVzXTtpZih2b2lkIDAhPT1kKXt2YXIgZT1kLnZhbHVlc1thLnBvaW50XTtlLmNvbG9yPWooZCxhLnNlcmllcyksZS54PXAoZSksZS55PXEoZSk7dmFyIGY9bC5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaD13aW5kb3cucGFnZVlPZmZzZXR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AsaT13aW5kb3cucGFnZVhPZmZzZXR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LGs9e2xlZnQ6bShwKGUsYS5wb2ludCkpK2YubGVmdCtpK2cubGVmdCsxMCx0b3A6bihxKGUsYS5wb2ludCkpK2YudG9wK2grZy50b3ArMTB9O2Moe3BvaW50OmUsc2VyaWVzOmQscG9zOmssc2VyaWVzSW5kZXg6YS5zZXJpZXMscG9pbnRJbmRleDphLnBvaW50fSl9fTtlLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhKXtrKGEsTC5lbGVtZW50Q2xpY2spfSkub24oXCJkYmxjbGlja1wiLGZ1bmN0aW9uKGEpe2soYSxMLmVsZW1lbnREYmxDbGljayl9KS5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGEpe2soYSxMLmVsZW1lbnRNb3VzZW92ZXIpfSkub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKGEpe2soYSxMLmVsZW1lbnRNb3VzZW91dCl9KX1lbHNlIFUuc2VsZWN0KFwiLm52LWdyb3Vwc1wiKS5zZWxlY3RBbGwoXCIubnYtZ3JvdXBcIikuc2VsZWN0QWxsKFwiLm52LXBvaW50XCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbihhLGMpe2lmKE98fCFiW2Euc2VyaWVzXSlyZXR1cm4gMDt2YXIgZD1iW2Euc2VyaWVzXSxlPWQudmFsdWVzW2NdO0wuZWxlbWVudENsaWNrKHtwb2ludDplLHNlcmllczpkLHBvczpbbShwKGUsYykpK2cubGVmdCxuKHEoZSxjKSkrZy50b3BdLHNlcmllc0luZGV4OmEuc2VyaWVzLHBvaW50SW5kZXg6Y30pfSkub24oXCJkYmxjbGlja1wiLGZ1bmN0aW9uKGEsYyl7aWYoT3x8IWJbYS5zZXJpZXNdKXJldHVybiAwO3ZhciBkPWJbYS5zZXJpZXNdLGU9ZC52YWx1ZXNbY107TC5lbGVtZW50RGJsQ2xpY2soe3BvaW50OmUsc2VyaWVzOmQscG9zOlttKHAoZSxjKSkrZy5sZWZ0LG4ocShlLGMpKStnLnRvcF0sc2VyaWVzSW5kZXg6YS5zZXJpZXMscG9pbnRJbmRleDpjfSl9KS5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGEsYyl7aWYoT3x8IWJbYS5zZXJpZXNdKXJldHVybiAwO3ZhciBkPWJbYS5zZXJpZXNdLGU9ZC52YWx1ZXNbY107TC5lbGVtZW50TW91c2VvdmVyKHtwb2ludDplLHNlcmllczpkLHBvczpbbShwKGUsYykpK2cubGVmdCxuKHEoZSxjKSkrZy50b3BdLHNlcmllc0luZGV4OmEuc2VyaWVzLHBvaW50SW5kZXg6Yyxjb2xvcjpqKGEsYyl9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhLGMpe2lmKE98fCFiW2Euc2VyaWVzXSlyZXR1cm4gMDt2YXIgZD1iW2Euc2VyaWVzXSxlPWQudmFsdWVzW2NdO0wuZWxlbWVudE1vdXNlb3V0KHtwb2ludDplLHNlcmllczpkLHNlcmllc0luZGV4OmEuc2VyaWVzLHBvaW50SW5kZXg6Yyxjb2xvcjpqKGEsYyl9KX0pfWw9ZDMuc2VsZWN0KHRoaXMpO3ZhciBSPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgoaCxsLGcpLFM9YS51dGlscy5hdmFpbGFibGVIZWlnaHQoaSxsLGcpO2EudXRpbHMuaW5pdFNWRyhsKSxiLmZvckVhY2goZnVuY3Rpb24oYSxiKXthLnZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2Euc2VyaWVzPWJ9KX0pO3ZhciBUPUUmJkYmJkk/W106ZDMubWVyZ2UoYi5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLm1hcChmdW5jdGlvbihhLGIpe3JldHVybnt4OnAoYSxiKSx5OnEoYSxiKSxzaXplOnIoYSxiKX19KX0pKTttLmRvbWFpbihFfHxkMy5leHRlbnQoVC5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEueH0pLmNvbmNhdCh0KSkpLG0ucmFuZ2UoeSYmYlswXT9HfHxbKFIqeitSKS8oMipiWzBdLnZhbHVlcy5sZW5ndGgpLFItUiooMSt6KS8oMipiWzBdLnZhbHVlcy5sZW5ndGgpXTpHfHxbMCxSXSksbi5kb21haW4oRnx8ZDMuZXh0ZW50KFQubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnl9KS5jb25jYXQodSkpKS5yYW5nZShIfHxbUywwXSksby5kb21haW4oSXx8ZDMuZXh0ZW50KFQubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnNpemV9KS5jb25jYXQodikpKS5yYW5nZShKfHxRKSxLPW0uZG9tYWluKClbMF09PT1tLmRvbWFpbigpWzFdfHxuLmRvbWFpbigpWzBdPT09bi5kb21haW4oKVsxXSxtLmRvbWFpbigpWzBdPT09bS5kb21haW4oKVsxXSYmbS5kb21haW4obS5kb21haW4oKVswXT9bbS5kb21haW4oKVswXS0uMDEqbS5kb21haW4oKVswXSxtLmRvbWFpbigpWzFdKy4wMSptLmRvbWFpbigpWzFdXTpbLTEsMV0pLG4uZG9tYWluKClbMF09PT1uLmRvbWFpbigpWzFdJiZuLmRvbWFpbihuLmRvbWFpbigpWzBdP1tuLmRvbWFpbigpWzBdLS4wMSpuLmRvbWFpbigpWzBdLG4uZG9tYWluKClbMV0rLjAxKm4uZG9tYWluKClbMV1dOlstMSwxXSksaXNOYU4obS5kb21haW4oKVswXSkmJm0uZG9tYWluKFstMSwxXSksaXNOYU4obi5kb21haW4oKVswXSkmJm4uZG9tYWluKFstMSwxXSksYz1jfHxtLGQ9ZHx8bixlPWV8fG87dmFyIFU9bC5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtc2NhdHRlclwiKS5kYXRhKFtiXSksVj1VLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1zY2F0dGVyIG52LWNoYXJ0LVwiK2spLFc9Vi5hcHBlbmQoXCJkZWZzXCIpLFg9Vi5hcHBlbmQoXCJnXCIpLFk9VS5zZWxlY3QoXCJnXCIpO1UuY2xhc3NlZChcIm52LXNpbmdsZS1wb2ludFwiLEspLFguYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWdyb3Vwc1wiKSxYLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1wb2ludC1wYXRoc1wiKSxWLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1wb2ludC1jbGlwc1wiKSxVLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitnLmxlZnQrXCIsXCIrZy50b3ArXCIpXCIpLFcuYXBwZW5kKFwiY2xpcFBhdGhcIikuYXR0cihcImlkXCIsXCJudi1lZGdlLWNsaXAtXCIraykuYXBwZW5kKFwicmVjdFwiKSxVLnNlbGVjdChcIiNudi1lZGdlLWNsaXAtXCIraytcIiByZWN0XCIpLmF0dHIoXCJ3aWR0aFwiLFIpLmF0dHIoXCJoZWlnaHRcIixTPjA/UzowKSxZLmF0dHIoXCJjbGlwLXBhdGhcIixBP1widXJsKCNudi1lZGdlLWNsaXAtXCIraytcIilcIjpcIlwiKSxPPSEwO3ZhciBaPVUuc2VsZWN0KFwiLm52LWdyb3Vwc1wiKS5zZWxlY3RBbGwoXCIubnYtZ3JvdXBcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm4gYX0sZnVuY3Rpb24oYSl7cmV0dXJuIGEua2V5fSk7Wi5lbnRlcigpLmFwcGVuZChcImdcIikuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDFlLTYpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsMWUtNiksWi5leGl0KCkucmVtb3ZlKCksWi5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihhLGIpe3JldHVyblwibnYtZ3JvdXAgbnYtc2VyaWVzLVwiK2J9KS5jbGFzc2VkKFwiaG92ZXJcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5ob3Zlcn0pLFoud2F0Y2hUcmFuc2l0aW9uKFAsXCJzY2F0dGVyOiBncm91cHNcIikuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gaihhLGIpfSkuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhLGIpe3JldHVybiBqKGEsYil9KS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMSkuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwuNSk7dmFyICQ9Wi5zZWxlY3RBbGwoXCJwYXRoLm52LXBvaW50XCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzLm1hcChmdW5jdGlvbihhLGIpe3JldHVyblthLGJdfSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIHgoYVswXSxiKX0pfSk7JC5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGEuY29sb3J9KS5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGEpe3JldHVybiBhLmNvbG9yfSkuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEpe3JldHVyblwidHJhbnNsYXRlKFwiK2MocChhWzBdLGFbMV0pKStcIixcIitkKHEoYVswXSxhWzFdKSkrXCIpXCJ9KS5hdHRyKFwiZFwiLGEudXRpbHMuc3ltYm9sKCkudHlwZShmdW5jdGlvbihhKXtyZXR1cm4gcyhhWzBdKX0pLnNpemUoZnVuY3Rpb24oYSl7cmV0dXJuIG8ocihhWzBdLGFbMV0pKX0pKSwkLmV4aXQoKS5yZW1vdmUoKSxaLmV4aXQoKS5zZWxlY3RBbGwoXCJwYXRoLm52LXBvaW50XCIpLndhdGNoVHJhbnNpdGlvbihQLFwic2NhdHRlciBleGl0XCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhKXtyZXR1cm5cInRyYW5zbGF0ZShcIittKHAoYVswXSxhWzFdKSkrXCIsXCIrbihxKGFbMF0sYVsxXSkpK1wiKVwifSkucmVtb3ZlKCksJC5lYWNoKGZ1bmN0aW9uKGEpe2QzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwibnYtcG9pbnRcIiwhMCkuY2xhc3NlZChcIm52LXBvaW50LVwiK2FbMV0sITApLmNsYXNzZWQoXCJudi1ub25pbnRlcmFjdGl2ZVwiLCF3KS5jbGFzc2VkKFwiaG92ZXJcIiwhMSl9KSwkLndhdGNoVHJhbnNpdGlvbihQLFwic2NhdHRlciBwb2ludHNcIikuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGEpe3JldHVyblwidHJhbnNsYXRlKFwiK20ocChhWzBdLGFbMV0pKStcIixcIituKHEoYVswXSxhWzFdKSkrXCIpXCJ9KS5hdHRyKFwiZFwiLGEudXRpbHMuc3ltYm9sKCkudHlwZShmdW5jdGlvbihhKXtyZXR1cm4gcyhhWzBdKX0pLnNpemUoZnVuY3Rpb24oYSl7cmV0dXJuIG8ocihhWzBdLGFbMV0pKX0pKSxjbGVhclRpbWVvdXQoZiksZj1zZXRUaW1lb3V0KE4sMzAwKSxjPW0uY29weSgpLGQ9bi5jb3B5KCksZT1vLmNvcHkoKX0pLFAucmVuZGVyRW5kKFwic2NhdHRlciBpbW1lZGlhdGVcIiksYn12YXIgYyxkLGUsZixnPXt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0saD1udWxsLGk9bnVsbCxqPWEudXRpbHMuZGVmYXVsdENvbG9yKCksaz1NYXRoLmZsb29yKDFlNSpNYXRoLnJhbmRvbSgpKSxsPW51bGwsbT1kMy5zY2FsZS5saW5lYXIoKSxuPWQzLnNjYWxlLmxpbmVhcigpLG89ZDMuc2NhbGUubGluZWFyKCkscD1mdW5jdGlvbihhKXtyZXR1cm4gYS54fSxxPWZ1bmN0aW9uKGEpe3JldHVybiBhLnl9LHI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuc2l6ZXx8MX0scz1mdW5jdGlvbihhKXtyZXR1cm4gYS5zaGFwZXx8XCJjaXJjbGVcIn0sdD1bXSx1PVtdLHY9W10sdz0hMCx4PWZ1bmN0aW9uKGEpe3JldHVybiFhLm5vdEFjdGl2ZX0seT0hMSx6PS4xLEE9ITEsQj0hMCxDPSExLEQ9ZnVuY3Rpb24oKXtyZXR1cm4gMjV9LEU9bnVsbCxGPW51bGwsRz1udWxsLEg9bnVsbCxJPW51bGwsSj1udWxsLEs9ITEsTD1kMy5kaXNwYXRjaChcImVsZW1lbnRDbGlja1wiLFwiZWxlbWVudERibENsaWNrXCIsXCJlbGVtZW50TW91c2VvdmVyXCIsXCJlbGVtZW50TW91c2VvdXRcIixcInJlbmRlckVuZFwiKSxNPSEwLE49MjUwLE89ITEsUD1hLnV0aWxzLnJlbmRlcldhdGNoKEwsTiksUT1bMTYsMjU2XTtyZXR1cm4gYi5kaXNwYXRjaD1MLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fY2FsbHM9bmV3IGZ1bmN0aW9uKCl7dGhpcy5jbGVhckhpZ2hsaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gYS5kb20ud3JpdGUoZnVuY3Rpb24oKXtsLnNlbGVjdEFsbChcIi5udi1wb2ludC5ob3ZlclwiKS5jbGFzc2VkKFwiaG92ZXJcIiwhMSl9KSxudWxsfSx0aGlzLmhpZ2hsaWdodFBvaW50PWZ1bmN0aW9uKGIsYyxkKXthLmRvbS53cml0ZShmdW5jdGlvbigpe2wuc2VsZWN0KFwiIC5udi1zZXJpZXMtXCIrYitcIiAubnYtcG9pbnQtXCIrYykuY2xhc3NlZChcImhvdmVyXCIsZCl9KX19LEwub24oXCJlbGVtZW50TW91c2VvdmVyLnBvaW50XCIsZnVuY3Rpb24oYSl7dyYmYi5fY2FsbHMuaGlnaGxpZ2h0UG9pbnQoYS5zZXJpZXNJbmRleCxhLnBvaW50SW5kZXgsITApfSksTC5vbihcImVsZW1lbnRNb3VzZW91dC5wb2ludFwiLGZ1bmN0aW9uKGEpe3cmJmIuX2NhbGxzLmhpZ2hsaWdodFBvaW50KGEuc2VyaWVzSW5kZXgsYS5wb2ludEluZGV4LCExKX0pLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBofSxzZXQ6ZnVuY3Rpb24oYSl7aD1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGEpe2k9YX19LHhTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSx5U2NhbGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1hfX0scG9pbnRTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWF9fSx4RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRX0sc2V0OmZ1bmN0aW9uKGEpe0U9YX19LHlEb21haW46e2dldDpmdW5jdGlvbigpe3JldHVybiBGfSxzZXQ6ZnVuY3Rpb24oYSl7Rj1hfX0scG9pbnREb21haW46e2dldDpmdW5jdGlvbigpe3JldHVybiBJfSxzZXQ6ZnVuY3Rpb24oYSl7ST1hfX0seFJhbmdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gR30sc2V0OmZ1bmN0aW9uKGEpe0c9YX19LHlSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEh9LHNldDpmdW5jdGlvbihhKXtIPWF9fSxwb2ludFJhbmdlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSn0sc2V0OmZ1bmN0aW9uKGEpe0o9YX19LGZvcmNlWDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWF9fSxmb3JjZVk6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT1hfX0sZm9yY2VQb2ludDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZ9LHNldDpmdW5jdGlvbihhKXt2PWF9fSxpbnRlcmFjdGl2ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHd9LHNldDpmdW5jdGlvbihhKXt3PWF9fSxwb2ludEFjdGl2ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHh9LHNldDpmdW5jdGlvbihhKXt4PWF9fSxwYWREYXRhT3V0ZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiB6fSxzZXQ6ZnVuY3Rpb24oYSl7ej1hfX0scGFkRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHl9LHNldDpmdW5jdGlvbihhKXt5PWF9fSxjbGlwRWRnZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEF9LHNldDpmdW5jdGlvbihhKXtBPWF9fSxjbGlwVm9yb25vaTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJ9LHNldDpmdW5jdGlvbihhKXtCPWF9fSxjbGlwUmFkaXVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRH0sc2V0OmZ1bmN0aW9uKGEpe0Q9YX19LHNob3dWb3Jvbm9pOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQ30sc2V0OmZ1bmN0aW9uKGEpe0M9YX19LGlkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YX19LHg6e2dldDpmdW5jdGlvbigpe3JldHVybiBwfSxzZXQ6ZnVuY3Rpb24oYSl7cD1kMy5mdW5jdG9yKGEpfX0seTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHF9LHNldDpmdW5jdGlvbihhKXtxPWQzLmZ1bmN0b3IoYSl9fSxwb2ludFNpemU6e2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24oYSl7cj1kMy5mdW5jdG9yKGEpfX0scG9pbnRTaGFwZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbihhKXtzPWQzLmZ1bmN0b3IoYSl9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zy50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6Zy50b3AsZy5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6Zy5yaWdodCxnLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTpnLmJvdHRvbSxnLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpnLmxlZnR9fSxkdXJhdGlvbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE59LHNldDpmdW5jdGlvbihhKXtOPWEsUC5yZXNldChOKX19LGNvbG9yOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gan0sc2V0OmZ1bmN0aW9uKGIpe2o9YS51dGlscy5nZXRDb2xvcihiKX19LHVzZVZvcm9ub2k6e2dldDpmdW5jdGlvbigpe3JldHVybiBNfSxzZXQ6ZnVuY3Rpb24oYSl7TT1hLE09PT0hMSYmKEI9ITEpfX19KSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLnNjYXR0ZXJDaGFydD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoeil7cmV0dXJuIEQucmVzZXQoKSxELm1vZGVscyhjKSx0JiZELm1vZGVscyhkKSx1JiZELm1vZGVscyhlKSxxJiZELm1vZGVscyhnKSxyJiZELm1vZGVscyhoKSx6LmVhY2goZnVuY3Rpb24oeil7bT1kMy5zZWxlY3QodGhpcyksYS51dGlscy5pbml0U1ZHKG0pO3ZhciBHPWEudXRpbHMuYXZhaWxhYmxlV2lkdGgoayxtLGopLEg9YS51dGlscy5hdmFpbGFibGVIZWlnaHQobCxtLGopO2lmKGIudXBkYXRlPWZ1bmN0aW9uKCl7MD09PUE/bS5jYWxsKGIpOm0udHJhbnNpdGlvbigpLmR1cmF0aW9uKEEpLmNhbGwoYil9LGIuY29udGFpbmVyPXRoaXMsdy5zZXR0ZXIoRih6KSxiLnVwZGF0ZSkuZ2V0dGVyKEUoeikpLnVwZGF0ZSgpLHcuZGlzYWJsZWQ9ei5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuISFhLmRpc2FibGVkfSksIXgpe3ZhciBJO3g9e307Zm9yKEkgaW4gdyl4W0ldPXdbSV1pbnN0YW5jZW9mIEFycmF5P3dbSV0uc2xpY2UoMCk6d1tJXX1pZighKHomJnoubGVuZ3RoJiZ6LmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXMubGVuZ3RofSkubGVuZ3RoKSlyZXR1cm4gYS51dGlscy5ub0RhdGEoYixtKSxELnJlbmRlckVuZChcInNjYXR0ZXIgaW1tZWRpYXRlXCIpLGI7bS5zZWxlY3RBbGwoXCIubnYtbm9EYXRhXCIpLnJlbW92ZSgpLG89Yy54U2NhbGUoKSxwPWMueVNjYWxlKCk7dmFyIEo9bS5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtc2NhdHRlckNoYXJ0XCIpLmRhdGEoW3pdKSxLPUouZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnZkMyBudi13cmFwIG52LXNjYXR0ZXJDaGFydCBudi1jaGFydC1cIitjLmlkKCkpLEw9Sy5hcHBlbmQoXCJnXCIpLE09Si5zZWxlY3QoXCJnXCIpO2lmKEwuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtYmFja2dyb3VuZFwiKS5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsXCJub25lXCIpLEwuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXggbnYtYXhpc1wiKSxMLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi15IG52LWF4aXNcIiksTC5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtc2NhdHRlcldyYXBcIiksTC5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtcmVncmVzc2lvbkxpbmVzV3JhcFwiKSxMLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1kaXN0V3JhcFwiKSxMLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1sZWdlbmRXcmFwXCIpLHYmJk0uc2VsZWN0KFwiLm52LXkubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrRytcIiwwKVwiKSxzKXt2YXIgTj1HO2Yud2lkdGgoTiksSi5zZWxlY3QoXCIubnYtbGVnZW5kV3JhcFwiKS5kYXR1bSh6KS5jYWxsKGYpLGoudG9wIT1mLmhlaWdodCgpJiYoai50b3A9Zi5oZWlnaHQoKSxIPWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KGwsbSxqKSksSi5zZWxlY3QoXCIubnYtbGVnZW5kV3JhcFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIistai50b3ArXCIpXCIpfUouYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2oubGVmdCtcIixcIitqLnRvcCtcIilcIiksYy53aWR0aChHKS5oZWlnaHQoSCkuY29sb3Ioei5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcj1hLmNvbG9yfHxuKGEsYiksYS5jb2xvcn0pLmZpbHRlcihmdW5jdGlvbihhLGIpe3JldHVybiF6W2JdLmRpc2FibGVkfSkpLEouc2VsZWN0KFwiLm52LXNjYXR0ZXJXcmFwXCIpLmRhdHVtKHouZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkpLmNhbGwoYyksSi5zZWxlY3QoXCIubnYtcmVncmVzc2lvbkxpbmVzV3JhcFwiKS5hdHRyKFwiY2xpcC1wYXRoXCIsXCJ1cmwoI252LWVkZ2UtY2xpcC1cIitjLmlkKCkrXCIpXCIpO3ZhciBPPUouc2VsZWN0KFwiLm52LXJlZ3Jlc3Npb25MaW5lc1dyYXBcIikuc2VsZWN0QWxsKFwiLm52LXJlZ0xpbmVzXCIpLmRhdGEoZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtPLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXJlZ0xpbmVzXCIpO3ZhciBQPU8uc2VsZWN0QWxsKFwiLm52LXJlZ0xpbmVcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm5bYV19KTtQLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXJlZ0xpbmVcIikuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDApLFAuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLmludGVyY2VwdCYmYS5zbG9wZX0pLndhdGNoVHJhbnNpdGlvbihELFwic2NhdHRlclBsdXNMaW5lQ2hhcnQ6IHJlZ2xpbmVcIikuYXR0cihcIngxXCIsby5yYW5nZSgpWzBdKS5hdHRyKFwieDJcIixvLnJhbmdlKClbMV0pLmF0dHIoXCJ5MVwiLGZ1bmN0aW9uKGEpe3JldHVybiBwKG8uZG9tYWluKClbMF0qYS5zbG9wZSthLmludGVyY2VwdCl9KS5hdHRyKFwieTJcIixmdW5jdGlvbihhKXtyZXR1cm4gcChvLmRvbWFpbigpWzFdKmEuc2xvcGUrYS5pbnRlcmNlcHQpfSkuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG4oYSxjKX0pLnN0eWxlKFwic3Ryb2tlLW9wYWNpdHlcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZHx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGEuc2xvcGV8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBhLmludGVyY2VwdD8wOjF9KSx0JiYoZC5zY2FsZShvKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NYKEcvMTAwLHopKS50aWNrU2l6ZSgtSCwwKSxNLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsXCIrcC5yYW5nZSgpWzBdK1wiKVwiKS5jYWxsKGQpKSx1JiYoZS5zY2FsZShwKS5fdGlja3MoYS51dGlscy5jYWxjVGlja3NZKEgvMzYseikpLnRpY2tTaXplKC1HLDApLE0uc2VsZWN0KFwiLm52LXkubnYtYXhpc1wiKS5jYWxsKGUpKSxxJiYoZy5nZXREYXRhKGMueCgpKS5zY2FsZShvKS53aWR0aChHKS5jb2xvcih6Lm1hcChmdW5jdGlvbihhLGIpe3JldHVybiBhLmNvbG9yfHxuKGEsYil9KS5maWx0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4heltiXS5kaXNhYmxlZH0pKSxMLnNlbGVjdChcIi5udi1kaXN0V3JhcFwiKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtZGlzdHJpYnV0aW9uWFwiKSxNLnNlbGVjdChcIi5udi1kaXN0cmlidXRpb25YXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiK3AucmFuZ2UoKVswXStcIilcIikuZGF0dW0oei5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KSkuY2FsbChnKSksciYmKGguZ2V0RGF0YShjLnkoKSkuc2NhbGUocCkud2lkdGgoSCkuY29sb3Ioei5tYXAoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8bihhLGIpfSkuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIXpbYl0uZGlzYWJsZWR9KSksTC5zZWxlY3QoXCIubnYtZGlzdFdyYXBcIikuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWRpc3RyaWJ1dGlvbllcIiksTS5zZWxlY3QoXCIubnYtZGlzdHJpYnV0aW9uWVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrKHY/RzotaC5zaXplKCkpK1wiLDApXCIpLmRhdHVtKHouZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkpLmNhbGwoaCkpLGYuZGlzcGF0Y2gub24oXCJzdGF0ZUNoYW5nZVwiLGZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKXdbY109YVtjXTt5LnN0YXRlQ2hhbmdlKHcpLGIudXBkYXRlKCl9KSx5Lm9uKFwiY2hhbmdlU3RhdGVcIixmdW5jdGlvbihhKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5kaXNhYmxlZCYmKHouZm9yRWFjaChmdW5jdGlvbihiLGMpe2IuZGlzYWJsZWQ9YS5kaXNhYmxlZFtjXX0pLHcuZGlzYWJsZWQ9YS5kaXNhYmxlZCksYi51cGRhdGUoKX0pLGMuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKGEpe2kuaGlkZGVuKCEwKSxtLnNlbGVjdChcIi5udi1jaGFydC1cIitjLmlkKCkrXCIgLm52LXNlcmllcy1cIithLnNlcmllc0luZGV4K1wiIC5udi1kaXN0eC1cIithLnBvaW50SW5kZXgpLmF0dHIoXCJ5MVwiLDApLG0uc2VsZWN0KFwiLm52LWNoYXJ0LVwiK2MuaWQoKStcIiAubnYtc2VyaWVzLVwiK2Euc2VyaWVzSW5kZXgrXCIgLm52LWRpc3R5LVwiK2EucG9pbnRJbmRleCkuYXR0cihcIngyXCIsaC5zaXplKCkpfSksYy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW92ZXIudG9vbHRpcFwiLGZ1bmN0aW9uKGEpe20uc2VsZWN0KFwiLm52LXNlcmllcy1cIithLnNlcmllc0luZGV4K1wiIC5udi1kaXN0eC1cIithLnBvaW50SW5kZXgpLmF0dHIoXCJ5MVwiLGEucG9zLnRvcC1ILWoudG9wKSxtLnNlbGVjdChcIi5udi1zZXJpZXMtXCIrYS5zZXJpZXNJbmRleCtcIiAubnYtZGlzdHktXCIrYS5wb2ludEluZGV4KS5hdHRyKFwieDJcIixhLnBvcy5sZWZ0K2cuc2l6ZSgpLWoubGVmdCksaS5wb3NpdGlvbihhLnBvcykuZGF0YShhKS5oaWRkZW4oITEpfSksQj1vLmNvcHkoKSxDPXAuY29weSgpfSksRC5yZW5kZXJFbmQoXCJzY2F0dGVyIHdpdGggbGluZSBpbW1lZGlhdGVcIiksYn12YXIgYz1hLm1vZGVscy5zY2F0dGVyKCksZD1hLm1vZGVscy5heGlzKCksZT1hLm1vZGVscy5heGlzKCksZj1hLm1vZGVscy5sZWdlbmQoKSxnPWEubW9kZWxzLmRpc3RyaWJ1dGlvbigpLGg9YS5tb2RlbHMuZGlzdHJpYnV0aW9uKCksaT1hLm1vZGVscy50b29sdGlwKCksaj17dG9wOjMwLHJpZ2h0OjIwLGJvdHRvbTo1MCxsZWZ0Ojc1fSxrPW51bGwsbD1udWxsLG09bnVsbCxuPWEudXRpbHMuZGVmYXVsdENvbG9yKCksbz1jLnhTY2FsZSgpLHA9Yy55U2NhbGUoKSxxPSExLHI9ITEscz0hMCx0PSEwLHU9ITAsdj0hMSx3PWEudXRpbHMuc3RhdGUoKSx4PW51bGwseT1kMy5kaXNwYXRjaChcInN0YXRlQ2hhbmdlXCIsXCJjaGFuZ2VTdGF0ZVwiLFwicmVuZGVyRW5kXCIpLHo9bnVsbCxBPTI1MDtjLnhTY2FsZShvKS55U2NhbGUocCksZC5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoMTApLGUub3JpZW50KHY/XCJyaWdodFwiOlwibGVmdFwiKS50aWNrUGFkZGluZygxMCksZy5heGlzKFwieFwiKSxoLmF4aXMoXCJ5XCIpLGkuaGVhZGVyRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGQudGlja0Zvcm1hdCgpKGEsYil9KS52YWx1ZUZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBlLnRpY2tGb3JtYXQoKShhLGIpfSk7dmFyIEIsQyxEPWEudXRpbHMucmVuZGVyV2F0Y2goeSxBKSxFPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybnthY3RpdmU6YS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KX19fSxGPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDAhPT1iLmFjdGl2ZSYmYS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7YS5kaXNhYmxlZD0hYi5hY3RpdmVbY119KX19O3JldHVybiBiLmRpc3BhdGNoPXksYi5zY2F0dGVyPWMsYi5sZWdlbmQ9ZixiLnhBeGlzPWQsYi55QXhpcz1lLGIuZGlzdFg9ZyxiLmRpc3RZPWgsYi50b29sdGlwPWksYi5vcHRpb25zPWEudXRpbHMub3B0aW9uc0Z1bmMuYmluZChiKSxiLl9vcHRpb25zPU9iamVjdC5jcmVhdGUoe30se3dpZHRoOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YX19LGhlaWdodDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsPWF9fSxjb250YWluZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0sc2hvd0Rpc3RYOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcX0sc2V0OmZ1bmN0aW9uKGEpe3E9YX19LHNob3dEaXN0WTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbihhKXtyPWF9fSxzaG93TGVnZW5kOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGEpe3M9YX19LHNob3dYQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWF9fSxzaG93WUF4aXM6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT1hfX0sZGVmYXVsdFN0YXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geH0sc2V0OmZ1bmN0aW9uKGEpe3g9YX19LG5vRGF0YTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHp9LHNldDpmdW5jdGlvbihhKXt6PWF9fSxkdXJhdGlvbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEF9LHNldDpmdW5jdGlvbihhKXtBPWF9fSx0b29sdGlwczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZW5hYmxlZCgpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcHNcIixcInVzZSBjaGFydC50b29sdGlwLmVuYWJsZWQoKSBpbnN0ZWFkXCIpLGkuZW5hYmxlZCghIWIpXG59fSx0b29sdGlwQ29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuY29udGVudEdlbmVyYXRvcigpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcENvbnRlbnRcIixcInVzZSBjaGFydC50b29sdGlwLmNvbnRlbnRHZW5lcmF0b3IoKSBpbnN0ZWFkXCIpLGkuY29udGVudEdlbmVyYXRvcihiKX19LHRvb2x0aXBYQ29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuY29udGVudEdlbmVyYXRvcigpfSxzZXQ6ZnVuY3Rpb24oKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwQ29udGVudFwiLFwiVGhpcyBvcHRpb24gaXMgcmVtb3ZlZCwgcHV0IHZhbHVlcyBpbnRvIG1haW4gdG9vbHRpcC5cIil9fSx0b29sdGlwWUNvbnRlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBpLmNvbnRlbnRHZW5lcmF0b3IoKX0sc2V0OmZ1bmN0aW9uKCl7YS5kZXByZWNhdGVkKFwidG9vbHRpcENvbnRlbnRcIixcIlRoaXMgb3B0aW9uIGlzIHJlbW92ZWQsIHB1dCB2YWx1ZXMgaW50byBtYWluIHRvb2x0aXAuXCIpfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gan0sc2V0OmZ1bmN0aW9uKGEpe2oudG9wPXZvaWQgMCE9PWEudG9wP2EudG9wOmoudG9wLGoucmlnaHQ9dm9pZCAwIT09YS5yaWdodD9hLnJpZ2h0OmoucmlnaHQsai5ib3R0b209dm9pZCAwIT09YS5ib3R0b20/YS5ib3R0b206ai5ib3R0b20sai5sZWZ0PXZvaWQgMCE9PWEubGVmdD9hLmxlZnQ6ai5sZWZ0fX0scmlnaHRBbGlnbllBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdn0sc2V0OmZ1bmN0aW9uKGEpe3Y9YSxlLm9yaWVudChhP1wicmlnaHRcIjpcImxlZnRcIil9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbihiKXtuPWEudXRpbHMuZ2V0Q29sb3IoYiksZi5jb2xvcihuKSxnLmNvbG9yKG4pLGguY29sb3Iobil9fX0pLGEudXRpbHMuaW5oZXJpdE9wdGlvbnMoYixjKSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEubW9kZWxzLnNwYXJrbGluZT1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoayl7cmV0dXJuIGsuZWFjaChmdW5jdGlvbihiKXt2YXIgaz1oLWcubGVmdC1nLnJpZ2h0LHE9aS1nLnRvcC1nLmJvdHRvbTtqPWQzLnNlbGVjdCh0aGlzKSxhLnV0aWxzLmluaXRTVkcoaiksbC5kb21haW4oY3x8ZDMuZXh0ZW50KGIsbikpLnJhbmdlKGV8fFswLGtdKSxtLmRvbWFpbihkfHxkMy5leHRlbnQoYixvKSkucmFuZ2UoZnx8W3EsMF0pO3t2YXIgcj1qLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1zcGFya2xpbmVcIikuZGF0YShbYl0pLHM9ci5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtc3BhcmtsaW5lXCIpO3MuYXBwZW5kKFwiZ1wiKSxyLnNlbGVjdChcImdcIil9ci5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrZy5sZWZ0K1wiLFwiK2cudG9wK1wiKVwiKTt2YXIgdD1yLnNlbGVjdEFsbChcInBhdGhcIikuZGF0YShmdW5jdGlvbihhKXtyZXR1cm5bYV19KTt0LmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKSx0LmV4aXQoKS5yZW1vdmUoKSx0LnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5jb2xvcnx8cChhLGIpfSkuYXR0cihcImRcIixkMy5zdmcubGluZSgpLngoZnVuY3Rpb24oYSxiKXtyZXR1cm4gbChuKGEsYikpfSkueShmdW5jdGlvbihhLGIpe3JldHVybiBtKG8oYSxiKSl9KSk7dmFyIHU9ci5zZWxlY3RBbGwoXCJjaXJjbGUubnYtcG9pbnRcIikuZGF0YShmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGIpe2lmKC0xIT1iKXt2YXIgYz1hW2JdO3JldHVybiBjLnBvaW50SW5kZXg9YixjfXJldHVybiBudWxsfXZhciBjPWEubWFwKGZ1bmN0aW9uKGEsYil7cmV0dXJuIG8oYSxiKX0pLGQ9YihjLmxhc3RJbmRleE9mKG0uZG9tYWluKClbMV0pKSxlPWIoYy5pbmRleE9mKG0uZG9tYWluKClbMF0pKSxmPWIoYy5sZW5ndGgtMSk7cmV0dXJuW2UsZCxmXS5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWF9KX0pO3UuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIiksdS5leGl0KCkucmVtb3ZlKCksdS5hdHRyKFwiY3hcIixmdW5jdGlvbihhKXtyZXR1cm4gbChuKGEsYS5wb2ludEluZGV4KSl9KS5hdHRyKFwiY3lcIixmdW5jdGlvbihhKXtyZXR1cm4gbShvKGEsYS5wb2ludEluZGV4KSl9KS5hdHRyKFwiclwiLDIpLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGEpe3JldHVybiBuKGEsYS5wb2ludEluZGV4KT09bC5kb21haW4oKVsxXT9cIm52LXBvaW50IG52LWN1cnJlbnRWYWx1ZVwiOm8oYSxhLnBvaW50SW5kZXgpPT1tLmRvbWFpbigpWzBdP1wibnYtcG9pbnQgbnYtbWluVmFsdWVcIjpcIm52LXBvaW50IG52LW1heFZhbHVlXCJ9KX0pLGJ9dmFyIGMsZCxlLGYsZz17dG9wOjIscmlnaHQ6MCxib3R0b206MixsZWZ0OjB9LGg9NDAwLGk9MzIsaj1udWxsLGs9ITAsbD1kMy5zY2FsZS5saW5lYXIoKSxtPWQzLnNjYWxlLmxpbmVhcigpLG49ZnVuY3Rpb24oYSl7cmV0dXJuIGEueH0sbz1mdW5jdGlvbihhKXtyZXR1cm4gYS55fSxwPWEudXRpbHMuZ2V0Q29sb3IoW1wiIzAwMFwiXSk7cmV0dXJuIGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oYSl7aT1hfX0seERvbWFpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGN9LHNldDpmdW5jdGlvbihhKXtjPWF9fSx5RG9tYWluOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0OmZ1bmN0aW9uKGEpe2Q9YX19LHhSYW5nZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbihhKXtlPWF9fSx5UmFuZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBmfSxzZXQ6ZnVuY3Rpb24oYSl7Zj1hfX0seFNjYWxlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKGEpe2w9YX19LHlTY2FsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSxhbmltYXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YX19LHg6e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1kMy5mdW5jdG9yKGEpfX0seTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWQzLmZ1bmN0b3IoYSl9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zy50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6Zy50b3AsZy5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6Zy5yaWdodCxnLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTpnLmJvdHRvbSxnLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDpnLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihiKXtwPWEudXRpbHMuZ2V0Q29sb3IoYil9fX0pLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMuc3BhcmtsaW5lUGx1cz1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIocCl7cmV0dXJuIHAuZWFjaChmdW5jdGlvbihwKXtmdW5jdGlvbiBxKCl7aWYoIWope3ZhciBhPXouc2VsZWN0QWxsKFwiLm52LWhvdmVyVmFsdWVcIikuZGF0YShpKSxiPWEuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtaG92ZXJWYWx1ZVwiKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMCkuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwwKTthLmV4aXQoKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMCkuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwwKS5yZW1vdmUoKSxhLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihhKXtyZXR1cm5cInRyYW5zbGF0ZShcIitjKGUueCgpKHBbYV0sYSkpK1wiLDApXCJ9KS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjUwKS5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsMSkuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwxKSxpLmxlbmd0aCYmKGIuYXBwZW5kKFwibGluZVwiKS5hdHRyKFwieDFcIiwwKS5hdHRyKFwieTFcIiwtZi50b3ApLmF0dHIoXCJ4MlwiLDApLmF0dHIoXCJ5MlwiLHUpLGIuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXhWYWx1ZVwiKS5hdHRyKFwieFwiLC02KS5hdHRyKFwieVwiLC1mLnRvcCkuYXR0cihcInRleHQtYW5jaG9yXCIsXCJlbmRcIikuYXR0cihcImR5XCIsXCIuOWVtXCIpLHouc2VsZWN0KFwiLm52LWhvdmVyVmFsdWUgLm52LXhWYWx1ZVwiKS50ZXh0KGsoZS54KCkocFtpWzBdXSxpWzBdKSkpLGIuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LXlWYWx1ZVwiKS5hdHRyKFwieFwiLDYpLmF0dHIoXCJ5XCIsLWYudG9wKS5hdHRyKFwidGV4dC1hbmNob3JcIixcInN0YXJ0XCIpLmF0dHIoXCJkeVwiLFwiLjllbVwiKSx6LnNlbGVjdChcIi5udi1ob3ZlclZhbHVlIC5udi15VmFsdWVcIikudGV4dChsKGUueSgpKHBbaVswXV0saVswXSkpKSl9fWZ1bmN0aW9uIHIoKXtmdW5jdGlvbiBhKGEsYil7Zm9yKHZhciBjPU1hdGguYWJzKGUueCgpKGFbMF0sMCktYiksZD0wLGY9MDtmPGEubGVuZ3RoO2YrKylNYXRoLmFicyhlLngoKShhW2ZdLGYpLWIpPGMmJihjPU1hdGguYWJzKGUueCgpKGFbZl0sZiktYiksZD1mKTtyZXR1cm4gZH1pZighail7dmFyIGI9ZDMubW91c2UodGhpcylbMF0tZi5sZWZ0O2k9W2EocCxNYXRoLnJvdW5kKGMuaW52ZXJ0KGIpKSldLHEoKX19dmFyIHM9ZDMuc2VsZWN0KHRoaXMpO2EudXRpbHMuaW5pdFNWRyhzKTt2YXIgdD1hLnV0aWxzLmF2YWlsYWJsZVdpZHRoKGcscyxmKSx1PWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KGgscyxmKTtpZihiLnVwZGF0ZT1mdW5jdGlvbigpe3MuY2FsbChiKX0sYi5jb250YWluZXI9dGhpcywhcHx8IXAubGVuZ3RoKXJldHVybiBhLnV0aWxzLm5vRGF0YShiLHMpLGI7cy5zZWxlY3RBbGwoXCIubnYtbm9EYXRhXCIpLnJlbW92ZSgpO3ZhciB2PWUueSgpKHBbcC5sZW5ndGgtMV0scC5sZW5ndGgtMSk7Yz1lLnhTY2FsZSgpLGQ9ZS55U2NhbGUoKTt2YXIgdz1zLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1zcGFya2xpbmVwbHVzXCIpLmRhdGEoW3BdKSx4PXcuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnZkMyBudi13cmFwIG52LXNwYXJrbGluZXBsdXNcIikseT14LmFwcGVuZChcImdcIiksej13LnNlbGVjdChcImdcIik7eS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtc3BhcmtsaW5lV3JhcFwiKSx5LmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi12YWx1ZVdyYXBcIikseS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtaG92ZXJBcmVhXCIpLHcuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2YubGVmdCtcIixcIitmLnRvcCtcIilcIik7dmFyIEE9ei5zZWxlY3QoXCIubnYtc3BhcmtsaW5lV3JhcFwiKTtpZihlLndpZHRoKHQpLmhlaWdodCh1KSxBLmNhbGwoZSksbSl7dmFyIEI9ei5zZWxlY3QoXCIubnYtdmFsdWVXcmFwXCIpLEM9Qi5zZWxlY3RBbGwoXCIubnYtY3VycmVudFZhbHVlXCIpLmRhdGEoW3ZdKTtDLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIixcIm52LWN1cnJlbnRWYWx1ZVwiKS5hdHRyKFwiZHhcIixvPy04OjgpLmF0dHIoXCJkeVwiLFwiLjllbVwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsbz9cImVuZFwiOlwic3RhcnRcIiksQy5hdHRyKFwieFwiLHQrKG8/Zi5yaWdodDowKSkuYXR0cihcInlcIixuP2Z1bmN0aW9uKGEpe3JldHVybiBkKGEpfTowKS5zdHlsZShcImZpbGxcIixlLmNvbG9yKCkocFtwLmxlbmd0aC0xXSxwLmxlbmd0aC0xKSkudGV4dChsKHYpKX15LnNlbGVjdChcIi5udi1ob3ZlckFyZWFcIikuYXBwZW5kKFwicmVjdFwiKS5vbihcIm1vdXNlbW92ZVwiLHIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe2o9IWp9KS5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oKXtpPVtdLHEoKX0pLHouc2VsZWN0KFwiLm52LWhvdmVyQXJlYSByZWN0XCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbigpe3JldHVyblwidHJhbnNsYXRlKFwiKy1mLmxlZnQrXCIsXCIrLWYudG9wK1wiKVwifSkuYXR0cihcIndpZHRoXCIsdCtmLmxlZnQrZi5yaWdodCkuYXR0cihcImhlaWdodFwiLHUrZi50b3ApfSksYn12YXIgYyxkLGU9YS5tb2RlbHMuc3BhcmtsaW5lKCksZj17dG9wOjE1LHJpZ2h0OjEwMCxib3R0b206MTAsbGVmdDo1MH0sZz1udWxsLGg9bnVsbCxpPVtdLGo9ITEsaz1kMy5mb3JtYXQoXCIsclwiKSxsPWQzLmZvcm1hdChcIiwuMmZcIiksbT0hMCxuPSEwLG89ITEscD1udWxsO3JldHVybiBiLnNwYXJrbGluZT1lLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd9LHNldDpmdW5jdGlvbihhKXtnPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBofSxzZXQ6ZnVuY3Rpb24oYSl7aD1hfX0seFRpY2tGb3JtYXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1hfX0seVRpY2tGb3JtYXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oYSl7bD1hfX0sc2hvd0xhc3RWYWx1ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXttPWF9fSxhbGlnblZhbHVlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LHJpZ2h0QWxpZ25WYWx1ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbihhKXtvPWF9fSxub0RhdGE6e2dldDpmdW5jdGlvbigpe3JldHVybiBwfSxzZXQ6ZnVuY3Rpb24oYSl7cD1hfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0OmZ1bmN0aW9uKGEpe2YudG9wPXZvaWQgMCE9PWEudG9wP2EudG9wOmYudG9wLGYucmlnaHQ9dm9pZCAwIT09YS5yaWdodD9hLnJpZ2h0OmYucmlnaHQsZi5ib3R0b209dm9pZCAwIT09YS5ib3R0b20/YS5ib3R0b206Zi5ib3R0b20sZi5sZWZ0PXZvaWQgMCE9PWEubGVmdD9hLmxlZnQ6Zi5sZWZ0fX19KSxhLnV0aWxzLmluaGVyaXRPcHRpb25zKGIsZSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5zdGFja2VkQXJlYT1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIobSl7cmV0dXJuIHUucmVzZXQoKSx1Lm1vZGVscyhyKSxtLmVhY2goZnVuY3Rpb24obSl7dmFyIHM9Zi1lLmxlZnQtZS5yaWdodCx2PWctZS50b3AtZS5ib3R0b207aj1kMy5zZWxlY3QodGhpcyksYS51dGlscy5pbml0U1ZHKGopLGM9ci54U2NhbGUoKSxkPXIueVNjYWxlKCk7dmFyIHc9bTttLmZvckVhY2goZnVuY3Rpb24oYSxiKXthLnNlcmllc0luZGV4PWIsYS52YWx1ZXM9YS52YWx1ZXMubWFwKGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGEuaW5kZXg9YyxhLnNlcmllc0luZGV4PWIsYX0pfSk7dmFyIHg9bS5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIWEuZGlzYWJsZWR9KTttPWQzLmxheW91dC5zdGFjaygpLm9yZGVyKG8pLm9mZnNldChuKS52YWx1ZXMoZnVuY3Rpb24oYSl7cmV0dXJuIGEudmFsdWVzfSkueChrKS55KGwpLm91dChmdW5jdGlvbihhLGIsYyl7YS5kaXNwbGF5PXt5OmMseTA6Yn19KSh4KTt2YXIgeT1qLnNlbGVjdEFsbChcImcubnYtd3JhcC5udi1zdGFja2VkYXJlYVwiKS5kYXRhKFttXSksej15LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1zdGFja2VkYXJlYVwiKSxBPXouYXBwZW5kKFwiZGVmc1wiKSxCPXouYXBwZW5kKFwiZ1wiKSxDPXkuc2VsZWN0KFwiZ1wiKTtCLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1hcmVhV3JhcFwiKSxCLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi1zY2F0dGVyV3JhcFwiKSx5LmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitlLmxlZnQrXCIsXCIrZS50b3ArXCIpXCIpLDA9PXIuZm9yY2VZKCkubGVuZ3RoJiZyLmZvcmNlWSgpLnB1c2goMCksci53aWR0aChzKS5oZWlnaHQodikueChrKS55KGZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc3BsYXkueSthLmRpc3BsYXkueTB9KS5mb3JjZVkoWzBdKS5jb2xvcihtLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5jb2xvcnx8aChhLGEuc2VyaWVzSW5kZXgpfSkpO3ZhciBEPUMuc2VsZWN0KFwiLm52LXNjYXR0ZXJXcmFwXCIpLmRhdHVtKG0pO0QuY2FsbChyKSxBLmFwcGVuZChcImNsaXBQYXRoXCIpLmF0dHIoXCJpZFwiLFwibnYtZWRnZS1jbGlwLVwiK2kpLmFwcGVuZChcInJlY3RcIikseS5zZWxlY3QoXCIjbnYtZWRnZS1jbGlwLVwiK2krXCIgcmVjdFwiKS5hdHRyKFwid2lkdGhcIixzKS5hdHRyKFwiaGVpZ2h0XCIsdiksQy5hdHRyKFwiY2xpcC1wYXRoXCIscT9cInVybCgjbnYtZWRnZS1jbGlwLVwiK2krXCIpXCI6XCJcIik7dmFyIEU9ZDMuc3ZnLmFyZWEoKS54KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGMoayhhLGIpKX0pLnkwKGZ1bmN0aW9uKGEpe3JldHVybiBkKGEuZGlzcGxheS55MCl9KS55MShmdW5jdGlvbihhKXtyZXR1cm4gZChhLmRpc3BsYXkueSthLmRpc3BsYXkueTApfSkuaW50ZXJwb2xhdGUocCksRj1kMy5zdmcuYXJlYSgpLngoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYyhrKGEsYikpfSkueTAoZnVuY3Rpb24oYSl7cmV0dXJuIGQoYS5kaXNwbGF5LnkwKX0pLnkxKGZ1bmN0aW9uKGEpe3JldHVybiBkKGEuZGlzcGxheS55MCl9KSxHPUMuc2VsZWN0KFwiLm52LWFyZWFXcmFwXCIpLnNlbGVjdEFsbChcInBhdGgubnYtYXJlYVwiKS5kYXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7Ry5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oYSxiKXtyZXR1cm5cIm52LWFyZWEgbnYtYXJlYS1cIitifSkuYXR0cihcImRcIixmdW5jdGlvbihhKXtyZXR1cm4gRihhLnZhbHVlcyxhLnNlcmllc0luZGV4KX0pLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oYSl7ZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJob3ZlclwiLCEwKSx0LmFyZWFNb3VzZW92ZXIoe3BvaW50OmEsc2VyaWVzOmEua2V5LHBvczpbZDMuZXZlbnQucGFnZVgsZDMuZXZlbnQucGFnZVldLHNlcmllc0luZGV4OmEuc2VyaWVzSW5kZXh9KX0pLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhKXtkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhvdmVyXCIsITEpLHQuYXJlYU1vdXNlb3V0KHtwb2ludDphLHNlcmllczphLmtleSxwb3M6W2QzLmV2ZW50LnBhZ2VYLGQzLmV2ZW50LnBhZ2VZXSxzZXJpZXNJbmRleDphLnNlcmllc0luZGV4fSl9KS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7ZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJob3ZlclwiLCExKSx0LmFyZWFDbGljayh7cG9pbnQ6YSxzZXJpZXM6YS5rZXkscG9zOltkMy5ldmVudC5wYWdlWCxkMy5ldmVudC5wYWdlWV0sc2VyaWVzSW5kZXg6YS5zZXJpZXNJbmRleH0pfSksRy5leGl0KCkucmVtb3ZlKCksRy5zdHlsZShcImZpbGxcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5jb2xvcnx8aChhLGEuc2VyaWVzSW5kZXgpfSkuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5jb2xvcnx8aChhLGEuc2VyaWVzSW5kZXgpfSksRy53YXRjaFRyYW5zaXRpb24odSxcInN0YWNrZWRBcmVhIHBhdGhcIikuYXR0cihcImRcIixmdW5jdGlvbihhLGIpe3JldHVybiBFKGEudmFsdWVzLGIpfSksci5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW92ZXIuYXJlYVwiLGZ1bmN0aW9uKGEpe0Muc2VsZWN0KFwiLm52LWNoYXJ0LVwiK2krXCIgLm52LWFyZWEtXCIrYS5zZXJpZXNJbmRleCkuY2xhc3NlZChcImhvdmVyXCIsITApfSksci5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dC5hcmVhXCIsZnVuY3Rpb24oYSl7Qy5zZWxlY3QoXCIubnYtY2hhcnQtXCIraStcIiAubnYtYXJlYS1cIithLnNlcmllc0luZGV4KS5jbGFzc2VkKFwiaG92ZXJcIiwhMSl9KSxiLmQzX3N0YWNrZWRPZmZzZXRfc3RhY2tQZXJjZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPWEubGVuZ3RoLGY9YVswXS5sZW5ndGgsZz1bXTtmb3IoYz0wO2Y+YzsrK2Mpe2ZvcihiPTAsZD0wO2I8dy5sZW5ndGg7YisrKWQrPWwod1tiXS52YWx1ZXNbY10pO2lmKGQpZm9yKGI9MDtlPmI7YisrKWFbYl1bY11bMV0vPWQ7ZWxzZSBmb3IoYj0wO2U+YjtiKyspYVtiXVtjXVsxXT0wfWZvcihjPTA7Zj5jOysrYylnW2NdPTA7cmV0dXJuIGd9fSksdS5yZW5kZXJFbmQoXCJzdGFja2VkQXJlYSBpbW1lZGlhdGVcIiksYn12YXIgYyxkLGU9e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSxmPTk2MCxnPTUwMCxoPWEudXRpbHMuZGVmYXVsdENvbG9yKCksaT1NYXRoLmZsb29yKDFlNSpNYXRoLnJhbmRvbSgpKSxqPW51bGwsaz1mdW5jdGlvbihhKXtyZXR1cm4gYS54fSxsPWZ1bmN0aW9uKGEpe3JldHVybiBhLnl9LG09XCJzdGFja1wiLG49XCJ6ZXJvXCIsbz1cImRlZmF1bHRcIixwPVwibGluZWFyXCIscT0hMSxyPWEubW9kZWxzLnNjYXR0ZXIoKSxzPTI1MCx0PWQzLmRpc3BhdGNoKFwiYXJlYUNsaWNrXCIsXCJhcmVhTW91c2VvdmVyXCIsXCJhcmVhTW91c2VvdXRcIixcInJlbmRlckVuZFwiLFwiZWxlbWVudENsaWNrXCIsXCJlbGVtZW50TW91c2VvdmVyXCIsXCJlbGVtZW50TW91c2VvdXRcIik7ci5wb2ludFNpemUoMi4yKS5wb2ludERvbWFpbihbMi4yLDIuMl0pO3ZhciB1PWEudXRpbHMucmVuZGVyV2F0Y2godCxzKTtyZXR1cm4gYi5kaXNwYXRjaD10LGIuc2NhdHRlcj1yLHIuZGlzcGF0Y2gub24oXCJlbGVtZW50Q2xpY2tcIixmdW5jdGlvbigpe3QuZWxlbWVudENsaWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLHIuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdmVyXCIsZnVuY3Rpb24oKXt0LmVsZW1lbnRNb3VzZW92ZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSksci5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW91dFwiLGZ1bmN0aW9uKCl7dC5lbGVtZW50TW91c2VvdXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSksYi5pbnRlcnBvbGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8ocD1hLGIpOnB9LGIuZHVyYXRpb249ZnVuY3Rpb24oYSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHM9YSx1LnJlc2V0KHMpLHIuZHVyYXRpb24ocyksYik6c30sYi5kaXNwYXRjaD10LGIuc2NhdHRlcj1yLGIub3B0aW9ucz1hLnV0aWxzLm9wdGlvbnNGdW5jLmJpbmQoYiksYi5fb3B0aW9ucz1PYmplY3QuY3JlYXRlKHt9LHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldDpmdW5jdGlvbihhKXtmPWF9fSxoZWlnaHQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zz1hfX0sY2xpcEVkZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBxfSxzZXQ6ZnVuY3Rpb24oYSl7cT1hfX0sb2Zmc2V0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LG9yZGVyOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKGEpe289YX19LGludGVycG9sYXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKGEpe3A9YX19LHg6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1kMy5mdW5jdG9yKGEpfX0seTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsPWQzLmZ1bmN0b3IoYSl9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7ZS50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6ZS50b3AsZS5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6ZS5yaWdodCxlLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTplLmJvdHRvbSxlLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDplLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihiKXtoPWEudXRpbHMuZ2V0Q29sb3IoYil9fSxzdHlsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihhKXtzd2l0Y2gobT1hKXtjYXNlXCJzdGFja1wiOmIub2Zmc2V0KFwiemVyb1wiKSxiLm9yZGVyKFwiZGVmYXVsdFwiKTticmVhaztjYXNlXCJzdHJlYW1cIjpiLm9mZnNldChcIndpZ2dsZVwiKSxiLm9yZGVyKFwiaW5zaWRlLW91dFwiKTticmVhaztjYXNlXCJzdHJlYW0tY2VudGVyXCI6Yi5vZmZzZXQoXCJzaWxob3VldHRlXCIpLGIub3JkZXIoXCJpbnNpZGUtb3V0XCIpO2JyZWFrO2Nhc2VcImV4cGFuZFwiOmIub2Zmc2V0KFwiZXhwYW5kXCIpLGIub3JkZXIoXCJkZWZhdWx0XCIpO2JyZWFrO2Nhc2VcInN0YWNrX3BlcmNlbnRcIjpiLm9mZnNldChiLmQzX3N0YWNrZWRPZmZzZXRfc3RhY2tQZXJjZW50KSxiLm9yZGVyKFwiZGVmYXVsdFwiKX19fSxkdXJhdGlvbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbihhKXtzPWEsdS5yZXNldChzKSxyLmR1cmF0aW9uKHMpfX19KSxhLnV0aWxzLmluaGVyaXRPcHRpb25zKGIsciksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5zdGFja2VkQXJlYUNoYXJ0PWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihrKXtyZXR1cm4gRi5yZXNldCgpLEYubW9kZWxzKGUpLHImJkYubW9kZWxzKGYpLHMmJkYubW9kZWxzKGcpLGsuZWFjaChmdW5jdGlvbihrKXt2YXIgeD1kMy5zZWxlY3QodGhpcyksRj10aGlzO2EudXRpbHMuaW5pdFNWRyh4KTt2YXIgSz1hLnV0aWxzLmF2YWlsYWJsZVdpZHRoKG0seCxsKSxMPWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KG4seCxsKTtpZihiLnVwZGF0ZT1mdW5jdGlvbigpe3gudHJhbnNpdGlvbigpLmR1cmF0aW9uKEMpLmNhbGwoYil9LGIuY29udGFpbmVyPXRoaXMsdi5zZXR0ZXIoSShrKSxiLnVwZGF0ZSkuZ2V0dGVyKEgoaykpLnVwZGF0ZSgpLHYuZGlzYWJsZWQ9ay5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuISFhLmRpc2FibGVkfSksIXcpe3ZhciBNO3c9e307Zm9yKE0gaW4gdil3W01dPXZbTV1pbnN0YW5jZW9mIEFycmF5P3ZbTV0uc2xpY2UoMCk6dltNXX1pZighKGsmJmsubGVuZ3RoJiZrLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZXMubGVuZ3RofSkubGVuZ3RoKSlyZXR1cm4gYS51dGlscy5ub0RhdGEoYix4KSxiO3guc2VsZWN0QWxsKFwiLm52LW5vRGF0YVwiKS5yZW1vdmUoKSxjPWUueFNjYWxlKCksZD1lLnlTY2FsZSgpO3ZhciBOPXguc2VsZWN0QWxsKFwiZy5udi13cmFwLm52LXN0YWNrZWRBcmVhQ2hhcnRcIikuZGF0YShba10pLE89Ti5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtc3RhY2tlZEFyZWFDaGFydFwiKS5hcHBlbmQoXCJnXCIpLFA9Ti5zZWxlY3QoXCJnXCIpO2lmKE8uYXBwZW5kKFwicmVjdFwiKS5zdHlsZShcIm9wYWNpdHlcIiwwKSxPLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudi14IG52LWF4aXNcIiksTy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYteSBudi1heGlzXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXN0YWNrZWRXcmFwXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWxlZ2VuZFdyYXBcIiksTy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLFwibnYtY29udHJvbHNXcmFwXCIpLE8uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LWludGVyYWN0aXZlXCIpLFAuc2VsZWN0KFwicmVjdFwiKS5hdHRyKFwid2lkdGhcIixLKS5hdHRyKFwiaGVpZ2h0XCIsTCkscSl7dmFyIFE9cD9LLXo6SztoLndpZHRoKFEpLFAuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuZGF0dW0oaykuY2FsbChoKSxsLnRvcCE9aC5oZWlnaHQoKSYmKGwudG9wPWguaGVpZ2h0KCksTD1hLnV0aWxzLmF2YWlsYWJsZUhlaWdodChuLHgsbCkpLFAuc2VsZWN0KFwiLm52LWxlZ2VuZFdyYXBcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiKyhLLVEpK1wiLFwiKy1sLnRvcCtcIilcIil9aWYocCl7dmFyIFI9W3trZXk6Qi5zdGFja2VkfHxcIlN0YWNrZWRcIixtZXRhS2V5OlwiU3RhY2tlZFwiLGRpc2FibGVkOlwic3RhY2tcIiE9ZS5zdHlsZSgpLHN0eWxlOlwic3RhY2tcIn0se2tleTpCLnN0cmVhbXx8XCJTdHJlYW1cIixtZXRhS2V5OlwiU3RyZWFtXCIsZGlzYWJsZWQ6XCJzdHJlYW1cIiE9ZS5zdHlsZSgpLHN0eWxlOlwic3RyZWFtXCJ9LHtrZXk6Qi5leHBhbmRlZHx8XCJFeHBhbmRlZFwiLG1ldGFLZXk6XCJFeHBhbmRlZFwiLGRpc2FibGVkOlwiZXhwYW5kXCIhPWUuc3R5bGUoKSxzdHlsZTpcImV4cGFuZFwifSx7a2V5OkIuc3RhY2tfcGVyY2VudHx8XCJTdGFjayAlXCIsbWV0YUtleTpcIlN0YWNrX1BlcmNlbnRcIixkaXNhYmxlZDpcInN0YWNrX3BlcmNlbnRcIiE9ZS5zdHlsZSgpLHN0eWxlOlwic3RhY2tfcGVyY2VudFwifV07ej1BLmxlbmd0aC8zKjI2MCxSPVIuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybi0xIT09QS5pbmRleE9mKGEubWV0YUtleSl9KSxpLndpZHRoKHopLmNvbG9yKFtcIiM0NDRcIixcIiM0NDRcIixcIiM0NDRcIl0pLFAuc2VsZWN0KFwiLm52LWNvbnRyb2xzV3JhcFwiKS5kYXR1bShSKS5jYWxsKGkpLGwudG9wIT1NYXRoLm1heChpLmhlaWdodCgpLGguaGVpZ2h0KCkpJiYobC50b3A9TWF0aC5tYXgoaS5oZWlnaHQoKSxoLmhlaWdodCgpKSxMPWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KG4seCxsKSksUC5zZWxlY3QoXCIubnYtY29udHJvbHNXcmFwXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZSgwLFwiKy1sLnRvcCtcIilcIil9Ti5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrbC5sZWZ0K1wiLFwiK2wudG9wK1wiKVwiKSx0JiZQLnNlbGVjdChcIi5udi15Lm52LWF4aXNcIikuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK0srXCIsMClcIiksdSYmKGoud2lkdGgoSykuaGVpZ2h0KEwpLm1hcmdpbih7bGVmdDpsLmxlZnQsdG9wOmwudG9wfSkuc3ZnQ29udGFpbmVyKHgpLnhTY2FsZShjKSxOLnNlbGVjdChcIi5udi1pbnRlcmFjdGl2ZVwiKS5jYWxsKGopKSxlLndpZHRoKEspLmhlaWdodChMKTt2YXIgUz1QLnNlbGVjdChcIi5udi1zdGFja2VkV3JhcFwiKS5kYXR1bShrKTtpZihTLnRyYW5zaXRpb24oKS5jYWxsKGUpLHImJihmLnNjYWxlKGMpLl90aWNrcyhhLnV0aWxzLmNhbGNUaWNrc1goSy8xMDAsaykpLnRpY2tTaXplKC1MLDApLFAuc2VsZWN0KFwiLm52LXgubnYtYXhpc1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoMCxcIitMK1wiKVwiKSxQLnNlbGVjdChcIi5udi14Lm52LWF4aXNcIikudHJhbnNpdGlvbigpLmR1cmF0aW9uKDApLmNhbGwoZikpLHMpe3ZhciBUO2lmKFQ9XCJ3aWdnbGVcIj09PWUub2Zmc2V0KCk/MDphLnV0aWxzLmNhbGNUaWNrc1koTC8zNixrKSxnLnNjYWxlKGQpLl90aWNrcyhUKS50aWNrU2l6ZSgtSywwKSxcImV4cGFuZFwiPT09ZS5zdHlsZSgpfHxcInN0YWNrX3BlcmNlbnRcIj09PWUuc3R5bGUoKSl7dmFyIFU9Zy50aWNrRm9ybWF0KCk7RCYmVT09PUp8fChEPVUpLGcudGlja0Zvcm1hdChKKX1lbHNlIEQmJihnLnRpY2tGb3JtYXQoRCksRD1udWxsKTtQLnNlbGVjdChcIi5udi15Lm52LWF4aXNcIikudHJhbnNpdGlvbigpLmR1cmF0aW9uKDApLmNhbGwoZyl9ZS5kaXNwYXRjaC5vbihcImFyZWFDbGljay50b2dnbGVcIixmdW5jdGlvbihhKXtrLmZvckVhY2goMT09PWsuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSkubGVuZ3RoP2Z1bmN0aW9uKGEpe2EuZGlzYWJsZWQ9ITF9OmZ1bmN0aW9uKGIsYyl7Yi5kaXNhYmxlZD1jIT1hLnNlcmllc0luZGV4fSksdi5kaXNhYmxlZD1rLm1hcChmdW5jdGlvbihhKXtyZXR1cm4hIWEuZGlzYWJsZWR9KSx5LnN0YXRlQ2hhbmdlKHYpLGIudXBkYXRlKCl9KSxoLmRpc3BhdGNoLm9uKFwic3RhdGVDaGFuZ2VcIixmdW5jdGlvbihhKXtmb3IodmFyIGMgaW4gYSl2W2NdPWFbY107eS5zdGF0ZUNoYW5nZSh2KSxiLnVwZGF0ZSgpfSksaS5kaXNwYXRjaC5vbihcImxlZ2VuZENsaWNrXCIsZnVuY3Rpb24oYSl7YS5kaXNhYmxlZCYmKFI9Ui5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9ITAsYX0pLGEuZGlzYWJsZWQ9ITEsZS5zdHlsZShhLnN0eWxlKSx2LnN0eWxlPWUuc3R5bGUoKSx5LnN0YXRlQ2hhbmdlKHYpLGIudXBkYXRlKCkpfSksai5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW1vdmVcIixmdW5jdGlvbihjKXtlLmNsZWFySGlnaGxpZ2h0cygpO3ZhciBkLGcsaCxpPVtdO2lmKGsuZmlsdGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuc2VyaWVzSW5kZXg9YiwhYS5kaXNhYmxlZH0pLmZvckVhY2goZnVuY3Rpb24oZixqKXtnPWEuaW50ZXJhY3RpdmVCaXNlY3QoZi52YWx1ZXMsYy5wb2ludFhWYWx1ZSxiLngoKSk7dmFyIGs9Zi52YWx1ZXNbZ10sbD1iLnkoKShrLGcpO2lmKG51bGwhPWwmJmUuaGlnaGxpZ2h0UG9pbnQoaixnLCEwKSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygayl7XCJ1bmRlZmluZWRcIj09dHlwZW9mIGQmJihkPWspLFwidW5kZWZpbmVkXCI9PXR5cGVvZiBoJiYoaD1iLnhTY2FsZSgpKGIueCgpKGssZykpKTt2YXIgbT1cImV4cGFuZFwiPT1lLnN0eWxlKCk/ay5kaXNwbGF5Lnk6Yi55KCkoayxnKTtpLnB1c2goe2tleTpmLmtleSx2YWx1ZTptLGNvbG9yOm8oZixmLnNlcmllc0luZGV4KSxzdGFja2VkVmFsdWU6ay5kaXNwbGF5fSl9fSksaS5yZXZlcnNlKCksaS5sZW5ndGg+Mil7dmFyIG09Yi55U2NhbGUoKS5pbnZlcnQoYy5tb3VzZVkpLG49bnVsbDtpLmZvckVhY2goZnVuY3Rpb24oYSxiKXttPU1hdGguYWJzKG0pO3ZhciBjPU1hdGguYWJzKGEuc3RhY2tlZFZhbHVlLnkwKSxkPU1hdGguYWJzKGEuc3RhY2tlZFZhbHVlLnkpO3JldHVybiBtPj1jJiZkK2M+PW0/dm9pZChuPWIpOnZvaWQgMH0pLG51bGwhPW4mJihpW25dLmhpZ2hsaWdodD0hMCl9dmFyIHA9Zi50aWNrRm9ybWF0KCkoYi54KCkoZCxnKSkscT1qLnRvb2x0aXAudmFsdWVGb3JtYXR0ZXIoKTtcImV4cGFuZFwiPT09ZS5zdHlsZSgpfHxcInN0YWNrX3BlcmNlbnRcIj09PWUuc3R5bGUoKT8oRXx8KEU9cSkscT1kMy5mb3JtYXQoXCIuMSVcIikpOkUmJihxPUUsRT1udWxsKSxqLnRvb2x0aXAucG9zaXRpb24oe2xlZnQ6aCtsLmxlZnQsdG9wOmMubW91c2VZK2wudG9wfSkuY2hhcnRDb250YWluZXIoRi5wYXJlbnROb2RlKS52YWx1ZUZvcm1hdHRlcihxKS5kYXRhKHt2YWx1ZTpwLHNlcmllczppfSkoKSxqLnJlbmRlckd1aWRlTGluZShoKX0pLGouZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXRcIixmdW5jdGlvbigpe2UuY2xlYXJIaWdobGlnaHRzKCl9KSx5Lm9uKFwiY2hhbmdlU3RhdGVcIixmdW5jdGlvbihhKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5kaXNhYmxlZCYmay5sZW5ndGg9PT1hLmRpc2FibGVkLmxlbmd0aCYmKGsuZm9yRWFjaChmdW5jdGlvbihiLGMpe2IuZGlzYWJsZWQ9YS5kaXNhYmxlZFtjXX0pLHYuZGlzYWJsZWQ9YS5kaXNhYmxlZCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuc3R5bGUmJihlLnN0eWxlKGEuc3R5bGUpLEc9YS5zdHlsZSksYi51cGRhdGUoKX0pfSksRi5yZW5kZXJFbmQoXCJzdGFja2VkIEFyZWEgY2hhcnQgaW1tZWRpYXRlXCIpLGJ9dmFyIGMsZCxlPWEubW9kZWxzLnN0YWNrZWRBcmVhKCksZj1hLm1vZGVscy5heGlzKCksZz1hLm1vZGVscy5heGlzKCksaD1hLm1vZGVscy5sZWdlbmQoKSxpPWEubW9kZWxzLmxlZ2VuZCgpLGo9YS5pbnRlcmFjdGl2ZUd1aWRlbGluZSgpLGs9YS5tb2RlbHMudG9vbHRpcCgpLGw9e3RvcDozMCxyaWdodDoyNSxib3R0b206NTAsbGVmdDo2MH0sbT1udWxsLG49bnVsbCxvPWEudXRpbHMuZGVmYXVsdENvbG9yKCkscD0hMCxxPSEwLHI9ITAscz0hMCx0PSExLHU9ITEsdj1hLnV0aWxzLnN0YXRlKCksdz1udWxsLHg9bnVsbCx5PWQzLmRpc3BhdGNoKFwic3RhdGVDaGFuZ2VcIixcImNoYW5nZVN0YXRlXCIsXCJyZW5kZXJFbmRcIiksej0yNTAsQT1bXCJTdGFja2VkXCIsXCJTdHJlYW1cIixcIkV4cGFuZGVkXCJdLEI9e30sQz0yNTA7di5zdHlsZT1lLnN0eWxlKCksZi5vcmllbnQoXCJib3R0b21cIikudGlja1BhZGRpbmcoNyksZy5vcmllbnQodD9cInJpZ2h0XCI6XCJsZWZ0XCIpLGsuaGVhZGVyRm9ybWF0dGVyKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGYudGlja0Zvcm1hdCgpKGEsYil9KS52YWx1ZUZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBnLnRpY2tGb3JtYXQoKShhLGIpfSksai50b29sdGlwLmhlYWRlckZvcm1hdHRlcihmdW5jdGlvbihhLGIpe3JldHVybiBmLnRpY2tGb3JtYXQoKShhLGIpfSkudmFsdWVGb3JtYXR0ZXIoZnVuY3Rpb24oYSxiKXtyZXR1cm4gZy50aWNrRm9ybWF0KCkoYSxiKX0pO3ZhciBEPW51bGwsRT1udWxsO2kudXBkYXRlU3RhdGUoITEpO3ZhciBGPWEudXRpbHMucmVuZGVyV2F0Y2goeSksRz1lLnN0eWxlKCksSD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm57YWN0aXZlOmEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiFhLmRpc2FibGVkfSksc3R5bGU6ZS5zdHlsZSgpfX19LEk9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMCE9PWIuc3R5bGUmJihHPWIuc3R5bGUpLHZvaWQgMCE9PWIuYWN0aXZlJiZhLmZvckVhY2goZnVuY3Rpb24oYSxjKXthLmRpc2FibGVkPSFiLmFjdGl2ZVtjXX0pfX0sSj1kMy5mb3JtYXQoXCIlXCIpO3JldHVybiBlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7YS5wb2ludC54PWUueCgpKGEucG9pbnQpLGEucG9pbnQueT1lLnkoKShhLnBvaW50KSxrLmRhdGEoYSkucG9zaXRpb24oYS5wb3MpLmhpZGRlbighMSl9KSxlLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3V0LnRvb2x0aXBcIixmdW5jdGlvbigpe2suaGlkZGVuKCEwKX0pLGIuZGlzcGF0Y2g9eSxiLnN0YWNrZWQ9ZSxiLmxlZ2VuZD1oLGIuY29udHJvbHM9aSxiLnhBeGlzPWYsYi55QXhpcz1nLGIuaW50ZXJhY3RpdmVMYXllcj1qLGIudG9vbHRpcD1rLGIuZGlzcGF0Y2g9eSxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfSxzZXQ6ZnVuY3Rpb24oYSl7bT1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKGEpe249YX19LHNob3dMZWdlbmQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBxfSxzZXQ6ZnVuY3Rpb24oYSl7cT1hfX0sc2hvd1hBeGlzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKGEpe3I9YX19LHNob3dZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbihhKXtzPWF9fSxkZWZhdWx0U3RhdGU6e2dldDpmdW5jdGlvbigpe3JldHVybiB3fSxzZXQ6ZnVuY3Rpb24oYSl7dz1hfX0sbm9EYXRhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geH0sc2V0OmZ1bmN0aW9uKGEpe3g9YX19LHNob3dDb250cm9sczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbihhKXtwPWF9fSxjb250cm9sTGFiZWxzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQn0sc2V0OmZ1bmN0aW9uKGEpe0I9YX19LGNvbnRyb2xPcHRpb25zOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQX0sc2V0OmZ1bmN0aW9uKGEpe0E9YX19LHRvb2x0aXBzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5lbmFibGVkKCl9LHNldDpmdW5jdGlvbihiKXthLmRlcHJlY2F0ZWQoXCJ0b29sdGlwc1wiLFwidXNlIGNoYXJ0LnRvb2x0aXAuZW5hYmxlZCgpIGluc3RlYWRcIiksay5lbmFibGVkKCEhYil9fSx0b29sdGlwQ29udGVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGsuY29udGVudEdlbmVyYXRvcigpfSxzZXQ6ZnVuY3Rpb24oYil7YS5kZXByZWNhdGVkKFwidG9vbHRpcENvbnRlbnRcIixcInVzZSBjaGFydC50b29sdGlwLmNvbnRlbnRHZW5lcmF0b3IoKSBpbnN0ZWFkXCIpLGsuY29udGVudEdlbmVyYXRvcihiKX19LG1hcmdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9LHNldDpmdW5jdGlvbihhKXtsLnRvcD12b2lkIDAhPT1hLnRvcD9hLnRvcDpsLnRvcCxsLnJpZ2h0PXZvaWQgMCE9PWEucmlnaHQ/YS5yaWdodDpsLnJpZ2h0LGwuYm90dG9tPXZvaWQgMCE9PWEuYm90dG9tP2EuYm90dG9tOmwuYm90dG9tLGwubGVmdD12b2lkIDAhPT1hLmxlZnQ/YS5sZWZ0OmwubGVmdH19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQ30sc2V0OmZ1bmN0aW9uKGEpe0M9YSxGLnJlc2V0KEMpLGUuZHVyYXRpb24oQyksZi5kdXJhdGlvbihDKSxnLmR1cmF0aW9uKEMpfX0sY29sb3I6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24oYil7bz1hLnV0aWxzLmdldENvbG9yKGIpLGguY29sb3IobyksZS5jb2xvcihvKX19LHJpZ2h0QWxpZ25ZQXhpczp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihhKXt0PWEsZy5vcmllbnQodD9cInJpZ2h0XCI6XCJsZWZ0XCIpfX0sdXNlSW50ZXJhY3RpdmVHdWlkZWxpbmU6e2dldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oYSl7dT0hIWEsYi5pbnRlcmFjdGl2ZSghYSksYi51c2VWb3Jvbm9pKCFhKSxlLnNjYXR0ZXIuaW50ZXJhY3RpdmUoIWEpfX19KSxhLnV0aWxzLmluaGVyaXRPcHRpb25zKGIsZSksYS51dGlscy5pbml0T3B0aW9ucyhiKSxifSxhLm1vZGVscy5zdW5idXJzdD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIodSl7cmV0dXJuIHQucmVzZXQoKSx1LmVhY2goZnVuY3Rpb24oYil7ZnVuY3Rpb24gdChhKXthLngwPWEueCxhLmR4MD1hLmR4fWZ1bmN0aW9uIHUoYSl7dmFyIGI9ZDMuaW50ZXJwb2xhdGUocC5kb21haW4oKSxbYS54LGEueCthLmR4XSksYz1kMy5pbnRlcnBvbGF0ZShxLmRvbWFpbigpLFthLnksMV0pLGQ9ZDMuaW50ZXJwb2xhdGUocS5yYW5nZSgpLFthLnk/MjA6MCx5XSk7cmV0dXJuIGZ1bmN0aW9uKGEsZSl7cmV0dXJuIGU/ZnVuY3Rpb24oKXtyZXR1cm4gcyhhKX06ZnVuY3Rpb24oZSl7cmV0dXJuIHAuZG9tYWluKGIoZSkpLHEuZG9tYWluKGMoZSkpLnJhbmdlKGQoZSkpLHMoYSl9fX1sPWQzLnNlbGVjdCh0aGlzKTt2YXIgdix3PWEudXRpbHMuYXZhaWxhYmxlV2lkdGgoZyxsLGYpLHg9YS51dGlscy5hdmFpbGFibGVIZWlnaHQoaCxsLGYpLHk9TWF0aC5taW4odyx4KS8yO2EudXRpbHMuaW5pdFNWRyhsKTt2YXIgej1sLnNlbGVjdEFsbChcIi5udi13cmFwLm52LXN1bmJ1cnN0XCIpLmRhdGEoYiksQT16LmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52ZDMgbnYtd3JhcCBudi1zdW5idXJzdCBudi1jaGFydC1cIitrKSxCPUEuc2VsZWN0QWxsKFwibnYtc3VuYnVyc3RcIik7ei5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrdy8yK1wiLFwiK3gvMitcIilcIiksbC5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSxiKXtvLmNoYXJ0Q2xpY2soe2RhdGE6YSxpbmRleDpiLHBvczpkMy5ldmVudCxpZDprfSl9KSxxLnJhbmdlKFswLHldKSxjPWN8fGIsZT1iWzBdLHIudmFsdWUoaltpXXx8ai5jb3VudCksdj1CLmRhdGEoci5ub2RlcykuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIscykuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oYSl7cmV0dXJuIG0oKGEuY2hpbGRyZW4/YTphLnBhcmVudCkubmFtZSl9KS5zdHlsZShcInN0cm9rZVwiLFwiI0ZGRlwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oYSl7ZCE9PWMmJmMhPT1hJiYoZD1jKSxjPWEsdi50cmFuc2l0aW9uKCkuZHVyYXRpb24obikuYXR0clR3ZWVuKFwiZFwiLHUoYSkpfSkuZWFjaCh0KS5vbihcImRibGNsaWNrXCIsZnVuY3Rpb24oYSl7ZC5wYXJlbnQ9PWEmJnYudHJhbnNpdGlvbigpLmR1cmF0aW9uKG4pLmF0dHJUd2VlbihcImRcIix1KGUpKX0pLmVhY2godCkub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihhKXtkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhvdmVyXCIsITApLnN0eWxlKFwib3BhY2l0eVwiLC44KSxvLmVsZW1lbnRNb3VzZW92ZXIoe2RhdGE6YSxjb2xvcjpkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJmaWxsXCIpfSl9KS5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oYSl7ZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJob3ZlclwiLCExKS5zdHlsZShcIm9wYWNpdHlcIiwxKSxvLmVsZW1lbnRNb3VzZW91dCh7ZGF0YTphfSl9KS5vbihcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKGEpe28uZWxlbWVudE1vdXNlbW92ZSh7ZGF0YTphfSl9KX0pLHQucmVuZGVyRW5kKFwic3VuYnVyc3QgaW1tZWRpYXRlXCIpLGJ9dmFyIGMsZCxlLGY9e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfSxnPW51bGwsaD1udWxsLGk9XCJjb3VudFwiLGo9e2NvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIDF9LHNpemU6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuc2l6ZX19LGs9TWF0aC5mbG9vcigxZTQqTWF0aC5yYW5kb20oKSksbD1udWxsLG09YS51dGlscy5kZWZhdWx0Q29sb3IoKSxuPTUwMCxvPWQzLmRpc3BhdGNoKFwiY2hhcnRDbGlja1wiLFwiZWxlbWVudENsaWNrXCIsXCJlbGVtZW50RGJsQ2xpY2tcIixcImVsZW1lbnRNb3VzZW1vdmVcIixcImVsZW1lbnRNb3VzZW92ZXJcIixcImVsZW1lbnRNb3VzZW91dFwiLFwicmVuZGVyRW5kXCIpLHA9ZDMuc2NhbGUubGluZWFyKCkucmFuZ2UoWzAsMipNYXRoLlBJXSkscT1kMy5zY2FsZS5zcXJ0KCkscj1kMy5sYXlvdXQucGFydGl0aW9uKCkuc29ydChudWxsKS52YWx1ZShmdW5jdGlvbigpe3JldHVybiAxfSkscz1kMy5zdmcuYXJjKCkuc3RhcnRBbmdsZShmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5tYXgoMCxNYXRoLm1pbigyKk1hdGguUEkscChhLngpKSl9KS5lbmRBbmdsZShmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5tYXgoMCxNYXRoLm1pbigyKk1hdGguUEkscChhLngrYS5keCkpKX0pLmlubmVyUmFkaXVzKGZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLm1heCgwLHEoYS55KSl9KS5vdXRlclJhZGl1cyhmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5tYXgoMCxxKGEueSthLmR5KSl9KSx0PWEudXRpbHMucmVuZGVyV2F0Y2gobyk7cmV0dXJuIGIuZGlzcGF0Y2g9byxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7d2lkdGg6e2dldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSl7Zz1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEpe2g9YX19LG1vZGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24oYSl7aT1hfX0saWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXQ6ZnVuY3Rpb24oYSl7az1hfX0sZHVyYXRpb246e2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24oYSl7bj1hfX0sbWFyZ2luOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn0sc2V0OmZ1bmN0aW9uKGEpe2YudG9wPXZvaWQgMCE9YS50b3A/YS50b3A6Zi50b3AsZi5yaWdodD12b2lkIDAhPWEucmlnaHQ/YS5yaWdodDpmLnJpZ2h0LGYuYm90dG9tPXZvaWQgMCE9YS5ib3R0b20/YS5ib3R0b206Zi5ib3R0b20sZi5sZWZ0PXZvaWQgMCE9YS5sZWZ0P2EubGVmdDpmLmxlZnR9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG19LHNldDpmdW5jdGlvbihiKXttPWEudXRpbHMuZ2V0Q29sb3IoYil9fX0pLGEudXRpbHMuaW5pdE9wdGlvbnMoYiksYn0sYS5tb2RlbHMuc3VuYnVyc3RDaGFydD1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoZCl7cmV0dXJuIG0ucmVzZXQoKSxtLm1vZGVscyhjKSxkLmVhY2goZnVuY3Rpb24oZCl7dmFyIGg9ZDMuc2VsZWN0KHRoaXMpO2EudXRpbHMuaW5pdFNWRyhoKTt2YXIgaT1hLnV0aWxzLmF2YWlsYWJsZVdpZHRoKGYsaCxlKSxqPWEudXRpbHMuYXZhaWxhYmxlSGVpZ2h0KGcsaCxlKTtpZihiLnVwZGF0ZT1mdW5jdGlvbigpezA9PT1rP2guY2FsbChiKTpoLnRyYW5zaXRpb24oKS5kdXJhdGlvbihrKS5jYWxsKGIpfSxiLmNvbnRhaW5lcj10aGlzLCFkfHwhZC5sZW5ndGgpcmV0dXJuIGEudXRpbHMubm9EYXRhKGIsaCksYjtoLnNlbGVjdEFsbChcIi5udi1ub0RhdGFcIikucmVtb3ZlKCk7dmFyIGw9aC5zZWxlY3RBbGwoXCJnLm52LXdyYXAubnYtc3VuYnVyc3RDaGFydFwiKS5kYXRhKGQpLG09bC5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsXCJudmQzIG52LXdyYXAgbnYtc3VuYnVyc3RDaGFydFwiKS5hcHBlbmQoXCJnXCIpLG49bC5zZWxlY3QoXCJnXCIpO20uYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcIm52LXN1bmJ1cnN0V3JhcFwiKSxsLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitlLmxlZnQrXCIsXCIrZS50b3ArXCIpXCIpLGMud2lkdGgoaSkuaGVpZ2h0KGopO3ZhciBvPW4uc2VsZWN0KFwiLm52LXN1bmJ1cnN0V3JhcFwiKS5kYXR1bShkKTtkMy50cmFuc2l0aW9uKG8pLmNhbGwoYyl9KSxtLnJlbmRlckVuZChcInN1bmJ1cnN0Q2hhcnQgaW1tZWRpYXRlXCIpLGJ9dmFyIGM9YS5tb2RlbHMuc3VuYnVyc3QoKSxkPWEubW9kZWxzLnRvb2x0aXAoKSxlPXt0b3A6MzAscmlnaHQ6MjAsYm90dG9tOjIwLGxlZnQ6MjB9LGY9bnVsbCxnPW51bGwsaD1hLnV0aWxzLmRlZmF1bHRDb2xvcigpLGk9KE1hdGgucm91bmQoMWU1Kk1hdGgucmFuZG9tKCkpLG51bGwpLGo9bnVsbCxrPTI1MCxsPWQzLmRpc3BhdGNoKFwidG9vbHRpcFNob3dcIixcInRvb2x0aXBIaWRlXCIsXCJzdGF0ZUNoYW5nZVwiLFwiY2hhbmdlU3RhdGVcIixcInJlbmRlckVuZFwiKSxtPWEudXRpbHMucmVuZGVyV2F0Y2gobCk7cmV0dXJuIGQuaGVhZGVyRW5hYmxlZCghMSkuZHVyYXRpb24oMCkudmFsdWVGb3JtYXR0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSxjLmRpc3BhdGNoLm9uKFwiZWxlbWVudE1vdXNlb3Zlci50b29sdGlwXCIsZnVuY3Rpb24oYSl7YS5zZXJpZXM9e2tleTphLmRhdGEubmFtZSx2YWx1ZTphLmRhdGEuc2l6ZSxjb2xvcjphLmNvbG9yfSxkLmRhdGEoYSkuaGlkZGVuKCExKX0pLGMuZGlzcGF0Y2gub24oXCJlbGVtZW50TW91c2VvdXQudG9vbHRpcFwiLGZ1bmN0aW9uKCl7ZC5oaWRkZW4oITApfSksYy5kaXNwYXRjaC5vbihcImVsZW1lbnRNb3VzZW1vdmUudG9vbHRpcFwiLGZ1bmN0aW9uKCl7ZC5wb3NpdGlvbih7dG9wOmQzLmV2ZW50LnBhZ2VZLGxlZnQ6ZDMuZXZlbnQucGFnZVh9KSgpfSksYi5kaXNwYXRjaD1sLGIuc3VuYnVyc3Q9YyxiLnRvb2x0aXA9ZCxiLm9wdGlvbnM9YS51dGlscy5vcHRpb25zRnVuYy5iaW5kKGIpLGIuX29wdGlvbnM9T2JqZWN0LmNyZWF0ZSh7fSx7bm9EYXRhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gan0sc2V0OmZ1bmN0aW9uKGEpe2o9YX19LGRlZmF1bHRTdGF0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbihhKXtpPWF9fSxjb2xvcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhKXtoPWEsYy5jb2xvcihoKX19LGR1cmF0aW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4ga30sc2V0OmZ1bmN0aW9uKGEpe2s9YSxtLnJlc2V0KGspLGMuZHVyYXRpb24oayl9fSxtYXJnaW46e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7ZS50b3A9dm9pZCAwIT09YS50b3A/YS50b3A6ZS50b3AsZS5yaWdodD12b2lkIDAhPT1hLnJpZ2h0P2EucmlnaHQ6ZS5yaWdodCxlLmJvdHRvbT12b2lkIDAhPT1hLmJvdHRvbT9hLmJvdHRvbTplLmJvdHRvbSxlLmxlZnQ9dm9pZCAwIT09YS5sZWZ0P2EubGVmdDplLmxlZnR9fX0pLGEudXRpbHMuaW5oZXJpdE9wdGlvbnMoYixjKSxhLnV0aWxzLmluaXRPcHRpb25zKGIpLGJ9LGEudmVyc2lvbj1cIjEuOC4xXCJ9KCk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/nv.d3.min.js\n");

/***/ })

/******/ })));