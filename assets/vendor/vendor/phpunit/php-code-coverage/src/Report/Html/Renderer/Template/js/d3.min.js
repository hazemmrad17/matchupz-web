(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/d3.min.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/d3.min.js":
/*!*****************************************************************************************!*\
  !*** ./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/d3.min.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n!function () {\n  function n(n) {\n    return n && (n.ownerDocument || n.document || n).documentElement;\n  }\n\n  function t(n) {\n    return n && (n.ownerDocument && n.ownerDocument.defaultView || n.document && n || n.defaultView);\n  }\n\n  function e(n, t) {\n    return t > n ? -1 : n > t ? 1 : n >= t ? 0 : NaN;\n  }\n\n  function r(n) {\n    return null === n ? NaN : +n;\n  }\n\n  function i(n) {\n    return !isNaN(n);\n  }\n\n  function u(n) {\n    return {\n      left: function left(t, e, r, i) {\n        for (arguments.length < 3 && (r = 0), arguments.length < 4 && (i = t.length); i > r;) {\n          var u = r + i >>> 1;\n          n(t[u], e) < 0 ? r = u + 1 : i = u;\n        }\n\n        return r;\n      },\n      right: function right(t, e, r, i) {\n        for (arguments.length < 3 && (r = 0), arguments.length < 4 && (i = t.length); i > r;) {\n          var u = r + i >>> 1;\n          n(t[u], e) > 0 ? i = u : r = u + 1;\n        }\n\n        return r;\n      }\n    };\n  }\n\n  function o(n) {\n    return n.length;\n  }\n\n  function a(n) {\n    for (var t = 1; n * t % 1;) {\n      t *= 10;\n    }\n\n    return t;\n  }\n\n  function l(n, t) {\n    for (var e in t) {\n      Object.defineProperty(n.prototype, e, {\n        value: t[e],\n        enumerable: !1\n      });\n    }\n  }\n\n  function c() {\n    this._ = Object.create(null);\n  }\n\n  function f(n) {\n    return (n += \"\") === bo || n[0] === _o ? _o + n : n;\n  }\n\n  function s(n) {\n    return (n += \"\")[0] === _o ? n.slice(1) : n;\n  }\n\n  function h(n) {\n    return f(n) in this._;\n  }\n\n  function p(n) {\n    return (n = f(n)) in this._ && delete this._[n];\n  }\n\n  function g() {\n    var n = [];\n\n    for (var t in this._) {\n      n.push(s(t));\n    }\n\n    return n;\n  }\n\n  function v() {\n    var n = 0;\n\n    for (var t in this._) {\n      ++n;\n    }\n\n    return n;\n  }\n\n  function d() {\n    for (var n in this._) {\n      return !1;\n    }\n\n    return !0;\n  }\n\n  function y() {\n    this._ = Object.create(null);\n  }\n\n  function m(n) {\n    return n;\n  }\n\n  function M(n, t, e) {\n    return function () {\n      var r = e.apply(t, arguments);\n      return r === t ? n : r;\n    };\n  }\n\n  function x(n, t) {\n    if (t in n) return t;\n    t = t.charAt(0).toUpperCase() + t.slice(1);\n\n    for (var e = 0, r = wo.length; r > e; ++e) {\n      var i = wo[e] + t;\n      if (i in n) return i;\n    }\n  }\n\n  function b() {}\n\n  function _() {}\n\n  function w(n) {\n    function t() {\n      for (var t, r = e, i = -1, u = r.length; ++i < u;) {\n        (t = r[i].on) && t.apply(this, arguments);\n      }\n\n      return n;\n    }\n\n    var e = [],\n        r = new c();\n    return t.on = function (t, i) {\n      var u,\n          o = r.get(t);\n      return arguments.length < 2 ? o && o.on : (o && (o.on = null, e = e.slice(0, u = e.indexOf(o)).concat(e.slice(u + 1)), r.remove(t)), i && e.push(r.set(t, {\n        on: i\n      })), n);\n    }, t;\n  }\n\n  function S() {\n    ao.event.preventDefault();\n  }\n\n  function k() {\n    for (var n, t = ao.event; n = t.sourceEvent;) {\n      t = n;\n    }\n\n    return t;\n  }\n\n  function N(n) {\n    for (var t = new _(), e = 0, r = arguments.length; ++e < r;) {\n      t[arguments[e]] = w(t);\n    }\n\n    return t.of = function (e, r) {\n      return function (i) {\n        try {\n          var u = i.sourceEvent = ao.event;\n          i.target = n, ao.event = i, t[i.type].apply(e, r);\n        } finally {\n          ao.event = u;\n        }\n      };\n    }, t;\n  }\n\n  function E(n) {\n    return ko(n, Co), n;\n  }\n\n  function A(n) {\n    return \"function\" == typeof n ? n : function () {\n      return No(n, this);\n    };\n  }\n\n  function C(n) {\n    return \"function\" == typeof n ? n : function () {\n      return Eo(n, this);\n    };\n  }\n\n  function z(n, t) {\n    function e() {\n      this.removeAttribute(n);\n    }\n\n    function r() {\n      this.removeAttributeNS(n.space, n.local);\n    }\n\n    function i() {\n      this.setAttribute(n, t);\n    }\n\n    function u() {\n      this.setAttributeNS(n.space, n.local, t);\n    }\n\n    function o() {\n      var e = t.apply(this, arguments);\n      null == e ? this.removeAttribute(n) : this.setAttribute(n, e);\n    }\n\n    function a() {\n      var e = t.apply(this, arguments);\n      null == e ? this.removeAttributeNS(n.space, n.local) : this.setAttributeNS(n.space, n.local, e);\n    }\n\n    return n = ao.ns.qualify(n), null == t ? n.local ? r : e : \"function\" == typeof t ? n.local ? a : o : n.local ? u : i;\n  }\n\n  function L(n) {\n    return n.trim().replace(/\\s+/g, \" \");\n  }\n\n  function q(n) {\n    return new RegExp(\"(?:^|\\\\s+)\" + ao.requote(n) + \"(?:\\\\s+|$)\", \"g\");\n  }\n\n  function T(n) {\n    return (n + \"\").trim().split(/^|\\s+/);\n  }\n\n  function R(n, t) {\n    function e() {\n      for (var e = -1; ++e < i;) {\n        n[e](this, t);\n      }\n    }\n\n    function r() {\n      for (var e = -1, r = t.apply(this, arguments); ++e < i;) {\n        n[e](this, r);\n      }\n    }\n\n    n = T(n).map(D);\n    var i = n.length;\n    return \"function\" == typeof t ? r : e;\n  }\n\n  function D(n) {\n    var t = q(n);\n    return function (e, r) {\n      if (i = e.classList) return r ? i.add(n) : i.remove(n);\n      var i = e.getAttribute(\"class\") || \"\";\n      r ? (t.lastIndex = 0, t.test(i) || e.setAttribute(\"class\", L(i + \" \" + n))) : e.setAttribute(\"class\", L(i.replace(t, \" \")));\n    };\n  }\n\n  function P(n, t, e) {\n    function r() {\n      this.style.removeProperty(n);\n    }\n\n    function i() {\n      this.style.setProperty(n, t, e);\n    }\n\n    function u() {\n      var r = t.apply(this, arguments);\n      null == r ? this.style.removeProperty(n) : this.style.setProperty(n, r, e);\n    }\n\n    return null == t ? r : \"function\" == typeof t ? u : i;\n  }\n\n  function U(n, t) {\n    function e() {\n      delete this[n];\n    }\n\n    function r() {\n      this[n] = t;\n    }\n\n    function i() {\n      var e = t.apply(this, arguments);\n      null == e ? delete this[n] : this[n] = e;\n    }\n\n    return null == t ? e : \"function\" == typeof t ? i : r;\n  }\n\n  function j(n) {\n    function t() {\n      var t = this.ownerDocument,\n          e = this.namespaceURI;\n      return e === zo && t.documentElement.namespaceURI === zo ? t.createElement(n) : t.createElementNS(e, n);\n    }\n\n    function e() {\n      return this.ownerDocument.createElementNS(n.space, n.local);\n    }\n\n    return \"function\" == typeof n ? n : (n = ao.ns.qualify(n)).local ? e : t;\n  }\n\n  function F() {\n    var n = this.parentNode;\n    n && n.removeChild(this);\n  }\n\n  function H(n) {\n    return {\n      __data__: n\n    };\n  }\n\n  function O(n) {\n    return function () {\n      return _Ao(this, n);\n    };\n  }\n\n  function I(n) {\n    return arguments.length || (n = e), function (t, e) {\n      return t && e ? n(t.__data__, e.__data__) : !t - !e;\n    };\n  }\n\n  function Y(n, t) {\n    for (var e = 0, r = n.length; r > e; e++) {\n      for (var i, u = n[e], o = 0, a = u.length; a > o; o++) {\n        (i = u[o]) && t(i, o, e);\n      }\n    }\n\n    return n;\n  }\n\n  function Z(n) {\n    return ko(n, qo), n;\n  }\n\n  function V(n) {\n    var t, e;\n    return function (r, i, u) {\n      var o,\n          a = n[u].update,\n          l = a.length;\n\n      for (u != e && (e = u, t = 0), i >= t && (t = i + 1); !(o = a[t]) && ++t < l;) {\n        ;\n      }\n\n      return o;\n    };\n  }\n\n  function X(n, t, e) {\n    function r() {\n      var t = this[o];\n      t && (this.removeEventListener(n, t, t.$), delete this[o]);\n    }\n\n    function i() {\n      var i = l(t, co(arguments));\n      r.call(this), this.addEventListener(n, this[o] = i, i.$ = e), i._ = t;\n    }\n\n    function u() {\n      var t,\n          e = new RegExp(\"^__on([^.]+)\" + ao.requote(n) + \"$\");\n\n      for (var r in this) {\n        if (t = r.match(e)) {\n          var i = this[r];\n          this.removeEventListener(t[1], i, i.$), delete this[r];\n        }\n      }\n    }\n\n    var o = \"__on\" + n,\n        a = n.indexOf(\".\"),\n        l = $;\n    a > 0 && (n = n.slice(0, a));\n    var c = To.get(n);\n    return c && (n = c, l = B), a ? t ? i : r : t ? b : u;\n  }\n\n  function $(n, t) {\n    return function (e) {\n      var r = ao.event;\n      ao.event = e, t[0] = this.__data__;\n\n      try {\n        n.apply(this, t);\n      } finally {\n        ao.event = r;\n      }\n    };\n  }\n\n  function B(n, t) {\n    var e = $(n, t);\n    return function (n) {\n      var t = this,\n          r = n.relatedTarget;\n      r && (r === t || 8 & r.compareDocumentPosition(t)) || e.call(t, n);\n    };\n  }\n\n  function W(e) {\n    var r = \".dragsuppress-\" + ++Do,\n        i = \"click\" + r,\n        u = ao.select(t(e)).on(\"touchmove\" + r, S).on(\"dragstart\" + r, S).on(\"selectstart\" + r, S);\n\n    if (null == Ro && (Ro = \"onselectstart\" in e ? !1 : x(e.style, \"userSelect\")), Ro) {\n      var o = n(e).style,\n          a = o[Ro];\n      o[Ro] = \"none\";\n    }\n\n    return function (n) {\n      if (u.on(r, null), Ro && (o[Ro] = a), n) {\n        var t = function t() {\n          u.on(i, null);\n        };\n\n        u.on(i, function () {\n          S(), t();\n        }, !0), setTimeout(t, 0);\n      }\n    };\n  }\n\n  function J(n, e) {\n    e.changedTouches && (e = e.changedTouches[0]);\n    var r = n.ownerSVGElement || n;\n\n    if (r.createSVGPoint) {\n      var i = r.createSVGPoint();\n\n      if (0 > Po) {\n        var u = t(n);\n\n        if (u.scrollX || u.scrollY) {\n          r = ao.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var o = r[0][0].getScreenCTM();\n          Po = !(o.f || o.e), r.remove();\n        }\n      }\n\n      return Po ? (i.x = e.pageX, i.y = e.pageY) : (i.x = e.clientX, i.y = e.clientY), i = i.matrixTransform(n.getScreenCTM().inverse()), [i.x, i.y];\n    }\n\n    var a = n.getBoundingClientRect();\n    return [e.clientX - a.left - n.clientLeft, e.clientY - a.top - n.clientTop];\n  }\n\n  function G() {\n    return ao.event.changedTouches[0].identifier;\n  }\n\n  function K(n) {\n    return n > 0 ? 1 : 0 > n ? -1 : 0;\n  }\n\n  function Q(n, t, e) {\n    return (t[0] - n[0]) * (e[1] - n[1]) - (t[1] - n[1]) * (e[0] - n[0]);\n  }\n\n  function nn(n) {\n    return n > 1 ? 0 : -1 > n ? Fo : Math.acos(n);\n  }\n\n  function tn(n) {\n    return n > 1 ? Io : -1 > n ? -Io : Math.asin(n);\n  }\n\n  function en(n) {\n    return ((n = Math.exp(n)) - 1 / n) / 2;\n  }\n\n  function rn(n) {\n    return ((n = Math.exp(n)) + 1 / n) / 2;\n  }\n\n  function un(n) {\n    return ((n = Math.exp(2 * n)) - 1) / (n + 1);\n  }\n\n  function on(n) {\n    return (n = Math.sin(n / 2)) * n;\n  }\n\n  function an() {}\n\n  function ln(n, t, e) {\n    return this instanceof ln ? (this.h = +n, this.s = +t, void (this.l = +e)) : arguments.length < 2 ? n instanceof ln ? new ln(n.h, n.s, n.l) : _n(\"\" + n, wn, ln) : new ln(n, t, e);\n  }\n\n  function cn(n, t, e) {\n    function r(n) {\n      return n > 360 ? n -= 360 : 0 > n && (n += 360), 60 > n ? u + (o - u) * n / 60 : 180 > n ? o : 240 > n ? u + (o - u) * (240 - n) / 60 : u;\n    }\n\n    function i(n) {\n      return Math.round(255 * r(n));\n    }\n\n    var u, o;\n    return n = isNaN(n) ? 0 : (n %= 360) < 0 ? n + 360 : n, t = isNaN(t) ? 0 : 0 > t ? 0 : t > 1 ? 1 : t, e = 0 > e ? 0 : e > 1 ? 1 : e, o = .5 >= e ? e * (1 + t) : e + t - e * t, u = 2 * e - o, new mn(i(n + 120), i(n), i(n - 120));\n  }\n\n  function fn(n, t, e) {\n    return this instanceof fn ? (this.h = +n, this.c = +t, void (this.l = +e)) : arguments.length < 2 ? n instanceof fn ? new fn(n.h, n.c, n.l) : n instanceof hn ? gn(n.l, n.a, n.b) : gn((n = Sn((n = ao.rgb(n)).r, n.g, n.b)).l, n.a, n.b) : new fn(n, t, e);\n  }\n\n  function sn(n, t, e) {\n    return isNaN(n) && (n = 0), isNaN(t) && (t = 0), new hn(e, Math.cos(n *= Yo) * t, Math.sin(n) * t);\n  }\n\n  function hn(n, t, e) {\n    return this instanceof hn ? (this.l = +n, this.a = +t, void (this.b = +e)) : arguments.length < 2 ? n instanceof hn ? new hn(n.l, n.a, n.b) : n instanceof fn ? sn(n.h, n.c, n.l) : Sn((n = mn(n)).r, n.g, n.b) : new hn(n, t, e);\n  }\n\n  function pn(n, t, e) {\n    var r = (n + 16) / 116,\n        i = r + t / 500,\n        u = r - e / 200;\n    return i = vn(i) * na, r = vn(r) * ta, u = vn(u) * ea, new mn(yn(3.2404542 * i - 1.5371385 * r - .4985314 * u), yn(-.969266 * i + 1.8760108 * r + .041556 * u), yn(.0556434 * i - .2040259 * r + 1.0572252 * u));\n  }\n\n  function gn(n, t, e) {\n    return n > 0 ? new fn(Math.atan2(e, t) * Zo, Math.sqrt(t * t + e * e), n) : new fn(NaN, NaN, n);\n  }\n\n  function vn(n) {\n    return n > .206893034 ? n * n * n : (n - 4 / 29) / 7.787037;\n  }\n\n  function dn(n) {\n    return n > .008856 ? Math.pow(n, 1 / 3) : 7.787037 * n + 4 / 29;\n  }\n\n  function yn(n) {\n    return Math.round(255 * (.00304 >= n ? 12.92 * n : 1.055 * Math.pow(n, 1 / 2.4) - .055));\n  }\n\n  function mn(n, t, e) {\n    return this instanceof mn ? (this.r = ~~n, this.g = ~~t, void (this.b = ~~e)) : arguments.length < 2 ? n instanceof mn ? new mn(n.r, n.g, n.b) : _n(\"\" + n, mn, cn) : new mn(n, t, e);\n  }\n\n  function Mn(n) {\n    return new mn(n >> 16, n >> 8 & 255, 255 & n);\n  }\n\n  function xn(n) {\n    return Mn(n) + \"\";\n  }\n\n  function bn(n) {\n    return 16 > n ? \"0\" + Math.max(0, n).toString(16) : Math.min(255, n).toString(16);\n  }\n\n  function _n(n, t, e) {\n    var r,\n        i,\n        u,\n        o = 0,\n        a = 0,\n        l = 0;\n    if (r = /([a-z]+)\\((.*)\\)/.exec(n = n.toLowerCase())) switch (i = r[2].split(\",\"), r[1]) {\n      case \"hsl\":\n        return e(parseFloat(i[0]), parseFloat(i[1]) / 100, parseFloat(i[2]) / 100);\n\n      case \"rgb\":\n        return t(Nn(i[0]), Nn(i[1]), Nn(i[2]));\n    }\n    return (u = ua.get(n)) ? t(u.r, u.g, u.b) : (null == n || \"#\" !== n.charAt(0) || isNaN(u = parseInt(n.slice(1), 16)) || (4 === n.length ? (o = (3840 & u) >> 4, o = o >> 4 | o, a = 240 & u, a = a >> 4 | a, l = 15 & u, l = l << 4 | l) : 7 === n.length && (o = (16711680 & u) >> 16, a = (65280 & u) >> 8, l = 255 & u)), t(o, a, l));\n  }\n\n  function wn(n, t, e) {\n    var r,\n        i,\n        u = Math.min(n /= 255, t /= 255, e /= 255),\n        o = Math.max(n, t, e),\n        a = o - u,\n        l = (o + u) / 2;\n    return a ? (i = .5 > l ? a / (o + u) : a / (2 - o - u), r = n == o ? (t - e) / a + (e > t ? 6 : 0) : t == o ? (e - n) / a + 2 : (n - t) / a + 4, r *= 60) : (r = NaN, i = l > 0 && 1 > l ? 0 : r), new ln(r, i, l);\n  }\n\n  function Sn(n, t, e) {\n    n = kn(n), t = kn(t), e = kn(e);\n    var r = dn((.4124564 * n + .3575761 * t + .1804375 * e) / na),\n        i = dn((.2126729 * n + .7151522 * t + .072175 * e) / ta),\n        u = dn((.0193339 * n + .119192 * t + .9503041 * e) / ea);\n    return hn(116 * i - 16, 500 * (r - i), 200 * (i - u));\n  }\n\n  function kn(n) {\n    return (n /= 255) <= .04045 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4);\n  }\n\n  function Nn(n) {\n    var t = parseFloat(n);\n    return \"%\" === n.charAt(n.length - 1) ? Math.round(2.55 * t) : t;\n  }\n\n  function En(n) {\n    return \"function\" == typeof n ? n : function () {\n      return n;\n    };\n  }\n\n  function An(n) {\n    return function (t, e, r) {\n      return 2 === arguments.length && \"function\" == typeof e && (r = e, e = null), Cn(t, e, n, r);\n    };\n  }\n\n  function Cn(n, t, e, r) {\n    function i() {\n      var n,\n          t = l.status;\n\n      if (!t && Ln(l) || t >= 200 && 300 > t || 304 === t) {\n        try {\n          n = e.call(u, l);\n        } catch (r) {\n          return void o.error.call(u, r);\n        }\n\n        o.load.call(u, n);\n      } else o.error.call(u, l);\n    }\n\n    var u = {},\n        o = ao.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n        a = {},\n        l = new XMLHttpRequest(),\n        c = null;\n    return !this.XDomainRequest || \"withCredentials\" in l || !/^(http(s)?:)?\\/\\//.test(n) || (l = new XDomainRequest()), \"onload\" in l ? l.onload = l.onerror = i : l.onreadystatechange = function () {\n      l.readyState > 3 && i();\n    }, l.onprogress = function (n) {\n      var t = ao.event;\n      ao.event = n;\n\n      try {\n        o.progress.call(u, l);\n      } finally {\n        ao.event = t;\n      }\n    }, u.header = function (n, t) {\n      return n = (n + \"\").toLowerCase(), arguments.length < 2 ? a[n] : (null == t ? delete a[n] : a[n] = t + \"\", u);\n    }, u.mimeType = function (n) {\n      return arguments.length ? (t = null == n ? null : n + \"\", u) : t;\n    }, u.responseType = function (n) {\n      return arguments.length ? (c = n, u) : c;\n    }, u.response = function (n) {\n      return e = n, u;\n    }, [\"get\", \"post\"].forEach(function (n) {\n      u[n] = function () {\n        return u.send.apply(u, [n].concat(co(arguments)));\n      };\n    }), u.send = function (e, r, i) {\n      if (2 === arguments.length && \"function\" == typeof r && (i = r, r = null), l.open(e, n, !0), null == t || \"accept\" in a || (a.accept = t + \",*/*\"), l.setRequestHeader) for (var f in a) {\n        l.setRequestHeader(f, a[f]);\n      }\n      return null != t && l.overrideMimeType && l.overrideMimeType(t), null != c && (l.responseType = c), null != i && u.on(\"error\", i).on(\"load\", function (n) {\n        i(null, n);\n      }), o.beforesend.call(u, l), l.send(null == r ? null : r), u;\n    }, u.abort = function () {\n      return l.abort(), u;\n    }, ao.rebind(u, o, \"on\"), null == r ? u : u.get(zn(r));\n  }\n\n  function zn(n) {\n    return 1 === n.length ? function (t, e) {\n      n(null == t ? e : null);\n    } : n;\n  }\n\n  function Ln(n) {\n    var t = n.responseType;\n    return t && \"text\" !== t ? n.response : n.responseText;\n  }\n\n  function qn(n, t, e) {\n    var r = arguments.length;\n    2 > r && (t = 0), 3 > r && (e = Date.now());\n    var i = e + t,\n        u = {\n      c: n,\n      t: i,\n      n: null\n    };\n    return aa ? aa.n = u : oa = u, aa = u, la || (ca = clearTimeout(ca), la = 1, fa(Tn)), u;\n  }\n\n  function Tn() {\n    var n = Rn(),\n        t = Dn() - n;\n    t > 24 ? (isFinite(t) && (clearTimeout(ca), ca = setTimeout(Tn, t)), la = 0) : (la = 1, fa(Tn));\n  }\n\n  function Rn() {\n    for (var n = Date.now(), t = oa; t;) {\n      n >= t.t && t.c(n - t.t) && (t.c = null), t = t.n;\n    }\n\n    return n;\n  }\n\n  function Dn() {\n    for (var n, t = oa, e = 1 / 0; t;) {\n      t.c ? (t.t < e && (e = t.t), t = (n = t).n) : t = n ? n.n = t.n : oa = t.n;\n    }\n\n    return aa = n, e;\n  }\n\n  function Pn(n, t) {\n    return t - (n ? Math.ceil(Math.log(n) / Math.LN10) : 1);\n  }\n\n  function Un(n, t) {\n    var e = Math.pow(10, 3 * xo(8 - t));\n    return {\n      scale: t > 8 ? function (n) {\n        return n / e;\n      } : function (n) {\n        return n * e;\n      },\n      symbol: n\n    };\n  }\n\n  function jn(n) {\n    var t = n.decimal,\n        e = n.thousands,\n        r = n.grouping,\n        i = n.currency,\n        u = r && e ? function (n, t) {\n      for (var i = n.length, u = [], o = 0, a = r[0], l = 0; i > 0 && a > 0 && (l + a + 1 > t && (a = Math.max(1, t - l)), u.push(n.substring(i -= a, i + a)), !((l += a + 1) > t));) {\n        a = r[o = (o + 1) % r.length];\n      }\n\n      return u.reverse().join(e);\n    } : m;\n    return function (n) {\n      var e = ha.exec(n),\n          r = e[1] || \" \",\n          o = e[2] || \">\",\n          a = e[3] || \"-\",\n          l = e[4] || \"\",\n          c = e[5],\n          f = +e[6],\n          s = e[7],\n          h = e[8],\n          p = e[9],\n          g = 1,\n          v = \"\",\n          d = \"\",\n          y = !1,\n          m = !0;\n\n      switch (h && (h = +h.substring(1)), (c || \"0\" === r && \"=\" === o) && (c = r = \"0\", o = \"=\"), p) {\n        case \"n\":\n          s = !0, p = \"g\";\n          break;\n\n        case \"%\":\n          g = 100, d = \"%\", p = \"f\";\n          break;\n\n        case \"p\":\n          g = 100, d = \"%\", p = \"r\";\n          break;\n\n        case \"b\":\n        case \"o\":\n        case \"x\":\n        case \"X\":\n          \"#\" === l && (v = \"0\" + p.toLowerCase());\n\n        case \"c\":\n          m = !1;\n\n        case \"d\":\n          y = !0, h = 0;\n          break;\n\n        case \"s\":\n          g = -1, p = \"r\";\n      }\n\n      \"$\" === l && (v = i[0], d = i[1]), \"r\" != p || h || (p = \"g\"), null != h && (\"g\" == p ? h = Math.max(1, Math.min(21, h)) : \"e\" != p && \"f\" != p || (h = Math.max(0, Math.min(20, h)))), p = pa.get(p) || Fn;\n      var M = c && s;\n      return function (n) {\n        var e = d;\n        if (y && n % 1) return \"\";\n        var i = 0 > n || 0 === n && 0 > 1 / n ? (n = -n, \"-\") : \"-\" === a ? \"\" : a;\n\n        if (0 > g) {\n          var l = ao.formatPrefix(n, h);\n          n = l.scale(n), e = l.symbol + d;\n        } else n *= g;\n\n        n = p(n, h);\n\n        var x,\n            b,\n            _ = n.lastIndexOf(\".\");\n\n        if (0 > _) {\n          var w = m ? n.lastIndexOf(\"e\") : -1;\n          0 > w ? (x = n, b = \"\") : (x = n.substring(0, w), b = n.substring(w));\n        } else x = n.substring(0, _), b = t + n.substring(_ + 1);\n\n        !c && s && (x = u(x, 1 / 0));\n        var S = v.length + x.length + b.length + (M ? 0 : i.length),\n            k = f > S ? new Array(S = f - S + 1).join(r) : \"\";\n        return M && (x = u(k + x, k.length ? f - b.length : 1 / 0)), i += v, n = x + b, (\"<\" === o ? i + n + k : \">\" === o ? k + i + n : \"^\" === o ? k.substring(0, S >>= 1) + i + n + k.substring(S) : i + (M ? n : k + n)) + e;\n      };\n    };\n  }\n\n  function Fn(n) {\n    return n + \"\";\n  }\n\n  function Hn() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n\n  function On(n, t, e) {\n    function r(t) {\n      var e = n(t),\n          r = u(e, 1);\n      return r - t > t - e ? e : r;\n    }\n\n    function i(e) {\n      return t(e = n(new va(e - 1)), 1), e;\n    }\n\n    function u(n, e) {\n      return t(n = new va(+n), e), n;\n    }\n\n    function o(n, r, u) {\n      var o = i(n),\n          a = [];\n      if (u > 1) for (; r > o;) {\n        e(o) % u || a.push(new Date(+o)), t(o, 1);\n      } else for (; r > o;) {\n        a.push(new Date(+o)), t(o, 1);\n      }\n      return a;\n    }\n\n    function a(n, t, e) {\n      try {\n        va = Hn;\n        var r = new Hn();\n        return r._ = n, o(r, t, e);\n      } finally {\n        va = Date;\n      }\n    }\n\n    n.floor = n, n.round = r, n.ceil = i, n.offset = u, n.range = o;\n    var l = n.utc = In(n);\n    return l.floor = l, l.round = In(r), l.ceil = In(i), l.offset = In(u), l.range = a, n;\n  }\n\n  function In(n) {\n    return function (t, e) {\n      try {\n        va = Hn;\n        var r = new Hn();\n        return r._ = t, n(r, e)._;\n      } finally {\n        va = Date;\n      }\n    };\n  }\n\n  function Yn(n) {\n    function t(n) {\n      function t(t) {\n        for (var e, i, u, o = [], a = -1, l = 0; ++a < r;) {\n          37 === n.charCodeAt(a) && (o.push(n.slice(l, a)), null != (i = ya[e = n.charAt(++a)]) && (e = n.charAt(++a)), (u = A[e]) && (e = u(t, null == i ? \"e\" === e ? \" \" : \"0\" : i)), o.push(e), l = a + 1);\n        }\n\n        return o.push(n.slice(l, a)), o.join(\"\");\n      }\n\n      var r = n.length;\n      return t.parse = function (t) {\n        var r = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        },\n            i = e(r, n, t, 0);\n        if (i != t.length) return null;\n        \"p\" in r && (r.H = r.H % 12 + 12 * r.p);\n        var u = null != r.Z && va !== Hn,\n            o = new (u ? Hn : va)();\n        return \"j\" in r ? o.setFullYear(r.y, 0, r.j) : \"W\" in r || \"U\" in r ? (\"w\" in r || (r.w = \"W\" in r ? 1 : 0), o.setFullYear(r.y, 0, 1), o.setFullYear(r.y, 0, \"W\" in r ? (r.w + 6) % 7 + 7 * r.W - (o.getDay() + 5) % 7 : r.w + 7 * r.U - (o.getDay() + 6) % 7)) : o.setFullYear(r.y, r.m, r.d), o.setHours(r.H + (r.Z / 100 | 0), r.M + r.Z % 100, r.S, r.L), u ? o._ : o;\n      }, t.toString = function () {\n        return n;\n      }, t;\n    }\n\n    function e(n, t, e, r) {\n      for (var i, u, o, a = 0, l = t.length, c = e.length; l > a;) {\n        if (r >= c) return -1;\n\n        if (i = t.charCodeAt(a++), 37 === i) {\n          if (o = t.charAt(a++), u = C[o in ya ? t.charAt(a++) : o], !u || (r = u(n, e, r)) < 0) return -1;\n        } else if (i != e.charCodeAt(r++)) return -1;\n      }\n\n      return r;\n    }\n\n    function r(n, t, e) {\n      _.lastIndex = 0;\n\n      var r = _.exec(t.slice(e));\n\n      return r ? (n.w = w.get(r[0].toLowerCase()), e + r[0].length) : -1;\n    }\n\n    function i(n, t, e) {\n      x.lastIndex = 0;\n      var r = x.exec(t.slice(e));\n      return r ? (n.w = b.get(r[0].toLowerCase()), e + r[0].length) : -1;\n    }\n\n    function u(n, t, e) {\n      N.lastIndex = 0;\n      var r = N.exec(t.slice(e));\n      return r ? (n.m = E.get(r[0].toLowerCase()), e + r[0].length) : -1;\n    }\n\n    function o(n, t, e) {\n      S.lastIndex = 0;\n      var r = S.exec(t.slice(e));\n      return r ? (n.m = k.get(r[0].toLowerCase()), e + r[0].length) : -1;\n    }\n\n    function a(n, t, r) {\n      return e(n, A.c.toString(), t, r);\n    }\n\n    function l(n, t, r) {\n      return e(n, A.x.toString(), t, r);\n    }\n\n    function c(n, t, r) {\n      return e(n, A.X.toString(), t, r);\n    }\n\n    function f(n, t, e) {\n      var r = M.get(t.slice(e, e += 2).toLowerCase());\n      return null == r ? -1 : (n.p = r, e);\n    }\n\n    var s = n.dateTime,\n        h = n.date,\n        p = n.time,\n        g = n.periods,\n        v = n.days,\n        d = n.shortDays,\n        y = n.months,\n        m = n.shortMonths;\n    t.utc = function (n) {\n      function e(n) {\n        try {\n          va = Hn;\n          var t = new va();\n          return t._ = n, r(t);\n        } finally {\n          va = Date;\n        }\n      }\n\n      var r = t(n);\n      return e.parse = function (n) {\n        try {\n          va = Hn;\n          var t = r.parse(n);\n          return t && t._;\n        } finally {\n          va = Date;\n        }\n      }, e.toString = r.toString, e;\n    }, t.multi = t.utc.multi = ct;\n\n    var M = ao.map(),\n        x = Vn(v),\n        b = Xn(v),\n        _ = Vn(d),\n        w = Xn(d),\n        S = Vn(y),\n        k = Xn(y),\n        N = Vn(m),\n        E = Xn(m);\n\n    g.forEach(function (n, t) {\n      M.set(n.toLowerCase(), t);\n    });\n    var A = {\n      a: function a(n) {\n        return d[n.getDay()];\n      },\n      A: function A(n) {\n        return v[n.getDay()];\n      },\n      b: function b(n) {\n        return m[n.getMonth()];\n      },\n      B: function B(n) {\n        return y[n.getMonth()];\n      },\n      c: t(s),\n      d: function d(n, t) {\n        return Zn(n.getDate(), t, 2);\n      },\n      e: function e(n, t) {\n        return Zn(n.getDate(), t, 2);\n      },\n      H: function H(n, t) {\n        return Zn(n.getHours(), t, 2);\n      },\n      I: function I(n, t) {\n        return Zn(n.getHours() % 12 || 12, t, 2);\n      },\n      j: function j(n, t) {\n        return Zn(1 + ga.dayOfYear(n), t, 3);\n      },\n      L: function L(n, t) {\n        return Zn(n.getMilliseconds(), t, 3);\n      },\n      m: function m(n, t) {\n        return Zn(n.getMonth() + 1, t, 2);\n      },\n      M: function M(n, t) {\n        return Zn(n.getMinutes(), t, 2);\n      },\n      p: function p(n) {\n        return g[+(n.getHours() >= 12)];\n      },\n      S: function S(n, t) {\n        return Zn(n.getSeconds(), t, 2);\n      },\n      U: function U(n, t) {\n        return Zn(ga.sundayOfYear(n), t, 2);\n      },\n      w: function w(n) {\n        return n.getDay();\n      },\n      W: function W(n, t) {\n        return Zn(ga.mondayOfYear(n), t, 2);\n      },\n      x: t(h),\n      X: t(p),\n      y: function y(n, t) {\n        return Zn(n.getFullYear() % 100, t, 2);\n      },\n      Y: function Y(n, t) {\n        return Zn(n.getFullYear() % 1e4, t, 4);\n      },\n      Z: at,\n      \"%\": function _() {\n        return \"%\";\n      }\n    },\n        C = {\n      a: r,\n      A: i,\n      b: u,\n      B: o,\n      c: a,\n      d: tt,\n      e: tt,\n      H: rt,\n      I: rt,\n      j: et,\n      L: ot,\n      m: nt,\n      M: it,\n      p: f,\n      S: ut,\n      U: Bn,\n      w: $n,\n      W: Wn,\n      x: l,\n      X: c,\n      y: Gn,\n      Y: Jn,\n      Z: Kn,\n      \"%\": lt\n    };\n    return t;\n  }\n\n  function Zn(n, t, e) {\n    var r = 0 > n ? \"-\" : \"\",\n        i = (r ? -n : n) + \"\",\n        u = i.length;\n    return r + (e > u ? new Array(e - u + 1).join(t) + i : i);\n  }\n\n  function Vn(n) {\n    return new RegExp(\"^(?:\" + n.map(ao.requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function Xn(n) {\n    for (var t = new c(), e = -1, r = n.length; ++e < r;) {\n      t.set(n[e].toLowerCase(), e);\n    }\n\n    return t;\n  }\n\n  function $n(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 1));\n    return r ? (n.w = +r[0], e + r[0].length) : -1;\n  }\n\n  function Bn(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e));\n    return r ? (n.U = +r[0], e + r[0].length) : -1;\n  }\n\n  function Wn(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e));\n    return r ? (n.W = +r[0], e + r[0].length) : -1;\n  }\n\n  function Jn(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 4));\n    return r ? (n.y = +r[0], e + r[0].length) : -1;\n  }\n\n  function Gn(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 2));\n    return r ? (n.y = Qn(+r[0]), e + r[0].length) : -1;\n  }\n\n  function Kn(n, t, e) {\n    return /^[+-]\\d{4}$/.test(t = t.slice(e, e + 5)) ? (n.Z = -t, e + 5) : -1;\n  }\n\n  function Qn(n) {\n    return n + (n > 68 ? 1900 : 2e3);\n  }\n\n  function nt(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 2));\n    return r ? (n.m = r[0] - 1, e + r[0].length) : -1;\n  }\n\n  function tt(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 2));\n    return r ? (n.d = +r[0], e + r[0].length) : -1;\n  }\n\n  function et(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 3));\n    return r ? (n.j = +r[0], e + r[0].length) : -1;\n  }\n\n  function rt(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 2));\n    return r ? (n.H = +r[0], e + r[0].length) : -1;\n  }\n\n  function it(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 2));\n    return r ? (n.M = +r[0], e + r[0].length) : -1;\n  }\n\n  function ut(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 2));\n    return r ? (n.S = +r[0], e + r[0].length) : -1;\n  }\n\n  function ot(n, t, e) {\n    ma.lastIndex = 0;\n    var r = ma.exec(t.slice(e, e + 3));\n    return r ? (n.L = +r[0], e + r[0].length) : -1;\n  }\n\n  function at(n) {\n    var t = n.getTimezoneOffset(),\n        e = t > 0 ? \"-\" : \"+\",\n        r = xo(t) / 60 | 0,\n        i = xo(t) % 60;\n    return e + Zn(r, \"0\", 2) + Zn(i, \"0\", 2);\n  }\n\n  function lt(n, t, e) {\n    Ma.lastIndex = 0;\n    var r = Ma.exec(t.slice(e, e + 1));\n    return r ? e + r[0].length : -1;\n  }\n\n  function ct(n) {\n    for (var t = n.length, e = -1; ++e < t;) {\n      n[e][0] = this(n[e][0]);\n    }\n\n    return function (t) {\n      for (var e = 0, r = n[e]; !r[1](t);) {\n        r = n[++e];\n      }\n\n      return r[0](t);\n    };\n  }\n\n  function ft() {}\n\n  function st(n, t, e) {\n    var r = e.s = n + t,\n        i = r - n,\n        u = r - i;\n    e.t = n - u + (t - i);\n  }\n\n  function ht(n, t) {\n    n && wa.hasOwnProperty(n.type) && wa[n.type](n, t);\n  }\n\n  function pt(n, t, e) {\n    var r,\n        i = -1,\n        u = n.length - e;\n\n    for (t.lineStart(); ++i < u;) {\n      r = n[i], t.point(r[0], r[1], r[2]);\n    }\n\n    t.lineEnd();\n  }\n\n  function gt(n, t) {\n    var e = -1,\n        r = n.length;\n\n    for (t.polygonStart(); ++e < r;) {\n      pt(n[e], t, 1);\n    }\n\n    t.polygonEnd();\n  }\n\n  function vt() {\n    function n(n, t) {\n      n *= Yo, t = t * Yo / 2 + Fo / 4;\n      var e = n - r,\n          o = e >= 0 ? 1 : -1,\n          a = o * e,\n          l = Math.cos(t),\n          c = Math.sin(t),\n          f = u * c,\n          s = i * l + f * Math.cos(a),\n          h = f * o * Math.sin(a);\n      ka.add(Math.atan2(h, s)), r = n, i = l, u = c;\n    }\n\n    var t, e, r, i, u;\n    Na.point = function (o, a) {\n      Na.point = n, r = (t = o) * Yo, i = Math.cos(a = (e = a) * Yo / 2 + Fo / 4), u = Math.sin(a);\n    }, Na.lineEnd = function () {\n      n(t, e);\n    };\n  }\n\n  function dt(n) {\n    var t = n[0],\n        e = n[1],\n        r = Math.cos(e);\n    return [r * Math.cos(t), r * Math.sin(t), Math.sin(e)];\n  }\n\n  function yt(n, t) {\n    return n[0] * t[0] + n[1] * t[1] + n[2] * t[2];\n  }\n\n  function mt(n, t) {\n    return [n[1] * t[2] - n[2] * t[1], n[2] * t[0] - n[0] * t[2], n[0] * t[1] - n[1] * t[0]];\n  }\n\n  function Mt(n, t) {\n    n[0] += t[0], n[1] += t[1], n[2] += t[2];\n  }\n\n  function xt(n, t) {\n    return [n[0] * t, n[1] * t, n[2] * t];\n  }\n\n  function bt(n) {\n    var t = Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);\n    n[0] /= t, n[1] /= t, n[2] /= t;\n  }\n\n  function _t(n) {\n    return [Math.atan2(n[1], n[0]), tn(n[2])];\n  }\n\n  function wt(n, t) {\n    return xo(n[0] - t[0]) < Uo && xo(n[1] - t[1]) < Uo;\n  }\n\n  function St(n, t) {\n    n *= Yo;\n    var e = Math.cos(t *= Yo);\n    kt(e * Math.cos(n), e * Math.sin(n), Math.sin(t));\n  }\n\n  function kt(n, t, e) {\n    ++Ea, Ca += (n - Ca) / Ea, za += (t - za) / Ea, La += (e - La) / Ea;\n  }\n\n  function Nt() {\n    function n(n, i) {\n      n *= Yo;\n      var u = Math.cos(i *= Yo),\n          o = u * Math.cos(n),\n          a = u * Math.sin(n),\n          l = Math.sin(i),\n          c = Math.atan2(Math.sqrt((c = e * l - r * a) * c + (c = r * o - t * l) * c + (c = t * a - e * o) * c), t * o + e * a + r * l);\n      Aa += c, qa += c * (t + (t = o)), Ta += c * (e + (e = a)), Ra += c * (r + (r = l)), kt(t, e, r);\n    }\n\n    var t, e, r;\n\n    ja.point = function (i, u) {\n      i *= Yo;\n      var o = Math.cos(u *= Yo);\n      t = o * Math.cos(i), e = o * Math.sin(i), r = Math.sin(u), ja.point = n, kt(t, e, r);\n    };\n  }\n\n  function Et() {\n    ja.point = St;\n  }\n\n  function At() {\n    function n(n, t) {\n      n *= Yo;\n      var e = Math.cos(t *= Yo),\n          o = e * Math.cos(n),\n          a = e * Math.sin(n),\n          l = Math.sin(t),\n          c = i * l - u * a,\n          f = u * o - r * l,\n          s = r * a - i * o,\n          h = Math.sqrt(c * c + f * f + s * s),\n          p = r * o + i * a + u * l,\n          g = h && -nn(p) / h,\n          v = Math.atan2(h, p);\n      Da += g * c, Pa += g * f, Ua += g * s, Aa += v, qa += v * (r + (r = o)), Ta += v * (i + (i = a)), Ra += v * (u + (u = l)), kt(r, i, u);\n    }\n\n    var t, e, r, i, u;\n    ja.point = function (o, a) {\n      t = o, e = a, ja.point = n, o *= Yo;\n      var l = Math.cos(a *= Yo);\n      r = l * Math.cos(o), i = l * Math.sin(o), u = Math.sin(a), kt(r, i, u);\n    }, ja.lineEnd = function () {\n      n(t, e), ja.lineEnd = Et, ja.point = St;\n    };\n  }\n\n  function Ct(n, t) {\n    function e(e, r) {\n      return e = n(e, r), t(e[0], e[1]);\n    }\n\n    return n.invert && t.invert && (e.invert = function (e, r) {\n      return e = t.invert(e, r), e && n.invert(e[0], e[1]);\n    }), e;\n  }\n\n  function zt() {\n    return !0;\n  }\n\n  function Lt(n, t, e, r, i) {\n    var u = [],\n        o = [];\n\n    if (n.forEach(function (n) {\n      if (!((t = n.length - 1) <= 0)) {\n        var t,\n            e = n[0],\n            r = n[t];\n\n        if (wt(e, r)) {\n          i.lineStart();\n\n          for (var a = 0; t > a; ++a) {\n            i.point((e = n[a])[0], e[1]);\n          }\n\n          return void i.lineEnd();\n        }\n\n        var l = new Tt(e, n, null, !0),\n            c = new Tt(e, null, l, !1);\n        l.o = c, u.push(l), o.push(c), l = new Tt(r, n, null, !1), c = new Tt(r, null, l, !0), l.o = c, u.push(l), o.push(c);\n      }\n    }), o.sort(t), qt(u), qt(o), u.length) {\n      for (var a = 0, l = e, c = o.length; c > a; ++a) {\n        o[a].e = l = !l;\n      }\n\n      for (var f, s, h = u[0];;) {\n        for (var p = h, g = !0; p.v;) {\n          if ((p = p.n) === h) return;\n        }\n\n        f = p.z, i.lineStart();\n\n        do {\n          if (p.v = p.o.v = !0, p.e) {\n            if (g) for (var a = 0, c = f.length; c > a; ++a) {\n              i.point((s = f[a])[0], s[1]);\n            } else r(p.x, p.n.x, 1, i);\n            p = p.n;\n          } else {\n            if (g) {\n              f = p.p.z;\n\n              for (var a = f.length - 1; a >= 0; --a) {\n                i.point((s = f[a])[0], s[1]);\n              }\n            } else r(p.x, p.p.x, -1, i);\n\n            p = p.p;\n          }\n\n          p = p.o, f = p.z, g = !g;\n        } while (!p.v);\n\n        i.lineEnd();\n      }\n    }\n  }\n\n  function qt(n) {\n    if (t = n.length) {\n      for (var t, e, r = 0, i = n[0]; ++r < t;) {\n        i.n = e = n[r], e.p = i, i = e;\n      }\n\n      i.n = e = n[0], e.p = i;\n    }\n  }\n\n  function Tt(n, t, e, r) {\n    this.x = n, this.z = t, this.o = e, this.e = r, this.v = !1, this.n = this.p = null;\n  }\n\n  function Rt(n, t, e, r) {\n    return function (i, u) {\n      function o(t, e) {\n        var r = i(t, e);\n        n(t = r[0], e = r[1]) && u.point(t, e);\n      }\n\n      function a(n, t) {\n        var e = i(n, t);\n        d.point(e[0], e[1]);\n      }\n\n      function l() {\n        m.point = a, d.lineStart();\n      }\n\n      function c() {\n        m.point = o, d.lineEnd();\n      }\n\n      function f(n, t) {\n        v.push([n, t]);\n        var e = i(n, t);\n        x.point(e[0], e[1]);\n      }\n\n      function s() {\n        x.lineStart(), v = [];\n      }\n\n      function h() {\n        f(v[0][0], v[0][1]), x.lineEnd();\n        var n,\n            t = x.clean(),\n            e = M.buffer(),\n            r = e.length;\n        if (v.pop(), g.push(v), v = null, r) if (1 & t) {\n          n = e[0];\n          var i,\n              r = n.length - 1,\n              o = -1;\n\n          if (r > 0) {\n            for (b || (u.polygonStart(), b = !0), u.lineStart(); ++o < r;) {\n              u.point((i = n[o])[0], i[1]);\n            }\n\n            u.lineEnd();\n          }\n        } else r > 1 && 2 & t && e.push(e.pop().concat(e.shift())), p.push(e.filter(Dt));\n      }\n\n      var p,\n          g,\n          v,\n          d = t(u),\n          y = i.invert(r[0], r[1]),\n          m = {\n        point: o,\n        lineStart: l,\n        lineEnd: c,\n        polygonStart: function polygonStart() {\n          m.point = f, m.lineStart = s, m.lineEnd = h, p = [], g = [];\n        },\n        polygonEnd: function polygonEnd() {\n          m.point = o, m.lineStart = l, m.lineEnd = c, p = ao.merge(p);\n          var n = Ot(y, g);\n          p.length ? (b || (u.polygonStart(), b = !0), Lt(p, Ut, n, e, u)) : n && (b || (u.polygonStart(), b = !0), u.lineStart(), e(null, null, 1, u), u.lineEnd()), b && (u.polygonEnd(), b = !1), p = g = null;\n        },\n        sphere: function sphere() {\n          u.polygonStart(), u.lineStart(), e(null, null, 1, u), u.lineEnd(), u.polygonEnd();\n        }\n      },\n          M = Pt(),\n          x = t(M),\n          b = !1;\n      return m;\n    };\n  }\n\n  function Dt(n) {\n    return n.length > 1;\n  }\n\n  function Pt() {\n    var n,\n        t = [];\n    return {\n      lineStart: function lineStart() {\n        t.push(n = []);\n      },\n      point: function point(t, e) {\n        n.push([t, e]);\n      },\n      lineEnd: b,\n      buffer: function buffer() {\n        var e = t;\n        return t = [], n = null, e;\n      },\n      rejoin: function rejoin() {\n        t.length > 1 && t.push(t.pop().concat(t.shift()));\n      }\n    };\n  }\n\n  function Ut(n, t) {\n    return ((n = n.x)[0] < 0 ? n[1] - Io - Uo : Io - n[1]) - ((t = t.x)[0] < 0 ? t[1] - Io - Uo : Io - t[1]);\n  }\n\n  function jt(n) {\n    var t,\n        e = NaN,\n        r = NaN,\n        i = NaN;\n    return {\n      lineStart: function lineStart() {\n        n.lineStart(), t = 1;\n      },\n      point: function point(u, o) {\n        var a = u > 0 ? Fo : -Fo,\n            l = xo(u - e);\n        xo(l - Fo) < Uo ? (n.point(e, r = (r + o) / 2 > 0 ? Io : -Io), n.point(i, r), n.lineEnd(), n.lineStart(), n.point(a, r), n.point(u, r), t = 0) : i !== a && l >= Fo && (xo(e - i) < Uo && (e -= i * Uo), xo(u - a) < Uo && (u -= a * Uo), r = Ft(e, r, u, o), n.point(i, r), n.lineEnd(), n.lineStart(), n.point(a, r), t = 0), n.point(e = u, r = o), i = a;\n      },\n      lineEnd: function lineEnd() {\n        n.lineEnd(), e = r = NaN;\n      },\n      clean: function clean() {\n        return 2 - t;\n      }\n    };\n  }\n\n  function Ft(n, t, e, r) {\n    var i,\n        u,\n        o = Math.sin(n - e);\n    return xo(o) > Uo ? Math.atan((Math.sin(t) * (u = Math.cos(r)) * Math.sin(e) - Math.sin(r) * (i = Math.cos(t)) * Math.sin(n)) / (i * u * o)) : (t + r) / 2;\n  }\n\n  function Ht(n, t, e, r) {\n    var i;\n    if (null == n) i = e * Io, r.point(-Fo, i), r.point(0, i), r.point(Fo, i), r.point(Fo, 0), r.point(Fo, -i), r.point(0, -i), r.point(-Fo, -i), r.point(-Fo, 0), r.point(-Fo, i);else if (xo(n[0] - t[0]) > Uo) {\n      var u = n[0] < t[0] ? Fo : -Fo;\n      i = e * u / 2, r.point(-u, i), r.point(0, i), r.point(u, i);\n    } else r.point(t[0], t[1]);\n  }\n\n  function Ot(n, t) {\n    var e = n[0],\n        r = n[1],\n        i = [Math.sin(e), -Math.cos(e), 0],\n        u = 0,\n        o = 0;\n    ka.reset();\n\n    for (var a = 0, l = t.length; l > a; ++a) {\n      var c = t[a],\n          f = c.length;\n      if (f) for (var s = c[0], h = s[0], p = s[1] / 2 + Fo / 4, g = Math.sin(p), v = Math.cos(p), d = 1;;) {\n        d === f && (d = 0), n = c[d];\n\n        var y = n[0],\n            m = n[1] / 2 + Fo / 4,\n            M = Math.sin(m),\n            x = Math.cos(m),\n            b = y - h,\n            _ = b >= 0 ? 1 : -1,\n            w = _ * b,\n            S = w > Fo,\n            k = g * M;\n\n        if (ka.add(Math.atan2(k * _ * Math.sin(w), v * x + k * Math.cos(w))), u += S ? b + _ * Ho : b, S ^ h >= e ^ y >= e) {\n          var N = mt(dt(s), dt(n));\n          bt(N);\n          var E = mt(i, N);\n          bt(E);\n          var A = (S ^ b >= 0 ? -1 : 1) * tn(E[2]);\n          (r > A || r === A && (N[0] || N[1])) && (o += S ^ b >= 0 ? 1 : -1);\n        }\n\n        if (!d++) break;\n        h = y, g = M, v = x, s = n;\n      }\n    }\n\n    return (-Uo > u || Uo > u && -Uo > ka) ^ 1 & o;\n  }\n\n  function It(n) {\n    function t(n, t) {\n      return Math.cos(n) * Math.cos(t) > u;\n    }\n\n    function e(n) {\n      var e, u, l, c, f;\n      return {\n        lineStart: function lineStart() {\n          c = l = !1, f = 1;\n        },\n        point: function point(s, h) {\n          var p,\n              g = [s, h],\n              v = t(s, h),\n              d = o ? v ? 0 : i(s, h) : v ? i(s + (0 > s ? Fo : -Fo), h) : 0;\n          if (!e && (c = l = v) && n.lineStart(), v !== l && (p = r(e, g), (wt(e, p) || wt(g, p)) && (g[0] += Uo, g[1] += Uo, v = t(g[0], g[1]))), v !== l) f = 0, v ? (n.lineStart(), p = r(g, e), n.point(p[0], p[1])) : (p = r(e, g), n.point(p[0], p[1]), n.lineEnd()), e = p;else if (a && e && o ^ v) {\n            var y;\n            d & u || !(y = r(g, e, !0)) || (f = 0, o ? (n.lineStart(), n.point(y[0][0], y[0][1]), n.point(y[1][0], y[1][1]), n.lineEnd()) : (n.point(y[1][0], y[1][1]), n.lineEnd(), n.lineStart(), n.point(y[0][0], y[0][1])));\n          }\n          !v || e && wt(e, g) || n.point(g[0], g[1]), e = g, l = v, u = d;\n        },\n        lineEnd: function lineEnd() {\n          l && n.lineEnd(), e = null;\n        },\n        clean: function clean() {\n          return f | (c && l) << 1;\n        }\n      };\n    }\n\n    function r(n, t, e) {\n      var r = dt(n),\n          i = dt(t),\n          o = [1, 0, 0],\n          a = mt(r, i),\n          l = yt(a, a),\n          c = a[0],\n          f = l - c * c;\n      if (!f) return !e && n;\n      var s = u * l / f,\n          h = -u * c / f,\n          p = mt(o, a),\n          g = xt(o, s),\n          v = xt(a, h);\n      Mt(g, v);\n      var d = p,\n          y = yt(g, d),\n          m = yt(d, d),\n          M = y * y - m * (yt(g, g) - 1);\n\n      if (!(0 > M)) {\n        var x = Math.sqrt(M),\n            b = xt(d, (-y - x) / m);\n        if (Mt(b, g), b = _t(b), !e) return b;\n\n        var _,\n            w = n[0],\n            S = t[0],\n            k = n[1],\n            N = t[1];\n\n        w > S && (_ = w, w = S, S = _);\n        var E = S - w,\n            A = xo(E - Fo) < Uo,\n            C = A || Uo > E;\n\n        if (!A && k > N && (_ = k, k = N, N = _), C ? A ? k + N > 0 ^ b[1] < (xo(b[0] - w) < Uo ? k : N) : k <= b[1] && b[1] <= N : E > Fo ^ (w <= b[0] && b[0] <= S)) {\n          var z = xt(d, (-y + x) / m);\n          return Mt(z, g), [b, _t(z)];\n        }\n      }\n    }\n\n    function i(t, e) {\n      var r = o ? n : Fo - n,\n          i = 0;\n      return -r > t ? i |= 1 : t > r && (i |= 2), -r > e ? i |= 4 : e > r && (i |= 8), i;\n    }\n\n    var u = Math.cos(n),\n        o = u > 0,\n        a = xo(u) > Uo,\n        l = ve(n, 6 * Yo);\n    return Rt(t, e, l, o ? [0, -n] : [-Fo, n - Fo]);\n  }\n\n  function Yt(n, t, e, r) {\n    return function (i) {\n      var u,\n          o = i.a,\n          a = i.b,\n          l = o.x,\n          c = o.y,\n          f = a.x,\n          s = a.y,\n          h = 0,\n          p = 1,\n          g = f - l,\n          v = s - c;\n\n      if (u = n - l, g || !(u > 0)) {\n        if (u /= g, 0 > g) {\n          if (h > u) return;\n          p > u && (p = u);\n        } else if (g > 0) {\n          if (u > p) return;\n          u > h && (h = u);\n        }\n\n        if (u = e - l, g || !(0 > u)) {\n          if (u /= g, 0 > g) {\n            if (u > p) return;\n            u > h && (h = u);\n          } else if (g > 0) {\n            if (h > u) return;\n            p > u && (p = u);\n          }\n\n          if (u = t - c, v || !(u > 0)) {\n            if (u /= v, 0 > v) {\n              if (h > u) return;\n              p > u && (p = u);\n            } else if (v > 0) {\n              if (u > p) return;\n              u > h && (h = u);\n            }\n\n            if (u = r - c, v || !(0 > u)) {\n              if (u /= v, 0 > v) {\n                if (u > p) return;\n                u > h && (h = u);\n              } else if (v > 0) {\n                if (h > u) return;\n                p > u && (p = u);\n              }\n\n              return h > 0 && (i.a = {\n                x: l + h * g,\n                y: c + h * v\n              }), 1 > p && (i.b = {\n                x: l + p * g,\n                y: c + p * v\n              }), i;\n            }\n          }\n        }\n      }\n    };\n  }\n\n  function Zt(n, t, e, r) {\n    function i(r, i) {\n      return xo(r[0] - n) < Uo ? i > 0 ? 0 : 3 : xo(r[0] - e) < Uo ? i > 0 ? 2 : 1 : xo(r[1] - t) < Uo ? i > 0 ? 1 : 0 : i > 0 ? 3 : 2;\n    }\n\n    function u(n, t) {\n      return o(n.x, t.x);\n    }\n\n    function o(n, t) {\n      var e = i(n, 1),\n          r = i(t, 1);\n      return e !== r ? e - r : 0 === e ? t[1] - n[1] : 1 === e ? n[0] - t[0] : 2 === e ? n[1] - t[1] : t[0] - n[0];\n    }\n\n    return function (a) {\n      function l(n) {\n        for (var t = 0, e = d.length, r = n[1], i = 0; e > i; ++i) {\n          for (var u, o = 1, a = d[i], l = a.length, c = a[0]; l > o; ++o) {\n            u = a[o], c[1] <= r ? u[1] > r && Q(c, u, n) > 0 && ++t : u[1] <= r && Q(c, u, n) < 0 && --t, c = u;\n          }\n        }\n\n        return 0 !== t;\n      }\n\n      function c(u, a, l, c) {\n        var f = 0,\n            s = 0;\n\n        if (null == u || (f = i(u, l)) !== (s = i(a, l)) || o(u, a) < 0 ^ l > 0) {\n          do {\n            c.point(0 === f || 3 === f ? n : e, f > 1 ? r : t);\n          } while ((f = (f + l + 4) % 4) !== s);\n        } else c.point(a[0], a[1]);\n      }\n\n      function f(i, u) {\n        return i >= n && e >= i && u >= t && r >= u;\n      }\n\n      function s(n, t) {\n        f(n, t) && a.point(n, t);\n      }\n\n      function h() {\n        C.point = g, d && d.push(y = []), S = !0, w = !1, b = _ = NaN;\n      }\n\n      function p() {\n        v && (g(m, M), x && w && E.rejoin(), v.push(E.buffer())), C.point = s, w && a.lineEnd();\n      }\n\n      function g(n, t) {\n        n = Math.max(-Ha, Math.min(Ha, n)), t = Math.max(-Ha, Math.min(Ha, t));\n        var e = f(n, t);\n        if (d && y.push([n, t]), S) m = n, M = t, x = e, S = !1, e && (a.lineStart(), a.point(n, t));else if (e && w) a.point(n, t);else {\n          var r = {\n            a: {\n              x: b,\n              y: _\n            },\n            b: {\n              x: n,\n              y: t\n            }\n          };\n          A(r) ? (w || (a.lineStart(), a.point(r.a.x, r.a.y)), a.point(r.b.x, r.b.y), e || a.lineEnd(), k = !1) : e && (a.lineStart(), a.point(n, t), k = !1);\n        }\n        b = n, _ = t, w = e;\n      }\n\n      var v,\n          d,\n          y,\n          m,\n          M,\n          x,\n          b,\n          _,\n          w,\n          S,\n          k,\n          N = a,\n          E = Pt(),\n          A = Yt(n, t, e, r),\n          C = {\n        point: s,\n        lineStart: h,\n        lineEnd: p,\n        polygonStart: function polygonStart() {\n          a = E, v = [], d = [], k = !0;\n        },\n        polygonEnd: function polygonEnd() {\n          a = N, v = ao.merge(v);\n          var t = l([n, r]),\n              e = k && t,\n              i = v.length;\n          (e || i) && (a.polygonStart(), e && (a.lineStart(), c(null, null, 1, a), a.lineEnd()), i && Lt(v, u, t, c, a), a.polygonEnd()), v = d = y = null;\n        }\n      };\n\n      return C;\n    };\n  }\n\n  function Vt(n) {\n    var t = 0,\n        e = Fo / 3,\n        r = ae(n),\n        i = r(t, e);\n    return i.parallels = function (n) {\n      return arguments.length ? r(t = n[0] * Fo / 180, e = n[1] * Fo / 180) : [t / Fo * 180, e / Fo * 180];\n    }, i;\n  }\n\n  function Xt(n, t) {\n    function e(n, t) {\n      var e = Math.sqrt(u - 2 * i * Math.sin(t)) / i;\n      return [e * Math.sin(n *= i), o - e * Math.cos(n)];\n    }\n\n    var r = Math.sin(n),\n        i = (r + Math.sin(t)) / 2,\n        u = 1 + r * (2 * i - r),\n        o = Math.sqrt(u) / i;\n    return e.invert = function (n, t) {\n      var e = o - t;\n      return [Math.atan2(n, e) / i, tn((u - (n * n + e * e) * i * i) / (2 * i))];\n    }, e;\n  }\n\n  function $t() {\n    function n(n, t) {\n      Ia += i * n - r * t, r = n, i = t;\n    }\n\n    var t, e, r, i;\n    $a.point = function (u, o) {\n      $a.point = n, t = r = u, e = i = o;\n    }, $a.lineEnd = function () {\n      n(t, e);\n    };\n  }\n\n  function Bt(n, t) {\n    Ya > n && (Ya = n), n > Va && (Va = n), Za > t && (Za = t), t > Xa && (Xa = t);\n  }\n\n  function Wt() {\n    function n(n, t) {\n      o.push(\"M\", n, \",\", t, u);\n    }\n\n    function t(n, t) {\n      o.push(\"M\", n, \",\", t), a.point = e;\n    }\n\n    function e(n, t) {\n      o.push(\"L\", n, \",\", t);\n    }\n\n    function r() {\n      a.point = n;\n    }\n\n    function i() {\n      o.push(\"Z\");\n    }\n\n    var u = Jt(4.5),\n        o = [],\n        a = {\n      point: n,\n      lineStart: function lineStart() {\n        a.point = t;\n      },\n      lineEnd: r,\n      polygonStart: function polygonStart() {\n        a.lineEnd = i;\n      },\n      polygonEnd: function polygonEnd() {\n        a.lineEnd = r, a.point = n;\n      },\n      pointRadius: function pointRadius(n) {\n        return u = Jt(n), a;\n      },\n      result: function result() {\n        if (o.length) {\n          var n = o.join(\"\");\n          return o = [], n;\n        }\n      }\n    };\n    return a;\n  }\n\n  function Jt(n) {\n    return \"m0,\" + n + \"a\" + n + \",\" + n + \" 0 1,1 0,\" + -2 * n + \"a\" + n + \",\" + n + \" 0 1,1 0,\" + 2 * n + \"z\";\n  }\n\n  function Gt(n, t) {\n    Ca += n, za += t, ++La;\n  }\n\n  function Kt() {\n    function n(n, r) {\n      var i = n - t,\n          u = r - e,\n          o = Math.sqrt(i * i + u * u);\n      qa += o * (t + n) / 2, Ta += o * (e + r) / 2, Ra += o, Gt(t = n, e = r);\n    }\n\n    var t, e;\n\n    Wa.point = function (r, i) {\n      Wa.point = n, Gt(t = r, e = i);\n    };\n  }\n\n  function Qt() {\n    Wa.point = Gt;\n  }\n\n  function ne() {\n    function n(n, t) {\n      var e = n - r,\n          u = t - i,\n          o = Math.sqrt(e * e + u * u);\n      qa += o * (r + n) / 2, Ta += o * (i + t) / 2, Ra += o, o = i * n - r * t, Da += o * (r + n), Pa += o * (i + t), Ua += 3 * o, Gt(r = n, i = t);\n    }\n\n    var t, e, r, i;\n    Wa.point = function (u, o) {\n      Wa.point = n, Gt(t = r = u, e = i = o);\n    }, Wa.lineEnd = function () {\n      n(t, e);\n    };\n  }\n\n  function te(n) {\n    function t(t, e) {\n      n.moveTo(t + o, e), n.arc(t, e, o, 0, Ho);\n    }\n\n    function e(t, e) {\n      n.moveTo(t, e), a.point = r;\n    }\n\n    function r(t, e) {\n      n.lineTo(t, e);\n    }\n\n    function i() {\n      a.point = t;\n    }\n\n    function u() {\n      n.closePath();\n    }\n\n    var o = 4.5,\n        a = {\n      point: t,\n      lineStart: function lineStart() {\n        a.point = e;\n      },\n      lineEnd: i,\n      polygonStart: function polygonStart() {\n        a.lineEnd = u;\n      },\n      polygonEnd: function polygonEnd() {\n        a.lineEnd = i, a.point = t;\n      },\n      pointRadius: function pointRadius(n) {\n        return o = n, a;\n      },\n      result: b\n    };\n    return a;\n  }\n\n  function ee(n) {\n    function t(n) {\n      return (a ? r : e)(n);\n    }\n\n    function e(t) {\n      return ue(t, function (e, r) {\n        e = n(e, r), t.point(e[0], e[1]);\n      });\n    }\n\n    function r(t) {\n      function e(e, r) {\n        e = n(e, r), t.point(e[0], e[1]);\n      }\n\n      function r() {\n        M = NaN, S.point = u, t.lineStart();\n      }\n\n      function u(e, r) {\n        var u = dt([e, r]),\n            o = n(e, r);\n        i(M, x, m, b, _, w, M = o[0], x = o[1], m = e, b = u[0], _ = u[1], w = u[2], a, t), t.point(M, x);\n      }\n\n      function o() {\n        S.point = e, t.lineEnd();\n      }\n\n      function l() {\n        r(), S.point = c, S.lineEnd = f;\n      }\n\n      function c(n, t) {\n        u(s = n, h = t), p = M, g = x, v = b, d = _, y = w, S.point = u;\n      }\n\n      function f() {\n        i(M, x, m, b, _, w, p, g, s, v, d, y, a, t), S.lineEnd = o, o();\n      }\n\n      var s,\n          h,\n          p,\n          g,\n          v,\n          d,\n          y,\n          m,\n          M,\n          x,\n          b,\n          _,\n          w,\n          S = {\n        point: e,\n        lineStart: r,\n        lineEnd: o,\n        polygonStart: function polygonStart() {\n          t.polygonStart(), S.lineStart = l;\n        },\n        polygonEnd: function polygonEnd() {\n          t.polygonEnd(), S.lineStart = r;\n        }\n      };\n\n      return S;\n    }\n\n    function i(t, e, r, a, l, c, f, s, h, p, g, v, d, y) {\n      var m = f - t,\n          M = s - e,\n          x = m * m + M * M;\n\n      if (x > 4 * u && d--) {\n        var b = a + p,\n            _ = l + g,\n            w = c + v,\n            S = Math.sqrt(b * b + _ * _ + w * w),\n            k = Math.asin(w /= S),\n            N = xo(xo(w) - 1) < Uo || xo(r - h) < Uo ? (r + h) / 2 : Math.atan2(_, b),\n            E = n(N, k),\n            A = E[0],\n            C = E[1],\n            z = A - t,\n            L = C - e,\n            q = M * z - m * L;\n\n        (q * q / x > u || xo((m * z + M * L) / x - .5) > .3 || o > a * p + l * g + c * v) && (i(t, e, r, a, l, c, A, C, N, b /= S, _ /= S, w, d, y), y.point(A, C), i(A, C, N, b, _, w, f, s, h, p, g, v, d, y));\n      }\n    }\n\n    var u = .5,\n        o = Math.cos(30 * Yo),\n        a = 16;\n    return t.precision = function (n) {\n      return arguments.length ? (a = (u = n * n) > 0 && 16, t) : Math.sqrt(u);\n    }, t;\n  }\n\n  function re(n) {\n    var t = ee(function (t, e) {\n      return n([t * Zo, e * Zo]);\n    });\n    return function (n) {\n      return le(t(n));\n    };\n  }\n\n  function ie(n) {\n    this.stream = n;\n  }\n\n  function ue(n, t) {\n    return {\n      point: t,\n      sphere: function sphere() {\n        n.sphere();\n      },\n      lineStart: function lineStart() {\n        n.lineStart();\n      },\n      lineEnd: function lineEnd() {\n        n.lineEnd();\n      },\n      polygonStart: function polygonStart() {\n        n.polygonStart();\n      },\n      polygonEnd: function polygonEnd() {\n        n.polygonEnd();\n      }\n    };\n  }\n\n  function oe(n) {\n    return ae(function () {\n      return n;\n    })();\n  }\n\n  function ae(n) {\n    function t(n) {\n      return n = a(n[0] * Yo, n[1] * Yo), [n[0] * h + l, c - n[1] * h];\n    }\n\n    function e(n) {\n      return n = a.invert((n[0] - l) / h, (c - n[1]) / h), n && [n[0] * Zo, n[1] * Zo];\n    }\n\n    function r() {\n      a = Ct(o = se(y, M, x), u);\n      var n = u(v, d);\n      return l = p - n[0] * h, c = g + n[1] * h, i();\n    }\n\n    function i() {\n      return f && (f.valid = !1, f = null), t;\n    }\n\n    var u,\n        o,\n        a,\n        l,\n        c,\n        f,\n        s = ee(function (n, t) {\n      return n = u(n, t), [n[0] * h + l, c - n[1] * h];\n    }),\n        h = 150,\n        p = 480,\n        g = 250,\n        v = 0,\n        d = 0,\n        y = 0,\n        M = 0,\n        x = 0,\n        b = Fa,\n        _ = m,\n        w = null,\n        S = null;\n    return t.stream = function (n) {\n      return f && (f.valid = !1), f = le(b(o, s(_(n)))), f.valid = !0, f;\n    }, t.clipAngle = function (n) {\n      return arguments.length ? (b = null == n ? (w = n, Fa) : It((w = +n) * Yo), i()) : w;\n    }, t.clipExtent = function (n) {\n      return arguments.length ? (S = n, _ = n ? Zt(n[0][0], n[0][1], n[1][0], n[1][1]) : m, i()) : S;\n    }, t.scale = function (n) {\n      return arguments.length ? (h = +n, r()) : h;\n    }, t.translate = function (n) {\n      return arguments.length ? (p = +n[0], g = +n[1], r()) : [p, g];\n    }, t.center = function (n) {\n      return arguments.length ? (v = n[0] % 360 * Yo, d = n[1] % 360 * Yo, r()) : [v * Zo, d * Zo];\n    }, t.rotate = function (n) {\n      return arguments.length ? (y = n[0] % 360 * Yo, M = n[1] % 360 * Yo, x = n.length > 2 ? n[2] % 360 * Yo : 0, r()) : [y * Zo, M * Zo, x * Zo];\n    }, ao.rebind(t, s, \"precision\"), function () {\n      return u = n.apply(this, arguments), t.invert = u.invert && e, r();\n    };\n  }\n\n  function le(n) {\n    return ue(n, function (t, e) {\n      n.point(t * Yo, e * Yo);\n    });\n  }\n\n  function ce(n, t) {\n    return [n, t];\n  }\n\n  function fe(n, t) {\n    return [n > Fo ? n - Ho : -Fo > n ? n + Ho : n, t];\n  }\n\n  function se(n, t, e) {\n    return n ? t || e ? Ct(pe(n), ge(t, e)) : pe(n) : t || e ? ge(t, e) : fe;\n  }\n\n  function he(n) {\n    return function (t, e) {\n      return t += n, [t > Fo ? t - Ho : -Fo > t ? t + Ho : t, e];\n    };\n  }\n\n  function pe(n) {\n    var t = he(n);\n    return t.invert = he(-n), t;\n  }\n\n  function ge(n, t) {\n    function e(n, t) {\n      var e = Math.cos(t),\n          a = Math.cos(n) * e,\n          l = Math.sin(n) * e,\n          c = Math.sin(t),\n          f = c * r + a * i;\n      return [Math.atan2(l * u - f * o, a * r - c * i), tn(f * u + l * o)];\n    }\n\n    var r = Math.cos(n),\n        i = Math.sin(n),\n        u = Math.cos(t),\n        o = Math.sin(t);\n    return e.invert = function (n, t) {\n      var e = Math.cos(t),\n          a = Math.cos(n) * e,\n          l = Math.sin(n) * e,\n          c = Math.sin(t),\n          f = c * u - l * o;\n      return [Math.atan2(l * u + c * o, a * r + f * i), tn(f * r - a * i)];\n    }, e;\n  }\n\n  function ve(n, t) {\n    var e = Math.cos(n),\n        r = Math.sin(n);\n    return function (i, u, o, a) {\n      var l = o * t;\n      null != i ? (i = de(e, i), u = de(e, u), (o > 0 ? u > i : i > u) && (i += o * Ho)) : (i = n + o * Ho, u = n - .5 * l);\n\n      for (var c, f = i; o > 0 ? f > u : u > f; f -= l) {\n        a.point((c = _t([e, -r * Math.cos(f), -r * Math.sin(f)]))[0], c[1]);\n      }\n    };\n  }\n\n  function de(n, t) {\n    var e = dt(t);\n    e[0] -= n, bt(e);\n    var r = nn(-e[1]);\n    return ((-e[2] < 0 ? -r : r) + 2 * Math.PI - Uo) % (2 * Math.PI);\n  }\n\n  function ye(n, t, e) {\n    var r = ao.range(n, t - Uo, e).concat(t);\n    return function (n) {\n      return r.map(function (t) {\n        return [n, t];\n      });\n    };\n  }\n\n  function me(n, t, e) {\n    var r = ao.range(n, t - Uo, e).concat(t);\n    return function (n) {\n      return r.map(function (t) {\n        return [t, n];\n      });\n    };\n  }\n\n  function Me(n) {\n    return n.source;\n  }\n\n  function xe(n) {\n    return n.target;\n  }\n\n  function be(n, t, e, r) {\n    var i = Math.cos(t),\n        u = Math.sin(t),\n        o = Math.cos(r),\n        a = Math.sin(r),\n        l = i * Math.cos(n),\n        c = i * Math.sin(n),\n        f = o * Math.cos(e),\n        s = o * Math.sin(e),\n        h = 2 * Math.asin(Math.sqrt(on(r - t) + i * o * on(e - n))),\n        p = 1 / Math.sin(h),\n        g = h ? function (n) {\n      var t = Math.sin(n *= h) * p,\n          e = Math.sin(h - n) * p,\n          r = e * l + t * f,\n          i = e * c + t * s,\n          o = e * u + t * a;\n      return [Math.atan2(i, r) * Zo, Math.atan2(o, Math.sqrt(r * r + i * i)) * Zo];\n    } : function () {\n      return [n * Zo, t * Zo];\n    };\n    return g.distance = h, g;\n  }\n\n  function _e() {\n    function n(n, i) {\n      var u = Math.sin(i *= Yo),\n          o = Math.cos(i),\n          a = xo((n *= Yo) - t),\n          l = Math.cos(a);\n      Ja += Math.atan2(Math.sqrt((a = o * Math.sin(a)) * a + (a = r * u - e * o * l) * a), e * u + r * o * l), t = n, e = u, r = o;\n    }\n\n    var t, e, r;\n    Ga.point = function (i, u) {\n      t = i * Yo, e = Math.sin(u *= Yo), r = Math.cos(u), Ga.point = n;\n    }, Ga.lineEnd = function () {\n      Ga.point = Ga.lineEnd = b;\n    };\n  }\n\n  function we(n, t) {\n    function e(t, e) {\n      var r = Math.cos(t),\n          i = Math.cos(e),\n          u = n(r * i);\n      return [u * i * Math.sin(t), u * Math.sin(e)];\n    }\n\n    return e.invert = function (n, e) {\n      var r = Math.sqrt(n * n + e * e),\n          i = t(r),\n          u = Math.sin(i),\n          o = Math.cos(i);\n      return [Math.atan2(n * u, r * o), Math.asin(r && e * u / r)];\n    }, e;\n  }\n\n  function Se(n, t) {\n    function e(n, t) {\n      o > 0 ? -Io + Uo > t && (t = -Io + Uo) : t > Io - Uo && (t = Io - Uo);\n      var e = o / Math.pow(i(t), u);\n      return [e * Math.sin(u * n), o - e * Math.cos(u * n)];\n    }\n\n    var r = Math.cos(n),\n        i = function i(n) {\n      return Math.tan(Fo / 4 + n / 2);\n    },\n        u = n === t ? Math.sin(n) : Math.log(r / Math.cos(t)) / Math.log(i(t) / i(n)),\n        o = r * Math.pow(i(n), u) / u;\n\n    return u ? (e.invert = function (n, t) {\n      var e = o - t,\n          r = K(u) * Math.sqrt(n * n + e * e);\n      return [Math.atan2(n, e) / u, 2 * Math.atan(Math.pow(o / r, 1 / u)) - Io];\n    }, e) : Ne;\n  }\n\n  function ke(n, t) {\n    function e(n, t) {\n      var e = u - t;\n      return [e * Math.sin(i * n), u - e * Math.cos(i * n)];\n    }\n\n    var r = Math.cos(n),\n        i = n === t ? Math.sin(n) : (r - Math.cos(t)) / (t - n),\n        u = r / i + n;\n    return xo(i) < Uo ? ce : (e.invert = function (n, t) {\n      var e = u - t;\n      return [Math.atan2(n, e) / i, u - K(i) * Math.sqrt(n * n + e * e)];\n    }, e);\n  }\n\n  function Ne(n, t) {\n    return [n, Math.log(Math.tan(Fo / 4 + t / 2))];\n  }\n\n  function Ee(n) {\n    var t,\n        e = oe(n),\n        r = e.scale,\n        i = e.translate,\n        u = e.clipExtent;\n    return e.scale = function () {\n      var n = r.apply(e, arguments);\n      return n === e ? t ? e.clipExtent(null) : e : n;\n    }, e.translate = function () {\n      var n = i.apply(e, arguments);\n      return n === e ? t ? e.clipExtent(null) : e : n;\n    }, e.clipExtent = function (n) {\n      var o = u.apply(e, arguments);\n\n      if (o === e) {\n        if (t = null == n) {\n          var a = Fo * r(),\n              l = i();\n          u([[l[0] - a, l[1] - a], [l[0] + a, l[1] + a]]);\n        }\n      } else t && (o = null);\n\n      return o;\n    }, e.clipExtent(null);\n  }\n\n  function Ae(n, t) {\n    return [Math.log(Math.tan(Fo / 4 + t / 2)), -n];\n  }\n\n  function Ce(n) {\n    return n[0];\n  }\n\n  function ze(n) {\n    return n[1];\n  }\n\n  function Le(n) {\n    for (var t = n.length, e = [0, 1], r = 2, i = 2; t > i; i++) {\n      for (; r > 1 && Q(n[e[r - 2]], n[e[r - 1]], n[i]) <= 0;) {\n        --r;\n      }\n\n      e[r++] = i;\n    }\n\n    return e.slice(0, r);\n  }\n\n  function qe(n, t) {\n    return n[0] - t[0] || n[1] - t[1];\n  }\n\n  function Te(n, t, e) {\n    return (e[0] - t[0]) * (n[1] - t[1]) < (e[1] - t[1]) * (n[0] - t[0]);\n  }\n\n  function Re(n, t, e, r) {\n    var i = n[0],\n        u = e[0],\n        o = t[0] - i,\n        a = r[0] - u,\n        l = n[1],\n        c = e[1],\n        f = t[1] - l,\n        s = r[1] - c,\n        h = (a * (l - c) - s * (i - u)) / (s * o - a * f);\n    return [i + h * o, l + h * f];\n  }\n\n  function De(n) {\n    var t = n[0],\n        e = n[n.length - 1];\n    return !(t[0] - e[0] || t[1] - e[1]);\n  }\n\n  function Pe() {\n    rr(this), this.edge = this.site = this.circle = null;\n  }\n\n  function Ue(n) {\n    var t = cl.pop() || new Pe();\n    return t.site = n, t;\n  }\n\n  function je(n) {\n    Be(n), ol.remove(n), cl.push(n), rr(n);\n  }\n\n  function Fe(n) {\n    var t = n.circle,\n        e = t.x,\n        r = t.cy,\n        i = {\n      x: e,\n      y: r\n    },\n        u = n.P,\n        o = n.N,\n        a = [n];\n    je(n);\n\n    for (var l = u; l.circle && xo(e - l.circle.x) < Uo && xo(r - l.circle.cy) < Uo;) {\n      u = l.P, a.unshift(l), je(l), l = u;\n    }\n\n    a.unshift(l), Be(l);\n\n    for (var c = o; c.circle && xo(e - c.circle.x) < Uo && xo(r - c.circle.cy) < Uo;) {\n      o = c.N, a.push(c), je(c), c = o;\n    }\n\n    a.push(c), Be(c);\n    var f,\n        s = a.length;\n\n    for (f = 1; s > f; ++f) {\n      c = a[f], l = a[f - 1], nr(c.edge, l.site, c.site, i);\n    }\n\n    l = a[0], c = a[s - 1], c.edge = Ke(l.site, c.site, null, i), $e(l), $e(c);\n  }\n\n  function He(n) {\n    for (var t, e, r, i, u = n.x, o = n.y, a = ol._; a;) {\n      if (r = Oe(a, o) - u, r > Uo) a = a.L;else {\n        if (i = u - Ie(a, o), !(i > Uo)) {\n          r > -Uo ? (t = a.P, e = a) : i > -Uo ? (t = a, e = a.N) : t = e = a;\n          break;\n        }\n\n        if (!a.R) {\n          t = a;\n          break;\n        }\n\n        a = a.R;\n      }\n    }\n\n    var l = Ue(n);\n\n    if (ol.insert(t, l), t || e) {\n      if (t === e) return Be(t), e = Ue(t.site), ol.insert(l, e), l.edge = e.edge = Ke(t.site, l.site), $e(t), void $e(e);\n      if (!e) return void (l.edge = Ke(t.site, l.site));\n      Be(t), Be(e);\n      var c = t.site,\n          f = c.x,\n          s = c.y,\n          h = n.x - f,\n          p = n.y - s,\n          g = e.site,\n          v = g.x - f,\n          d = g.y - s,\n          y = 2 * (h * d - p * v),\n          m = h * h + p * p,\n          M = v * v + d * d,\n          x = {\n        x: (d * m - p * M) / y + f,\n        y: (h * M - v * m) / y + s\n      };\n      nr(e.edge, c, g, x), l.edge = Ke(c, n, null, x), e.edge = Ke(n, g, null, x), $e(t), $e(e);\n    }\n  }\n\n  function Oe(n, t) {\n    var e = n.site,\n        r = e.x,\n        i = e.y,\n        u = i - t;\n    if (!u) return r;\n    var o = n.P;\n    if (!o) return -(1 / 0);\n    e = o.site;\n    var a = e.x,\n        l = e.y,\n        c = l - t;\n    if (!c) return a;\n    var f = a - r,\n        s = 1 / u - 1 / c,\n        h = f / c;\n    return s ? (-h + Math.sqrt(h * h - 2 * s * (f * f / (-2 * c) - l + c / 2 + i - u / 2))) / s + r : (r + a) / 2;\n  }\n\n  function Ie(n, t) {\n    var e = n.N;\n    if (e) return Oe(e, t);\n    var r = n.site;\n    return r.y === t ? r.x : 1 / 0;\n  }\n\n  function Ye(n) {\n    this.site = n, this.edges = [];\n  }\n\n  function Ze(n) {\n    for (var t, e, r, i, u, o, a, l, c, f, s = n[0][0], h = n[1][0], p = n[0][1], g = n[1][1], v = ul, d = v.length; d--;) {\n      if (u = v[d], u && u.prepare()) for (a = u.edges, l = a.length, o = 0; l > o;) {\n        f = a[o].end(), r = f.x, i = f.y, c = a[++o % l].start(), t = c.x, e = c.y, (xo(r - t) > Uo || xo(i - e) > Uo) && (a.splice(o, 0, new tr(Qe(u.site, f, xo(r - s) < Uo && g - i > Uo ? {\n          x: s,\n          y: xo(t - s) < Uo ? e : g\n        } : xo(i - g) < Uo && h - r > Uo ? {\n          x: xo(e - g) < Uo ? t : h,\n          y: g\n        } : xo(r - h) < Uo && i - p > Uo ? {\n          x: h,\n          y: xo(t - h) < Uo ? e : p\n        } : xo(i - p) < Uo && r - s > Uo ? {\n          x: xo(e - p) < Uo ? t : s,\n          y: p\n        } : null), u.site, null)), ++l);\n      }\n    }\n  }\n\n  function Ve(n, t) {\n    return t.angle - n.angle;\n  }\n\n  function Xe() {\n    rr(this), this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n\n  function $e(n) {\n    var t = n.P,\n        e = n.N;\n\n    if (t && e) {\n      var r = t.site,\n          i = n.site,\n          u = e.site;\n\n      if (r !== u) {\n        var o = i.x,\n            a = i.y,\n            l = r.x - o,\n            c = r.y - a,\n            f = u.x - o,\n            s = u.y - a,\n            h = 2 * (l * s - c * f);\n\n        if (!(h >= -jo)) {\n          var p = l * l + c * c,\n              g = f * f + s * s,\n              v = (s * p - c * g) / h,\n              d = (l * g - f * p) / h,\n              s = d + a,\n              y = fl.pop() || new Xe();\n          y.arc = n, y.site = i, y.x = v + o, y.y = s + Math.sqrt(v * v + d * d), y.cy = s, n.circle = y;\n\n          for (var m = null, M = ll._; M;) {\n            if (y.y < M.y || y.y === M.y && y.x <= M.x) {\n              if (!M.L) {\n                m = M.P;\n                break;\n              }\n\n              M = M.L;\n            } else {\n              if (!M.R) {\n                m = M;\n                break;\n              }\n\n              M = M.R;\n            }\n          }\n\n          ll.insert(m, y), m || (al = y);\n        }\n      }\n    }\n  }\n\n  function Be(n) {\n    var t = n.circle;\n    t && (t.P || (al = t.N), ll.remove(t), fl.push(t), rr(t), n.circle = null);\n  }\n\n  function We(n) {\n    for (var t, e = il, r = Yt(n[0][0], n[0][1], n[1][0], n[1][1]), i = e.length; i--;) {\n      t = e[i], (!Je(t, n) || !r(t) || xo(t.a.x - t.b.x) < Uo && xo(t.a.y - t.b.y) < Uo) && (t.a = t.b = null, e.splice(i, 1));\n    }\n  }\n\n  function Je(n, t) {\n    var e = n.b;\n    if (e) return !0;\n    var r,\n        i,\n        u = n.a,\n        o = t[0][0],\n        a = t[1][0],\n        l = t[0][1],\n        c = t[1][1],\n        f = n.l,\n        s = n.r,\n        h = f.x,\n        p = f.y,\n        g = s.x,\n        v = s.y,\n        d = (h + g) / 2,\n        y = (p + v) / 2;\n\n    if (v === p) {\n      if (o > d || d >= a) return;\n\n      if (h > g) {\n        if (u) {\n          if (u.y >= c) return;\n        } else u = {\n          x: d,\n          y: l\n        };\n\n        e = {\n          x: d,\n          y: c\n        };\n      } else {\n        if (u) {\n          if (u.y < l) return;\n        } else u = {\n          x: d,\n          y: c\n        };\n\n        e = {\n          x: d,\n          y: l\n        };\n      }\n    } else if (r = (h - g) / (v - p), i = y - r * d, -1 > r || r > 1) {\n      if (h > g) {\n        if (u) {\n          if (u.y >= c) return;\n        } else u = {\n          x: (l - i) / r,\n          y: l\n        };\n\n        e = {\n          x: (c - i) / r,\n          y: c\n        };\n      } else {\n        if (u) {\n          if (u.y < l) return;\n        } else u = {\n          x: (c - i) / r,\n          y: c\n        };\n\n        e = {\n          x: (l - i) / r,\n          y: l\n        };\n      }\n    } else if (v > p) {\n      if (u) {\n        if (u.x >= a) return;\n      } else u = {\n        x: o,\n        y: r * o + i\n      };\n\n      e = {\n        x: a,\n        y: r * a + i\n      };\n    } else {\n      if (u) {\n        if (u.x < o) return;\n      } else u = {\n        x: a,\n        y: r * a + i\n      };\n\n      e = {\n        x: o,\n        y: r * o + i\n      };\n    }\n\n    return n.a = u, n.b = e, !0;\n  }\n\n  function Ge(n, t) {\n    this.l = n, this.r = t, this.a = this.b = null;\n  }\n\n  function Ke(n, t, e, r) {\n    var i = new Ge(n, t);\n    return il.push(i), e && nr(i, n, t, e), r && nr(i, t, n, r), ul[n.i].edges.push(new tr(i, n, t)), ul[t.i].edges.push(new tr(i, t, n)), i;\n  }\n\n  function Qe(n, t, e) {\n    var r = new Ge(n, null);\n    return r.a = t, r.b = e, il.push(r), r;\n  }\n\n  function nr(n, t, e, r) {\n    n.a || n.b ? n.l === e ? n.b = r : n.a = r : (n.a = r, n.l = t, n.r = e);\n  }\n\n  function tr(n, t, e) {\n    var r = n.a,\n        i = n.b;\n    this.edge = n, this.site = t, this.angle = e ? Math.atan2(e.y - t.y, e.x - t.x) : n.l === t ? Math.atan2(i.x - r.x, r.y - i.y) : Math.atan2(r.x - i.x, i.y - r.y);\n  }\n\n  function er() {\n    this._ = null;\n  }\n\n  function rr(n) {\n    n.U = n.C = n.L = n.R = n.P = n.N = null;\n  }\n\n  function ir(n, t) {\n    var e = t,\n        r = t.R,\n        i = e.U;\n    i ? i.L === e ? i.L = r : i.R = r : n._ = r, r.U = i, e.U = r, e.R = r.L, e.R && (e.R.U = e), r.L = e;\n  }\n\n  function ur(n, t) {\n    var e = t,\n        r = t.L,\n        i = e.U;\n    i ? i.L === e ? i.L = r : i.R = r : n._ = r, r.U = i, e.U = r, e.L = r.R, e.L && (e.L.U = e), r.R = e;\n  }\n\n  function or(n) {\n    for (; n.L;) {\n      n = n.L;\n    }\n\n    return n;\n  }\n\n  function ar(n, t) {\n    var e,\n        r,\n        i,\n        u = n.sort(lr).pop();\n\n    for (il = [], ul = new Array(n.length), ol = new er(), ll = new er();;) {\n      if (i = al, u && (!i || u.y < i.y || u.y === i.y && u.x < i.x)) u.x === e && u.y === r || (ul[u.i] = new Ye(u), He(u), e = u.x, r = u.y), u = n.pop();else {\n        if (!i) break;\n        Fe(i.arc);\n      }\n    }\n\n    t && (We(t), Ze(t));\n    var o = {\n      cells: ul,\n      edges: il\n    };\n    return ol = ll = il = ul = null, o;\n  }\n\n  function lr(n, t) {\n    return t.y - n.y || t.x - n.x;\n  }\n\n  function cr(n, t, e) {\n    return (n.x - e.x) * (t.y - n.y) - (n.x - t.x) * (e.y - n.y);\n  }\n\n  function fr(n) {\n    return n.x;\n  }\n\n  function sr(n) {\n    return n.y;\n  }\n\n  function hr() {\n    return {\n      leaf: !0,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n\n  function pr(n, t, e, r, i, u) {\n    if (!n(t, e, r, i, u)) {\n      var o = .5 * (e + i),\n          a = .5 * (r + u),\n          l = t.nodes;\n      l[0] && pr(n, l[0], e, r, o, a), l[1] && pr(n, l[1], o, r, i, a), l[2] && pr(n, l[2], e, a, o, u), l[3] && pr(n, l[3], o, a, i, u);\n    }\n  }\n\n  function gr(n, t, e, r, i, u, o) {\n    var a,\n        l = 1 / 0;\n    return function c(n, f, s, h, p) {\n      if (!(f > u || s > o || r > h || i > p)) {\n        if (g = n.point) {\n          var g,\n              v = t - n.x,\n              d = e - n.y,\n              y = v * v + d * d;\n\n          if (l > y) {\n            var m = Math.sqrt(l = y);\n            r = t - m, i = e - m, u = t + m, o = e + m, a = g;\n          }\n        }\n\n        for (var M = n.nodes, x = .5 * (f + h), b = .5 * (s + p), _ = t >= x, w = e >= b, S = w << 1 | _, k = S + 4; k > S; ++S) {\n          if (n = M[3 & S]) switch (3 & S) {\n            case 0:\n              c(n, f, s, x, b);\n              break;\n\n            case 1:\n              c(n, x, s, h, b);\n              break;\n\n            case 2:\n              c(n, f, b, x, p);\n              break;\n\n            case 3:\n              c(n, x, b, h, p);\n          }\n        }\n      }\n    }(n, r, i, u, o), a;\n  }\n\n  function vr(n, t) {\n    n = ao.rgb(n), t = ao.rgb(t);\n    var e = n.r,\n        r = n.g,\n        i = n.b,\n        u = t.r - e,\n        o = t.g - r,\n        a = t.b - i;\n    return function (n) {\n      return \"#\" + bn(Math.round(e + u * n)) + bn(Math.round(r + o * n)) + bn(Math.round(i + a * n));\n    };\n  }\n\n  function dr(n, t) {\n    var e,\n        r = {},\n        i = {};\n\n    for (e in n) {\n      e in t ? r[e] = Mr(n[e], t[e]) : i[e] = n[e];\n    }\n\n    for (e in t) {\n      e in n || (i[e] = t[e]);\n    }\n\n    return function (n) {\n      for (e in r) {\n        i[e] = r[e](n);\n      }\n\n      return i;\n    };\n  }\n\n  function yr(n, t) {\n    return n = +n, t = +t, function (e) {\n      return n * (1 - e) + t * e;\n    };\n  }\n\n  function mr(n, t) {\n    var e,\n        r,\n        i,\n        u = hl.lastIndex = pl.lastIndex = 0,\n        o = -1,\n        a = [],\n        l = [];\n\n    for (n += \"\", t += \"\"; (e = hl.exec(n)) && (r = pl.exec(t));) {\n      (i = r.index) > u && (i = t.slice(u, i), a[o] ? a[o] += i : a[++o] = i), (e = e[0]) === (r = r[0]) ? a[o] ? a[o] += r : a[++o] = r : (a[++o] = null, l.push({\n        i: o,\n        x: yr(e, r)\n      })), u = pl.lastIndex;\n    }\n\n    return u < t.length && (i = t.slice(u), a[o] ? a[o] += i : a[++o] = i), a.length < 2 ? l[0] ? (t = l[0].x, function (n) {\n      return t(n) + \"\";\n    }) : function () {\n      return t;\n    } : (t = l.length, function (n) {\n      for (var e, r = 0; t > r; ++r) {\n        a[(e = l[r]).i] = e.x(n);\n      }\n\n      return a.join(\"\");\n    });\n  }\n\n  function Mr(n, t) {\n    for (var e, r = ao.interpolators.length; --r >= 0 && !(e = ao.interpolators[r](n, t));) {\n      ;\n    }\n\n    return e;\n  }\n\n  function xr(n, t) {\n    var e,\n        r = [],\n        i = [],\n        u = n.length,\n        o = t.length,\n        a = Math.min(n.length, t.length);\n\n    for (e = 0; a > e; ++e) {\n      r.push(Mr(n[e], t[e]));\n    }\n\n    for (; u > e; ++e) {\n      i[e] = n[e];\n    }\n\n    for (; o > e; ++e) {\n      i[e] = t[e];\n    }\n\n    return function (n) {\n      for (e = 0; a > e; ++e) {\n        i[e] = r[e](n);\n      }\n\n      return i;\n    };\n  }\n\n  function br(n) {\n    return function (t) {\n      return 0 >= t ? 0 : t >= 1 ? 1 : n(t);\n    };\n  }\n\n  function _r(n) {\n    return function (t) {\n      return 1 - n(1 - t);\n    };\n  }\n\n  function wr(n) {\n    return function (t) {\n      return .5 * (.5 > t ? n(2 * t) : 2 - n(2 - 2 * t));\n    };\n  }\n\n  function Sr(n) {\n    return n * n;\n  }\n\n  function kr(n) {\n    return n * n * n;\n  }\n\n  function Nr(n) {\n    if (0 >= n) return 0;\n    if (n >= 1) return 1;\n    var t = n * n,\n        e = t * n;\n    return 4 * (.5 > n ? e : 3 * (n - t) + e - .75);\n  }\n\n  function Er(n) {\n    return function (t) {\n      return Math.pow(t, n);\n    };\n  }\n\n  function Ar(n) {\n    return 1 - Math.cos(n * Io);\n  }\n\n  function Cr(n) {\n    return Math.pow(2, 10 * (n - 1));\n  }\n\n  function zr(n) {\n    return 1 - Math.sqrt(1 - n * n);\n  }\n\n  function Lr(n, t) {\n    var e;\n    return arguments.length < 2 && (t = .45), arguments.length ? e = t / Ho * Math.asin(1 / n) : (n = 1, e = t / 4), function (r) {\n      return 1 + n * Math.pow(2, -10 * r) * Math.sin((r - e) * Ho / t);\n    };\n  }\n\n  function qr(n) {\n    return n || (n = 1.70158), function (t) {\n      return t * t * ((n + 1) * t - n);\n    };\n  }\n\n  function Tr(n) {\n    return 1 / 2.75 > n ? 7.5625 * n * n : 2 / 2.75 > n ? 7.5625 * (n -= 1.5 / 2.75) * n + .75 : 2.5 / 2.75 > n ? 7.5625 * (n -= 2.25 / 2.75) * n + .9375 : 7.5625 * (n -= 2.625 / 2.75) * n + .984375;\n  }\n\n  function Rr(n, t) {\n    n = ao.hcl(n), t = ao.hcl(t);\n    var e = n.h,\n        r = n.c,\n        i = n.l,\n        u = t.h - e,\n        o = t.c - r,\n        a = t.l - i;\n    return isNaN(o) && (o = 0, r = isNaN(r) ? t.c : r), isNaN(u) ? (u = 0, e = isNaN(e) ? t.h : e) : u > 180 ? u -= 360 : -180 > u && (u += 360), function (n) {\n      return sn(e + u * n, r + o * n, i + a * n) + \"\";\n    };\n  }\n\n  function Dr(n, t) {\n    n = ao.hsl(n), t = ao.hsl(t);\n    var e = n.h,\n        r = n.s,\n        i = n.l,\n        u = t.h - e,\n        o = t.s - r,\n        a = t.l - i;\n    return isNaN(o) && (o = 0, r = isNaN(r) ? t.s : r), isNaN(u) ? (u = 0, e = isNaN(e) ? t.h : e) : u > 180 ? u -= 360 : -180 > u && (u += 360), function (n) {\n      return cn(e + u * n, r + o * n, i + a * n) + \"\";\n    };\n  }\n\n  function Pr(n, t) {\n    n = ao.lab(n), t = ao.lab(t);\n    var e = n.l,\n        r = n.a,\n        i = n.b,\n        u = t.l - e,\n        o = t.a - r,\n        a = t.b - i;\n    return function (n) {\n      return pn(e + u * n, r + o * n, i + a * n) + \"\";\n    };\n  }\n\n  function Ur(n, t) {\n    return t -= n, function (e) {\n      return Math.round(n + t * e);\n    };\n  }\n\n  function jr(n) {\n    var t = [n.a, n.b],\n        e = [n.c, n.d],\n        r = Hr(t),\n        i = Fr(t, e),\n        u = Hr(Or(e, t, -i)) || 0;\n    t[0] * e[1] < e[0] * t[1] && (t[0] *= -1, t[1] *= -1, r *= -1, i *= -1), this.rotate = (r ? Math.atan2(t[1], t[0]) : Math.atan2(-e[0], e[1])) * Zo, this.translate = [n.e, n.f], this.scale = [r, u], this.skew = u ? Math.atan2(i, u) * Zo : 0;\n  }\n\n  function Fr(n, t) {\n    return n[0] * t[0] + n[1] * t[1];\n  }\n\n  function Hr(n) {\n    var t = Math.sqrt(Fr(n, n));\n    return t && (n[0] /= t, n[1] /= t), t;\n  }\n\n  function Or(n, t, e) {\n    return n[0] += e * t[0], n[1] += e * t[1], n;\n  }\n\n  function Ir(n) {\n    return n.length ? n.pop() + \",\" : \"\";\n  }\n\n  function Yr(n, t, e, r) {\n    if (n[0] !== t[0] || n[1] !== t[1]) {\n      var i = e.push(\"translate(\", null, \",\", null, \")\");\n      r.push({\n        i: i - 4,\n        x: yr(n[0], t[0])\n      }, {\n        i: i - 2,\n        x: yr(n[1], t[1])\n      });\n    } else (t[0] || t[1]) && e.push(\"translate(\" + t + \")\");\n  }\n\n  function Zr(n, t, e, r) {\n    n !== t ? (n - t > 180 ? t += 360 : t - n > 180 && (n += 360), r.push({\n      i: e.push(Ir(e) + \"rotate(\", null, \")\") - 2,\n      x: yr(n, t)\n    })) : t && e.push(Ir(e) + \"rotate(\" + t + \")\");\n  }\n\n  function Vr(n, t, e, r) {\n    n !== t ? r.push({\n      i: e.push(Ir(e) + \"skewX(\", null, \")\") - 2,\n      x: yr(n, t)\n    }) : t && e.push(Ir(e) + \"skewX(\" + t + \")\");\n  }\n\n  function Xr(n, t, e, r) {\n    if (n[0] !== t[0] || n[1] !== t[1]) {\n      var i = e.push(Ir(e) + \"scale(\", null, \",\", null, \")\");\n      r.push({\n        i: i - 4,\n        x: yr(n[0], t[0])\n      }, {\n        i: i - 2,\n        x: yr(n[1], t[1])\n      });\n    } else 1 === t[0] && 1 === t[1] || e.push(Ir(e) + \"scale(\" + t + \")\");\n  }\n\n  function $r(n, t) {\n    var e = [],\n        r = [];\n    return n = ao.transform(n), t = ao.transform(t), Yr(n.translate, t.translate, e, r), Zr(n.rotate, t.rotate, e, r), Vr(n.skew, t.skew, e, r), Xr(n.scale, t.scale, e, r), n = t = null, function (n) {\n      for (var t, i = -1, u = r.length; ++i < u;) {\n        e[(t = r[i]).i] = t.x(n);\n      }\n\n      return e.join(\"\");\n    };\n  }\n\n  function Br(n, t) {\n    return t = (t -= n = +n) || 1 / t, function (e) {\n      return (e - n) / t;\n    };\n  }\n\n  function Wr(n, t) {\n    return t = (t -= n = +n) || 1 / t, function (e) {\n      return Math.max(0, Math.min(1, (e - n) / t));\n    };\n  }\n\n  function Jr(n) {\n    for (var t = n.source, e = n.target, r = Kr(t, e), i = [t]; t !== r;) {\n      t = t.parent, i.push(t);\n    }\n\n    for (var u = i.length; e !== r;) {\n      i.splice(u, 0, e), e = e.parent;\n    }\n\n    return i;\n  }\n\n  function Gr(n) {\n    for (var t = [], e = n.parent; null != e;) {\n      t.push(n), n = e, e = e.parent;\n    }\n\n    return t.push(n), t;\n  }\n\n  function Kr(n, t) {\n    if (n === t) return n;\n\n    for (var e = Gr(n), r = Gr(t), i = e.pop(), u = r.pop(), o = null; i === u;) {\n      o = i, i = e.pop(), u = r.pop();\n    }\n\n    return o;\n  }\n\n  function Qr(n) {\n    n.fixed |= 2;\n  }\n\n  function ni(n) {\n    n.fixed &= -7;\n  }\n\n  function ti(n) {\n    n.fixed |= 4, n.px = n.x, n.py = n.y;\n  }\n\n  function ei(n) {\n    n.fixed &= -5;\n  }\n\n  function ri(n, t, e) {\n    var r = 0,\n        i = 0;\n    if (n.charge = 0, !n.leaf) for (var u, o = n.nodes, a = o.length, l = -1; ++l < a;) {\n      u = o[l], null != u && (ri(u, t, e), n.charge += u.charge, r += u.charge * u.cx, i += u.charge * u.cy);\n    }\n\n    if (n.point) {\n      n.leaf || (n.point.x += Math.random() - .5, n.point.y += Math.random() - .5);\n      var c = t * e[n.point.index];\n      n.charge += n.pointCharge = c, r += c * n.point.x, i += c * n.point.y;\n    }\n\n    n.cx = r / n.charge, n.cy = i / n.charge;\n  }\n\n  function ii(n, t) {\n    return ao.rebind(n, t, \"sort\", \"children\", \"value\"), n.nodes = n, n.links = fi, n;\n  }\n\n  function ui(n, t) {\n    for (var e = [n]; null != (n = e.pop());) {\n      if (t(n), (i = n.children) && (r = i.length)) for (var r, i; --r >= 0;) {\n        e.push(i[r]);\n      }\n    }\n  }\n\n  function oi(n, t) {\n    for (var e = [n], r = []; null != (n = e.pop());) {\n      if (r.push(n), (u = n.children) && (i = u.length)) for (var i, u, o = -1; ++o < i;) {\n        e.push(u[o]);\n      }\n    }\n\n    for (; null != (n = r.pop());) {\n      t(n);\n    }\n  }\n\n  function ai(n) {\n    return n.children;\n  }\n\n  function li(n) {\n    return n.value;\n  }\n\n  function ci(n, t) {\n    return t.value - n.value;\n  }\n\n  function fi(n) {\n    return ao.merge(n.map(function (n) {\n      return (n.children || []).map(function (t) {\n        return {\n          source: n,\n          target: t\n        };\n      });\n    }));\n  }\n\n  function si(n) {\n    return n.x;\n  }\n\n  function hi(n) {\n    return n.y;\n  }\n\n  function pi(n, t, e) {\n    n.y0 = t, n.y = e;\n  }\n\n  function gi(n) {\n    return ao.range(n.length);\n  }\n\n  function vi(n) {\n    for (var t = -1, e = n[0].length, r = []; ++t < e;) {\n      r[t] = 0;\n    }\n\n    return r;\n  }\n\n  function di(n) {\n    for (var t, e = 1, r = 0, i = n[0][1], u = n.length; u > e; ++e) {\n      (t = n[e][1]) > i && (r = e, i = t);\n    }\n\n    return r;\n  }\n\n  function yi(n) {\n    return n.reduce(mi, 0);\n  }\n\n  function mi(n, t) {\n    return n + t[1];\n  }\n\n  function Mi(n, t) {\n    return xi(n, Math.ceil(Math.log(t.length) / Math.LN2 + 1));\n  }\n\n  function xi(n, t) {\n    for (var e = -1, r = +n[0], i = (n[1] - r) / t, u = []; ++e <= t;) {\n      u[e] = i * e + r;\n    }\n\n    return u;\n  }\n\n  function bi(n) {\n    return [ao.min(n), ao.max(n)];\n  }\n\n  function _i(n, t) {\n    return n.value - t.value;\n  }\n\n  function wi(n, t) {\n    var e = n._pack_next;\n    n._pack_next = t, t._pack_prev = n, t._pack_next = e, e._pack_prev = t;\n  }\n\n  function Si(n, t) {\n    n._pack_next = t, t._pack_prev = n;\n  }\n\n  function ki(n, t) {\n    var e = t.x - n.x,\n        r = t.y - n.y,\n        i = n.r + t.r;\n    return .999 * i * i > e * e + r * r;\n  }\n\n  function Ni(n) {\n    function t(n) {\n      f = Math.min(n.x - n.r, f), s = Math.max(n.x + n.r, s), h = Math.min(n.y - n.r, h), p = Math.max(n.y + n.r, p);\n    }\n\n    if ((e = n.children) && (c = e.length)) {\n      var e,\n          r,\n          i,\n          u,\n          o,\n          a,\n          l,\n          c,\n          f = 1 / 0,\n          s = -(1 / 0),\n          h = 1 / 0,\n          p = -(1 / 0);\n      if (e.forEach(Ei), r = e[0], r.x = -r.r, r.y = 0, t(r), c > 1 && (i = e[1], i.x = i.r, i.y = 0, t(i), c > 2)) for (u = e[2], zi(r, i, u), t(u), wi(r, u), r._pack_prev = u, wi(u, i), i = r._pack_next, o = 3; c > o; o++) {\n        zi(r, i, u = e[o]);\n        var g = 0,\n            v = 1,\n            d = 1;\n\n        for (a = i._pack_next; a !== i; a = a._pack_next, v++) {\n          if (ki(a, u)) {\n            g = 1;\n            break;\n          }\n        }\n\n        if (1 == g) for (l = r._pack_prev; l !== a._pack_prev && !ki(l, u); l = l._pack_prev, d++) {\n          ;\n        }\n        g ? (d > v || v == d && i.r < r.r ? Si(r, i = a) : Si(r = l, i), o--) : (wi(r, u), i = u, t(u));\n      }\n      var y = (f + s) / 2,\n          m = (h + p) / 2,\n          M = 0;\n\n      for (o = 0; c > o; o++) {\n        u = e[o], u.x -= y, u.y -= m, M = Math.max(M, u.r + Math.sqrt(u.x * u.x + u.y * u.y));\n      }\n\n      n.r = M, e.forEach(Ai);\n    }\n  }\n\n  function Ei(n) {\n    n._pack_next = n._pack_prev = n;\n  }\n\n  function Ai(n) {\n    delete n._pack_next, delete n._pack_prev;\n  }\n\n  function Ci(n, t, e, r) {\n    var i = n.children;\n    if (n.x = t += r * n.x, n.y = e += r * n.y, n.r *= r, i) for (var u = -1, o = i.length; ++u < o;) {\n      Ci(i[u], t, e, r);\n    }\n  }\n\n  function zi(n, t, e) {\n    var r = n.r + e.r,\n        i = t.x - n.x,\n        u = t.y - n.y;\n\n    if (r && (i || u)) {\n      var o = t.r + e.r,\n          a = i * i + u * u;\n      o *= o, r *= r;\n      var l = .5 + (r - o) / (2 * a),\n          c = Math.sqrt(Math.max(0, 2 * o * (r + a) - (r -= a) * r - o * o)) / (2 * a);\n      e.x = n.x + l * i + c * u, e.y = n.y + l * u - c * i;\n    } else e.x = n.x + r, e.y = n.y;\n  }\n\n  function Li(n, t) {\n    return n.parent == t.parent ? 1 : 2;\n  }\n\n  function qi(n) {\n    var t = n.children;\n    return t.length ? t[0] : n.t;\n  }\n\n  function Ti(n) {\n    var t,\n        e = n.children;\n    return (t = e.length) ? e[t - 1] : n.t;\n  }\n\n  function Ri(n, t, e) {\n    var r = e / (t.i - n.i);\n    t.c -= r, t.s += e, n.c += r, t.z += e, t.m += e;\n  }\n\n  function Di(n) {\n    for (var t, e = 0, r = 0, i = n.children, u = i.length; --u >= 0;) {\n      t = i[u], t.z += e, t.m += e, e += t.s + (r += t.c);\n    }\n  }\n\n  function Pi(n, t, e) {\n    return n.a.parent === t.parent ? n.a : e;\n  }\n\n  function Ui(n) {\n    return 1 + ao.max(n, function (n) {\n      return n.y;\n    });\n  }\n\n  function ji(n) {\n    return n.reduce(function (n, t) {\n      return n + t.x;\n    }, 0) / n.length;\n  }\n\n  function Fi(n) {\n    var t = n.children;\n    return t && t.length ? Fi(t[0]) : n;\n  }\n\n  function Hi(n) {\n    var t,\n        e = n.children;\n    return e && (t = e.length) ? Hi(e[t - 1]) : n;\n  }\n\n  function Oi(n) {\n    return {\n      x: n.x,\n      y: n.y,\n      dx: n.dx,\n      dy: n.dy\n    };\n  }\n\n  function Ii(n, t) {\n    var e = n.x + t[3],\n        r = n.y + t[0],\n        i = n.dx - t[1] - t[3],\n        u = n.dy - t[0] - t[2];\n    return 0 > i && (e += i / 2, i = 0), 0 > u && (r += u / 2, u = 0), {\n      x: e,\n      y: r,\n      dx: i,\n      dy: u\n    };\n  }\n\n  function Yi(n) {\n    var t = n[0],\n        e = n[n.length - 1];\n    return e > t ? [t, e] : [e, t];\n  }\n\n  function Zi(n) {\n    return n.rangeExtent ? n.rangeExtent() : Yi(n.range());\n  }\n\n  function Vi(n, t, e, r) {\n    var i = e(n[0], n[1]),\n        u = r(t[0], t[1]);\n    return function (n) {\n      return u(i(n));\n    };\n  }\n\n  function Xi(n, t) {\n    var e,\n        r = 0,\n        i = n.length - 1,\n        u = n[r],\n        o = n[i];\n    return u > o && (e = r, r = i, i = e, e = u, u = o, o = e), n[r] = t.floor(u), n[i] = t.ceil(o), n;\n  }\n\n  function $i(n) {\n    return n ? {\n      floor: function floor(t) {\n        return Math.floor(t / n) * n;\n      },\n      ceil: function ceil(t) {\n        return Math.ceil(t / n) * n;\n      }\n    } : Sl;\n  }\n\n  function Bi(n, t, e, r) {\n    var i = [],\n        u = [],\n        o = 0,\n        a = Math.min(n.length, t.length) - 1;\n\n    for (n[a] < n[0] && (n = n.slice().reverse(), t = t.slice().reverse()); ++o <= a;) {\n      i.push(e(n[o - 1], n[o])), u.push(r(t[o - 1], t[o]));\n    }\n\n    return function (t) {\n      var e = ao.bisect(n, t, 1, a) - 1;\n      return u[e](i[e](t));\n    };\n  }\n\n  function Wi(n, t, e, r) {\n    function i() {\n      var i = Math.min(n.length, t.length) > 2 ? Bi : Vi,\n          l = r ? Wr : Br;\n      return o = i(n, t, l, e), a = i(t, n, l, Mr), u;\n    }\n\n    function u(n) {\n      return o(n);\n    }\n\n    var o, a;\n    return u.invert = function (n) {\n      return a(n);\n    }, u.domain = function (t) {\n      return arguments.length ? (n = t.map(Number), i()) : n;\n    }, u.range = function (n) {\n      return arguments.length ? (t = n, i()) : t;\n    }, u.rangeRound = function (n) {\n      return u.range(n).interpolate(Ur);\n    }, u.clamp = function (n) {\n      return arguments.length ? (r = n, i()) : r;\n    }, u.interpolate = function (n) {\n      return arguments.length ? (e = n, i()) : e;\n    }, u.ticks = function (t) {\n      return Qi(n, t);\n    }, u.tickFormat = function (t, e) {\n      return nu(n, t, e);\n    }, u.nice = function (t) {\n      return Gi(n, t), i();\n    }, u.copy = function () {\n      return Wi(n, t, e, r);\n    }, i();\n  }\n\n  function Ji(n, t) {\n    return ao.rebind(n, t, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n\n  function Gi(n, t) {\n    return Xi(n, $i(Ki(n, t)[2])), Xi(n, $i(Ki(n, t)[2])), n;\n  }\n\n  function Ki(n, t) {\n    null == t && (t = 10);\n    var e = Yi(n),\n        r = e[1] - e[0],\n        i = Math.pow(10, Math.floor(Math.log(r / t) / Math.LN10)),\n        u = t / r * i;\n    return .15 >= u ? i *= 10 : .35 >= u ? i *= 5 : .75 >= u && (i *= 2), e[0] = Math.ceil(e[0] / i) * i, e[1] = Math.floor(e[1] / i) * i + .5 * i, e[2] = i, e;\n  }\n\n  function Qi(n, t) {\n    return ao.range.apply(ao, Ki(n, t));\n  }\n\n  function nu(n, t, e) {\n    var r = Ki(n, t);\n\n    if (e) {\n      var i = ha.exec(e);\n\n      if (i.shift(), \"s\" === i[8]) {\n        var u = ao.formatPrefix(Math.max(xo(r[0]), xo(r[1])));\n        return i[7] || (i[7] = \".\" + tu(u.scale(r[2]))), i[8] = \"f\", e = ao.format(i.join(\"\")), function (n) {\n          return e(u.scale(n)) + u.symbol;\n        };\n      }\n\n      i[7] || (i[7] = \".\" + eu(i[8], r)), e = i.join(\"\");\n    } else e = \",.\" + tu(r[2]) + \"f\";\n\n    return ao.format(e);\n  }\n\n  function tu(n) {\n    return -Math.floor(Math.log(n) / Math.LN10 + .01);\n  }\n\n  function eu(n, t) {\n    var e = tu(t[2]);\n    return n in kl ? Math.abs(e - tu(Math.max(xo(t[0]), xo(t[1])))) + +(\"e\" !== n) : e - 2 * (\"%\" === n);\n  }\n\n  function ru(n, t, e, r) {\n    function i(n) {\n      return (e ? Math.log(0 > n ? 0 : n) : -Math.log(n > 0 ? 0 : -n)) / Math.log(t);\n    }\n\n    function u(n) {\n      return e ? Math.pow(t, n) : -Math.pow(t, -n);\n    }\n\n    function o(t) {\n      return n(i(t));\n    }\n\n    return o.invert = function (t) {\n      return u(n.invert(t));\n    }, o.domain = function (t) {\n      return arguments.length ? (e = t[0] >= 0, n.domain((r = t.map(Number)).map(i)), o) : r;\n    }, o.base = function (e) {\n      return arguments.length ? (t = +e, n.domain(r.map(i)), o) : t;\n    }, o.nice = function () {\n      var t = Xi(r.map(i), e ? Math : El);\n      return n.domain(t), r = t.map(u), o;\n    }, o.ticks = function () {\n      var n = Yi(r),\n          o = [],\n          a = n[0],\n          l = n[1],\n          c = Math.floor(i(a)),\n          f = Math.ceil(i(l)),\n          s = t % 1 ? 2 : t;\n\n      if (isFinite(f - c)) {\n        if (e) {\n          for (; f > c; c++) {\n            for (var h = 1; s > h; h++) {\n              o.push(u(c) * h);\n            }\n          }\n\n          o.push(u(c));\n        } else for (o.push(u(c)); c++ < f;) {\n          for (var h = s - 1; h > 0; h--) {\n            o.push(u(c) * h);\n          }\n        }\n\n        for (c = 0; o[c] < a; c++) {\n          ;\n        }\n\n        for (f = o.length; o[f - 1] > l; f--) {\n          ;\n        }\n\n        o = o.slice(c, f);\n      }\n\n      return o;\n    }, o.tickFormat = function (n, e) {\n      if (!arguments.length) return Nl;\n      arguments.length < 2 ? e = Nl : \"function\" != typeof e && (e = ao.format(e));\n      var r = Math.max(1, t * n / o.ticks().length);\n      return function (n) {\n        var o = n / u(Math.round(i(n)));\n        return t - .5 > o * t && (o *= t), r >= o ? e(n) : \"\";\n      };\n    }, o.copy = function () {\n      return ru(n.copy(), t, e, r);\n    }, Ji(o, n);\n  }\n\n  function iu(n, t, e) {\n    function r(t) {\n      return n(i(t));\n    }\n\n    var i = uu(t),\n        u = uu(1 / t);\n    return r.invert = function (t) {\n      return u(n.invert(t));\n    }, r.domain = function (t) {\n      return arguments.length ? (n.domain((e = t.map(Number)).map(i)), r) : e;\n    }, r.ticks = function (n) {\n      return Qi(e, n);\n    }, r.tickFormat = function (n, t) {\n      return nu(e, n, t);\n    }, r.nice = function (n) {\n      return r.domain(Gi(e, n));\n    }, r.exponent = function (o) {\n      return arguments.length ? (i = uu(t = o), u = uu(1 / t), n.domain(e.map(i)), r) : t;\n    }, r.copy = function () {\n      return iu(n.copy(), t, e);\n    }, Ji(r, n);\n  }\n\n  function uu(n) {\n    return function (t) {\n      return 0 > t ? -Math.pow(-t, n) : Math.pow(t, n);\n    };\n  }\n\n  function ou(n, t) {\n    function e(e) {\n      return u[((i.get(e) || (\"range\" === t.t ? i.set(e, n.push(e)) : NaN)) - 1) % u.length];\n    }\n\n    function r(t, e) {\n      return ao.range(n.length).map(function (n) {\n        return t + e * n;\n      });\n    }\n\n    var i, u, o;\n    return e.domain = function (r) {\n      if (!arguments.length) return n;\n      n = [], i = new c();\n\n      for (var u, o = -1, a = r.length; ++o < a;) {\n        i.has(u = r[o]) || i.set(u, n.push(u));\n      }\n\n      return e[t.t].apply(e, t.a);\n    }, e.range = function (n) {\n      return arguments.length ? (u = n, o = 0, t = {\n        t: \"range\",\n        a: arguments\n      }, e) : u;\n    }, e.rangePoints = function (i, a) {\n      arguments.length < 2 && (a = 0);\n      var l = i[0],\n          c = i[1],\n          f = n.length < 2 ? (l = (l + c) / 2, 0) : (c - l) / (n.length - 1 + a);\n      return u = r(l + f * a / 2, f), o = 0, t = {\n        t: \"rangePoints\",\n        a: arguments\n      }, e;\n    }, e.rangeRoundPoints = function (i, a) {\n      arguments.length < 2 && (a = 0);\n      var l = i[0],\n          c = i[1],\n          f = n.length < 2 ? (l = c = Math.round((l + c) / 2), 0) : (c - l) / (n.length - 1 + a) | 0;\n      return u = r(l + Math.round(f * a / 2 + (c - l - (n.length - 1 + a) * f) / 2), f), o = 0, t = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      }, e;\n    }, e.rangeBands = function (i, a, l) {\n      arguments.length < 2 && (a = 0), arguments.length < 3 && (l = a);\n      var c = i[1] < i[0],\n          f = i[c - 0],\n          s = i[1 - c],\n          h = (s - f) / (n.length - a + 2 * l);\n      return u = r(f + h * l, h), c && u.reverse(), o = h * (1 - a), t = {\n        t: \"rangeBands\",\n        a: arguments\n      }, e;\n    }, e.rangeRoundBands = function (i, a, l) {\n      arguments.length < 2 && (a = 0), arguments.length < 3 && (l = a);\n      var c = i[1] < i[0],\n          f = i[c - 0],\n          s = i[1 - c],\n          h = Math.floor((s - f) / (n.length - a + 2 * l));\n      return u = r(f + Math.round((s - f - (n.length - a) * h) / 2), h), c && u.reverse(), o = Math.round(h * (1 - a)), t = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      }, e;\n    }, e.rangeBand = function () {\n      return o;\n    }, e.rangeExtent = function () {\n      return Yi(t.a[0]);\n    }, e.copy = function () {\n      return ou(n, t);\n    }, e.domain(n);\n  }\n\n  function au(n, t) {\n    function u() {\n      var e = 0,\n          r = t.length;\n\n      for (a = []; ++e < r;) {\n        a[e - 1] = ao.quantile(n, e / r);\n      }\n\n      return o;\n    }\n\n    function o(n) {\n      return isNaN(n = +n) ? void 0 : t[ao.bisect(a, n)];\n    }\n\n    var a;\n    return o.domain = function (t) {\n      return arguments.length ? (n = t.map(r).filter(i).sort(e), u()) : n;\n    }, o.range = function (n) {\n      return arguments.length ? (t = n, u()) : t;\n    }, o.quantiles = function () {\n      return a;\n    }, o.invertExtent = function (e) {\n      return e = t.indexOf(e), 0 > e ? [NaN, NaN] : [e > 0 ? a[e - 1] : n[0], e < a.length ? a[e] : n[n.length - 1]];\n    }, o.copy = function () {\n      return au(n, t);\n    }, u();\n  }\n\n  function lu(n, t, e) {\n    function r(t) {\n      return e[Math.max(0, Math.min(o, Math.floor(u * (t - n))))];\n    }\n\n    function i() {\n      return u = e.length / (t - n), o = e.length - 1, r;\n    }\n\n    var u, o;\n    return r.domain = function (e) {\n      return arguments.length ? (n = +e[0], t = +e[e.length - 1], i()) : [n, t];\n    }, r.range = function (n) {\n      return arguments.length ? (e = n, i()) : e;\n    }, r.invertExtent = function (t) {\n      return t = e.indexOf(t), t = 0 > t ? NaN : t / u + n, [t, t + 1 / u];\n    }, r.copy = function () {\n      return lu(n, t, e);\n    }, i();\n  }\n\n  function cu(n, t) {\n    function e(e) {\n      return e >= e ? t[ao.bisect(n, e)] : void 0;\n    }\n\n    return e.domain = function (t) {\n      return arguments.length ? (n = t, e) : n;\n    }, e.range = function (n) {\n      return arguments.length ? (t = n, e) : t;\n    }, e.invertExtent = function (e) {\n      return e = t.indexOf(e), [n[e - 1], n[e]];\n    }, e.copy = function () {\n      return cu(n, t);\n    }, e;\n  }\n\n  function fu(n) {\n    function t(n) {\n      return +n;\n    }\n\n    return t.invert = t, t.domain = t.range = function (e) {\n      return arguments.length ? (n = e.map(t), t) : n;\n    }, t.ticks = function (t) {\n      return Qi(n, t);\n    }, t.tickFormat = function (t, e) {\n      return nu(n, t, e);\n    }, t.copy = function () {\n      return fu(n);\n    }, t;\n  }\n\n  function su() {\n    return 0;\n  }\n\n  function hu(n) {\n    return n.innerRadius;\n  }\n\n  function pu(n) {\n    return n.outerRadius;\n  }\n\n  function gu(n) {\n    return n.startAngle;\n  }\n\n  function vu(n) {\n    return n.endAngle;\n  }\n\n  function du(n) {\n    return n && n.padAngle;\n  }\n\n  function yu(n, t, e, r) {\n    return (n - e) * t - (t - r) * n > 0 ? 0 : 1;\n  }\n\n  function mu(n, t, e, r, i) {\n    var u = n[0] - t[0],\n        o = n[1] - t[1],\n        a = (i ? r : -r) / Math.sqrt(u * u + o * o),\n        l = a * o,\n        c = -a * u,\n        f = n[0] + l,\n        s = n[1] + c,\n        h = t[0] + l,\n        p = t[1] + c,\n        g = (f + h) / 2,\n        v = (s + p) / 2,\n        d = h - f,\n        y = p - s,\n        m = d * d + y * y,\n        M = e - r,\n        x = f * p - h * s,\n        b = (0 > y ? -1 : 1) * Math.sqrt(Math.max(0, M * M * m - x * x)),\n        _ = (x * y - d * b) / m,\n        w = (-x * d - y * b) / m,\n        S = (x * y + d * b) / m,\n        k = (-x * d + y * b) / m,\n        N = _ - g,\n        E = w - v,\n        A = S - g,\n        C = k - v;\n\n    return N * N + E * E > A * A + C * C && (_ = S, w = k), [[_ - l, w - c], [_ * e / M, w * e / M]];\n  }\n\n  function Mu(n) {\n    function t(t) {\n      function o() {\n        c.push(\"M\", u(n(f), a));\n      }\n\n      for (var l, c = [], f = [], s = -1, h = t.length, p = En(e), g = En(r); ++s < h;) {\n        i.call(this, l = t[s], s) ? f.push([+p.call(this, l, s), +g.call(this, l, s)]) : f.length && (o(), f = []);\n      }\n\n      return f.length && o(), c.length ? c.join(\"\") : null;\n    }\n\n    var e = Ce,\n        r = ze,\n        i = zt,\n        u = xu,\n        o = u.key,\n        a = .7;\n    return t.x = function (n) {\n      return arguments.length ? (e = n, t) : e;\n    }, t.y = function (n) {\n      return arguments.length ? (r = n, t) : r;\n    }, t.defined = function (n) {\n      return arguments.length ? (i = n, t) : i;\n    }, t.interpolate = function (n) {\n      return arguments.length ? (o = \"function\" == typeof n ? u = n : (u = Tl.get(n) || xu).key, t) : o;\n    }, t.tension = function (n) {\n      return arguments.length ? (a = n, t) : a;\n    }, t;\n  }\n\n  function xu(n) {\n    return n.length > 1 ? n.join(\"L\") : n + \"Z\";\n  }\n\n  function bu(n) {\n    return n.join(\"L\") + \"Z\";\n  }\n\n  function _u(n) {\n    for (var t = 0, e = n.length, r = n[0], i = [r[0], \",\", r[1]]; ++t < e;) {\n      i.push(\"H\", (r[0] + (r = n[t])[0]) / 2, \"V\", r[1]);\n    }\n\n    return e > 1 && i.push(\"H\", r[0]), i.join(\"\");\n  }\n\n  function wu(n) {\n    for (var t = 0, e = n.length, r = n[0], i = [r[0], \",\", r[1]]; ++t < e;) {\n      i.push(\"V\", (r = n[t])[1], \"H\", r[0]);\n    }\n\n    return i.join(\"\");\n  }\n\n  function Su(n) {\n    for (var t = 0, e = n.length, r = n[0], i = [r[0], \",\", r[1]]; ++t < e;) {\n      i.push(\"H\", (r = n[t])[0], \"V\", r[1]);\n    }\n\n    return i.join(\"\");\n  }\n\n  function ku(n, t) {\n    return n.length < 4 ? xu(n) : n[1] + Au(n.slice(1, -1), Cu(n, t));\n  }\n\n  function Nu(n, t) {\n    return n.length < 3 ? bu(n) : n[0] + Au((n.push(n[0]), n), Cu([n[n.length - 2]].concat(n, [n[1]]), t));\n  }\n\n  function Eu(n, t) {\n    return n.length < 3 ? xu(n) : n[0] + Au(n, Cu(n, t));\n  }\n\n  function Au(n, t) {\n    if (t.length < 1 || n.length != t.length && n.length != t.length + 2) return xu(n);\n    var e = n.length != t.length,\n        r = \"\",\n        i = n[0],\n        u = n[1],\n        o = t[0],\n        a = o,\n        l = 1;\n\n    if (e && (r += \"Q\" + (u[0] - 2 * o[0] / 3) + \",\" + (u[1] - 2 * o[1] / 3) + \",\" + u[0] + \",\" + u[1], i = n[1], l = 2), t.length > 1) {\n      a = t[1], u = n[l], l++, r += \"C\" + (i[0] + o[0]) + \",\" + (i[1] + o[1]) + \",\" + (u[0] - a[0]) + \",\" + (u[1] - a[1]) + \",\" + u[0] + \",\" + u[1];\n\n      for (var c = 2; c < t.length; c++, l++) {\n        u = n[l], a = t[c], r += \"S\" + (u[0] - a[0]) + \",\" + (u[1] - a[1]) + \",\" + u[0] + \",\" + u[1];\n      }\n    }\n\n    if (e) {\n      var f = n[l];\n      r += \"Q\" + (u[0] + 2 * a[0] / 3) + \",\" + (u[1] + 2 * a[1] / 3) + \",\" + f[0] + \",\" + f[1];\n    }\n\n    return r;\n  }\n\n  function Cu(n, t) {\n    for (var e, r = [], i = (1 - t) / 2, u = n[0], o = n[1], a = 1, l = n.length; ++a < l;) {\n      e = u, u = o, o = n[a], r.push([i * (o[0] - e[0]), i * (o[1] - e[1])]);\n    }\n\n    return r;\n  }\n\n  function zu(n) {\n    if (n.length < 3) return xu(n);\n    var t = 1,\n        e = n.length,\n        r = n[0],\n        i = r[0],\n        u = r[1],\n        o = [i, i, i, (r = n[1])[0]],\n        a = [u, u, u, r[1]],\n        l = [i, \",\", u, \"L\", Ru(Pl, o), \",\", Ru(Pl, a)];\n\n    for (n.push(n[e - 1]); ++t <= e;) {\n      r = n[t], o.shift(), o.push(r[0]), a.shift(), a.push(r[1]), Du(l, o, a);\n    }\n\n    return n.pop(), l.push(\"L\", r), l.join(\"\");\n  }\n\n  function Lu(n) {\n    if (n.length < 4) return xu(n);\n\n    for (var t, e = [], r = -1, i = n.length, u = [0], o = [0]; ++r < 3;) {\n      t = n[r], u.push(t[0]), o.push(t[1]);\n    }\n\n    for (e.push(Ru(Pl, u) + \",\" + Ru(Pl, o)), --r; ++r < i;) {\n      t = n[r], u.shift(), u.push(t[0]), o.shift(), o.push(t[1]), Du(e, u, o);\n    }\n\n    return e.join(\"\");\n  }\n\n  function qu(n) {\n    for (var t, e, r = -1, i = n.length, u = i + 4, o = [], a = []; ++r < 4;) {\n      e = n[r % i], o.push(e[0]), a.push(e[1]);\n    }\n\n    for (t = [Ru(Pl, o), \",\", Ru(Pl, a)], --r; ++r < u;) {\n      e = n[r % i], o.shift(), o.push(e[0]), a.shift(), a.push(e[1]), Du(t, o, a);\n    }\n\n    return t.join(\"\");\n  }\n\n  function Tu(n, t) {\n    var e = n.length - 1;\n    if (e) for (var r, i, u = n[0][0], o = n[0][1], a = n[e][0] - u, l = n[e][1] - o, c = -1; ++c <= e;) {\n      r = n[c], i = c / e, r[0] = t * r[0] + (1 - t) * (u + i * a), r[1] = t * r[1] + (1 - t) * (o + i * l);\n    }\n    return zu(n);\n  }\n\n  function Ru(n, t) {\n    return n[0] * t[0] + n[1] * t[1] + n[2] * t[2] + n[3] * t[3];\n  }\n\n  function Du(n, t, e) {\n    n.push(\"C\", Ru(Rl, t), \",\", Ru(Rl, e), \",\", Ru(Dl, t), \",\", Ru(Dl, e), \",\", Ru(Pl, t), \",\", Ru(Pl, e));\n  }\n\n  function Pu(n, t) {\n    return (t[1] - n[1]) / (t[0] - n[0]);\n  }\n\n  function Uu(n) {\n    for (var t = 0, e = n.length - 1, r = [], i = n[0], u = n[1], o = r[0] = Pu(i, u); ++t < e;) {\n      r[t] = (o + (o = Pu(i = u, u = n[t + 1]))) / 2;\n    }\n\n    return r[t] = o, r;\n  }\n\n  function ju(n) {\n    for (var t, e, r, i, u = [], o = Uu(n), a = -1, l = n.length - 1; ++a < l;) {\n      t = Pu(n[a], n[a + 1]), xo(t) < Uo ? o[a] = o[a + 1] = 0 : (e = o[a] / t, r = o[a + 1] / t, i = e * e + r * r, i > 9 && (i = 3 * t / Math.sqrt(i), o[a] = i * e, o[a + 1] = i * r));\n    }\n\n    for (a = -1; ++a <= l;) {\n      i = (n[Math.min(l, a + 1)][0] - n[Math.max(0, a - 1)][0]) / (6 * (1 + o[a] * o[a])), u.push([i || 0, o[a] * i || 0]);\n    }\n\n    return u;\n  }\n\n  function Fu(n) {\n    return n.length < 3 ? xu(n) : n[0] + Au(n, ju(n));\n  }\n\n  function Hu(n) {\n    for (var t, e, r, i = -1, u = n.length; ++i < u;) {\n      t = n[i], e = t[0], r = t[1] - Io, t[0] = e * Math.cos(r), t[1] = e * Math.sin(r);\n    }\n\n    return n;\n  }\n\n  function Ou(n) {\n    function t(t) {\n      function l() {\n        v.push(\"M\", a(n(y), s), f, c(n(d.reverse()), s), \"Z\");\n      }\n\n      for (var h, p, g, v = [], d = [], y = [], m = -1, M = t.length, x = En(e), b = En(i), _ = e === r ? function () {\n        return p;\n      } : En(r), w = i === u ? function () {\n        return g;\n      } : En(u); ++m < M;) {\n        o.call(this, h = t[m], m) ? (d.push([p = +x.call(this, h, m), g = +b.call(this, h, m)]), y.push([+_.call(this, h, m), +w.call(this, h, m)])) : d.length && (l(), d = [], y = []);\n      }\n\n      return d.length && l(), v.length ? v.join(\"\") : null;\n    }\n\n    var e = Ce,\n        r = Ce,\n        i = 0,\n        u = ze,\n        o = zt,\n        a = xu,\n        l = a.key,\n        c = a,\n        f = \"L\",\n        s = .7;\n    return t.x = function (n) {\n      return arguments.length ? (e = r = n, t) : r;\n    }, t.x0 = function (n) {\n      return arguments.length ? (e = n, t) : e;\n    }, t.x1 = function (n) {\n      return arguments.length ? (r = n, t) : r;\n    }, t.y = function (n) {\n      return arguments.length ? (i = u = n, t) : u;\n    }, t.y0 = function (n) {\n      return arguments.length ? (i = n, t) : i;\n    }, t.y1 = function (n) {\n      return arguments.length ? (u = n, t) : u;\n    }, t.defined = function (n) {\n      return arguments.length ? (o = n, t) : o;\n    }, t.interpolate = function (n) {\n      return arguments.length ? (l = \"function\" == typeof n ? a = n : (a = Tl.get(n) || xu).key, c = a.reverse || a, f = a.closed ? \"M\" : \"L\", t) : l;\n    }, t.tension = function (n) {\n      return arguments.length ? (s = n, t) : s;\n    }, t;\n  }\n\n  function Iu(n) {\n    return n.radius;\n  }\n\n  function Yu(n) {\n    return [n.x, n.y];\n  }\n\n  function Zu(n) {\n    return function () {\n      var t = n.apply(this, arguments),\n          e = t[0],\n          r = t[1] - Io;\n      return [e * Math.cos(r), e * Math.sin(r)];\n    };\n  }\n\n  function Vu() {\n    return 64;\n  }\n\n  function Xu() {\n    return \"circle\";\n  }\n\n  function $u(n) {\n    var t = Math.sqrt(n / Fo);\n    return \"M0,\" + t + \"A\" + t + \",\" + t + \" 0 1,1 0,\" + -t + \"A\" + t + \",\" + t + \" 0 1,1 0,\" + t + \"Z\";\n  }\n\n  function Bu(n) {\n    return function () {\n      var t, e, r;\n      (t = this[n]) && (r = t[e = t.active]) && (r.timer.c = null, r.timer.t = NaN, --t.count ? delete t[e] : delete this[n], t.active += .5, r.event && r.event.interrupt.call(this, this.__data__, r.index));\n    };\n  }\n\n  function Wu(n, t, e) {\n    return ko(n, Yl), n.namespace = t, n.id = e, n;\n  }\n\n  function Ju(n, t, e, r) {\n    var i = n.id,\n        u = n.namespace;\n    return Y(n, \"function\" == typeof e ? function (n, o, a) {\n      n[u][i].tween.set(t, r(e.call(n, n.__data__, o, a)));\n    } : (e = r(e), function (n) {\n      n[u][i].tween.set(t, e);\n    }));\n  }\n\n  function Gu(n) {\n    return null == n && (n = \"\"), function () {\n      this.textContent = n;\n    };\n  }\n\n  function Ku(n) {\n    return null == n ? \"__transition__\" : \"__transition_\" + n + \"__\";\n  }\n\n  function Qu(n, t, e, r, i) {\n    function u(n) {\n      var t = v.delay;\n      return f.t = t + l, n >= t ? o(n - t) : void (f.c = o);\n    }\n\n    function o(e) {\n      var i = g.active,\n          u = g[i];\n      u && (u.timer.c = null, u.timer.t = NaN, --g.count, delete g[i], u.event && u.event.interrupt.call(n, n.__data__, u.index));\n\n      for (var o in g) {\n        if (r > +o) {\n          var c = g[o];\n          c.timer.c = null, c.timer.t = NaN, --g.count, delete g[o];\n        }\n      }\n\n      f.c = a, qn(function () {\n        return f.c && a(e || 1) && (f.c = null, f.t = NaN), 1;\n      }, 0, l), g.active = r, v.event && v.event.start.call(n, n.__data__, t), p = [], v.tween.forEach(function (e, r) {\n        (r = r.call(n, n.__data__, t)) && p.push(r);\n      }), h = v.ease, s = v.duration;\n    }\n\n    function a(i) {\n      for (var u = i / s, o = h(u), a = p.length; a > 0;) {\n        p[--a].call(n, o);\n      }\n\n      return u >= 1 ? (v.event && v.event.end.call(n, n.__data__, t), --g.count ? delete g[r] : delete n[e], 1) : void 0;\n    }\n\n    var l,\n        f,\n        s,\n        h,\n        p,\n        g = n[e] || (n[e] = {\n      active: 0,\n      count: 0\n    }),\n        v = g[r];\n    v || (l = i.time, f = qn(u, 0, l), v = g[r] = {\n      tween: new c(),\n      time: l,\n      timer: f,\n      delay: i.delay,\n      duration: i.duration,\n      ease: i.ease,\n      index: t\n    }, i = null, ++g.count);\n  }\n\n  function no(n, t, e) {\n    n.attr(\"transform\", function (n) {\n      var r = t(n);\n      return \"translate(\" + (isFinite(r) ? r : e(n)) + \",0)\";\n    });\n  }\n\n  function to(n, t, e) {\n    n.attr(\"transform\", function (n) {\n      var r = t(n);\n      return \"translate(0,\" + (isFinite(r) ? r : e(n)) + \")\";\n    });\n  }\n\n  function eo(n) {\n    return n.toISOString();\n  }\n\n  function ro(n, t, e) {\n    function r(t) {\n      return n(t);\n    }\n\n    function i(n, e) {\n      var r = n[1] - n[0],\n          i = r / e,\n          u = ao.bisect(Kl, i);\n      return u == Kl.length ? [t.year, Ki(n.map(function (n) {\n        return n / 31536e6;\n      }), e)[2]] : u ? t[i / Kl[u - 1] < Kl[u] / i ? u - 1 : u] : [tc, Ki(n, e)[2]];\n    }\n\n    return r.invert = function (t) {\n      return io(n.invert(t));\n    }, r.domain = function (t) {\n      return arguments.length ? (n.domain(t), r) : n.domain().map(io);\n    }, r.nice = function (n, t) {\n      function e(e) {\n        return !isNaN(e) && !n.range(e, io(+e + 1), t).length;\n      }\n\n      var u = r.domain(),\n          o = Yi(u),\n          a = null == n ? i(o, 10) : \"number\" == typeof n && i(o, n);\n      return a && (n = a[0], t = a[1]), r.domain(Xi(u, t > 1 ? {\n        floor: function floor(t) {\n          for (; e(t = n.floor(t));) {\n            t = io(t - 1);\n          }\n\n          return t;\n        },\n        ceil: function ceil(t) {\n          for (; e(t = n.ceil(t));) {\n            t = io(+t + 1);\n          }\n\n          return t;\n        }\n      } : n));\n    }, r.ticks = function (n, t) {\n      var e = Yi(r.domain()),\n          u = null == n ? i(e, 10) : \"number\" == typeof n ? i(e, n) : !n.range && [{\n        range: n\n      }, t];\n      return u && (n = u[0], t = u[1]), n.range(e[0], io(+e[1] + 1), 1 > t ? 1 : t);\n    }, r.tickFormat = function () {\n      return e;\n    }, r.copy = function () {\n      return ro(n.copy(), t, e);\n    }, Ji(r, n);\n  }\n\n  function io(n) {\n    return new Date(n);\n  }\n\n  function uo(n) {\n    return JSON.parse(n.responseText);\n  }\n\n  function oo(n) {\n    var t = fo.createRange();\n    return t.selectNode(fo.body), t.createContextualFragment(n.responseText);\n  }\n\n  var ao = {\n    version: \"3.5.17\"\n  },\n      lo = [].slice,\n      co = function co(n) {\n    return lo.call(n);\n  },\n      fo = this.document;\n\n  if (fo) try {\n    co(fo.documentElement.childNodes)[0].nodeType;\n  } catch (so) {\n    co = function co(n) {\n      for (var t = n.length, e = new Array(t); t--;) {\n        e[t] = n[t];\n      }\n\n      return e;\n    };\n  }\n  if (Date.now || (Date.now = function () {\n    return +new Date();\n  }), fo) try {\n    fo.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n  } catch (ho) {\n    var po = this.Element.prototype,\n        go = po.setAttribute,\n        vo = po.setAttributeNS,\n        yo = this.CSSStyleDeclaration.prototype,\n        mo = yo.setProperty;\n    po.setAttribute = function (n, t) {\n      go.call(this, n, t + \"\");\n    }, po.setAttributeNS = function (n, t, e) {\n      vo.call(this, n, t, e + \"\");\n    }, yo.setProperty = function (n, t, e) {\n      mo.call(this, n, t + \"\", e);\n    };\n  }\n  ao.ascending = e, ao.descending = function (n, t) {\n    return n > t ? -1 : t > n ? 1 : t >= n ? 0 : NaN;\n  }, ao.min = function (n, t) {\n    var e,\n        r,\n        i = -1,\n        u = n.length;\n\n    if (1 === arguments.length) {\n      for (; ++i < u;) {\n        if (null != (r = n[i]) && r >= r) {\n          e = r;\n          break;\n        }\n      }\n\n      for (; ++i < u;) {\n        null != (r = n[i]) && e > r && (e = r);\n      }\n    } else {\n      for (; ++i < u;) {\n        if (null != (r = t.call(n, n[i], i)) && r >= r) {\n          e = r;\n          break;\n        }\n      }\n\n      for (; ++i < u;) {\n        null != (r = t.call(n, n[i], i)) && e > r && (e = r);\n      }\n    }\n\n    return e;\n  }, ao.max = function (n, t) {\n    var e,\n        r,\n        i = -1,\n        u = n.length;\n\n    if (1 === arguments.length) {\n      for (; ++i < u;) {\n        if (null != (r = n[i]) && r >= r) {\n          e = r;\n          break;\n        }\n      }\n\n      for (; ++i < u;) {\n        null != (r = n[i]) && r > e && (e = r);\n      }\n    } else {\n      for (; ++i < u;) {\n        if (null != (r = t.call(n, n[i], i)) && r >= r) {\n          e = r;\n          break;\n        }\n      }\n\n      for (; ++i < u;) {\n        null != (r = t.call(n, n[i], i)) && r > e && (e = r);\n      }\n    }\n\n    return e;\n  }, ao.extent = function (n, t) {\n    var e,\n        r,\n        i,\n        u = -1,\n        o = n.length;\n\n    if (1 === arguments.length) {\n      for (; ++u < o;) {\n        if (null != (r = n[u]) && r >= r) {\n          e = i = r;\n          break;\n        }\n      }\n\n      for (; ++u < o;) {\n        null != (r = n[u]) && (e > r && (e = r), r > i && (i = r));\n      }\n    } else {\n      for (; ++u < o;) {\n        if (null != (r = t.call(n, n[u], u)) && r >= r) {\n          e = i = r;\n          break;\n        }\n      }\n\n      for (; ++u < o;) {\n        null != (r = t.call(n, n[u], u)) && (e > r && (e = r), r > i && (i = r));\n      }\n    }\n\n    return [e, i];\n  }, ao.sum = function (n, t) {\n    var e,\n        r = 0,\n        u = n.length,\n        o = -1;\n    if (1 === arguments.length) for (; ++o < u;) {\n      i(e = +n[o]) && (r += e);\n    } else for (; ++o < u;) {\n      i(e = +t.call(n, n[o], o)) && (r += e);\n    }\n    return r;\n  }, ao.mean = function (n, t) {\n    var e,\n        u = 0,\n        o = n.length,\n        a = -1,\n        l = o;\n    if (1 === arguments.length) for (; ++a < o;) {\n      i(e = r(n[a])) ? u += e : --l;\n    } else for (; ++a < o;) {\n      i(e = r(t.call(n, n[a], a))) ? u += e : --l;\n    }\n    return l ? u / l : void 0;\n  }, ao.quantile = function (n, t) {\n    var e = (n.length - 1) * t + 1,\n        r = Math.floor(e),\n        i = +n[r - 1],\n        u = e - r;\n    return u ? i + u * (n[r] - i) : i;\n  }, ao.median = function (n, t) {\n    var u,\n        o = [],\n        a = n.length,\n        l = -1;\n    if (1 === arguments.length) for (; ++l < a;) {\n      i(u = r(n[l])) && o.push(u);\n    } else for (; ++l < a;) {\n      i(u = r(t.call(n, n[l], l))) && o.push(u);\n    }\n    return o.length ? ao.quantile(o.sort(e), .5) : void 0;\n  }, ao.variance = function (n, t) {\n    var e,\n        u,\n        o = n.length,\n        a = 0,\n        l = 0,\n        c = -1,\n        f = 0;\n    if (1 === arguments.length) for (; ++c < o;) {\n      i(e = r(n[c])) && (u = e - a, a += u / ++f, l += u * (e - a));\n    } else for (; ++c < o;) {\n      i(e = r(t.call(n, n[c], c))) && (u = e - a, a += u / ++f, l += u * (e - a));\n    }\n    return f > 1 ? l / (f - 1) : void 0;\n  }, ao.deviation = function () {\n    var n = ao.variance.apply(this, arguments);\n    return n ? Math.sqrt(n) : n;\n  };\n  var Mo = u(e);\n  ao.bisectLeft = Mo.left, ao.bisect = ao.bisectRight = Mo.right, ao.bisector = function (n) {\n    return u(1 === n.length ? function (t, r) {\n      return e(n(t), r);\n    } : n);\n  }, ao.shuffle = function (n, t, e) {\n    (u = arguments.length) < 3 && (e = n.length, 2 > u && (t = 0));\n\n    for (var r, i, u = e - t; u;) {\n      i = Math.random() * u-- | 0, r = n[u + t], n[u + t] = n[i + t], n[i + t] = r;\n    }\n\n    return n;\n  }, ao.permute = function (n, t) {\n    for (var e = t.length, r = new Array(e); e--;) {\n      r[e] = n[t[e]];\n    }\n\n    return r;\n  }, ao.pairs = function (n) {\n    for (var t, e = 0, r = n.length - 1, i = n[0], u = new Array(0 > r ? 0 : r); r > e;) {\n      u[e] = [t = i, i = n[++e]];\n    }\n\n    return u;\n  }, ao.transpose = function (n) {\n    if (!(i = n.length)) return [];\n\n    for (var t = -1, e = ao.min(n, o), r = new Array(e); ++t < e;) {\n      for (var i, u = -1, a = r[t] = new Array(i); ++u < i;) {\n        a[u] = n[u][t];\n      }\n    }\n\n    return r;\n  }, ao.zip = function () {\n    return ao.transpose(arguments);\n  }, ao.keys = function (n) {\n    var t = [];\n\n    for (var e in n) {\n      t.push(e);\n    }\n\n    return t;\n  }, ao.values = function (n) {\n    var t = [];\n\n    for (var e in n) {\n      t.push(n[e]);\n    }\n\n    return t;\n  }, ao.entries = function (n) {\n    var t = [];\n\n    for (var e in n) {\n      t.push({\n        key: e,\n        value: n[e]\n      });\n    }\n\n    return t;\n  }, ao.merge = function (n) {\n    for (var t, e, r, i = n.length, u = -1, o = 0; ++u < i;) {\n      o += n[u].length;\n    }\n\n    for (e = new Array(o); --i >= 0;) {\n      for (r = n[i], t = r.length; --t >= 0;) {\n        e[--o] = r[t];\n      }\n    }\n\n    return e;\n  };\n  var xo = Math.abs;\n  ao.range = function (n, t, e) {\n    if (arguments.length < 3 && (e = 1, arguments.length < 2 && (t = n, n = 0)), (t - n) / e === 1 / 0) throw new Error(\"infinite range\");\n    var r,\n        i = [],\n        u = a(xo(e)),\n        o = -1;\n    if (n *= u, t *= u, e *= u, 0 > e) for (; (r = n + e * ++o) > t;) {\n      i.push(r / u);\n    } else for (; (r = n + e * ++o) < t;) {\n      i.push(r / u);\n    }\n    return i;\n  }, ao.map = function (n, t) {\n    var e = new c();\n    if (n instanceof c) n.forEach(function (n, t) {\n      e.set(n, t);\n    });else if (Array.isArray(n)) {\n      var r,\n          i = -1,\n          u = n.length;\n      if (1 === arguments.length) for (; ++i < u;) {\n        e.set(i, n[i]);\n      } else for (; ++i < u;) {\n        e.set(t.call(n, r = n[i], i), r);\n      }\n    } else for (var o in n) {\n      e.set(o, n[o]);\n    }\n    return e;\n  };\n  var bo = \"__proto__\",\n      _o = \"\\x00\";\n  l(c, {\n    has: h,\n    get: function get(n) {\n      return this._[f(n)];\n    },\n    set: function set(n, t) {\n      return this._[f(n)] = t;\n    },\n    remove: p,\n    keys: g,\n    values: function values() {\n      var n = [];\n\n      for (var t in this._) {\n        n.push(this._[t]);\n      }\n\n      return n;\n    },\n    entries: function entries() {\n      var n = [];\n\n      for (var t in this._) {\n        n.push({\n          key: s(t),\n          value: this._[t]\n        });\n      }\n\n      return n;\n    },\n    size: v,\n    empty: d,\n    forEach: function forEach(n) {\n      for (var t in this._) {\n        n.call(this, s(t), this._[t]);\n      }\n    }\n  }), ao.nest = function () {\n    function n(t, o, a) {\n      if (a >= u.length) return r ? r.call(i, o) : e ? o.sort(e) : o;\n\n      for (var l, f, s, h, p = -1, g = o.length, v = u[a++], d = new c(); ++p < g;) {\n        (h = d.get(l = v(f = o[p]))) ? h.push(f) : d.set(l, [f]);\n      }\n\n      return t ? (f = t(), s = function s(e, r) {\n        f.set(e, n(t, r, a));\n      }) : (f = {}, s = function s(e, r) {\n        f[e] = n(t, r, a);\n      }), d.forEach(s), f;\n    }\n\n    function t(n, e) {\n      if (e >= u.length) return n;\n      var r = [],\n          i = o[e++];\n      return n.forEach(function (n, i) {\n        r.push({\n          key: n,\n          values: t(i, e)\n        });\n      }), i ? r.sort(function (n, t) {\n        return i(n.key, t.key);\n      }) : r;\n    }\n\n    var e,\n        r,\n        i = {},\n        u = [],\n        o = [];\n    return i.map = function (t, e) {\n      return n(e, t, 0);\n    }, i.entries = function (e) {\n      return t(n(ao.map, e, 0), 0);\n    }, i.key = function (n) {\n      return u.push(n), i;\n    }, i.sortKeys = function (n) {\n      return o[u.length - 1] = n, i;\n    }, i.sortValues = function (n) {\n      return e = n, i;\n    }, i.rollup = function (n) {\n      return r = n, i;\n    }, i;\n  }, ao.set = function (n) {\n    var t = new y();\n    if (n) for (var e = 0, r = n.length; r > e; ++e) {\n      t.add(n[e]);\n    }\n    return t;\n  }, l(y, {\n    has: h,\n    add: function add(n) {\n      return this._[f(n += \"\")] = !0, n;\n    },\n    remove: p,\n    values: g,\n    size: v,\n    empty: d,\n    forEach: function forEach(n) {\n      for (var t in this._) {\n        n.call(this, s(t));\n      }\n    }\n  }), ao.behavior = {}, ao.rebind = function (n, t) {\n    for (var e, r = 1, i = arguments.length; ++r < i;) {\n      n[e = arguments[r]] = M(n, t, t[e]);\n    }\n\n    return n;\n  };\n  var wo = [\"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\"];\n  ao.dispatch = function () {\n    for (var n = new _(), t = -1, e = arguments.length; ++t < e;) {\n      n[arguments[t]] = w(n);\n    }\n\n    return n;\n  }, _.prototype.on = function (n, t) {\n    var e = n.indexOf(\".\"),\n        r = \"\";\n    if (e >= 0 && (r = n.slice(e + 1), n = n.slice(0, e)), n) return arguments.length < 2 ? this[n].on(r) : this[n].on(r, t);\n\n    if (2 === arguments.length) {\n      if (null == t) for (n in this) {\n        this.hasOwnProperty(n) && this[n].on(r, null);\n      }\n      return this;\n    }\n  }, ao.event = null, ao.requote = function (n) {\n    return n.replace(So, \"\\\\$&\");\n  };\n\n  var So = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g,\n      ko = {}.__proto__ ? function (n, t) {\n    n.__proto__ = t;\n  } : function (n, t) {\n    for (var e in t) {\n      n[e] = t[e];\n    }\n  },\n      No = function No(n, t) {\n    return t.querySelector(n);\n  },\n      Eo = function Eo(n, t) {\n    return t.querySelectorAll(n);\n  },\n      _Ao = function Ao(n, t) {\n    var e = n.matches || n[x(n, \"matchesSelector\")];\n    return (_Ao = function Ao(n, t) {\n      return e.call(n, t);\n    })(n, t);\n  };\n\n  \"function\" == typeof Sizzle && (No = function No(n, t) {\n    return Sizzle(n, t)[0] || null;\n  }, Eo = Sizzle, _Ao = Sizzle.matchesSelector), ao.selection = function () {\n    return ao.select(fo.documentElement);\n  };\n  var Co = ao.selection.prototype = [];\n  Co.select = function (n) {\n    var t,\n        e,\n        r,\n        i,\n        u = [];\n    n = A(n);\n\n    for (var o = -1, a = this.length; ++o < a;) {\n      u.push(t = []), t.parentNode = (r = this[o]).parentNode;\n\n      for (var l = -1, c = r.length; ++l < c;) {\n        (i = r[l]) ? (t.push(e = n.call(i, i.__data__, l, o)), e && \"__data__\" in i && (e.__data__ = i.__data__)) : t.push(null);\n      }\n    }\n\n    return E(u);\n  }, Co.selectAll = function (n) {\n    var t,\n        e,\n        r = [];\n    n = C(n);\n\n    for (var i = -1, u = this.length; ++i < u;) {\n      for (var o = this[i], a = -1, l = o.length; ++a < l;) {\n        (e = o[a]) && (r.push(t = co(n.call(e, e.__data__, a, i))), t.parentNode = e);\n      }\n    }\n\n    return E(r);\n  };\n  var zo = \"http://www.w3.org/1999/xhtml\",\n      Lo = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: zo,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  ao.ns = {\n    prefix: Lo,\n    qualify: function qualify(n) {\n      var t = n.indexOf(\":\"),\n          e = n;\n      return t >= 0 && \"xmlns\" !== (e = n.slice(0, t)) && (n = n.slice(t + 1)), Lo.hasOwnProperty(e) ? {\n        space: Lo[e],\n        local: n\n      } : n;\n    }\n  }, Co.attr = function (n, t) {\n    if (arguments.length < 2) {\n      if (\"string\" == typeof n) {\n        var e = this.node();\n        return n = ao.ns.qualify(n), n.local ? e.getAttributeNS(n.space, n.local) : e.getAttribute(n);\n      }\n\n      for (t in n) {\n        this.each(z(t, n[t]));\n      }\n\n      return this;\n    }\n\n    return this.each(z(n, t));\n  }, Co.classed = function (n, t) {\n    if (arguments.length < 2) {\n      if (\"string\" == typeof n) {\n        var e = this.node(),\n            r = (n = T(n)).length,\n            i = -1;\n\n        if (t = e.classList) {\n          for (; ++i < r;) {\n            if (!t.contains(n[i])) return !1;\n          }\n        } else for (t = e.getAttribute(\"class\"); ++i < r;) {\n          if (!q(n[i]).test(t)) return !1;\n        }\n\n        return !0;\n      }\n\n      for (t in n) {\n        this.each(R(t, n[t]));\n      }\n\n      return this;\n    }\n\n    return this.each(R(n, t));\n  }, Co.style = function (n, e, r) {\n    var i = arguments.length;\n\n    if (3 > i) {\n      if (\"string\" != typeof n) {\n        2 > i && (e = \"\");\n\n        for (r in n) {\n          this.each(P(r, n[r], e));\n        }\n\n        return this;\n      }\n\n      if (2 > i) {\n        var u = this.node();\n        return t(u).getComputedStyle(u, null).getPropertyValue(n);\n      }\n\n      r = \"\";\n    }\n\n    return this.each(P(n, e, r));\n  }, Co.property = function (n, t) {\n    if (arguments.length < 2) {\n      if (\"string\" == typeof n) return this.node()[n];\n\n      for (t in n) {\n        this.each(U(t, n[t]));\n      }\n\n      return this;\n    }\n\n    return this.each(U(n, t));\n  }, Co.text = function (n) {\n    return arguments.length ? this.each(\"function\" == typeof n ? function () {\n      var t = n.apply(this, arguments);\n      this.textContent = null == t ? \"\" : t;\n    } : null == n ? function () {\n      this.textContent = \"\";\n    } : function () {\n      this.textContent = n;\n    }) : this.node().textContent;\n  }, Co.html = function (n) {\n    return arguments.length ? this.each(\"function\" == typeof n ? function () {\n      var t = n.apply(this, arguments);\n      this.innerHTML = null == t ? \"\" : t;\n    } : null == n ? function () {\n      this.innerHTML = \"\";\n    } : function () {\n      this.innerHTML = n;\n    }) : this.node().innerHTML;\n  }, Co.append = function (n) {\n    return n = j(n), this.select(function () {\n      return this.appendChild(n.apply(this, arguments));\n    });\n  }, Co.insert = function (n, t) {\n    return n = j(n), t = A(t), this.select(function () {\n      return this.insertBefore(n.apply(this, arguments), t.apply(this, arguments) || null);\n    });\n  }, Co.remove = function () {\n    return this.each(F);\n  }, Co.data = function (n, t) {\n    function e(n, e) {\n      var r,\n          i,\n          u,\n          o = n.length,\n          s = e.length,\n          h = Math.min(o, s),\n          p = new Array(s),\n          g = new Array(s),\n          v = new Array(o);\n\n      if (t) {\n        var d,\n            y = new c(),\n            m = new Array(o);\n\n        for (r = -1; ++r < o;) {\n          (i = n[r]) && (y.has(d = t.call(i, i.__data__, r)) ? v[r] = i : y.set(d, i), m[r] = d);\n        }\n\n        for (r = -1; ++r < s;) {\n          (i = y.get(d = t.call(e, u = e[r], r))) ? i !== !0 && (p[r] = i, i.__data__ = u) : g[r] = H(u), y.set(d, !0);\n        }\n\n        for (r = -1; ++r < o;) {\n          r in m && y.get(m[r]) !== !0 && (v[r] = n[r]);\n        }\n      } else {\n        for (r = -1; ++r < h;) {\n          i = n[r], u = e[r], i ? (i.__data__ = u, p[r] = i) : g[r] = H(u);\n        }\n\n        for (; s > r; ++r) {\n          g[r] = H(e[r]);\n        }\n\n        for (; o > r; ++r) {\n          v[r] = n[r];\n        }\n      }\n\n      g.update = p, g.parentNode = p.parentNode = v.parentNode = n.parentNode, a.push(g), l.push(p), f.push(v);\n    }\n\n    var r,\n        i,\n        u = -1,\n        o = this.length;\n\n    if (!arguments.length) {\n      for (n = new Array(o = (r = this[0]).length); ++u < o;) {\n        (i = r[u]) && (n[u] = i.__data__);\n      }\n\n      return n;\n    }\n\n    var a = Z([]),\n        l = E([]),\n        f = E([]);\n    if (\"function\" == typeof n) for (; ++u < o;) {\n      e(r = this[u], n.call(r, r.parentNode.__data__, u));\n    } else for (; ++u < o;) {\n      e(r = this[u], n);\n    }\n    return l.enter = function () {\n      return a;\n    }, l.exit = function () {\n      return f;\n    }, l;\n  }, Co.datum = function (n) {\n    return arguments.length ? this.property(\"__data__\", n) : this.property(\"__data__\");\n  }, Co.filter = function (n) {\n    var t,\n        e,\n        r,\n        i = [];\n    \"function\" != typeof n && (n = O(n));\n\n    for (var u = 0, o = this.length; o > u; u++) {\n      i.push(t = []), t.parentNode = (e = this[u]).parentNode;\n\n      for (var a = 0, l = e.length; l > a; a++) {\n        (r = e[a]) && n.call(r, r.__data__, a, u) && t.push(r);\n      }\n    }\n\n    return E(i);\n  }, Co.order = function () {\n    for (var n = -1, t = this.length; ++n < t;) {\n      for (var e, r = this[n], i = r.length - 1, u = r[i]; --i >= 0;) {\n        (e = r[i]) && (u && u !== e.nextSibling && u.parentNode.insertBefore(e, u), u = e);\n      }\n    }\n\n    return this;\n  }, Co.sort = function (n) {\n    n = I.apply(this, arguments);\n\n    for (var t = -1, e = this.length; ++t < e;) {\n      this[t].sort(n);\n    }\n\n    return this.order();\n  }, Co.each = function (n) {\n    return Y(this, function (t, e, r) {\n      n.call(t, t.__data__, e, r);\n    });\n  }, Co.call = function (n) {\n    var t = co(arguments);\n    return n.apply(t[0] = this, t), this;\n  }, Co.empty = function () {\n    return !this.node();\n  }, Co.node = function () {\n    for (var n = 0, t = this.length; t > n; n++) {\n      for (var e = this[n], r = 0, i = e.length; i > r; r++) {\n        var u = e[r];\n        if (u) return u;\n      }\n    }\n\n    return null;\n  }, Co.size = function () {\n    var n = 0;\n    return Y(this, function () {\n      ++n;\n    }), n;\n  };\n  var qo = [];\n  ao.selection.enter = Z, ao.selection.enter.prototype = qo, qo.append = Co.append, qo.empty = Co.empty, qo.node = Co.node, qo.call = Co.call, qo.size = Co.size, qo.select = function (n) {\n    for (var t, e, r, i, u, o = [], a = -1, l = this.length; ++a < l;) {\n      r = (i = this[a]).update, o.push(t = []), t.parentNode = i.parentNode;\n\n      for (var c = -1, f = i.length; ++c < f;) {\n        (u = i[c]) ? (t.push(r[c] = e = n.call(i.parentNode, u.__data__, c, a)), e.__data__ = u.__data__) : t.push(null);\n      }\n    }\n\n    return E(o);\n  }, qo.insert = function (n, t) {\n    return arguments.length < 2 && (t = V(this)), Co.insert.call(this, n, t);\n  }, ao.select = function (t) {\n    var e;\n    return \"string\" == typeof t ? (e = [No(t, fo)], e.parentNode = fo.documentElement) : (e = [t], e.parentNode = n(t)), E([e]);\n  }, ao.selectAll = function (n) {\n    var t;\n    return \"string\" == typeof n ? (t = co(Eo(n, fo)), t.parentNode = fo.documentElement) : (t = co(n), t.parentNode = null), E([t]);\n  }, Co.on = function (n, t, e) {\n    var r = arguments.length;\n\n    if (3 > r) {\n      if (\"string\" != typeof n) {\n        2 > r && (t = !1);\n\n        for (e in n) {\n          this.each(X(e, n[e], t));\n        }\n\n        return this;\n      }\n\n      if (2 > r) return (r = this.node()[\"__on\" + n]) && r._;\n      e = !1;\n    }\n\n    return this.each(X(n, t, e));\n  };\n  var To = ao.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  fo && To.forEach(function (n) {\n    \"on\" + n in fo && To.remove(n);\n  });\n  var Ro,\n      Do = 0;\n\n  ao.mouse = function (n) {\n    return J(n, k());\n  };\n\n  var Po = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  ao.touch = function (n, t, e) {\n    if (arguments.length < 3 && (e = t, t = k().changedTouches), t) for (var r, i = 0, u = t.length; u > i; ++i) {\n      if ((r = t[i]).identifier === e) return J(n, r);\n    }\n  }, ao.behavior.drag = function () {\n    function n() {\n      this.on(\"mousedown.drag\", u).on(\"touchstart.drag\", o);\n    }\n\n    function e(n, t, e, u, o) {\n      return function () {\n        function a() {\n          var n,\n              e,\n              r = t(h, v);\n          r && (n = r[0] - M[0], e = r[1] - M[1], g |= n | e, M = r, p({\n            type: \"drag\",\n            x: r[0] + c[0],\n            y: r[1] + c[1],\n            dx: n,\n            dy: e\n          }));\n        }\n\n        function l() {\n          t(h, v) && (y.on(u + d, null).on(o + d, null), m(g), p({\n            type: \"dragend\"\n          }));\n        }\n\n        var c,\n            f = this,\n            s = ao.event.target.correspondingElement || ao.event.target,\n            h = f.parentNode,\n            p = r.of(f, arguments),\n            g = 0,\n            v = n(),\n            d = \".drag\" + (null == v ? \"\" : \"-\" + v),\n            y = ao.select(e(s)).on(u + d, a).on(o + d, l),\n            m = W(s),\n            M = t(h, v);\n        i ? (c = i.apply(f, arguments), c = [c.x - M[0], c.y - M[1]]) : c = [0, 0], p({\n          type: \"dragstart\"\n        });\n      };\n    }\n\n    var r = N(n, \"drag\", \"dragstart\", \"dragend\"),\n        i = null,\n        u = e(b, ao.mouse, t, \"mousemove\", \"mouseup\"),\n        o = e(G, ao.touch, m, \"touchmove\", \"touchend\");\n    return n.origin = function (t) {\n      return arguments.length ? (i = t, n) : i;\n    }, ao.rebind(n, r, \"on\");\n  }, ao.touches = function (n, t) {\n    return arguments.length < 2 && (t = k().touches), t ? co(t).map(function (t) {\n      var e = J(n, t);\n      return e.identifier = t.identifier, e;\n    }) : [];\n  };\n  var Uo = 1e-6,\n      jo = Uo * Uo,\n      Fo = Math.PI,\n      Ho = 2 * Fo,\n      Oo = Ho - Uo,\n      Io = Fo / 2,\n      Yo = Fo / 180,\n      Zo = 180 / Fo,\n      Vo = Math.SQRT2,\n      Xo = 2,\n      $o = 4;\n  ao.interpolateZoom = function (n, t) {\n    var e,\n        r,\n        i = n[0],\n        u = n[1],\n        o = n[2],\n        a = t[0],\n        l = t[1],\n        c = t[2],\n        f = a - i,\n        s = l - u,\n        h = f * f + s * s;\n    if (jo > h) r = Math.log(c / o) / Vo, e = function e(n) {\n      return [i + n * f, u + n * s, o * Math.exp(Vo * n * r)];\n    };else {\n      var p = Math.sqrt(h),\n          g = (c * c - o * o + $o * h) / (2 * o * Xo * p),\n          v = (c * c - o * o - $o * h) / (2 * c * Xo * p),\n          d = Math.log(Math.sqrt(g * g + 1) - g),\n          y = Math.log(Math.sqrt(v * v + 1) - v);\n      r = (y - d) / Vo, e = function e(n) {\n        var t = n * r,\n            e = rn(d),\n            a = o / (Xo * p) * (e * un(Vo * t + d) - en(d));\n        return [i + a * f, u + a * s, o * e / rn(Vo * t + d)];\n      };\n    }\n    return e.duration = 1e3 * r, e;\n  }, ao.behavior.zoom = function () {\n    function n(n) {\n      n.on(L, s).on(Wo + \".zoom\", p).on(\"dblclick.zoom\", g).on(R, h);\n    }\n\n    function e(n) {\n      return [(n[0] - k.x) / k.k, (n[1] - k.y) / k.k];\n    }\n\n    function r(n) {\n      return [n[0] * k.k + k.x, n[1] * k.k + k.y];\n    }\n\n    function i(n) {\n      k.k = Math.max(A[0], Math.min(A[1], n));\n    }\n\n    function u(n, t) {\n      t = r(t), k.x += n[0] - t[0], k.y += n[1] - t[1];\n    }\n\n    function o(t, e, r, o) {\n      t.__chart__ = {\n        x: k.x,\n        y: k.y,\n        k: k.k\n      }, i(Math.pow(2, o)), u(d = e, r), t = ao.select(t), C > 0 && (t = t.transition().duration(C)), t.call(n.event);\n    }\n\n    function a() {\n      b && b.domain(x.range().map(function (n) {\n        return (n - k.x) / k.k;\n      }).map(x.invert)), w && w.domain(_.range().map(function (n) {\n        return (n - k.y) / k.k;\n      }).map(_.invert));\n    }\n\n    function l(n) {\n      z++ || n({\n        type: \"zoomstart\"\n      });\n    }\n\n    function c(n) {\n      a(), n({\n        type: \"zoom\",\n        scale: k.k,\n        translate: [k.x, k.y]\n      });\n    }\n\n    function f(n) {\n      --z || (n({\n        type: \"zoomend\"\n      }), d = null);\n    }\n\n    function s() {\n      function n() {\n        a = 1, u(ao.mouse(i), h), c(o);\n      }\n\n      function r() {\n        s.on(q, null).on(T, null), p(a), f(o);\n      }\n\n      var i = this,\n          o = D.of(i, arguments),\n          a = 0,\n          s = ao.select(t(i)).on(q, n).on(T, r),\n          h = e(ao.mouse(i)),\n          p = W(i);\n      Il.call(i), l(o);\n    }\n\n    function h() {\n      function n() {\n        var n = ao.touches(g);\n        return p = k.k, n.forEach(function (n) {\n          n.identifier in d && (d[n.identifier] = e(n));\n        }), n;\n      }\n\n      function t() {\n        var t = ao.event.target;\n        ao.select(t).on(x, r).on(b, a), _.push(t);\n\n        for (var e = ao.event.changedTouches, i = 0, u = e.length; u > i; ++i) {\n          d[e[i].identifier] = null;\n        }\n\n        var l = n(),\n            c = Date.now();\n\n        if (1 === l.length) {\n          if (500 > c - M) {\n            var f = l[0];\n            o(g, f, d[f.identifier], Math.floor(Math.log(k.k) / Math.LN2) + 1), S();\n          }\n\n          M = c;\n        } else if (l.length > 1) {\n          var f = l[0],\n              s = l[1],\n              h = f[0] - s[0],\n              p = f[1] - s[1];\n          y = h * h + p * p;\n        }\n      }\n\n      function r() {\n        var n,\n            t,\n            e,\n            r,\n            o = ao.touches(g);\n        Il.call(g);\n\n        for (var a = 0, l = o.length; l > a; ++a, r = null) {\n          if (e = o[a], r = d[e.identifier]) {\n            if (t) break;\n            n = e, t = r;\n          }\n        }\n\n        if (r) {\n          var f = (f = e[0] - n[0]) * f + (f = e[1] - n[1]) * f,\n              s = y && Math.sqrt(f / y);\n          n = [(n[0] + e[0]) / 2, (n[1] + e[1]) / 2], t = [(t[0] + r[0]) / 2, (t[1] + r[1]) / 2], i(s * p);\n        }\n\n        M = null, u(n, t), c(v);\n      }\n\n      function a() {\n        if (ao.event.touches.length) {\n          for (var t = ao.event.changedTouches, e = 0, r = t.length; r > e; ++e) {\n            delete d[t[e].identifier];\n          }\n\n          for (var i in d) {\n            return void n();\n          }\n        }\n\n        ao.selectAll(_).on(m, null), w.on(L, s).on(R, h), N(), f(v);\n      }\n\n      var p,\n          g = this,\n          v = D.of(g, arguments),\n          d = {},\n          y = 0,\n          m = \".zoom-\" + ao.event.changedTouches[0].identifier,\n          x = \"touchmove\" + m,\n          b = \"touchend\" + m,\n          _ = [],\n          w = ao.select(g),\n          N = W(g);\n      t(), l(v), w.on(L, null).on(R, t);\n    }\n\n    function p() {\n      var n = D.of(this, arguments);\n      m ? clearTimeout(m) : (Il.call(this), v = e(d = y || ao.mouse(this)), l(n)), m = setTimeout(function () {\n        m = null, f(n);\n      }, 50), S(), i(Math.pow(2, .002 * Bo()) * k.k), u(d, v), c(n);\n    }\n\n    function g() {\n      var n = ao.mouse(this),\n          t = Math.log(k.k) / Math.LN2;\n      o(this, n, e(n), ao.event.shiftKey ? Math.ceil(t) - 1 : Math.floor(t) + 1);\n    }\n\n    var v,\n        d,\n        y,\n        m,\n        M,\n        x,\n        b,\n        _,\n        w,\n        k = {\n      x: 0,\n      y: 0,\n      k: 1\n    },\n        E = [960, 500],\n        A = Jo,\n        C = 250,\n        z = 0,\n        L = \"mousedown.zoom\",\n        q = \"mousemove.zoom\",\n        T = \"mouseup.zoom\",\n        R = \"touchstart.zoom\",\n        D = N(n, \"zoomstart\", \"zoom\", \"zoomend\");\n\n    return Wo || (Wo = \"onwheel\" in fo ? (Bo = function Bo() {\n      return -ao.event.deltaY * (ao.event.deltaMode ? 120 : 1);\n    }, \"wheel\") : \"onmousewheel\" in fo ? (Bo = function Bo() {\n      return ao.event.wheelDelta;\n    }, \"mousewheel\") : (Bo = function Bo() {\n      return -ao.event.detail;\n    }, \"MozMousePixelScroll\")), n.event = function (n) {\n      n.each(function () {\n        var n = D.of(this, arguments),\n            t = k;\n        Hl ? ao.select(this).transition().each(\"start.zoom\", function () {\n          k = this.__chart__ || {\n            x: 0,\n            y: 0,\n            k: 1\n          }, l(n);\n        }).tween(\"zoom:zoom\", function () {\n          var e = E[0],\n              r = E[1],\n              i = d ? d[0] : e / 2,\n              u = d ? d[1] : r / 2,\n              o = ao.interpolateZoom([(i - k.x) / k.k, (u - k.y) / k.k, e / k.k], [(i - t.x) / t.k, (u - t.y) / t.k, e / t.k]);\n          return function (t) {\n            var r = o(t),\n                a = e / r[2];\n            this.__chart__ = k = {\n              x: i - r[0] * a,\n              y: u - r[1] * a,\n              k: a\n            }, c(n);\n          };\n        }).each(\"interrupt.zoom\", function () {\n          f(n);\n        }).each(\"end.zoom\", function () {\n          f(n);\n        }) : (this.__chart__ = k, l(n), c(n), f(n));\n      });\n    }, n.translate = function (t) {\n      return arguments.length ? (k = {\n        x: +t[0],\n        y: +t[1],\n        k: k.k\n      }, a(), n) : [k.x, k.y];\n    }, n.scale = function (t) {\n      return arguments.length ? (k = {\n        x: k.x,\n        y: k.y,\n        k: null\n      }, i(+t), a(), n) : k.k;\n    }, n.scaleExtent = function (t) {\n      return arguments.length ? (A = null == t ? Jo : [+t[0], +t[1]], n) : A;\n    }, n.center = function (t) {\n      return arguments.length ? (y = t && [+t[0], +t[1]], n) : y;\n    }, n.size = function (t) {\n      return arguments.length ? (E = t && [+t[0], +t[1]], n) : E;\n    }, n.duration = function (t) {\n      return arguments.length ? (C = +t, n) : C;\n    }, n.x = function (t) {\n      return arguments.length ? (b = t, x = t.copy(), k = {\n        x: 0,\n        y: 0,\n        k: 1\n      }, n) : b;\n    }, n.y = function (t) {\n      return arguments.length ? (w = t, _ = t.copy(), k = {\n        x: 0,\n        y: 0,\n        k: 1\n      }, n) : w;\n    }, ao.rebind(n, D, \"on\");\n  };\n  var Bo,\n      Wo,\n      Jo = [0, 1 / 0];\n  ao.color = an, an.prototype.toString = function () {\n    return this.rgb() + \"\";\n  }, ao.hsl = ln;\n  var Go = ln.prototype = new an();\n  Go.brighter = function (n) {\n    return n = Math.pow(.7, arguments.length ? n : 1), new ln(this.h, this.s, this.l / n);\n  }, Go.darker = function (n) {\n    return n = Math.pow(.7, arguments.length ? n : 1), new ln(this.h, this.s, n * this.l);\n  }, Go.rgb = function () {\n    return cn(this.h, this.s, this.l);\n  }, ao.hcl = fn;\n  var Ko = fn.prototype = new an();\n  Ko.brighter = function (n) {\n    return new fn(this.h, this.c, Math.min(100, this.l + Qo * (arguments.length ? n : 1)));\n  }, Ko.darker = function (n) {\n    return new fn(this.h, this.c, Math.max(0, this.l - Qo * (arguments.length ? n : 1)));\n  }, Ko.rgb = function () {\n    return sn(this.h, this.c, this.l).rgb();\n  }, ao.lab = hn;\n  var Qo = 18,\n      na = .95047,\n      ta = 1,\n      ea = 1.08883,\n      ra = hn.prototype = new an();\n  ra.brighter = function (n) {\n    return new hn(Math.min(100, this.l + Qo * (arguments.length ? n : 1)), this.a, this.b);\n  }, ra.darker = function (n) {\n    return new hn(Math.max(0, this.l - Qo * (arguments.length ? n : 1)), this.a, this.b);\n  }, ra.rgb = function () {\n    return pn(this.l, this.a, this.b);\n  }, ao.rgb = mn;\n  var ia = mn.prototype = new an();\n  ia.brighter = function (n) {\n    n = Math.pow(.7, arguments.length ? n : 1);\n    var t = this.r,\n        e = this.g,\n        r = this.b,\n        i = 30;\n    return t || e || r ? (t && i > t && (t = i), e && i > e && (e = i), r && i > r && (r = i), new mn(Math.min(255, t / n), Math.min(255, e / n), Math.min(255, r / n))) : new mn(i, i, i);\n  }, ia.darker = function (n) {\n    return n = Math.pow(.7, arguments.length ? n : 1), new mn(n * this.r, n * this.g, n * this.b);\n  }, ia.hsl = function () {\n    return wn(this.r, this.g, this.b);\n  }, ia.toString = function () {\n    return \"#\" + bn(this.r) + bn(this.g) + bn(this.b);\n  };\n  var ua = ao.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  ua.forEach(function (n, t) {\n    ua.set(n, Mn(t));\n  }), ao.functor = En, ao.xhr = An(m), ao.dsv = function (n, t) {\n    function e(n, e, u) {\n      arguments.length < 3 && (u = e, e = null);\n      var o = Cn(n, t, null == e ? r : i(e), u);\n      return o.row = function (n) {\n        return arguments.length ? o.response(null == (e = n) ? r : i(n)) : e;\n      }, o;\n    }\n\n    function r(n) {\n      return e.parse(n.responseText);\n    }\n\n    function i(n) {\n      return function (t) {\n        return e.parse(t.responseText, n);\n      };\n    }\n\n    function u(t) {\n      return t.map(o).join(n);\n    }\n\n    function o(n) {\n      return a.test(n) ? '\"' + n.replace(/\\\"/g, '\"\"') + '\"' : n;\n    }\n\n    var a = new RegExp('[\"' + n + \"\\n]\"),\n        l = n.charCodeAt(0);\n    return e.parse = function (n, t) {\n      var r;\n      return e.parseRows(n, function (n, e) {\n        if (r) return r(n, e - 1);\n        var i = new Function(\"d\", \"return {\" + n.map(function (n, t) {\n          return JSON.stringify(n) + \": d[\" + t + \"]\";\n        }).join(\",\") + \"}\");\n        r = t ? function (n, e) {\n          return t(i(n), e);\n        } : i;\n      });\n    }, e.parseRows = function (n, t) {\n      function e() {\n        if (f >= c) return o;\n        if (i) return i = !1, u;\n        var t = f;\n\n        if (34 === n.charCodeAt(t)) {\n          for (var e = t; e++ < c;) {\n            if (34 === n.charCodeAt(e)) {\n              if (34 !== n.charCodeAt(e + 1)) break;\n              ++e;\n            }\n          }\n\n          f = e + 2;\n          var r = n.charCodeAt(e + 1);\n          return 13 === r ? (i = !0, 10 === n.charCodeAt(e + 2) && ++f) : 10 === r && (i = !0), n.slice(t + 1, e).replace(/\"\"/g, '\"');\n        }\n\n        for (; c > f;) {\n          var r = n.charCodeAt(f++),\n              a = 1;\n          if (10 === r) i = !0;else if (13 === r) i = !0, 10 === n.charCodeAt(f) && (++f, ++a);else if (r !== l) continue;\n          return n.slice(t, f - a);\n        }\n\n        return n.slice(t);\n      }\n\n      for (var r, i, u = {}, o = {}, a = [], c = n.length, f = 0, s = 0; (r = e()) !== o;) {\n        for (var h = []; r !== u && r !== o;) {\n          h.push(r), r = e();\n        }\n\n        t && null == (h = t(h, s++)) || a.push(h);\n      }\n\n      return a;\n    }, e.format = function (t) {\n      if (Array.isArray(t[0])) return e.formatRows(t);\n      var r = new y(),\n          i = [];\n      return t.forEach(function (n) {\n        for (var t in n) {\n          r.has(t) || i.push(r.add(t));\n        }\n      }), [i.map(o).join(n)].concat(t.map(function (t) {\n        return i.map(function (n) {\n          return o(t[n]);\n        }).join(n);\n      })).join(\"\\n\");\n    }, e.formatRows = function (n) {\n      return n.map(u).join(\"\\n\");\n    }, e;\n  }, ao.csv = ao.dsv(\",\", \"text/csv\"), ao.tsv = ao.dsv(\"\t\", \"text/tab-separated-values\");\n\n  var oa,\n      aa,\n      la,\n      ca,\n      fa = this[x(this, \"requestAnimationFrame\")] || function (n) {\n    setTimeout(n, 17);\n  };\n\n  ao.timer = function () {\n    qn.apply(this, arguments);\n  }, ao.timer.flush = function () {\n    Rn(), Dn();\n  }, ao.round = function (n, t) {\n    return t ? Math.round(n * (t = Math.pow(10, t))) / t : Math.round(n);\n  };\n  var sa = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"\\xb5\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"].map(Un);\n\n  ao.formatPrefix = function (n, t) {\n    var e = 0;\n    return (n = +n) && (0 > n && (n *= -1), t && (n = ao.round(n, Pn(n, t))), e = 1 + Math.floor(1e-12 + Math.log(n) / Math.LN10), e = Math.max(-24, Math.min(24, 3 * Math.floor((e - 1) / 3)))), sa[8 + e / 3];\n  };\n\n  var ha = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i,\n      pa = ao.map({\n    b: function b(n) {\n      return n.toString(2);\n    },\n    c: function c(n) {\n      return String.fromCharCode(n);\n    },\n    o: function o(n) {\n      return n.toString(8);\n    },\n    x: function x(n) {\n      return n.toString(16);\n    },\n    X: function X(n) {\n      return n.toString(16).toUpperCase();\n    },\n    g: function g(n, t) {\n      return n.toPrecision(t);\n    },\n    e: function e(n, t) {\n      return n.toExponential(t);\n    },\n    f: function f(n, t) {\n      return n.toFixed(t);\n    },\n    r: function r(n, t) {\n      return (n = ao.round(n, Pn(n, t))).toFixed(Math.max(0, Math.min(20, Pn(n * (1 + 1e-15), t))));\n    }\n  }),\n      ga = ao.time = {},\n      va = Date;\n  Hn.prototype = {\n    getDate: function getDate() {\n      return this._.getUTCDate();\n    },\n    getDay: function getDay() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function getFullYear() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function getHours() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function getMilliseconds() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function getMinutes() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function getMonth() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function getSeconds() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function getTime() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function getTimezoneOffset() {\n      return 0;\n    },\n    valueOf: function valueOf() {\n      return this._.valueOf();\n    },\n    setDate: function setDate() {\n      da.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function setDay() {\n      da.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function setFullYear() {\n      da.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function setHours() {\n      da.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function setMilliseconds() {\n      da.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function setMinutes() {\n      da.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function setMonth() {\n      da.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function setSeconds() {\n      da.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function setTime() {\n      da.setTime.apply(this._, arguments);\n    }\n  };\n  var da = Date.prototype;\n  ga.year = On(function (n) {\n    return n = ga.day(n), n.setMonth(0, 1), n;\n  }, function (n, t) {\n    n.setFullYear(n.getFullYear() + t);\n  }, function (n) {\n    return n.getFullYear();\n  }), ga.years = ga.year.range, ga.years.utc = ga.year.utc.range, ga.day = On(function (n) {\n    var t = new va(2e3, 0);\n    return t.setFullYear(n.getFullYear(), n.getMonth(), n.getDate()), t;\n  }, function (n, t) {\n    n.setDate(n.getDate() + t);\n  }, function (n) {\n    return n.getDate() - 1;\n  }), ga.days = ga.day.range, ga.days.utc = ga.day.utc.range, ga.dayOfYear = function (n) {\n    var t = ga.year(n);\n    return Math.floor((n - t - 6e4 * (n.getTimezoneOffset() - t.getTimezoneOffset())) / 864e5);\n  }, [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"].forEach(function (n, t) {\n    t = 7 - t;\n    var e = ga[n] = On(function (n) {\n      return (n = ga.day(n)).setDate(n.getDate() - (n.getDay() + t) % 7), n;\n    }, function (n, t) {\n      n.setDate(n.getDate() + 7 * Math.floor(t));\n    }, function (n) {\n      var e = ga.year(n).getDay();\n      return Math.floor((ga.dayOfYear(n) + (e + t) % 7) / 7) - (e !== t);\n    });\n    ga[n + \"s\"] = e.range, ga[n + \"s\"].utc = e.utc.range, ga[n + \"OfYear\"] = function (n) {\n      var e = ga.year(n).getDay();\n      return Math.floor((ga.dayOfYear(n) + (e + t) % 7) / 7);\n    };\n  }), ga.week = ga.sunday, ga.weeks = ga.sunday.range, ga.weeks.utc = ga.sunday.utc.range, ga.weekOfYear = ga.sundayOfYear;\n  var ya = {\n    \"-\": \"\",\n    _: \" \",\n    0: \"0\"\n  },\n      ma = /^\\s*\\d+/,\n      Ma = /^%/;\n\n  ao.locale = function (n) {\n    return {\n      numberFormat: jn(n),\n      timeFormat: Yn(n)\n    };\n  };\n\n  var xa = ao.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n  ao.format = xa.numberFormat, ao.geo = {}, ft.prototype = {\n    s: 0,\n    t: 0,\n    add: function add(n) {\n      st(n, this.t, ba), st(ba.s, this.s, this), this.s ? this.t += ba.t : this.s = ba.t;\n    },\n    reset: function reset() {\n      this.s = this.t = 0;\n    },\n    valueOf: function valueOf() {\n      return this.s;\n    }\n  };\n  var ba = new ft();\n\n  ao.geo.stream = function (n, t) {\n    n && _a.hasOwnProperty(n.type) ? _a[n.type](n, t) : ht(n, t);\n  };\n\n  var _a = {\n    Feature: function Feature(n, t) {\n      ht(n.geometry, t);\n    },\n    FeatureCollection: function FeatureCollection(n, t) {\n      for (var e = n.features, r = -1, i = e.length; ++r < i;) {\n        ht(e[r].geometry, t);\n      }\n    }\n  },\n      wa = {\n    Sphere: function Sphere(n, t) {\n      t.sphere();\n    },\n    Point: function Point(n, t) {\n      n = n.coordinates, t.point(n[0], n[1], n[2]);\n    },\n    MultiPoint: function MultiPoint(n, t) {\n      for (var e = n.coordinates, r = -1, i = e.length; ++r < i;) {\n        n = e[r], t.point(n[0], n[1], n[2]);\n      }\n    },\n    LineString: function LineString(n, t) {\n      pt(n.coordinates, t, 0);\n    },\n    MultiLineString: function MultiLineString(n, t) {\n      for (var e = n.coordinates, r = -1, i = e.length; ++r < i;) {\n        pt(e[r], t, 0);\n      }\n    },\n    Polygon: function Polygon(n, t) {\n      gt(n.coordinates, t);\n    },\n    MultiPolygon: function MultiPolygon(n, t) {\n      for (var e = n.coordinates, r = -1, i = e.length; ++r < i;) {\n        gt(e[r], t);\n      }\n    },\n    GeometryCollection: function GeometryCollection(n, t) {\n      for (var e = n.geometries, r = -1, i = e.length; ++r < i;) {\n        ht(e[r], t);\n      }\n    }\n  };\n\n  ao.geo.area = function (n) {\n    return Sa = 0, ao.geo.stream(n, Na), Sa;\n  };\n\n  var Sa,\n      ka = new ft(),\n      Na = {\n    sphere: function sphere() {\n      Sa += 4 * Fo;\n    },\n    point: b,\n    lineStart: b,\n    lineEnd: b,\n    polygonStart: function polygonStart() {\n      ka.reset(), Na.lineStart = vt;\n    },\n    polygonEnd: function polygonEnd() {\n      var n = 2 * ka;\n      Sa += 0 > n ? 4 * Fo + n : n, Na.lineStart = Na.lineEnd = Na.point = b;\n    }\n  };\n  ao.geo.bounds = function () {\n    function n(n, t) {\n      M.push(x = [f = n, h = n]), s > t && (s = t), t > p && (p = t);\n    }\n\n    function t(t, e) {\n      var r = dt([t * Yo, e * Yo]);\n\n      if (y) {\n        var i = mt(y, r),\n            u = [i[1], -i[0], 0],\n            o = mt(u, i);\n        bt(o), o = _t(o);\n        var l = t - g,\n            c = l > 0 ? 1 : -1,\n            v = o[0] * Zo * c,\n            d = xo(l) > 180;\n\n        if (d ^ (v > c * g && c * t > v)) {\n          var m = o[1] * Zo;\n          m > p && (p = m);\n        } else if (v = (v + 360) % 360 - 180, d ^ (v > c * g && c * t > v)) {\n          var m = -o[1] * Zo;\n          s > m && (s = m);\n        } else s > e && (s = e), e > p && (p = e);\n\n        d ? g > t ? a(f, t) > a(f, h) && (h = t) : a(t, h) > a(f, h) && (f = t) : h >= f ? (f > t && (f = t), t > h && (h = t)) : t > g ? a(f, t) > a(f, h) && (h = t) : a(t, h) > a(f, h) && (f = t);\n      } else n(t, e);\n\n      y = r, g = t;\n    }\n\n    function e() {\n      b.point = t;\n    }\n\n    function r() {\n      x[0] = f, x[1] = h, b.point = n, y = null;\n    }\n\n    function i(n, e) {\n      if (y) {\n        var r = n - g;\n        m += xo(r) > 180 ? r + (r > 0 ? 360 : -360) : r;\n      } else v = n, d = e;\n\n      Na.point(n, e), t(n, e);\n    }\n\n    function u() {\n      Na.lineStart();\n    }\n\n    function o() {\n      i(v, d), Na.lineEnd(), xo(m) > Uo && (f = -(h = 180)), x[0] = f, x[1] = h, y = null;\n    }\n\n    function a(n, t) {\n      return (t -= n) < 0 ? t + 360 : t;\n    }\n\n    function l(n, t) {\n      return n[0] - t[0];\n    }\n\n    function c(n, t) {\n      return t[0] <= t[1] ? t[0] <= n && n <= t[1] : n < t[0] || t[1] < n;\n    }\n\n    var f,\n        s,\n        h,\n        p,\n        g,\n        v,\n        d,\n        y,\n        m,\n        M,\n        x,\n        b = {\n      point: n,\n      lineStart: e,\n      lineEnd: r,\n      polygonStart: function polygonStart() {\n        b.point = i, b.lineStart = u, b.lineEnd = o, m = 0, Na.polygonStart();\n      },\n      polygonEnd: function polygonEnd() {\n        Na.polygonEnd(), b.point = n, b.lineStart = e, b.lineEnd = r, 0 > ka ? (f = -(h = 180), s = -(p = 90)) : m > Uo ? p = 90 : -Uo > m && (s = -90), x[0] = f, x[1] = h;\n      }\n    };\n    return function (n) {\n      p = h = -(f = s = 1 / 0), M = [], ao.geo.stream(n, b);\n      var t = M.length;\n\n      if (t) {\n        M.sort(l);\n\n        for (var e, r = 1, i = M[0], u = [i]; t > r; ++r) {\n          e = M[r], c(e[0], i) || c(e[1], i) ? (a(i[0], e[1]) > a(i[0], i[1]) && (i[1] = e[1]), a(e[0], i[1]) > a(i[0], i[1]) && (i[0] = e[0])) : u.push(i = e);\n        }\n\n        for (var o, e, g = -(1 / 0), t = u.length - 1, r = 0, i = u[t]; t >= r; i = e, ++r) {\n          e = u[r], (o = a(i[1], e[0])) > g && (g = o, f = e[0], h = i[1]);\n        }\n      }\n\n      return M = x = null, f === 1 / 0 || s === 1 / 0 ? [[NaN, NaN], [NaN, NaN]] : [[f, s], [h, p]];\n    };\n  }(), ao.geo.centroid = function (n) {\n    Ea = Aa = Ca = za = La = qa = Ta = Ra = Da = Pa = Ua = 0, ao.geo.stream(n, ja);\n    var t = Da,\n        e = Pa,\n        r = Ua,\n        i = t * t + e * e + r * r;\n    return jo > i && (t = qa, e = Ta, r = Ra, Uo > Aa && (t = Ca, e = za, r = La), i = t * t + e * e + r * r, jo > i) ? [NaN, NaN] : [Math.atan2(e, t) * Zo, tn(r / Math.sqrt(i)) * Zo];\n  };\n  var Ea,\n      Aa,\n      Ca,\n      za,\n      La,\n      qa,\n      Ta,\n      Ra,\n      Da,\n      Pa,\n      Ua,\n      ja = {\n    sphere: b,\n    point: St,\n    lineStart: Nt,\n    lineEnd: Et,\n    polygonStart: function polygonStart() {\n      ja.lineStart = At;\n    },\n    polygonEnd: function polygonEnd() {\n      ja.lineStart = Nt;\n    }\n  },\n      Fa = Rt(zt, jt, Ht, [-Fo, -Fo / 2]),\n      Ha = 1e9;\n  ao.geo.clipExtent = function () {\n    var n,\n        t,\n        e,\n        r,\n        i,\n        u,\n        o = {\n      stream: function stream(n) {\n        return i && (i.valid = !1), i = u(n), i.valid = !0, i;\n      },\n      extent: function extent(a) {\n        return arguments.length ? (u = Zt(n = +a[0][0], t = +a[0][1], e = +a[1][0], r = +a[1][1]), i && (i.valid = !1, i = null), o) : [[n, t], [e, r]];\n      }\n    };\n    return o.extent([[0, 0], [960, 500]]);\n  }, (ao.geo.conicEqualArea = function () {\n    return Vt(Xt);\n  }).raw = Xt, ao.geo.albers = function () {\n    return ao.geo.conicEqualArea().rotate([96, 0]).center([-.6, 38.7]).parallels([29.5, 45.5]).scale(1070);\n  }, ao.geo.albersUsa = function () {\n    function n(n) {\n      var u = n[0],\n          o = n[1];\n      return t = null, e(u, o), t || (r(u, o), t) || i(u, o), t;\n    }\n\n    var t,\n        e,\n        r,\n        i,\n        u = ao.geo.albers(),\n        o = ao.geo.conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),\n        a = ao.geo.conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),\n        l = {\n      point: function point(n, e) {\n        t = [n, e];\n      }\n    };\n    return n.invert = function (n) {\n      var t = u.scale(),\n          e = u.translate(),\n          r = (n[0] - e[0]) / t,\n          i = (n[1] - e[1]) / t;\n      return (i >= .12 && .234 > i && r >= -.425 && -.214 > r ? o : i >= .166 && .234 > i && r >= -.214 && -.115 > r ? a : u).invert(n);\n    }, n.stream = function (n) {\n      var t = u.stream(n),\n          e = o.stream(n),\n          r = a.stream(n);\n      return {\n        point: function point(n, i) {\n          t.point(n, i), e.point(n, i), r.point(n, i);\n        },\n        sphere: function sphere() {\n          t.sphere(), e.sphere(), r.sphere();\n        },\n        lineStart: function lineStart() {\n          t.lineStart(), e.lineStart(), r.lineStart();\n        },\n        lineEnd: function lineEnd() {\n          t.lineEnd(), e.lineEnd(), r.lineEnd();\n        },\n        polygonStart: function polygonStart() {\n          t.polygonStart(), e.polygonStart(), r.polygonStart();\n        },\n        polygonEnd: function polygonEnd() {\n          t.polygonEnd(), e.polygonEnd(), r.polygonEnd();\n        }\n      };\n    }, n.precision = function (t) {\n      return arguments.length ? (u.precision(t), o.precision(t), a.precision(t), n) : u.precision();\n    }, n.scale = function (t) {\n      return arguments.length ? (u.scale(t), o.scale(.35 * t), a.scale(t), n.translate(u.translate())) : u.scale();\n    }, n.translate = function (t) {\n      if (!arguments.length) return u.translate();\n      var c = u.scale(),\n          f = +t[0],\n          s = +t[1];\n      return e = u.translate(t).clipExtent([[f - .455 * c, s - .238 * c], [f + .455 * c, s + .238 * c]]).stream(l).point, r = o.translate([f - .307 * c, s + .201 * c]).clipExtent([[f - .425 * c + Uo, s + .12 * c + Uo], [f - .214 * c - Uo, s + .234 * c - Uo]]).stream(l).point, i = a.translate([f - .205 * c, s + .212 * c]).clipExtent([[f - .214 * c + Uo, s + .166 * c + Uo], [f - .115 * c - Uo, s + .234 * c - Uo]]).stream(l).point, n;\n    }, n.scale(1070);\n  };\n  var Oa,\n      Ia,\n      Ya,\n      Za,\n      Va,\n      Xa,\n      $a = {\n    point: b,\n    lineStart: b,\n    lineEnd: b,\n    polygonStart: function polygonStart() {\n      Ia = 0, $a.lineStart = $t;\n    },\n    polygonEnd: function polygonEnd() {\n      $a.lineStart = $a.lineEnd = $a.point = b, Oa += xo(Ia / 2);\n    }\n  },\n      Ba = {\n    point: Bt,\n    lineStart: b,\n    lineEnd: b,\n    polygonStart: b,\n    polygonEnd: b\n  },\n      Wa = {\n    point: Gt,\n    lineStart: Kt,\n    lineEnd: Qt,\n    polygonStart: function polygonStart() {\n      Wa.lineStart = ne;\n    },\n    polygonEnd: function polygonEnd() {\n      Wa.point = Gt, Wa.lineStart = Kt, Wa.lineEnd = Qt;\n    }\n  };\n  ao.geo.path = function () {\n    function n(n) {\n      return n && (\"function\" == typeof a && u.pointRadius(+a.apply(this, arguments)), o && o.valid || (o = i(u)), ao.geo.stream(n, o)), u.result();\n    }\n\n    function t() {\n      return o = null, n;\n    }\n\n    var e,\n        r,\n        i,\n        u,\n        o,\n        a = 4.5;\n    return n.area = function (n) {\n      return Oa = 0, ao.geo.stream(n, i($a)), Oa;\n    }, n.centroid = function (n) {\n      return Ca = za = La = qa = Ta = Ra = Da = Pa = Ua = 0, ao.geo.stream(n, i(Wa)), Ua ? [Da / Ua, Pa / Ua] : Ra ? [qa / Ra, Ta / Ra] : La ? [Ca / La, za / La] : [NaN, NaN];\n    }, n.bounds = function (n) {\n      return Va = Xa = -(Ya = Za = 1 / 0), ao.geo.stream(n, i(Ba)), [[Ya, Za], [Va, Xa]];\n    }, n.projection = function (n) {\n      return arguments.length ? (i = (e = n) ? n.stream || re(n) : m, t()) : e;\n    }, n.context = function (n) {\n      return arguments.length ? (u = null == (r = n) ? new Wt() : new te(n), \"function\" != typeof a && u.pointRadius(a), t()) : r;\n    }, n.pointRadius = function (t) {\n      return arguments.length ? (a = \"function\" == typeof t ? t : (u.pointRadius(+t), +t), n) : a;\n    }, n.projection(ao.geo.albersUsa()).context(null);\n  }, ao.geo.transform = function (n) {\n    return {\n      stream: function stream(t) {\n        var e = new ie(t);\n\n        for (var r in n) {\n          e[r] = n[r];\n        }\n\n        return e;\n      }\n    };\n  }, ie.prototype = {\n    point: function point(n, t) {\n      this.stream.point(n, t);\n    },\n    sphere: function sphere() {\n      this.stream.sphere();\n    },\n    lineStart: function lineStart() {\n      this.stream.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function polygonStart() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function polygonEnd() {\n      this.stream.polygonEnd();\n    }\n  }, ao.geo.projection = oe, ao.geo.projectionMutator = ae, (ao.geo.equirectangular = function () {\n    return oe(ce);\n  }).raw = ce.invert = ce, ao.geo.rotation = function (n) {\n    function t(t) {\n      return t = n(t[0] * Yo, t[1] * Yo), t[0] *= Zo, t[1] *= Zo, t;\n    }\n\n    return n = se(n[0] % 360 * Yo, n[1] * Yo, n.length > 2 ? n[2] * Yo : 0), t.invert = function (t) {\n      return t = n.invert(t[0] * Yo, t[1] * Yo), t[0] *= Zo, t[1] *= Zo, t;\n    }, t;\n  }, fe.invert = ce, ao.geo.circle = function () {\n    function n() {\n      var n = \"function\" == typeof r ? r.apply(this, arguments) : r,\n          t = se(-n[0] * Yo, -n[1] * Yo, 0).invert,\n          i = [];\n      return e(null, null, 1, {\n        point: function point(n, e) {\n          i.push(n = t(n, e)), n[0] *= Zo, n[1] *= Zo;\n        }\n      }), {\n        type: \"Polygon\",\n        coordinates: [i]\n      };\n    }\n\n    var t,\n        e,\n        r = [0, 0],\n        i = 6;\n    return n.origin = function (t) {\n      return arguments.length ? (r = t, n) : r;\n    }, n.angle = function (r) {\n      return arguments.length ? (e = ve((t = +r) * Yo, i * Yo), n) : t;\n    }, n.precision = function (r) {\n      return arguments.length ? (e = ve(t * Yo, (i = +r) * Yo), n) : i;\n    }, n.angle(90);\n  }, ao.geo.distance = function (n, t) {\n    var e,\n        r = (t[0] - n[0]) * Yo,\n        i = n[1] * Yo,\n        u = t[1] * Yo,\n        o = Math.sin(r),\n        a = Math.cos(r),\n        l = Math.sin(i),\n        c = Math.cos(i),\n        f = Math.sin(u),\n        s = Math.cos(u);\n    return Math.atan2(Math.sqrt((e = s * o) * e + (e = c * f - l * s * a) * e), l * f + c * s * a);\n  }, ao.geo.graticule = function () {\n    function n() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: t()\n      };\n    }\n\n    function t() {\n      return ao.range(Math.ceil(u / d) * d, i, d).map(h).concat(ao.range(Math.ceil(c / y) * y, l, y).map(p)).concat(ao.range(Math.ceil(r / g) * g, e, g).filter(function (n) {\n        return xo(n % d) > Uo;\n      }).map(f)).concat(ao.range(Math.ceil(a / v) * v, o, v).filter(function (n) {\n        return xo(n % y) > Uo;\n      }).map(s));\n    }\n\n    var e,\n        r,\n        i,\n        u,\n        o,\n        a,\n        l,\n        c,\n        f,\n        s,\n        h,\n        p,\n        g = 10,\n        v = g,\n        d = 90,\n        y = 360,\n        m = 2.5;\n    return n.lines = function () {\n      return t().map(function (n) {\n        return {\n          type: \"LineString\",\n          coordinates: n\n        };\n      });\n    }, n.outline = function () {\n      return {\n        type: \"Polygon\",\n        coordinates: [h(u).concat(p(l).slice(1), h(i).reverse().slice(1), p(c).reverse().slice(1))]\n      };\n    }, n.extent = function (t) {\n      return arguments.length ? n.majorExtent(t).minorExtent(t) : n.minorExtent();\n    }, n.majorExtent = function (t) {\n      return arguments.length ? (u = +t[0][0], i = +t[1][0], c = +t[0][1], l = +t[1][1], u > i && (t = u, u = i, i = t), c > l && (t = c, c = l, l = t), n.precision(m)) : [[u, c], [i, l]];\n    }, n.minorExtent = function (t) {\n      return arguments.length ? (r = +t[0][0], e = +t[1][0], a = +t[0][1], o = +t[1][1], r > e && (t = r, r = e, e = t), a > o && (t = a, a = o, o = t), n.precision(m)) : [[r, a], [e, o]];\n    }, n.step = function (t) {\n      return arguments.length ? n.majorStep(t).minorStep(t) : n.minorStep();\n    }, n.majorStep = function (t) {\n      return arguments.length ? (d = +t[0], y = +t[1], n) : [d, y];\n    }, n.minorStep = function (t) {\n      return arguments.length ? (g = +t[0], v = +t[1], n) : [g, v];\n    }, n.precision = function (t) {\n      return arguments.length ? (m = +t, f = ye(a, o, 90), s = me(r, e, m), h = ye(c, l, 90), p = me(u, i, m), n) : m;\n    }, n.majorExtent([[-180, -90 + Uo], [180, 90 - Uo]]).minorExtent([[-180, -80 - Uo], [180, 80 + Uo]]);\n  }, ao.geo.greatArc = function () {\n    function n() {\n      return {\n        type: \"LineString\",\n        coordinates: [t || r.apply(this, arguments), e || i.apply(this, arguments)]\n      };\n    }\n\n    var t,\n        e,\n        r = Me,\n        i = xe;\n    return n.distance = function () {\n      return ao.geo.distance(t || r.apply(this, arguments), e || i.apply(this, arguments));\n    }, n.source = function (e) {\n      return arguments.length ? (r = e, t = \"function\" == typeof e ? null : e, n) : r;\n    }, n.target = function (t) {\n      return arguments.length ? (i = t, e = \"function\" == typeof t ? null : t, n) : i;\n    }, n.precision = function () {\n      return arguments.length ? n : 0;\n    }, n;\n  }, ao.geo.interpolate = function (n, t) {\n    return be(n[0] * Yo, n[1] * Yo, t[0] * Yo, t[1] * Yo);\n  }, ao.geo.length = function (n) {\n    return Ja = 0, ao.geo.stream(n, Ga), Ja;\n  };\n  var Ja,\n      Ga = {\n    sphere: b,\n    point: b,\n    lineStart: _e,\n    lineEnd: b,\n    polygonStart: b,\n    polygonEnd: b\n  },\n      Ka = we(function (n) {\n    return Math.sqrt(2 / (1 + n));\n  }, function (n) {\n    return 2 * Math.asin(n / 2);\n  });\n  (ao.geo.azimuthalEqualArea = function () {\n    return oe(Ka);\n  }).raw = Ka;\n  var Qa = we(function (n) {\n    var t = Math.acos(n);\n    return t && t / Math.sin(t);\n  }, m);\n  (ao.geo.azimuthalEquidistant = function () {\n    return oe(Qa);\n  }).raw = Qa, (ao.geo.conicConformal = function () {\n    return Vt(Se);\n  }).raw = Se, (ao.geo.conicEquidistant = function () {\n    return Vt(ke);\n  }).raw = ke;\n  var nl = we(function (n) {\n    return 1 / n;\n  }, Math.atan);\n  (ao.geo.gnomonic = function () {\n    return oe(nl);\n  }).raw = nl, Ne.invert = function (n, t) {\n    return [n, 2 * Math.atan(Math.exp(t)) - Io];\n  }, (ao.geo.mercator = function () {\n    return Ee(Ne);\n  }).raw = Ne;\n  var tl = we(function () {\n    return 1;\n  }, Math.asin);\n  (ao.geo.orthographic = function () {\n    return oe(tl);\n  }).raw = tl;\n  var el = we(function (n) {\n    return 1 / (1 + n);\n  }, function (n) {\n    return 2 * Math.atan(n);\n  });\n  (ao.geo.stereographic = function () {\n    return oe(el);\n  }).raw = el, Ae.invert = function (n, t) {\n    return [-t, 2 * Math.atan(Math.exp(n)) - Io];\n  }, (ao.geo.transverseMercator = function () {\n    var n = Ee(Ae),\n        t = n.center,\n        e = n.rotate;\n    return n.center = function (n) {\n      return n ? t([-n[1], n[0]]) : (n = t(), [n[1], -n[0]]);\n    }, n.rotate = function (n) {\n      return n ? e([n[0], n[1], n.length > 2 ? n[2] + 90 : 90]) : (n = e(), [n[0], n[1], n[2] - 90]);\n    }, e([0, 0, 90]);\n  }).raw = Ae, ao.geom = {}, ao.geom.hull = function (n) {\n    function t(n) {\n      if (n.length < 3) return [];\n      var t,\n          i = En(e),\n          u = En(r),\n          o = n.length,\n          a = [],\n          l = [];\n\n      for (t = 0; o > t; t++) {\n        a.push([+i.call(this, n[t], t), +u.call(this, n[t], t), t]);\n      }\n\n      for (a.sort(qe), t = 0; o > t; t++) {\n        l.push([a[t][0], -a[t][1]]);\n      }\n\n      var c = Le(a),\n          f = Le(l),\n          s = f[0] === c[0],\n          h = f[f.length - 1] === c[c.length - 1],\n          p = [];\n\n      for (t = c.length - 1; t >= 0; --t) {\n        p.push(n[a[c[t]][2]]);\n      }\n\n      for (t = +s; t < f.length - h; ++t) {\n        p.push(n[a[f[t]][2]]);\n      }\n\n      return p;\n    }\n\n    var e = Ce,\n        r = ze;\n    return arguments.length ? t(n) : (t.x = function (n) {\n      return arguments.length ? (e = n, t) : e;\n    }, t.y = function (n) {\n      return arguments.length ? (r = n, t) : r;\n    }, t);\n  }, ao.geom.polygon = function (n) {\n    return ko(n, rl), n;\n  };\n  var rl = ao.geom.polygon.prototype = [];\n  rl.area = function () {\n    for (var n, t = -1, e = this.length, r = this[e - 1], i = 0; ++t < e;) {\n      n = r, r = this[t], i += n[1] * r[0] - n[0] * r[1];\n    }\n\n    return .5 * i;\n  }, rl.centroid = function (n) {\n    var t,\n        e,\n        r = -1,\n        i = this.length,\n        u = 0,\n        o = 0,\n        a = this[i - 1];\n\n    for (arguments.length || (n = -1 / (6 * this.area())); ++r < i;) {\n      t = a, a = this[r], e = t[0] * a[1] - a[0] * t[1], u += (t[0] + a[0]) * e, o += (t[1] + a[1]) * e;\n    }\n\n    return [u * n, o * n];\n  }, rl.clip = function (n) {\n    for (var t, e, r, i, u, o, a = De(n), l = -1, c = this.length - De(this), f = this[c - 1]; ++l < c;) {\n      for (t = n.slice(), n.length = 0, i = this[l], u = t[(r = t.length - a) - 1], e = -1; ++e < r;) {\n        o = t[e], Te(o, f, i) ? (Te(u, f, i) || n.push(Re(u, o, f, i)), n.push(o)) : Te(u, f, i) && n.push(Re(u, o, f, i)), u = o;\n      }\n\n      a && n.push(n[0]), f = i;\n    }\n\n    return n;\n  };\n  var il,\n      ul,\n      ol,\n      al,\n      ll,\n      cl = [],\n      fl = [];\n  Ye.prototype.prepare = function () {\n    for (var n, t = this.edges, e = t.length; e--;) {\n      n = t[e].edge, n.b && n.a || t.splice(e, 1);\n    }\n\n    return t.sort(Ve), t.length;\n  }, tr.prototype = {\n    start: function start() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function end() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  }, er.prototype = {\n    insert: function insert(n, t) {\n      var e, r, i;\n\n      if (n) {\n        if (t.P = n, t.N = n.N, n.N && (n.N.P = t), n.N = t, n.R) {\n          for (n = n.R; n.L;) {\n            n = n.L;\n          }\n\n          n.L = t;\n        } else n.R = t;\n\n        e = n;\n      } else this._ ? (n = or(this._), t.P = null, t.N = n, n.P = n.L = t, e = n) : (t.P = t.N = null, this._ = t, e = null);\n\n      for (t.L = t.R = null, t.U = e, t.C = !0, n = t; e && e.C;) {\n        r = e.U, e === r.L ? (i = r.R, i && i.C ? (e.C = i.C = !1, r.C = !0, n = r) : (n === e.R && (ir(this, e), n = e, e = n.U), e.C = !1, r.C = !0, ur(this, r))) : (i = r.L, i && i.C ? (e.C = i.C = !1, r.C = !0, n = r) : (n === e.L && (ur(this, e), n = e, e = n.U), e.C = !1, r.C = !0, ir(this, r))), e = n.U;\n      }\n\n      this._.C = !1;\n    },\n    remove: function remove(n) {\n      n.N && (n.N.P = n.P), n.P && (n.P.N = n.N), n.N = n.P = null;\n      var t,\n          e,\n          r,\n          i = n.U,\n          u = n.L,\n          o = n.R;\n\n      if (e = u ? o ? or(o) : u : o, i ? i.L === n ? i.L = e : i.R = e : this._ = e, u && o ? (r = e.C, e.C = n.C, e.L = u, u.U = e, e !== o ? (i = e.U, e.U = n.U, n = e.R, i.L = n, e.R = o, o.U = e) : (e.U = i, i = e, n = e.R)) : (r = n.C, n = e), n && (n.U = i), !r) {\n        if (n && n.C) return void (n.C = !1);\n\n        do {\n          if (n === this._) break;\n\n          if (n === i.L) {\n            if (t = i.R, t.C && (t.C = !1, i.C = !0, ir(this, i), t = i.R), t.L && t.L.C || t.R && t.R.C) {\n              t.R && t.R.C || (t.L.C = !1, t.C = !0, ur(this, t), t = i.R), t.C = i.C, i.C = t.R.C = !1, ir(this, i), n = this._;\n              break;\n            }\n          } else if (t = i.L, t.C && (t.C = !1, i.C = !0, ur(this, i), t = i.L), t.L && t.L.C || t.R && t.R.C) {\n            t.L && t.L.C || (t.R.C = !1, t.C = !0, ir(this, t), t = i.L), t.C = i.C, i.C = t.L.C = !1, ur(this, i), n = this._;\n            break;\n          }\n\n          t.C = !0, n = i, i = i.U;\n        } while (!n.C);\n\n        n && (n.C = !1);\n      }\n    }\n  }, ao.geom.voronoi = function (n) {\n    function t(n) {\n      var t = new Array(n.length),\n          r = a[0][0],\n          i = a[0][1],\n          u = a[1][0],\n          o = a[1][1];\n      return ar(e(n), a).cells.forEach(function (e, a) {\n        var l = e.edges,\n            c = e.site,\n            f = t[a] = l.length ? l.map(function (n) {\n          var t = n.start();\n          return [t.x, t.y];\n        }) : c.x >= r && c.x <= u && c.y >= i && c.y <= o ? [[r, o], [u, o], [u, i], [r, i]] : [];\n        f.point = n[a];\n      }), t;\n    }\n\n    function e(n) {\n      return n.map(function (n, t) {\n        return {\n          x: Math.round(u(n, t) / Uo) * Uo,\n          y: Math.round(o(n, t) / Uo) * Uo,\n          i: t\n        };\n      });\n    }\n\n    var r = Ce,\n        i = ze,\n        u = r,\n        o = i,\n        a = sl;\n    return n ? t(n) : (t.links = function (n) {\n      return ar(e(n)).edges.filter(function (n) {\n        return n.l && n.r;\n      }).map(function (t) {\n        return {\n          source: n[t.l.i],\n          target: n[t.r.i]\n        };\n      });\n    }, t.triangles = function (n) {\n      var t = [];\n      return ar(e(n)).cells.forEach(function (e, r) {\n        for (var i, u, o = e.site, a = e.edges.sort(Ve), l = -1, c = a.length, f = a[c - 1].edge, s = f.l === o ? f.r : f.l; ++l < c;) {\n          i = f, u = s, f = a[l].edge, s = f.l === o ? f.r : f.l, r < u.i && r < s.i && cr(o, u, s) < 0 && t.push([n[r], n[u.i], n[s.i]]);\n        }\n      }), t;\n    }, t.x = function (n) {\n      return arguments.length ? (u = En(r = n), t) : r;\n    }, t.y = function (n) {\n      return arguments.length ? (o = En(i = n), t) : i;\n    }, t.clipExtent = function (n) {\n      return arguments.length ? (a = null == n ? sl : n, t) : a === sl ? null : a;\n    }, t.size = function (n) {\n      return arguments.length ? t.clipExtent(n && [[0, 0], n]) : a === sl ? null : a && a[1];\n    }, t);\n  };\n  var sl = [[-1e6, -1e6], [1e6, 1e6]];\n  ao.geom.delaunay = function (n) {\n    return ao.geom.voronoi().triangles(n);\n  }, ao.geom.quadtree = function (n, t, e, r, i) {\n    function u(n) {\n      function u(n, t, e, r, i, u, o, a) {\n        if (!isNaN(e) && !isNaN(r)) if (n.leaf) {\n          var l = n.x,\n              f = n.y;\n          if (null != l) {\n            if (xo(l - e) + xo(f - r) < .01) c(n, t, e, r, i, u, o, a);else {\n              var s = n.point;\n              n.x = n.y = n.point = null, c(n, s, l, f, i, u, o, a), c(n, t, e, r, i, u, o, a);\n            }\n          } else n.x = e, n.y = r, n.point = t;\n        } else c(n, t, e, r, i, u, o, a);\n      }\n\n      function c(n, t, e, r, i, o, a, l) {\n        var c = .5 * (i + a),\n            f = .5 * (o + l),\n            s = e >= c,\n            h = r >= f,\n            p = h << 1 | s;\n        n.leaf = !1, n = n.nodes[p] || (n.nodes[p] = hr()), s ? i = c : a = c, h ? o = f : l = f, u(n, t, e, r, i, o, a, l);\n      }\n\n      var f,\n          s,\n          h,\n          p,\n          g,\n          v,\n          d,\n          y,\n          m,\n          M = En(a),\n          x = En(l);\n      if (null != t) v = t, d = e, y = r, m = i;else if (y = m = -(v = d = 1 / 0), s = [], h = [], g = n.length, o) for (p = 0; g > p; ++p) {\n        f = n[p], f.x < v && (v = f.x), f.y < d && (d = f.y), f.x > y && (y = f.x), f.y > m && (m = f.y), s.push(f.x), h.push(f.y);\n      } else for (p = 0; g > p; ++p) {\n        var b = +M(f = n[p], p),\n            _ = +x(f, p);\n\n        v > b && (v = b), d > _ && (d = _), b > y && (y = b), _ > m && (m = _), s.push(b), h.push(_);\n      }\n      var w = y - v,\n          S = m - d;\n      w > S ? m = d + w : y = v + S;\n      var k = hr();\n\n      if (k.add = function (n) {\n        u(k, n, +M(n, ++p), +x(n, p), v, d, y, m);\n      }, k.visit = function (n) {\n        pr(n, k, v, d, y, m);\n      }, k.find = function (n) {\n        return gr(k, n[0], n[1], v, d, y, m);\n      }, p = -1, null == t) {\n        for (; ++p < g;) {\n          u(k, n[p], s[p], h[p], v, d, y, m);\n        }\n\n        --p;\n      } else n.forEach(k.add);\n\n      return s = h = n = f = null, k;\n    }\n\n    var o,\n        a = Ce,\n        l = ze;\n    return (o = arguments.length) ? (a = fr, l = sr, 3 === o && (i = e, r = t, e = t = 0), u(n)) : (u.x = function (n) {\n      return arguments.length ? (a = n, u) : a;\n    }, u.y = function (n) {\n      return arguments.length ? (l = n, u) : l;\n    }, u.extent = function (n) {\n      return arguments.length ? (null == n ? t = e = r = i = null : (t = +n[0][0], e = +n[0][1], r = +n[1][0], i = +n[1][1]), u) : null == t ? null : [[t, e], [r, i]];\n    }, u.size = function (n) {\n      return arguments.length ? (null == n ? t = e = r = i = null : (t = e = 0, r = +n[0], i = +n[1]), u) : null == t ? null : [r - t, i - e];\n    }, u);\n  }, ao.interpolateRgb = vr, ao.interpolateObject = dr, ao.interpolateNumber = yr, ao.interpolateString = mr;\n  var hl = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n      pl = new RegExp(hl.source, \"g\");\n  ao.interpolate = Mr, ao.interpolators = [function (n, t) {\n    var e = _typeof(t);\n\n    return (\"string\" === e ? ua.has(t.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(t) ? vr : mr : t instanceof an ? vr : Array.isArray(t) ? xr : \"object\" === e && isNaN(t) ? dr : yr)(n, t);\n  }], ao.interpolateArray = xr;\n\n  var gl = function gl() {\n    return m;\n  },\n      vl = ao.map({\n    linear: gl,\n    poly: Er,\n    quad: function quad() {\n      return Sr;\n    },\n    cubic: function cubic() {\n      return kr;\n    },\n    sin: function sin() {\n      return Ar;\n    },\n    exp: function exp() {\n      return Cr;\n    },\n    circle: function circle() {\n      return zr;\n    },\n    elastic: Lr,\n    back: qr,\n    bounce: function bounce() {\n      return Tr;\n    }\n  }),\n      dl = ao.map({\n    \"in\": m,\n    out: _r,\n    \"in-out\": wr,\n    \"out-in\": function outIn(n) {\n      return wr(_r(n));\n    }\n  });\n\n  ao.ease = function (n) {\n    var t = n.indexOf(\"-\"),\n        e = t >= 0 ? n.slice(0, t) : n,\n        r = t >= 0 ? n.slice(t + 1) : \"in\";\n    return e = vl.get(e) || gl, r = dl.get(r) || m, br(r(e.apply(null, lo.call(arguments, 1))));\n  }, ao.interpolateHcl = Rr, ao.interpolateHsl = Dr, ao.interpolateLab = Pr, ao.interpolateRound = Ur, ao.transform = function (n) {\n    var t = fo.createElementNS(ao.ns.prefix.svg, \"g\");\n    return (ao.transform = function (n) {\n      if (null != n) {\n        t.setAttribute(\"transform\", n);\n        var e = t.transform.baseVal.consolidate();\n      }\n\n      return new jr(e ? e.matrix : yl);\n    })(n);\n  }, jr.prototype.toString = function () {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  var yl = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  ao.interpolateTransform = $r, ao.layout = {}, ao.layout.bundle = function () {\n    return function (n) {\n      for (var t = [], e = -1, r = n.length; ++e < r;) {\n        t.push(Jr(n[e]));\n      }\n\n      return t;\n    };\n  }, ao.layout.chord = function () {\n    function n() {\n      var n,\n          c,\n          s,\n          h,\n          p,\n          g = {},\n          v = [],\n          d = ao.range(u),\n          y = [];\n\n      for (e = [], r = [], n = 0, h = -1; ++h < u;) {\n        for (c = 0, p = -1; ++p < u;) {\n          c += i[h][p];\n        }\n\n        v.push(c), y.push(ao.range(u)), n += c;\n      }\n\n      for (o && d.sort(function (n, t) {\n        return o(v[n], v[t]);\n      }), a && y.forEach(function (n, t) {\n        n.sort(function (n, e) {\n          return a(i[t][n], i[t][e]);\n        });\n      }), n = (Ho - f * u) / n, c = 0, h = -1; ++h < u;) {\n        for (s = c, p = -1; ++p < u;) {\n          var m = d[h],\n              M = y[m][p],\n              x = i[m][M],\n              b = c,\n              _ = c += x * n;\n\n          g[m + \"-\" + M] = {\n            index: m,\n            subindex: M,\n            startAngle: b,\n            endAngle: _,\n            value: x\n          };\n        }\n\n        r[m] = {\n          index: m,\n          startAngle: s,\n          endAngle: c,\n          value: v[m]\n        }, c += f;\n      }\n\n      for (h = -1; ++h < u;) {\n        for (p = h - 1; ++p < u;) {\n          var w = g[h + \"-\" + p],\n              S = g[p + \"-\" + h];\n          (w.value || S.value) && e.push(w.value < S.value ? {\n            source: S,\n            target: w\n          } : {\n            source: w,\n            target: S\n          });\n        }\n      }\n\n      l && t();\n    }\n\n    function t() {\n      e.sort(function (n, t) {\n        return l((n.source.value + n.target.value) / 2, (t.source.value + t.target.value) / 2);\n      });\n    }\n\n    var e,\n        r,\n        i,\n        u,\n        o,\n        a,\n        l,\n        c = {},\n        f = 0;\n    return c.matrix = function (n) {\n      return arguments.length ? (u = (i = n) && i.length, e = r = null, c) : i;\n    }, c.padding = function (n) {\n      return arguments.length ? (f = n, e = r = null, c) : f;\n    }, c.sortGroups = function (n) {\n      return arguments.length ? (o = n, e = r = null, c) : o;\n    }, c.sortSubgroups = function (n) {\n      return arguments.length ? (a = n, e = null, c) : a;\n    }, c.sortChords = function (n) {\n      return arguments.length ? (l = n, e && t(), c) : l;\n    }, c.chords = function () {\n      return e || n(), e;\n    }, c.groups = function () {\n      return r || n(), r;\n    }, c;\n  }, ao.layout.force = function () {\n    function n(n) {\n      return function (t, e, r, i) {\n        if (t.point !== n) {\n          var u = t.cx - n.x,\n              o = t.cy - n.y,\n              a = i - e,\n              l = u * u + o * o;\n\n          if (l > a * a / y) {\n            if (v > l) {\n              var c = t.charge / l;\n              n.px -= u * c, n.py -= o * c;\n            }\n\n            return !0;\n          }\n\n          if (t.point && l && v > l) {\n            var c = t.pointCharge / l;\n            n.px -= u * c, n.py -= o * c;\n          }\n        }\n\n        return !t.charge;\n      };\n    }\n\n    function t(n) {\n      n.px = ao.event.x, n.py = ao.event.y, l.resume();\n    }\n\n    var e,\n        r,\n        i,\n        u,\n        o,\n        a,\n        l = {},\n        c = ao.dispatch(\"start\", \"tick\", \"end\"),\n        f = [1, 1],\n        s = .9,\n        h = ml,\n        p = Ml,\n        g = -30,\n        v = xl,\n        d = .1,\n        y = .64,\n        M = [],\n        x = [];\n    return l.tick = function () {\n      if ((i *= .99) < .005) return e = null, c.end({\n        type: \"end\",\n        alpha: i = 0\n      }), !0;\n      var t,\n          r,\n          l,\n          h,\n          p,\n          v,\n          y,\n          m,\n          b,\n          _ = M.length,\n          w = x.length;\n\n      for (r = 0; w > r; ++r) {\n        l = x[r], h = l.source, p = l.target, m = p.x - h.x, b = p.y - h.y, (v = m * m + b * b) && (v = i * o[r] * ((v = Math.sqrt(v)) - u[r]) / v, m *= v, b *= v, p.x -= m * (y = h.weight + p.weight ? h.weight / (h.weight + p.weight) : .5), p.y -= b * y, h.x += m * (y = 1 - y), h.y += b * y);\n      }\n\n      if ((y = i * d) && (m = f[0] / 2, b = f[1] / 2, r = -1, y)) for (; ++r < _;) {\n        l = M[r], l.x += (m - l.x) * y, l.y += (b - l.y) * y;\n      }\n      if (g) for (ri(t = ao.geom.quadtree(M), i, a), r = -1; ++r < _;) {\n        (l = M[r]).fixed || t.visit(n(l));\n      }\n\n      for (r = -1; ++r < _;) {\n        l = M[r], l.fixed ? (l.x = l.px, l.y = l.py) : (l.x -= (l.px - (l.px = l.x)) * s, l.y -= (l.py - (l.py = l.y)) * s);\n      }\n\n      c.tick({\n        type: \"tick\",\n        alpha: i\n      });\n    }, l.nodes = function (n) {\n      return arguments.length ? (M = n, l) : M;\n    }, l.links = function (n) {\n      return arguments.length ? (x = n, l) : x;\n    }, l.size = function (n) {\n      return arguments.length ? (f = n, l) : f;\n    }, l.linkDistance = function (n) {\n      return arguments.length ? (h = \"function\" == typeof n ? n : +n, l) : h;\n    }, l.distance = l.linkDistance, l.linkStrength = function (n) {\n      return arguments.length ? (p = \"function\" == typeof n ? n : +n, l) : p;\n    }, l.friction = function (n) {\n      return arguments.length ? (s = +n, l) : s;\n    }, l.charge = function (n) {\n      return arguments.length ? (g = \"function\" == typeof n ? n : +n, l) : g;\n    }, l.chargeDistance = function (n) {\n      return arguments.length ? (v = n * n, l) : Math.sqrt(v);\n    }, l.gravity = function (n) {\n      return arguments.length ? (d = +n, l) : d;\n    }, l.theta = function (n) {\n      return arguments.length ? (y = n * n, l) : Math.sqrt(y);\n    }, l.alpha = function (n) {\n      return arguments.length ? (n = +n, i ? n > 0 ? i = n : (e.c = null, e.t = NaN, e = null, c.end({\n        type: \"end\",\n        alpha: i = 0\n      })) : n > 0 && (c.start({\n        type: \"start\",\n        alpha: i = n\n      }), e = qn(l.tick)), l) : i;\n    }, l.start = function () {\n      function n(n, r) {\n        if (!e) {\n          for (e = new Array(i), l = 0; i > l; ++l) {\n            e[l] = [];\n          }\n\n          for (l = 0; c > l; ++l) {\n            var u = x[l];\n            e[u.source.index].push(u.target), e[u.target.index].push(u.source);\n          }\n        }\n\n        for (var o, a = e[t], l = -1, f = a.length; ++l < f;) {\n          if (!isNaN(o = a[l][n])) return o;\n        }\n\n        return Math.random() * r;\n      }\n\n      var t,\n          e,\n          r,\n          i = M.length,\n          c = x.length,\n          s = f[0],\n          v = f[1];\n\n      for (t = 0; i > t; ++t) {\n        (r = M[t]).index = t, r.weight = 0;\n      }\n\n      for (t = 0; c > t; ++t) {\n        r = x[t], \"number\" == typeof r.source && (r.source = M[r.source]), \"number\" == typeof r.target && (r.target = M[r.target]), ++r.source.weight, ++r.target.weight;\n      }\n\n      for (t = 0; i > t; ++t) {\n        r = M[t], isNaN(r.x) && (r.x = n(\"x\", s)), isNaN(r.y) && (r.y = n(\"y\", v)), isNaN(r.px) && (r.px = r.x), isNaN(r.py) && (r.py = r.y);\n      }\n\n      if (u = [], \"function\" == typeof h) for (t = 0; c > t; ++t) {\n        u[t] = +h.call(this, x[t], t);\n      } else for (t = 0; c > t; ++t) {\n        u[t] = h;\n      }\n      if (o = [], \"function\" == typeof p) for (t = 0; c > t; ++t) {\n        o[t] = +p.call(this, x[t], t);\n      } else for (t = 0; c > t; ++t) {\n        o[t] = p;\n      }\n      if (a = [], \"function\" == typeof g) for (t = 0; i > t; ++t) {\n        a[t] = +g.call(this, M[t], t);\n      } else for (t = 0; i > t; ++t) {\n        a[t] = g;\n      }\n      return l.resume();\n    }, l.resume = function () {\n      return l.alpha(.1);\n    }, l.stop = function () {\n      return l.alpha(0);\n    }, l.drag = function () {\n      return r || (r = ao.behavior.drag().origin(m).on(\"dragstart.force\", Qr).on(\"drag.force\", t).on(\"dragend.force\", ni)), arguments.length ? void this.on(\"mouseover.force\", ti).on(\"mouseout.force\", ei).call(r) : r;\n    }, ao.rebind(l, c, \"on\");\n  };\n  var ml = 20,\n      Ml = 1,\n      xl = 1 / 0;\n  ao.layout.hierarchy = function () {\n    function n(i) {\n      var u,\n          o = [i],\n          a = [];\n\n      for (i.depth = 0; null != (u = o.pop());) {\n        if (a.push(u), (c = e.call(n, u, u.depth)) && (l = c.length)) {\n          for (var l, c, f; --l >= 0;) {\n            o.push(f = c[l]), f.parent = u, f.depth = u.depth + 1;\n          }\n\n          r && (u.value = 0), u.children = c;\n        } else r && (u.value = +r.call(n, u, u.depth) || 0), delete u.children;\n      }\n\n      return oi(i, function (n) {\n        var e, i;\n        t && (e = n.children) && e.sort(t), r && (i = n.parent) && (i.value += n.value);\n      }), a;\n    }\n\n    var t = ci,\n        e = ai,\n        r = li;\n    return n.sort = function (e) {\n      return arguments.length ? (t = e, n) : t;\n    }, n.children = function (t) {\n      return arguments.length ? (e = t, n) : e;\n    }, n.value = function (t) {\n      return arguments.length ? (r = t, n) : r;\n    }, n.revalue = function (t) {\n      return r && (ui(t, function (n) {\n        n.children && (n.value = 0);\n      }), oi(t, function (t) {\n        var e;\n        t.children || (t.value = +r.call(n, t, t.depth) || 0), (e = t.parent) && (e.value += t.value);\n      })), t;\n    }, n;\n  }, ao.layout.partition = function () {\n    function n(t, e, r, i) {\n      var u = t.children;\n\n      if (t.x = e, t.y = t.depth * i, t.dx = r, t.dy = i, u && (o = u.length)) {\n        var o,\n            a,\n            l,\n            c = -1;\n\n        for (r = t.value ? r / t.value : 0; ++c < o;) {\n          n(a = u[c], e, l = a.value * r, i), e += l;\n        }\n      }\n    }\n\n    function t(n) {\n      var e = n.children,\n          r = 0;\n      if (e && (i = e.length)) for (var i, u = -1; ++u < i;) {\n        r = Math.max(r, t(e[u]));\n      }\n      return 1 + r;\n    }\n\n    function e(e, u) {\n      var o = r.call(this, e, u);\n      return n(o[0], 0, i[0], i[1] / t(o[0])), o;\n    }\n\n    var r = ao.layout.hierarchy(),\n        i = [1, 1];\n    return e.size = function (n) {\n      return arguments.length ? (i = n, e) : i;\n    }, ii(e, r);\n  }, ao.layout.pie = function () {\n    function n(o) {\n      var a,\n          l = o.length,\n          c = o.map(function (e, r) {\n        return +t.call(n, e, r);\n      }),\n          f = +(\"function\" == typeof r ? r.apply(this, arguments) : r),\n          s = (\"function\" == typeof i ? i.apply(this, arguments) : i) - f,\n          h = Math.min(Math.abs(s) / l, +(\"function\" == typeof u ? u.apply(this, arguments) : u)),\n          p = h * (0 > s ? -1 : 1),\n          g = ao.sum(c),\n          v = g ? (s - l * p) / g : 0,\n          d = ao.range(l),\n          y = [];\n      return null != e && d.sort(e === bl ? function (n, t) {\n        return c[t] - c[n];\n      } : function (n, t) {\n        return e(o[n], o[t]);\n      }), d.forEach(function (n) {\n        y[n] = {\n          data: o[n],\n          value: a = c[n],\n          startAngle: f,\n          endAngle: f += a * v + p,\n          padAngle: h\n        };\n      }), y;\n    }\n\n    var t = Number,\n        e = bl,\n        r = 0,\n        i = Ho,\n        u = 0;\n    return n.value = function (e) {\n      return arguments.length ? (t = e, n) : t;\n    }, n.sort = function (t) {\n      return arguments.length ? (e = t, n) : e;\n    }, n.startAngle = function (t) {\n      return arguments.length ? (r = t, n) : r;\n    }, n.endAngle = function (t) {\n      return arguments.length ? (i = t, n) : i;\n    }, n.padAngle = function (t) {\n      return arguments.length ? (u = t, n) : u;\n    }, n;\n  };\n  var bl = {};\n\n  ao.layout.stack = function () {\n    function n(a, l) {\n      if (!(h = a.length)) return a;\n      var c = a.map(function (e, r) {\n        return t.call(n, e, r);\n      }),\n          f = c.map(function (t) {\n        return t.map(function (t, e) {\n          return [u.call(n, t, e), o.call(n, t, e)];\n        });\n      }),\n          s = e.call(n, f, l);\n      c = ao.permute(c, s), f = ao.permute(f, s);\n      var h,\n          p,\n          g,\n          v,\n          d = r.call(n, f, l),\n          y = c[0].length;\n\n      for (g = 0; y > g; ++g) {\n        for (i.call(n, c[0][g], v = d[g], f[0][g][1]), p = 1; h > p; ++p) {\n          i.call(n, c[p][g], v += f[p - 1][g][1], f[p][g][1]);\n        }\n      }\n\n      return a;\n    }\n\n    var t = m,\n        e = gi,\n        r = vi,\n        i = pi,\n        u = si,\n        o = hi;\n    return n.values = function (e) {\n      return arguments.length ? (t = e, n) : t;\n    }, n.order = function (t) {\n      return arguments.length ? (e = \"function\" == typeof t ? t : _l.get(t) || gi, n) : e;\n    }, n.offset = function (t) {\n      return arguments.length ? (r = \"function\" == typeof t ? t : wl.get(t) || vi, n) : r;\n    }, n.x = function (t) {\n      return arguments.length ? (u = t, n) : u;\n    }, n.y = function (t) {\n      return arguments.length ? (o = t, n) : o;\n    }, n.out = function (t) {\n      return arguments.length ? (i = t, n) : i;\n    }, n;\n  };\n\n  var _l = ao.map({\n    \"inside-out\": function insideOut(n) {\n      var t,\n          e,\n          r = n.length,\n          i = n.map(di),\n          u = n.map(yi),\n          o = ao.range(r).sort(function (n, t) {\n        return i[n] - i[t];\n      }),\n          a = 0,\n          l = 0,\n          c = [],\n          f = [];\n\n      for (t = 0; r > t; ++t) {\n        e = o[t], l > a ? (a += u[e], c.push(e)) : (l += u[e], f.push(e));\n      }\n\n      return f.reverse().concat(c);\n    },\n    reverse: function reverse(n) {\n      return ao.range(n.length).reverse();\n    },\n    \"default\": gi\n  }),\n      wl = ao.map({\n    silhouette: function silhouette(n) {\n      var t,\n          e,\n          r,\n          i = n.length,\n          u = n[0].length,\n          o = [],\n          a = 0,\n          l = [];\n\n      for (e = 0; u > e; ++e) {\n        for (t = 0, r = 0; i > t; t++) {\n          r += n[t][e][1];\n        }\n\n        r > a && (a = r), o.push(r);\n      }\n\n      for (e = 0; u > e; ++e) {\n        l[e] = (a - o[e]) / 2;\n      }\n\n      return l;\n    },\n    wiggle: function wiggle(n) {\n      var t,\n          e,\n          r,\n          i,\n          u,\n          o,\n          a,\n          l,\n          c,\n          f = n.length,\n          s = n[0],\n          h = s.length,\n          p = [];\n\n      for (p[0] = l = c = 0, e = 1; h > e; ++e) {\n        for (t = 0, i = 0; f > t; ++t) {\n          i += n[t][e][1];\n        }\n\n        for (t = 0, u = 0, a = s[e][0] - s[e - 1][0]; f > t; ++t) {\n          for (r = 0, o = (n[t][e][1] - n[t][e - 1][1]) / (2 * a); t > r; ++r) {\n            o += (n[r][e][1] - n[r][e - 1][1]) / a;\n          }\n\n          u += o * n[t][e][1];\n        }\n\n        p[e] = l -= i ? u / i * a : 0, c > l && (c = l);\n      }\n\n      for (e = 0; h > e; ++e) {\n        p[e] -= c;\n      }\n\n      return p;\n    },\n    expand: function expand(n) {\n      var t,\n          e,\n          r,\n          i = n.length,\n          u = n[0].length,\n          o = 1 / i,\n          a = [];\n\n      for (e = 0; u > e; ++e) {\n        for (t = 0, r = 0; i > t; t++) {\n          r += n[t][e][1];\n        }\n\n        if (r) for (t = 0; i > t; t++) {\n          n[t][e][1] /= r;\n        } else for (t = 0; i > t; t++) {\n          n[t][e][1] = o;\n        }\n      }\n\n      for (e = 0; u > e; ++e) {\n        a[e] = 0;\n      }\n\n      return a;\n    },\n    zero: vi\n  });\n\n  ao.layout.histogram = function () {\n    function n(n, u) {\n      for (var o, a, l = [], c = n.map(e, this), f = r.call(this, c, u), s = i.call(this, f, c, u), u = -1, h = c.length, p = s.length - 1, g = t ? 1 : 1 / h; ++u < p;) {\n        o = l[u] = [], o.dx = s[u + 1] - (o.x = s[u]), o.y = 0;\n      }\n\n      if (p > 0) for (u = -1; ++u < h;) {\n        a = c[u], a >= f[0] && a <= f[1] && (o = l[ao.bisect(s, a, 1, p) - 1], o.y += g, o.push(n[u]));\n      }\n      return l;\n    }\n\n    var t = !0,\n        e = Number,\n        r = bi,\n        i = Mi;\n    return n.value = function (t) {\n      return arguments.length ? (e = t, n) : e;\n    }, n.range = function (t) {\n      return arguments.length ? (r = En(t), n) : r;\n    }, n.bins = function (t) {\n      return arguments.length ? (i = \"number\" == typeof t ? function (n) {\n        return xi(n, t);\n      } : En(t), n) : i;\n    }, n.frequency = function (e) {\n      return arguments.length ? (t = !!e, n) : t;\n    }, n;\n  }, ao.layout.pack = function () {\n    function n(n, u) {\n      var o = e.call(this, n, u),\n          a = o[0],\n          l = i[0],\n          c = i[1],\n          f = null == t ? Math.sqrt : \"function\" == typeof t ? t : function () {\n        return t;\n      };\n\n      if (a.x = a.y = 0, oi(a, function (n) {\n        n.r = +f(n.value);\n      }), oi(a, Ni), r) {\n        var s = r * (t ? 1 : Math.max(2 * a.r / l, 2 * a.r / c)) / 2;\n        oi(a, function (n) {\n          n.r += s;\n        }), oi(a, Ni), oi(a, function (n) {\n          n.r -= s;\n        });\n      }\n\n      return Ci(a, l / 2, c / 2, t ? 1 : 1 / Math.max(2 * a.r / l, 2 * a.r / c)), o;\n    }\n\n    var t,\n        e = ao.layout.hierarchy().sort(_i),\n        r = 0,\n        i = [1, 1];\n    return n.size = function (t) {\n      return arguments.length ? (i = t, n) : i;\n    }, n.radius = function (e) {\n      return arguments.length ? (t = null == e || \"function\" == typeof e ? e : +e, n) : t;\n    }, n.padding = function (t) {\n      return arguments.length ? (r = +t, n) : r;\n    }, ii(n, e);\n  }, ao.layout.tree = function () {\n    function n(n, i) {\n      var f = o.call(this, n, i),\n          s = f[0],\n          h = t(s);\n      if (oi(h, e), h.parent.m = -h.z, ui(h, r), c) ui(s, u);else {\n        var p = s,\n            g = s,\n            v = s;\n        ui(s, function (n) {\n          n.x < p.x && (p = n), n.x > g.x && (g = n), n.depth > v.depth && (v = n);\n        });\n        var d = a(p, g) / 2 - p.x,\n            y = l[0] / (g.x + a(g, p) / 2 + d),\n            m = l[1] / (v.depth || 1);\n        ui(s, function (n) {\n          n.x = (n.x + d) * y, n.y = n.depth * m;\n        });\n      }\n      return f;\n    }\n\n    function t(n) {\n      for (var t, e = {\n        A: null,\n        children: [n]\n      }, r = [e]; null != (t = r.pop());) {\n        for (var i, u = t.children, o = 0, a = u.length; a > o; ++o) {\n          r.push((u[o] = i = {\n            _: u[o],\n            parent: t,\n            children: (i = u[o].children) && i.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: o\n          }).a = i);\n        }\n      }\n\n      return e.children[0];\n    }\n\n    function e(n) {\n      var t = n.children,\n          e = n.parent.children,\n          r = n.i ? e[n.i - 1] : null;\n\n      if (t.length) {\n        Di(n);\n        var u = (t[0].z + t[t.length - 1].z) / 2;\n        r ? (n.z = r.z + a(n._, r._), n.m = n.z - u) : n.z = u;\n      } else r && (n.z = r.z + a(n._, r._));\n\n      n.parent.A = i(n, r, n.parent.A || e[0]);\n    }\n\n    function r(n) {\n      n._.x = n.z + n.parent.m, n.m += n.parent.m;\n    }\n\n    function i(n, t, e) {\n      if (t) {\n        for (var r, i = n, u = n, o = t, l = i.parent.children[0], c = i.m, f = u.m, s = o.m, h = l.m; o = Ti(o), i = qi(i), o && i;) {\n          l = qi(l), u = Ti(u), u.a = n, r = o.z + s - i.z - c + a(o._, i._), r > 0 && (Ri(Pi(o, n, e), n, r), c += r, f += r), s += o.m, c += i.m, h += l.m, f += u.m;\n        }\n\n        o && !Ti(u) && (u.t = o, u.m += s - f), i && !qi(l) && (l.t = i, l.m += c - h, e = n);\n      }\n\n      return e;\n    }\n\n    function u(n) {\n      n.x *= l[0], n.y = n.depth * l[1];\n    }\n\n    var o = ao.layout.hierarchy().sort(null).value(null),\n        a = Li,\n        l = [1, 1],\n        c = null;\n    return n.separation = function (t) {\n      return arguments.length ? (a = t, n) : a;\n    }, n.size = function (t) {\n      return arguments.length ? (c = null == (l = t) ? u : null, n) : c ? null : l;\n    }, n.nodeSize = function (t) {\n      return arguments.length ? (c = null == (l = t) ? null : u, n) : c ? l : null;\n    }, ii(n, o);\n  }, ao.layout.cluster = function () {\n    function n(n, u) {\n      var o,\n          a = t.call(this, n, u),\n          l = a[0],\n          c = 0;\n      oi(l, function (n) {\n        var t = n.children;\n        t && t.length ? (n.x = ji(t), n.y = Ui(t)) : (n.x = o ? c += e(n, o) : 0, n.y = 0, o = n);\n      });\n      var f = Fi(l),\n          s = Hi(l),\n          h = f.x - e(f, s) / 2,\n          p = s.x + e(s, f) / 2;\n      return oi(l, i ? function (n) {\n        n.x = (n.x - l.x) * r[0], n.y = (l.y - n.y) * r[1];\n      } : function (n) {\n        n.x = (n.x - h) / (p - h) * r[0], n.y = (1 - (l.y ? n.y / l.y : 1)) * r[1];\n      }), a;\n    }\n\n    var t = ao.layout.hierarchy().sort(null).value(null),\n        e = Li,\n        r = [1, 1],\n        i = !1;\n    return n.separation = function (t) {\n      return arguments.length ? (e = t, n) : e;\n    }, n.size = function (t) {\n      return arguments.length ? (i = null == (r = t), n) : i ? null : r;\n    }, n.nodeSize = function (t) {\n      return arguments.length ? (i = null != (r = t), n) : i ? r : null;\n    }, ii(n, t);\n  }, ao.layout.treemap = function () {\n    function n(n, t) {\n      for (var e, r, i = -1, u = n.length; ++i < u;) {\n        r = (e = n[i]).value * (0 > t ? 0 : t), e.area = isNaN(r) || 0 >= r ? 0 : r;\n      }\n    }\n\n    function t(e) {\n      var u = e.children;\n\n      if (u && u.length) {\n        var o,\n            a,\n            l,\n            c = s(e),\n            f = [],\n            h = u.slice(),\n            g = 1 / 0,\n            v = \"slice\" === p ? c.dx : \"dice\" === p ? c.dy : \"slice-dice\" === p ? 1 & e.depth ? c.dy : c.dx : Math.min(c.dx, c.dy);\n\n        for (n(h, c.dx * c.dy / e.value), f.area = 0; (l = h.length) > 0;) {\n          f.push(o = h[l - 1]), f.area += o.area, \"squarify\" !== p || (a = r(f, v)) <= g ? (h.pop(), g = a) : (f.area -= f.pop().area, i(f, v, c, !1), v = Math.min(c.dx, c.dy), f.length = f.area = 0, g = 1 / 0);\n        }\n\n        f.length && (i(f, v, c, !0), f.length = f.area = 0), u.forEach(t);\n      }\n    }\n\n    function e(t) {\n      var r = t.children;\n\n      if (r && r.length) {\n        var u,\n            o = s(t),\n            a = r.slice(),\n            l = [];\n\n        for (n(a, o.dx * o.dy / t.value), l.area = 0; u = a.pop();) {\n          l.push(u), l.area += u.area, null != u.z && (i(l, u.z ? o.dx : o.dy, o, !a.length), l.length = l.area = 0);\n        }\n\n        r.forEach(e);\n      }\n    }\n\n    function r(n, t) {\n      for (var e, r = n.area, i = 0, u = 1 / 0, o = -1, a = n.length; ++o < a;) {\n        (e = n[o].area) && (u > e && (u = e), e > i && (i = e));\n      }\n\n      return r *= r, t *= t, r ? Math.max(t * i * g / r, r / (t * u * g)) : 1 / 0;\n    }\n\n    function i(n, t, e, r) {\n      var i,\n          u = -1,\n          o = n.length,\n          a = e.x,\n          c = e.y,\n          f = t ? l(n.area / t) : 0;\n\n      if (t == e.dx) {\n        for ((r || f > e.dy) && (f = e.dy); ++u < o;) {\n          i = n[u], i.x = a, i.y = c, i.dy = f, a += i.dx = Math.min(e.x + e.dx - a, f ? l(i.area / f) : 0);\n        }\n\n        i.z = !0, i.dx += e.x + e.dx - a, e.y += f, e.dy -= f;\n      } else {\n        for ((r || f > e.dx) && (f = e.dx); ++u < o;) {\n          i = n[u], i.x = a, i.y = c, i.dx = f, c += i.dy = Math.min(e.y + e.dy - c, f ? l(i.area / f) : 0);\n        }\n\n        i.z = !1, i.dy += e.y + e.dy - c, e.x += f, e.dx -= f;\n      }\n    }\n\n    function u(r) {\n      var i = o || a(r),\n          u = i[0];\n      return u.x = u.y = 0, u.value ? (u.dx = c[0], u.dy = c[1]) : u.dx = u.dy = 0, o && a.revalue(u), n([u], u.dx * u.dy / u.value), (o ? e : t)(u), h && (o = i), i;\n    }\n\n    var o,\n        a = ao.layout.hierarchy(),\n        l = Math.round,\n        c = [1, 1],\n        f = null,\n        s = Oi,\n        h = !1,\n        p = \"squarify\",\n        g = .5 * (1 + Math.sqrt(5));\n    return u.size = function (n) {\n      return arguments.length ? (c = n, u) : c;\n    }, u.padding = function (n) {\n      function t(t) {\n        var e = n.call(u, t, t.depth);\n        return null == e ? Oi(t) : Ii(t, \"number\" == typeof e ? [e, e, e, e] : e);\n      }\n\n      function e(t) {\n        return Ii(t, n);\n      }\n\n      if (!arguments.length) return f;\n      var r;\n      return s = null == (f = n) ? Oi : \"function\" == (r = _typeof(n)) ? t : \"number\" === r ? (n = [n, n, n, n], e) : e, u;\n    }, u.round = function (n) {\n      return arguments.length ? (l = n ? Math.round : Number, u) : l != Number;\n    }, u.sticky = function (n) {\n      return arguments.length ? (h = n, o = null, u) : h;\n    }, u.ratio = function (n) {\n      return arguments.length ? (g = n, u) : g;\n    }, u.mode = function (n) {\n      return arguments.length ? (p = n + \"\", u) : p;\n    }, ii(u, a);\n  }, ao.random = {\n    normal: function normal(n, t) {\n      var e = arguments.length;\n      return 2 > e && (t = 1), 1 > e && (n = 0), function () {\n        var e, r, i;\n\n        do {\n          e = 2 * Math.random() - 1, r = 2 * Math.random() - 1, i = e * e + r * r;\n        } while (!i || i > 1);\n\n        return n + t * e * Math.sqrt(-2 * Math.log(i) / i);\n      };\n    },\n    logNormal: function logNormal() {\n      var n = ao.random.normal.apply(ao, arguments);\n      return function () {\n        return Math.exp(n());\n      };\n    },\n    bates: function bates(n) {\n      var t = ao.random.irwinHall(n);\n      return function () {\n        return t() / n;\n      };\n    },\n    irwinHall: function irwinHall(n) {\n      return function () {\n        for (var t = 0, e = 0; n > e; e++) {\n          t += Math.random();\n        }\n\n        return t;\n      };\n    }\n  }, ao.scale = {};\n  var Sl = {\n    floor: m,\n    ceil: m\n  };\n\n  ao.scale.linear = function () {\n    return Wi([0, 1], [0, 1], Mr, !1);\n  };\n\n  var kl = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n\n  ao.scale.log = function () {\n    return ru(ao.scale.linear().domain([0, 1]), 10, !0, [1, 10]);\n  };\n\n  var Nl = ao.format(\".0e\"),\n      El = {\n    floor: function floor(n) {\n      return -Math.ceil(-n);\n    },\n    ceil: function ceil(n) {\n      return -Math.floor(-n);\n    }\n  };\n  ao.scale.pow = function () {\n    return iu(ao.scale.linear(), 1, [0, 1]);\n  }, ao.scale.sqrt = function () {\n    return ao.scale.pow().exponent(.5);\n  }, ao.scale.ordinal = function () {\n    return ou([], {\n      t: \"range\",\n      a: [[]]\n    });\n  }, ao.scale.category10 = function () {\n    return ao.scale.ordinal().range(Al);\n  }, ao.scale.category20 = function () {\n    return ao.scale.ordinal().range(Cl);\n  }, ao.scale.category20b = function () {\n    return ao.scale.ordinal().range(zl);\n  }, ao.scale.category20c = function () {\n    return ao.scale.ordinal().range(Ll);\n  };\n  var Al = [2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175].map(xn),\n      Cl = [2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725].map(xn),\n      zl = [3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654].map(xn),\n      Ll = [3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081].map(xn);\n  ao.scale.quantile = function () {\n    return au([], []);\n  }, ao.scale.quantize = function () {\n    return lu(0, 1, [0, 1]);\n  }, ao.scale.threshold = function () {\n    return cu([.5], [0, 1]);\n  }, ao.scale.identity = function () {\n    return fu([0, 1]);\n  }, ao.svg = {}, ao.svg.arc = function () {\n    function n() {\n      var n = Math.max(0, +e.apply(this, arguments)),\n          c = Math.max(0, +r.apply(this, arguments)),\n          f = o.apply(this, arguments) - Io,\n          s = a.apply(this, arguments) - Io,\n          h = Math.abs(s - f),\n          p = f > s ? 0 : 1;\n      if (n > c && (g = c, c = n, n = g), h >= Oo) return t(c, p) + (n ? t(n, 1 - p) : \"\") + \"Z\";\n\n      var g,\n          v,\n          d,\n          y,\n          m,\n          M,\n          x,\n          b,\n          _,\n          w,\n          S,\n          k,\n          N = 0,\n          E = 0,\n          A = [];\n\n      if ((y = (+l.apply(this, arguments) || 0) / 2) && (d = u === ql ? Math.sqrt(n * n + c * c) : +u.apply(this, arguments), p || (E *= -1), c && (E = tn(d / c * Math.sin(y))), n && (N = tn(d / n * Math.sin(y)))), c) {\n        m = c * Math.cos(f + E), M = c * Math.sin(f + E), x = c * Math.cos(s - E), b = c * Math.sin(s - E);\n        var C = Math.abs(s - f - 2 * E) <= Fo ? 0 : 1;\n\n        if (E && yu(m, M, x, b) === p ^ C) {\n          var z = (f + s) / 2;\n          m = c * Math.cos(z), M = c * Math.sin(z), x = b = null;\n        }\n      } else m = M = 0;\n\n      if (n) {\n        _ = n * Math.cos(s - N), w = n * Math.sin(s - N), S = n * Math.cos(f + N), k = n * Math.sin(f + N);\n        var L = Math.abs(f - s + 2 * N) <= Fo ? 0 : 1;\n\n        if (N && yu(_, w, S, k) === 1 - p ^ L) {\n          var q = (f + s) / 2;\n          _ = n * Math.cos(q), w = n * Math.sin(q), S = k = null;\n        }\n      } else _ = w = 0;\n\n      if (h > Uo && (g = Math.min(Math.abs(c - n) / 2, +i.apply(this, arguments))) > .001) {\n        v = c > n ^ p ? 0 : 1;\n        var T = g,\n            R = g;\n\n        if (Fo > h) {\n          var D = null == S ? [_, w] : null == x ? [m, M] : Re([m, M], [S, k], [x, b], [_, w]),\n              P = m - D[0],\n              U = M - D[1],\n              j = x - D[0],\n              F = b - D[1],\n              H = 1 / Math.sin(Math.acos((P * j + U * F) / (Math.sqrt(P * P + U * U) * Math.sqrt(j * j + F * F))) / 2),\n              O = Math.sqrt(D[0] * D[0] + D[1] * D[1]);\n          R = Math.min(g, (n - O) / (H - 1)), T = Math.min(g, (c - O) / (H + 1));\n        }\n\n        if (null != x) {\n          var I = mu(null == S ? [_, w] : [S, k], [m, M], c, T, p),\n              Y = mu([x, b], [_, w], c, T, p);\n          g === T ? A.push(\"M\", I[0], \"A\", T, \",\", T, \" 0 0,\", v, \" \", I[1], \"A\", c, \",\", c, \" 0 \", 1 - p ^ yu(I[1][0], I[1][1], Y[1][0], Y[1][1]), \",\", p, \" \", Y[1], \"A\", T, \",\", T, \" 0 0,\", v, \" \", Y[0]) : A.push(\"M\", I[0], \"A\", T, \",\", T, \" 0 1,\", v, \" \", Y[0]);\n        } else A.push(\"M\", m, \",\", M);\n\n        if (null != S) {\n          var Z = mu([m, M], [S, k], n, -R, p),\n              V = mu([_, w], null == x ? [m, M] : [x, b], n, -R, p);\n          g === R ? A.push(\"L\", V[0], \"A\", R, \",\", R, \" 0 0,\", v, \" \", V[1], \"A\", n, \",\", n, \" 0 \", p ^ yu(V[1][0], V[1][1], Z[1][0], Z[1][1]), \",\", 1 - p, \" \", Z[1], \"A\", R, \",\", R, \" 0 0,\", v, \" \", Z[0]) : A.push(\"L\", V[0], \"A\", R, \",\", R, \" 0 0,\", v, \" \", Z[0]);\n        } else A.push(\"L\", _, \",\", w);\n      } else A.push(\"M\", m, \",\", M), null != x && A.push(\"A\", c, \",\", c, \" 0 \", C, \",\", p, \" \", x, \",\", b), A.push(\"L\", _, \",\", w), null != S && A.push(\"A\", n, \",\", n, \" 0 \", L, \",\", 1 - p, \" \", S, \",\", k);\n\n      return A.push(\"Z\"), A.join(\"\");\n    }\n\n    function t(n, t) {\n      return \"M0,\" + n + \"A\" + n + \",\" + n + \" 0 1,\" + t + \" 0,\" + -n + \"A\" + n + \",\" + n + \" 0 1,\" + t + \" 0,\" + n;\n    }\n\n    var e = hu,\n        r = pu,\n        i = su,\n        u = ql,\n        o = gu,\n        a = vu,\n        l = du;\n    return n.innerRadius = function (t) {\n      return arguments.length ? (e = En(t), n) : e;\n    }, n.outerRadius = function (t) {\n      return arguments.length ? (r = En(t), n) : r;\n    }, n.cornerRadius = function (t) {\n      return arguments.length ? (i = En(t), n) : i;\n    }, n.padRadius = function (t) {\n      return arguments.length ? (u = t == ql ? ql : En(t), n) : u;\n    }, n.startAngle = function (t) {\n      return arguments.length ? (o = En(t), n) : o;\n    }, n.endAngle = function (t) {\n      return arguments.length ? (a = En(t), n) : a;\n    }, n.padAngle = function (t) {\n      return arguments.length ? (l = En(t), n) : l;\n    }, n.centroid = function () {\n      var n = (+e.apply(this, arguments) + +r.apply(this, arguments)) / 2,\n          t = (+o.apply(this, arguments) + +a.apply(this, arguments)) / 2 - Io;\n      return [Math.cos(t) * n, Math.sin(t) * n];\n    }, n;\n  };\n  var ql = \"auto\";\n\n  ao.svg.line = function () {\n    return Mu(m);\n  };\n\n  var Tl = ao.map({\n    linear: xu,\n    \"linear-closed\": bu,\n    step: _u,\n    \"step-before\": wu,\n    \"step-after\": Su,\n    basis: zu,\n    \"basis-open\": Lu,\n    \"basis-closed\": qu,\n    bundle: Tu,\n    cardinal: Eu,\n    \"cardinal-open\": ku,\n    \"cardinal-closed\": Nu,\n    monotone: Fu\n  });\n  Tl.forEach(function (n, t) {\n    t.key = n, t.closed = /-closed$/.test(n);\n  });\n  var Rl = [0, 2 / 3, 1 / 3, 0],\n      Dl = [0, 1 / 3, 2 / 3, 0],\n      Pl = [0, 1 / 6, 2 / 3, 1 / 6];\n  ao.svg.line.radial = function () {\n    var n = Mu(Hu);\n    return n.radius = n.x, delete n.x, n.angle = n.y, delete n.y, n;\n  }, wu.reverse = Su, Su.reverse = wu, ao.svg.area = function () {\n    return Ou(m);\n  }, ao.svg.area.radial = function () {\n    var n = Ou(Hu);\n    return n.radius = n.x, delete n.x, n.innerRadius = n.x0, delete n.x0, n.outerRadius = n.x1, delete n.x1, n.angle = n.y, delete n.y, n.startAngle = n.y0, delete n.y0, n.endAngle = n.y1, delete n.y1, n;\n  }, ao.svg.chord = function () {\n    function n(n, a) {\n      var l = t(this, u, n, a),\n          c = t(this, o, n, a);\n      return \"M\" + l.p0 + r(l.r, l.p1, l.a1 - l.a0) + (e(l, c) ? i(l.r, l.p1, l.r, l.p0) : i(l.r, l.p1, c.r, c.p0) + r(c.r, c.p1, c.a1 - c.a0) + i(c.r, c.p1, l.r, l.p0)) + \"Z\";\n    }\n\n    function t(n, t, e, r) {\n      var i = t.call(n, e, r),\n          u = a.call(n, i, r),\n          o = l.call(n, i, r) - Io,\n          f = c.call(n, i, r) - Io;\n      return {\n        r: u,\n        a0: o,\n        a1: f,\n        p0: [u * Math.cos(o), u * Math.sin(o)],\n        p1: [u * Math.cos(f), u * Math.sin(f)]\n      };\n    }\n\n    function e(n, t) {\n      return n.a0 == t.a0 && n.a1 == t.a1;\n    }\n\n    function r(n, t, e) {\n      return \"A\" + n + \",\" + n + \" 0 \" + +(e > Fo) + \",1 \" + t;\n    }\n\n    function i(n, t, e, r) {\n      return \"Q 0,0 \" + r;\n    }\n\n    var u = Me,\n        o = xe,\n        a = Iu,\n        l = gu,\n        c = vu;\n    return n.radius = function (t) {\n      return arguments.length ? (a = En(t), n) : a;\n    }, n.source = function (t) {\n      return arguments.length ? (u = En(t), n) : u;\n    }, n.target = function (t) {\n      return arguments.length ? (o = En(t), n) : o;\n    }, n.startAngle = function (t) {\n      return arguments.length ? (l = En(t), n) : l;\n    }, n.endAngle = function (t) {\n      return arguments.length ? (c = En(t), n) : c;\n    }, n;\n  }, ao.svg.diagonal = function () {\n    function n(n, i) {\n      var u = t.call(this, n, i),\n          o = e.call(this, n, i),\n          a = (u.y + o.y) / 2,\n          l = [u, {\n        x: u.x,\n        y: a\n      }, {\n        x: o.x,\n        y: a\n      }, o];\n      return l = l.map(r), \"M\" + l[0] + \"C\" + l[1] + \" \" + l[2] + \" \" + l[3];\n    }\n\n    var t = Me,\n        e = xe,\n        r = Yu;\n    return n.source = function (e) {\n      return arguments.length ? (t = En(e), n) : t;\n    }, n.target = function (t) {\n      return arguments.length ? (e = En(t), n) : e;\n    }, n.projection = function (t) {\n      return arguments.length ? (r = t, n) : r;\n    }, n;\n  }, ao.svg.diagonal.radial = function () {\n    var n = ao.svg.diagonal(),\n        t = Yu,\n        e = n.projection;\n    return n.projection = function (n) {\n      return arguments.length ? e(Zu(t = n)) : t;\n    }, n;\n  }, ao.svg.symbol = function () {\n    function n(n, r) {\n      return (Ul.get(t.call(this, n, r)) || $u)(e.call(this, n, r));\n    }\n\n    var t = Xu,\n        e = Vu;\n    return n.type = function (e) {\n      return arguments.length ? (t = En(e), n) : t;\n    }, n.size = function (t) {\n      return arguments.length ? (e = En(t), n) : e;\n    }, n;\n  };\n  var Ul = ao.map({\n    circle: $u,\n    cross: function cross(n) {\n      var t = Math.sqrt(n / 5) / 2;\n      return \"M\" + -3 * t + \",\" + -t + \"H\" + -t + \"V\" + -3 * t + \"H\" + t + \"V\" + -t + \"H\" + 3 * t + \"V\" + t + \"H\" + t + \"V\" + 3 * t + \"H\" + -t + \"V\" + t + \"H\" + -3 * t + \"Z\";\n    },\n    diamond: function diamond(n) {\n      var t = Math.sqrt(n / (2 * Fl)),\n          e = t * Fl;\n      return \"M0,\" + -t + \"L\" + e + \",0 0,\" + t + \" \" + -e + \",0Z\";\n    },\n    square: function square(n) {\n      var t = Math.sqrt(n) / 2;\n      return \"M\" + -t + \",\" + -t + \"L\" + t + \",\" + -t + \" \" + t + \",\" + t + \" \" + -t + \",\" + t + \"Z\";\n    },\n    \"triangle-down\": function triangleDown(n) {\n      var t = Math.sqrt(n / jl),\n          e = t * jl / 2;\n      return \"M0,\" + e + \"L\" + t + \",\" + -e + \" \" + -t + \",\" + -e + \"Z\";\n    },\n    \"triangle-up\": function triangleUp(n) {\n      var t = Math.sqrt(n / jl),\n          e = t * jl / 2;\n      return \"M0,\" + -e + \"L\" + t + \",\" + e + \" \" + -t + \",\" + e + \"Z\";\n    }\n  });\n  ao.svg.symbolTypes = Ul.keys();\n  var jl = Math.sqrt(3),\n      Fl = Math.tan(30 * Yo);\n  Co.transition = function (n) {\n    for (var t, e, r = Hl || ++Zl, i = Ku(n), u = [], o = Ol || {\n      time: Date.now(),\n      ease: Nr,\n      delay: 0,\n      duration: 250\n    }, a = -1, l = this.length; ++a < l;) {\n      u.push(t = []);\n\n      for (var c = this[a], f = -1, s = c.length; ++f < s;) {\n        (e = c[f]) && Qu(e, f, i, r, o), t.push(e);\n      }\n    }\n\n    return Wu(u, i, r);\n  }, Co.interrupt = function (n) {\n    return this.each(null == n ? Il : Bu(Ku(n)));\n  };\n  var Hl,\n      Ol,\n      Il = Bu(Ku()),\n      Yl = [],\n      Zl = 0;\n  Yl.call = Co.call, Yl.empty = Co.empty, Yl.node = Co.node, Yl.size = Co.size, ao.transition = function (n, t) {\n    return n && n.transition ? Hl ? n.transition(t) : n : ao.selection().transition(n);\n  }, ao.transition.prototype = Yl, Yl.select = function (n) {\n    var t,\n        e,\n        r,\n        i = this.id,\n        u = this.namespace,\n        o = [];\n    n = A(n);\n\n    for (var a = -1, l = this.length; ++a < l;) {\n      o.push(t = []);\n\n      for (var c = this[a], f = -1, s = c.length; ++f < s;) {\n        (r = c[f]) && (e = n.call(r, r.__data__, f, a)) ? (\"__data__\" in r && (e.__data__ = r.__data__), Qu(e, f, u, i, r[u][i]), t.push(e)) : t.push(null);\n      }\n    }\n\n    return Wu(o, u, i);\n  }, Yl.selectAll = function (n) {\n    var t,\n        e,\n        r,\n        i,\n        u,\n        o = this.id,\n        a = this.namespace,\n        l = [];\n    n = C(n);\n\n    for (var c = -1, f = this.length; ++c < f;) {\n      for (var s = this[c], h = -1, p = s.length; ++h < p;) {\n        if (r = s[h]) {\n          u = r[a][o], e = n.call(r, r.__data__, h, c), l.push(t = []);\n\n          for (var g = -1, v = e.length; ++g < v;) {\n            (i = e[g]) && Qu(i, g, a, o, u), t.push(i);\n          }\n        }\n      }\n    }\n\n    return Wu(l, a, o);\n  }, Yl.filter = function (n) {\n    var t,\n        e,\n        r,\n        i = [];\n    \"function\" != typeof n && (n = O(n));\n\n    for (var u = 0, o = this.length; o > u; u++) {\n      i.push(t = []);\n\n      for (var e = this[u], a = 0, l = e.length; l > a; a++) {\n        (r = e[a]) && n.call(r, r.__data__, a, u) && t.push(r);\n      }\n    }\n\n    return Wu(i, this.namespace, this.id);\n  }, Yl.tween = function (n, t) {\n    var e = this.id,\n        r = this.namespace;\n    return arguments.length < 2 ? this.node()[r][e].tween.get(n) : Y(this, null == t ? function (t) {\n      t[r][e].tween.remove(n);\n    } : function (i) {\n      i[r][e].tween.set(n, t);\n    });\n  }, Yl.attr = function (n, t) {\n    function e() {\n      this.removeAttribute(a);\n    }\n\n    function r() {\n      this.removeAttributeNS(a.space, a.local);\n    }\n\n    function i(n) {\n      return null == n ? e : (n += \"\", function () {\n        var t,\n            e = this.getAttribute(a);\n        return e !== n && (t = o(e, n), function (n) {\n          this.setAttribute(a, t(n));\n        });\n      });\n    }\n\n    function u(n) {\n      return null == n ? r : (n += \"\", function () {\n        var t,\n            e = this.getAttributeNS(a.space, a.local);\n        return e !== n && (t = o(e, n), function (n) {\n          this.setAttributeNS(a.space, a.local, t(n));\n        });\n      });\n    }\n\n    if (arguments.length < 2) {\n      for (t in n) {\n        this.attr(t, n[t]);\n      }\n\n      return this;\n    }\n\n    var o = \"transform\" == n ? $r : Mr,\n        a = ao.ns.qualify(n);\n    return Ju(this, \"attr.\" + n, t, a.local ? u : i);\n  }, Yl.attrTween = function (n, t) {\n    function e(n, e) {\n      var r = t.call(this, n, e, this.getAttribute(i));\n      return r && function (n) {\n        this.setAttribute(i, r(n));\n      };\n    }\n\n    function r(n, e) {\n      var r = t.call(this, n, e, this.getAttributeNS(i.space, i.local));\n      return r && function (n) {\n        this.setAttributeNS(i.space, i.local, r(n));\n      };\n    }\n\n    var i = ao.ns.qualify(n);\n    return this.tween(\"attr.\" + n, i.local ? r : e);\n  }, Yl.style = function (n, e, r) {\n    function i() {\n      this.style.removeProperty(n);\n    }\n\n    function u(e) {\n      return null == e ? i : (e += \"\", function () {\n        var i,\n            u = t(this).getComputedStyle(this, null).getPropertyValue(n);\n        return u !== e && (i = Mr(u, e), function (t) {\n          this.style.setProperty(n, i(t), r);\n        });\n      });\n    }\n\n    var o = arguments.length;\n\n    if (3 > o) {\n      if (\"string\" != typeof n) {\n        2 > o && (e = \"\");\n\n        for (r in n) {\n          this.style(r, n[r], e);\n        }\n\n        return this;\n      }\n\n      r = \"\";\n    }\n\n    return Ju(this, \"style.\" + n, e, u);\n  }, Yl.styleTween = function (n, e, r) {\n    function i(i, u) {\n      var o = e.call(this, i, u, t(this).getComputedStyle(this, null).getPropertyValue(n));\n      return o && function (t) {\n        this.style.setProperty(n, o(t), r);\n      };\n    }\n\n    return arguments.length < 3 && (r = \"\"), this.tween(\"style.\" + n, i);\n  }, Yl.text = function (n) {\n    return Ju(this, \"text\", n, Gu);\n  }, Yl.remove = function () {\n    var n = this.namespace;\n    return this.each(\"end.transition\", function () {\n      var t;\n      this[n].count < 2 && (t = this.parentNode) && t.removeChild(this);\n    });\n  }, Yl.ease = function (n) {\n    var t = this.id,\n        e = this.namespace;\n    return arguments.length < 1 ? this.node()[e][t].ease : (\"function\" != typeof n && (n = ao.ease.apply(ao, arguments)), Y(this, function (r) {\n      r[e][t].ease = n;\n    }));\n  }, Yl.delay = function (n) {\n    var t = this.id,\n        e = this.namespace;\n    return arguments.length < 1 ? this.node()[e][t].delay : Y(this, \"function\" == typeof n ? function (r, i, u) {\n      r[e][t].delay = +n.call(r, r.__data__, i, u);\n    } : (n = +n, function (r) {\n      r[e][t].delay = n;\n    }));\n  }, Yl.duration = function (n) {\n    var t = this.id,\n        e = this.namespace;\n    return arguments.length < 1 ? this.node()[e][t].duration : Y(this, \"function\" == typeof n ? function (r, i, u) {\n      r[e][t].duration = Math.max(1, n.call(r, r.__data__, i, u));\n    } : (n = Math.max(1, n), function (r) {\n      r[e][t].duration = n;\n    }));\n  }, Yl.each = function (n, t) {\n    var e = this.id,\n        r = this.namespace;\n\n    if (arguments.length < 2) {\n      var i = Ol,\n          u = Hl;\n\n      try {\n        Hl = e, Y(this, function (t, i, u) {\n          Ol = t[r][e], n.call(t, t.__data__, i, u);\n        });\n      } finally {\n        Ol = i, Hl = u;\n      }\n    } else Y(this, function (i) {\n      var u = i[r][e];\n      (u.event || (u.event = ao.dispatch(\"start\", \"end\", \"interrupt\"))).on(n, t);\n    });\n\n    return this;\n  }, Yl.transition = function () {\n    for (var n, t, e, r, i = this.id, u = ++Zl, o = this.namespace, a = [], l = 0, c = this.length; c > l; l++) {\n      a.push(n = []);\n\n      for (var t = this[l], f = 0, s = t.length; s > f; f++) {\n        (e = t[f]) && (r = e[o][i], Qu(e, f, o, u, {\n          time: r.time,\n          ease: r.ease,\n          delay: r.delay + r.duration,\n          duration: r.duration\n        })), n.push(e);\n      }\n    }\n\n    return Wu(a, o, u);\n  }, ao.svg.axis = function () {\n    function n(n) {\n      n.each(function () {\n        var n,\n            c = ao.select(this),\n            f = this.__chart__ || e,\n            s = this.__chart__ = e.copy(),\n            h = null == l ? s.ticks ? s.ticks.apply(s, a) : s.domain() : l,\n            p = null == t ? s.tickFormat ? s.tickFormat.apply(s, a) : m : t,\n            g = c.selectAll(\".tick\").data(h, s),\n            v = g.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", Uo),\n            d = ao.transition(g.exit()).style(\"opacity\", Uo).remove(),\n            y = ao.transition(g.order()).style(\"opacity\", 1),\n            M = Math.max(i, 0) + o,\n            x = Zi(s),\n            b = c.selectAll(\".domain\").data([0]),\n            _ = (b.enter().append(\"path\").attr(\"class\", \"domain\"), ao.transition(b));\n\n        v.append(\"line\"), v.append(\"text\");\n        var w,\n            S,\n            k,\n            N,\n            E = v.select(\"line\"),\n            A = y.select(\"line\"),\n            C = g.select(\"text\").text(p),\n            z = v.select(\"text\"),\n            L = y.select(\"text\"),\n            q = \"top\" === r || \"left\" === r ? -1 : 1;\n\n        if (\"bottom\" === r || \"top\" === r ? (n = no, w = \"x\", k = \"y\", S = \"x2\", N = \"y2\", C.attr(\"dy\", 0 > q ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\"), _.attr(\"d\", \"M\" + x[0] + \",\" + q * u + \"V0H\" + x[1] + \"V\" + q * u)) : (n = to, w = \"y\", k = \"x\", S = \"y2\", N = \"x2\", C.attr(\"dy\", \".32em\").style(\"text-anchor\", 0 > q ? \"end\" : \"start\"), _.attr(\"d\", \"M\" + q * u + \",\" + x[0] + \"H0V\" + x[1] + \"H\" + q * u)), E.attr(N, q * i), z.attr(k, q * M), A.attr(S, 0).attr(N, q * i), L.attr(w, 0).attr(k, q * M), s.rangeBand) {\n          var T = s,\n              R = T.rangeBand() / 2;\n\n          f = s = function s(n) {\n            return T(n) + R;\n          };\n        } else f.rangeBand ? f = s : d.call(n, s, f);\n\n        v.call(n, f, s), y.call(n, s, s);\n      });\n    }\n\n    var t,\n        e = ao.scale.linear(),\n        r = Vl,\n        i = 6,\n        u = 6,\n        o = 3,\n        a = [10],\n        l = null;\n    return n.scale = function (t) {\n      return arguments.length ? (e = t, n) : e;\n    }, n.orient = function (t) {\n      return arguments.length ? (r = t in Xl ? t + \"\" : Vl, n) : r;\n    }, n.ticks = function () {\n      return arguments.length ? (a = co(arguments), n) : a;\n    }, n.tickValues = function (t) {\n      return arguments.length ? (l = t, n) : l;\n    }, n.tickFormat = function (e) {\n      return arguments.length ? (t = e, n) : t;\n    }, n.tickSize = function (t) {\n      var e = arguments.length;\n      return e ? (i = +t, u = +arguments[e - 1], n) : i;\n    }, n.innerTickSize = function (t) {\n      return arguments.length ? (i = +t, n) : i;\n    }, n.outerTickSize = function (t) {\n      return arguments.length ? (u = +t, n) : u;\n    }, n.tickPadding = function (t) {\n      return arguments.length ? (o = +t, n) : o;\n    }, n.tickSubdivide = function () {\n      return arguments.length && n;\n    }, n;\n  };\n  var Vl = \"bottom\",\n      Xl = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n\n  ao.svg.brush = function () {\n    function n(t) {\n      t.each(function () {\n        var t = ao.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", u).on(\"touchstart.brush\", u),\n            o = t.selectAll(\".background\").data([0]);\n        o.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\"), t.selectAll(\".extent\").data([0]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var a = t.selectAll(\".resize\").data(v, m);\n        a.exit().remove(), a.enter().append(\"g\").attr(\"class\", function (n) {\n          return \"resize \" + n;\n        }).style(\"cursor\", function (n) {\n          return $l[n];\n        }).append(\"rect\").attr(\"x\", function (n) {\n          return /[ew]$/.test(n) ? -3 : null;\n        }).attr(\"y\", function (n) {\n          return /^[ns]/.test(n) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\"), a.style(\"display\", n.empty() ? \"none\" : null);\n        var l,\n            s = ao.transition(t),\n            h = ao.transition(o);\n        c && (l = Zi(c), h.attr(\"x\", l[0]).attr(\"width\", l[1] - l[0]), r(s)), f && (l = Zi(f), h.attr(\"y\", l[0]).attr(\"height\", l[1] - l[0]), i(s)), e(s);\n      });\n    }\n\n    function e(n) {\n      n.selectAll(\".resize\").attr(\"transform\", function (n) {\n        return \"translate(\" + s[+/e$/.test(n)] + \",\" + h[+/^s/.test(n)] + \")\";\n      });\n    }\n\n    function r(n) {\n      n.select(\".extent\").attr(\"x\", s[0]), n.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", s[1] - s[0]);\n    }\n\n    function i(n) {\n      n.select(\".extent\").attr(\"y\", h[0]), n.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", h[1] - h[0]);\n    }\n\n    function u() {\n      function u() {\n        32 == ao.event.keyCode && (C || (M = null, L[0] -= s[1], L[1] -= h[1], C = 2), S());\n      }\n\n      function v() {\n        32 == ao.event.keyCode && 2 == C && (L[0] += s[1], L[1] += h[1], C = 0, S());\n      }\n\n      function d() {\n        var n = ao.mouse(b),\n            t = !1;\n        x && (n[0] += x[0], n[1] += x[1]), C || (ao.event.altKey ? (M || (M = [(s[0] + s[1]) / 2, (h[0] + h[1]) / 2]), L[0] = s[+(n[0] < M[0])], L[1] = h[+(n[1] < M[1])]) : M = null), E && y(n, c, 0) && (r(k), t = !0), A && y(n, f, 1) && (i(k), t = !0), t && (e(k), w({\n          type: \"brush\",\n          mode: C ? \"move\" : \"resize\"\n        }));\n      }\n\n      function y(n, t, e) {\n        var r,\n            i,\n            u = Zi(t),\n            l = u[0],\n            c = u[1],\n            f = L[e],\n            v = e ? h : s,\n            d = v[1] - v[0];\n        return C && (l -= f, c -= d + f), r = (e ? g : p) ? Math.max(l, Math.min(c, n[e])) : n[e], C ? i = (r += f) + d : (M && (f = Math.max(l, Math.min(c, 2 * M[e] - r))), r > f ? (i = r, r = f) : i = f), v[0] != r || v[1] != i ? (e ? a = null : o = null, v[0] = r, v[1] = i, !0) : void 0;\n      }\n\n      function m() {\n        d(), k.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", n.empty() ? \"none\" : null), ao.select(\"body\").style(\"cursor\", null), q.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null), z(), w({\n          type: \"brushend\"\n        });\n      }\n\n      var M,\n          x,\n          b = this,\n          _ = ao.select(ao.event.target),\n          w = l.of(b, arguments),\n          k = ao.select(b),\n          N = _.datum(),\n          E = !/^(n|s)$/.test(N) && c,\n          A = !/^(e|w)$/.test(N) && f,\n          C = _.classed(\"extent\"),\n          z = W(b),\n          L = ao.mouse(b),\n          q = ao.select(t(b)).on(\"keydown.brush\", u).on(\"keyup.brush\", v);\n\n      if (ao.event.changedTouches ? q.on(\"touchmove.brush\", d).on(\"touchend.brush\", m) : q.on(\"mousemove.brush\", d).on(\"mouseup.brush\", m), k.interrupt().selectAll(\"*\").interrupt(), C) L[0] = s[0] - L[0], L[1] = h[0] - L[1];else if (N) {\n        var T = +/w$/.test(N),\n            R = +/^n/.test(N);\n        x = [s[1 - T] - L[0], h[1 - R] - L[1]], L[0] = s[T], L[1] = h[R];\n      } else ao.event.altKey && (M = L.slice());\n      k.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null), ao.select(\"body\").style(\"cursor\", _.style(\"cursor\")), w({\n        type: \"brushstart\"\n      }), d();\n    }\n\n    var o,\n        a,\n        l = N(n, \"brushstart\", \"brush\", \"brushend\"),\n        c = null,\n        f = null,\n        s = [0, 0],\n        h = [0, 0],\n        p = !0,\n        g = !0,\n        v = Bl[0];\n    return n.event = function (n) {\n      n.each(function () {\n        var n = l.of(this, arguments),\n            t = {\n          x: s,\n          y: h,\n          i: o,\n          j: a\n        },\n            e = this.__chart__ || t;\n        this.__chart__ = t, Hl ? ao.select(this).transition().each(\"start.brush\", function () {\n          o = e.i, a = e.j, s = e.x, h = e.y, n({\n            type: \"brushstart\"\n          });\n        }).tween(\"brush:brush\", function () {\n          var e = xr(s, t.x),\n              r = xr(h, t.y);\n          return o = a = null, function (i) {\n            s = t.x = e(i), h = t.y = r(i), n({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n          };\n        }).each(\"end.brush\", function () {\n          o = t.i, a = t.j, n({\n            type: \"brush\",\n            mode: \"resize\"\n          }), n({\n            type: \"brushend\"\n          });\n        }) : (n({\n          type: \"brushstart\"\n        }), n({\n          type: \"brush\",\n          mode: \"resize\"\n        }), n({\n          type: \"brushend\"\n        }));\n      });\n    }, n.x = function (t) {\n      return arguments.length ? (c = t, v = Bl[!c << 1 | !f], n) : c;\n    }, n.y = function (t) {\n      return arguments.length ? (f = t, v = Bl[!c << 1 | !f], n) : f;\n    }, n.clamp = function (t) {\n      return arguments.length ? (c && f ? (p = !!t[0], g = !!t[1]) : c ? p = !!t : f && (g = !!t), n) : c && f ? [p, g] : c ? p : f ? g : null;\n    }, n.extent = function (t) {\n      var e, r, i, u, l;\n      return arguments.length ? (c && (e = t[0], r = t[1], f && (e = e[0], r = r[0]), o = [e, r], c.invert && (e = c(e), r = c(r)), e > r && (l = e, e = r, r = l), e == s[0] && r == s[1] || (s = [e, r])), f && (i = t[0], u = t[1], c && (i = i[1], u = u[1]), a = [i, u], f.invert && (i = f(i), u = f(u)), i > u && (l = i, i = u, u = l), i == h[0] && u == h[1] || (h = [i, u])), n) : (c && (o ? (e = o[0], r = o[1]) : (e = s[0], r = s[1], c.invert && (e = c.invert(e), r = c.invert(r)), e > r && (l = e, e = r, r = l))), f && (a ? (i = a[0], u = a[1]) : (i = h[0], u = h[1], f.invert && (i = f.invert(i), u = f.invert(u)), i > u && (l = i, i = u, u = l))), c && f ? [[e, i], [r, u]] : c ? [e, r] : f && [i, u]);\n    }, n.clear = function () {\n      return n.empty() || (s = [0, 0], h = [0, 0], o = a = null), n;\n    }, n.empty = function () {\n      return !!c && s[0] == s[1] || !!f && h[0] == h[1];\n    }, ao.rebind(n, l, \"on\");\n  };\n\n  var $l = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  },\n      Bl = [[\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"], [\"e\", \"w\"], [\"n\", \"s\"], []],\n      Wl = ga.format = xa.timeFormat,\n      Jl = Wl.utc,\n      Gl = Jl(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  Wl.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? eo : Gl, eo.parse = function (n) {\n    var t = new Date(n);\n    return isNaN(t) ? null : t;\n  }, eo.toString = Gl.toString, ga.second = On(function (n) {\n    return new va(1e3 * Math.floor(n / 1e3));\n  }, function (n, t) {\n    n.setTime(n.getTime() + 1e3 * Math.floor(t));\n  }, function (n) {\n    return n.getSeconds();\n  }), ga.seconds = ga.second.range, ga.seconds.utc = ga.second.utc.range, ga.minute = On(function (n) {\n    return new va(6e4 * Math.floor(n / 6e4));\n  }, function (n, t) {\n    n.setTime(n.getTime() + 6e4 * Math.floor(t));\n  }, function (n) {\n    return n.getMinutes();\n  }), ga.minutes = ga.minute.range, ga.minutes.utc = ga.minute.utc.range, ga.hour = On(function (n) {\n    var t = n.getTimezoneOffset() / 60;\n    return new va(36e5 * (Math.floor(n / 36e5 - t) + t));\n  }, function (n, t) {\n    n.setTime(n.getTime() + 36e5 * Math.floor(t));\n  }, function (n) {\n    return n.getHours();\n  }), ga.hours = ga.hour.range, ga.hours.utc = ga.hour.utc.range, ga.month = On(function (n) {\n    return n = ga.day(n), n.setDate(1), n;\n  }, function (n, t) {\n    n.setMonth(n.getMonth() + t);\n  }, function (n) {\n    return n.getMonth();\n  }), ga.months = ga.month.range, ga.months.utc = ga.month.utc.range;\n  var Kl = [1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6],\n      Ql = [[ga.second, 1], [ga.second, 5], [ga.second, 15], [ga.second, 30], [ga.minute, 1], [ga.minute, 5], [ga.minute, 15], [ga.minute, 30], [ga.hour, 1], [ga.hour, 3], [ga.hour, 6], [ga.hour, 12], [ga.day, 1], [ga.day, 2], [ga.week, 1], [ga.month, 1], [ga.month, 3], [ga.year, 1]],\n      nc = Wl.multi([[\".%L\", function (n) {\n    return n.getMilliseconds();\n  }], [\":%S\", function (n) {\n    return n.getSeconds();\n  }], [\"%I:%M\", function (n) {\n    return n.getMinutes();\n  }], [\"%I %p\", function (n) {\n    return n.getHours();\n  }], [\"%a %d\", function (n) {\n    return n.getDay() && 1 != n.getDate();\n  }], [\"%b %d\", function (n) {\n    return 1 != n.getDate();\n  }], [\"%B\", function (n) {\n    return n.getMonth();\n  }], [\"%Y\", zt]]),\n      tc = {\n    range: function range(n, t, e) {\n      return ao.range(Math.ceil(n / e) * e, +t, e).map(io);\n    },\n    floor: m,\n    ceil: m\n  };\n  Ql.year = ga.year, ga.scale = function () {\n    return ro(ao.scale.linear(), Ql, nc);\n  };\n  var ec = Ql.map(function (n) {\n    return [n[0].utc, n[1]];\n  }),\n      rc = Jl.multi([[\".%L\", function (n) {\n    return n.getUTCMilliseconds();\n  }], [\":%S\", function (n) {\n    return n.getUTCSeconds();\n  }], [\"%I:%M\", function (n) {\n    return n.getUTCMinutes();\n  }], [\"%I %p\", function (n) {\n    return n.getUTCHours();\n  }], [\"%a %d\", function (n) {\n    return n.getUTCDay() && 1 != n.getUTCDate();\n  }], [\"%b %d\", function (n) {\n    return 1 != n.getUTCDate();\n  }], [\"%B\", function (n) {\n    return n.getUTCMonth();\n  }], [\"%Y\", zt]]);\n  ec.year = ga.year.utc, ga.scale.utc = function () {\n    return ro(ao.scale.linear(), ec, rc);\n  }, ao.text = An(function (n) {\n    return n.responseText;\n  }), ao.json = function (n, t) {\n    return Cn(n, \"application/json\", uo, t);\n  }, ao.html = function (n, t) {\n    return Cn(n, \"text/html\", oo, t);\n  }, ao.xml = An(function (n) {\n    return n.responseXML;\n  }),  true ? (this.d3 = ao, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (ao),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : undefined;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Template/js/d3.min.js\n");

/***/ })

/******/ })));